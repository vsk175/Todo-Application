import {
  __async,
  __esm,
  __export,
  __spreadProps,
  __spreadValues
} from "./chunk-TTULUY32.js";

// node_modules/@angular/core/fesm2022/not_found.mjs
function getCurrentInjector() {
  return _currentInjector;
}
function setCurrentInjector(injector) {
  const former = _currentInjector;
  _currentInjector = injector;
  return former;
}
function isNotFound(e) {
  return e === NOT_FOUND || e?.name === "\u0275NotFound";
}
var _currentInjector, NOT_FOUND;
var init_not_found = __esm({
  "node_modules/@angular/core/fesm2022/not_found.mjs"() {
    "use strict";
    _currentInjector = void 0;
    NOT_FOUND = Symbol("NotFound");
  }
});

// node_modules/@angular/core/fesm2022/signal.mjs
function defaultEquals(a, b) {
  return Object.is(a, b);
}
function setActiveConsumer(consumer) {
  const prev = activeConsumer;
  activeConsumer = consumer;
  return prev;
}
function getActiveConsumer() {
  return activeConsumer;
}
function isInNotificationPhase() {
  return inNotificationPhase;
}
function producerAccessed(node) {
  if (inNotificationPhase) {
    throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? `Assertion error: signal read during notification phase` : "");
  }
  if (activeConsumer === null) {
    return;
  }
  activeConsumer.consumerOnSignalRead(node);
  const prevProducerLink = activeConsumer.producersTail;
  if (prevProducerLink !== void 0 && prevProducerLink.producer === node) {
    return;
  }
  let nextProducerLink = void 0;
  const isRecomputing = activeConsumer.recomputing;
  if (isRecomputing) {
    nextProducerLink = prevProducerLink !== void 0 ? prevProducerLink.nextProducer : activeConsumer.producers;
    if (nextProducerLink !== void 0 && nextProducerLink.producer === node) {
      activeConsumer.producersTail = nextProducerLink;
      nextProducerLink.lastReadVersion = node.version;
      return;
    }
  }
  const prevConsumerLink = node.consumersTail;
  if (prevConsumerLink !== void 0 && prevConsumerLink.consumer === activeConsumer && // However, we have to make sure that the link we've discovered isn't from a node that is incrementally rebuilding its producer list
  (!isRecomputing || isValidLink(prevConsumerLink, activeConsumer))) {
    return;
  }
  const isLive = consumerIsLive(activeConsumer);
  const newLink = {
    producer: node,
    consumer: activeConsumer,
    // instead of eagerly destroying the previous link, we delay until we've finished recomputing
    // the producers list, so that we can destroy all of the old links at once.
    nextProducer: nextProducerLink,
    prevConsumer: prevConsumerLink,
    lastReadVersion: node.version,
    nextConsumer: void 0
  };
  activeConsumer.producersTail = newLink;
  if (prevProducerLink !== void 0) {
    prevProducerLink.nextProducer = newLink;
  } else {
    activeConsumer.producers = newLink;
  }
  if (isLive) {
    producerAddLiveConsumer(node, newLink);
  }
}
function producerIncrementEpoch() {
  epoch++;
}
function producerUpdateValueVersion(node) {
  if (consumerIsLive(node) && !node.dirty) {
    return;
  }
  if (!node.dirty && node.lastCleanEpoch === epoch) {
    return;
  }
  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {
    producerMarkClean(node);
    return;
  }
  node.producerRecomputeValue(node);
  producerMarkClean(node);
}
function producerNotifyConsumers(node) {
  if (node.consumers === void 0) {
    return;
  }
  const prev = inNotificationPhase;
  inNotificationPhase = true;
  try {
    for (let link = node.consumers; link !== void 0; link = link.nextConsumer) {
      const consumer = link.consumer;
      if (!consumer.dirty) {
        consumerMarkDirty(consumer);
      }
    }
  } finally {
    inNotificationPhase = prev;
  }
}
function producerUpdatesAllowed() {
  return activeConsumer?.consumerAllowSignalWrites !== false;
}
function consumerMarkDirty(node) {
  node.dirty = true;
  producerNotifyConsumers(node);
  node.consumerMarkedDirty?.(node);
}
function producerMarkClean(node) {
  node.dirty = false;
  node.lastCleanEpoch = epoch;
}
function consumerBeforeComputation(node) {
  if (node) {
    node.producersTail = void 0;
    node.recomputing = true;
  }
  return setActiveConsumer(node);
}
function consumerAfterComputation(node, prevConsumer) {
  setActiveConsumer(prevConsumer);
  if (!node) {
    return;
  }
  node.recomputing = false;
  const producersTail = node.producersTail;
  let toRemove = producersTail !== void 0 ? producersTail.nextProducer : node.producers;
  if (toRemove !== void 0) {
    if (consumerIsLive(node)) {
      do {
        toRemove = producerRemoveLiveConsumerLink(toRemove);
      } while (toRemove !== void 0);
    }
    if (producersTail !== void 0) {
      producersTail.nextProducer = void 0;
    } else {
      node.producers = void 0;
    }
  }
}
function consumerPollProducersForChange(node) {
  for (let link = node.producers; link !== void 0; link = link.nextProducer) {
    const producer = link.producer;
    const seenVersion = link.lastReadVersion;
    if (seenVersion !== producer.version) {
      return true;
    }
    producerUpdateValueVersion(producer);
    if (seenVersion !== producer.version) {
      return true;
    }
  }
  return false;
}
function consumerDestroy(node) {
  if (consumerIsLive(node)) {
    let link = node.producers;
    while (link !== void 0) {
      link = producerRemoveLiveConsumerLink(link);
    }
  }
  node.producers = void 0;
  node.producersTail = void 0;
  node.consumers = void 0;
  node.consumersTail = void 0;
}
function producerAddLiveConsumer(node, link) {
  const consumersTail = node.consumersTail;
  const wasLive = consumerIsLive(node);
  if (consumersTail !== void 0) {
    link.nextConsumer = consumersTail.nextConsumer;
    consumersTail.nextConsumer = link;
  } else {
    link.nextConsumer = void 0;
    node.consumers = link;
  }
  link.prevConsumer = consumersTail;
  node.consumersTail = link;
  if (!wasLive) {
    for (let link2 = node.producers; link2 !== void 0; link2 = link2.nextProducer) {
      producerAddLiveConsumer(link2.producer, link2);
    }
  }
}
function producerRemoveLiveConsumerLink(link) {
  const producer = link.producer;
  const nextProducer = link.nextProducer;
  const nextConsumer = link.nextConsumer;
  const prevConsumer = link.prevConsumer;
  link.nextConsumer = void 0;
  link.prevConsumer = void 0;
  if (nextConsumer !== void 0) {
    nextConsumer.prevConsumer = prevConsumer;
  } else {
    producer.consumersTail = prevConsumer;
  }
  if (prevConsumer !== void 0) {
    prevConsumer.nextConsumer = nextConsumer;
  } else {
    producer.consumers = nextConsumer;
    if (!consumerIsLive(producer)) {
      let producerLink = producer.producers;
      while (producerLink !== void 0) {
        producerLink = producerRemoveLiveConsumerLink(producerLink);
      }
    }
  }
  return nextProducer;
}
function consumerIsLive(node) {
  return node.consumerIsAlwaysLive || node.consumers !== void 0;
}
function runPostProducerCreatedFn(node) {
  postProducerCreatedFn?.(node);
}
function isValidLink(checkLink, consumer) {
  const producersTail = consumer.producersTail;
  if (producersTail !== void 0) {
    let link = consumer.producers;
    do {
      if (link === checkLink) {
        return true;
      }
      if (link === producersTail) {
        break;
      }
      link = link.nextProducer;
    } while (link !== void 0);
  }
  return false;
}
function createComputed(computation, equal) {
  const node = Object.create(COMPUTED_NODE);
  node.computation = computation;
  if (equal !== void 0) {
    node.equal = equal;
  }
  const computed2 = () => {
    producerUpdateValueVersion(node);
    producerAccessed(node);
    if (node.value === ERRORED) {
      throw node.error;
    }
    return node.value;
  };
  computed2[SIGNAL] = node;
  if (typeof ngDevMode !== "undefined" && ngDevMode) {
    const debugName = node.debugName ? " (" + node.debugName + ")" : "";
    computed2.toString = () => `[Computed${debugName}: ${node.value}]`;
  }
  runPostProducerCreatedFn(node);
  return computed2;
}
function defaultThrowError() {
  throw new Error();
}
function throwInvalidWriteToSignalError(node) {
  throwInvalidWriteToSignalErrorFn(node);
}
function setThrowInvalidWriteToSignalError(fn2) {
  throwInvalidWriteToSignalErrorFn = fn2;
}
function createSignal(initialValue, equal) {
  const node = Object.create(SIGNAL_NODE);
  node.value = initialValue;
  if (equal !== void 0) {
    node.equal = equal;
  }
  const getter = () => signalGetFn(node);
  getter[SIGNAL] = node;
  if (typeof ngDevMode !== "undefined" && ngDevMode) {
    const debugName = node.debugName ? " (" + node.debugName + ")" : "";
    getter.toString = () => `[Signal${debugName}: ${node.value}]`;
  }
  runPostProducerCreatedFn(node);
  const set2 = (newValue) => signalSetFn(node, newValue);
  const update = (updateFn) => signalUpdateFn(node, updateFn);
  return [getter, set2, update];
}
function signalGetFn(node) {
  producerAccessed(node);
  return node.value;
}
function signalSetFn(node, newValue) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError(node);
  }
  if (!node.equal(node.value, newValue)) {
    node.value = newValue;
    signalValueChanged(node);
  }
}
function signalUpdateFn(node, updater) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError(node);
  }
  signalSetFn(node, updater(node.value));
}
function signalValueChanged(node) {
  node.version++;
  producerIncrementEpoch();
  producerNotifyConsumers(node);
  postSignalSetFn?.(node);
}
var activeConsumer, inNotificationPhase, epoch, postProducerCreatedFn, SIGNAL, REACTIVE_NODE, UNSET, COMPUTING, ERRORED, COMPUTED_NODE, throwInvalidWriteToSignalErrorFn, postSignalSetFn, SIGNAL_NODE;
var init_signal = __esm({
  "node_modules/@angular/core/fesm2022/signal.mjs"() {
    "use strict";
    activeConsumer = null;
    inNotificationPhase = false;
    epoch = 1;
    postProducerCreatedFn = null;
    SIGNAL = /* @__PURE__ */ Symbol("SIGNAL");
    REACTIVE_NODE = {
      version: 0,
      lastCleanEpoch: 0,
      dirty: false,
      producers: void 0,
      producersTail: void 0,
      consumers: void 0,
      consumersTail: void 0,
      recomputing: false,
      consumerAllowSignalWrites: false,
      consumerIsAlwaysLive: false,
      kind: "unknown",
      producerMustRecompute: () => false,
      producerRecomputeValue: () => {
      },
      consumerMarkedDirty: () => {
      },
      consumerOnSignalRead: () => {
      }
    };
    UNSET = /* @__PURE__ */ Symbol("UNSET");
    COMPUTING = /* @__PURE__ */ Symbol("COMPUTING");
    ERRORED = /* @__PURE__ */ Symbol("ERRORED");
    COMPUTED_NODE = /* @__PURE__ */ (() => {
      return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
        value: UNSET,
        dirty: true,
        error: null,
        equal: defaultEquals,
        kind: "computed",
        producerMustRecompute(node) {
          return node.value === UNSET || node.value === COMPUTING;
        },
        producerRecomputeValue(node) {
          if (node.value === COMPUTING) {
            throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? "Detected cycle in computations." : "");
          }
          const oldValue = node.value;
          node.value = COMPUTING;
          const prevConsumer = consumerBeforeComputation(node);
          let newValue;
          let wasEqual = false;
          try {
            newValue = node.computation();
            setActiveConsumer(null);
            wasEqual = oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue);
          } catch (err) {
            newValue = ERRORED;
            node.error = err;
          } finally {
            consumerAfterComputation(node, prevConsumer);
          }
          if (wasEqual) {
            node.value = oldValue;
            return;
          }
          node.value = newValue;
          node.version++;
        }
      });
    })();
    throwInvalidWriteToSignalErrorFn = defaultThrowError;
    postSignalSetFn = null;
    SIGNAL_NODE = /* @__PURE__ */ (() => {
      return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
        equal: defaultEquals,
        value: void 0,
        kind: "signal"
      });
    })();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}
var init_isFunction = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isFunction.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  const _super = (instance) => {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  const ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var init_createErrorClass = __esm({
  "node_modules/rxjs/dist/esm/internal/util/createErrorClass.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js
var UnsubscriptionError;
var init_UnsubscriptionError = __esm({
  "node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js"() {
    "use strict";
    init_createErrorClass();
    UnsubscriptionError = createErrorClass((_super) => function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join("\n  ")}` : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    });
  }
});

// node_modules/rxjs/dist/esm/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    const index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}
var init_arrRemove = __esm({
  "node_modules/rxjs/dist/esm/internal/util/arrRemove.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/Subscription.js
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var Subscription, EMPTY_SUBSCRIPTION;
var init_Subscription = __esm({
  "node_modules/rxjs/dist/esm/internal/Subscription.js"() {
    "use strict";
    init_isFunction();
    init_UnsubscriptionError();
    init_arrRemove();
    Subscription = class _Subscription {
      constructor(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
      }
      unsubscribe() {
        let errors;
        if (!this.closed) {
          this.closed = true;
          const { _parentage } = this;
          if (_parentage) {
            this._parentage = null;
            if (Array.isArray(_parentage)) {
              for (const parent of _parentage) {
                parent.remove(this);
              }
            } else {
              _parentage.remove(this);
            }
          }
          const { initialTeardown: initialFinalizer } = this;
          if (isFunction(initialFinalizer)) {
            try {
              initialFinalizer();
            } catch (e) {
              errors = e instanceof UnsubscriptionError ? e.errors : [e];
            }
          }
          const { _finalizers } = this;
          if (_finalizers) {
            this._finalizers = null;
            for (const finalizer of _finalizers) {
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = [...errors, ...err.errors];
                } else {
                  errors.push(err);
                }
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError(errors);
          }
        }
      }
      add(teardown) {
        var _a;
        if (teardown && teardown !== this) {
          if (this.closed) {
            execFinalizer(teardown);
          } else {
            if (teardown instanceof _Subscription) {
              if (teardown.closed || teardown._hasParent(this)) {
                return;
              }
              teardown._addParent(this);
            }
            (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
          }
        }
      }
      _hasParent(parent) {
        const { _parentage } = this;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
      }
      _addParent(parent) {
        const { _parentage } = this;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      }
      _removeParent(parent) {
        const { _parentage } = this;
        if (_parentage === parent) {
          this._parentage = null;
        } else if (Array.isArray(_parentage)) {
          arrRemove(_parentage, parent);
        }
      }
      remove(teardown) {
        const { _finalizers } = this;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof _Subscription) {
          teardown._removeParent(this);
        }
      }
    };
    Subscription.EMPTY = (() => {
      const empty = new Subscription();
      empty.closed = true;
      return empty;
    })();
    EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  }
});

// node_modules/rxjs/dist/esm/internal/config.js
var config;
var init_config = __esm({
  "node_modules/rxjs/dist/esm/internal/config.js"() {
    "use strict";
    config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: void 0,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js
var timeoutProvider;
var init_timeoutProvider = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js"() {
    "use strict";
    timeoutProvider = {
      setTimeout(handler, timeout, ...args) {
        const { delegate } = timeoutProvider;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
          return delegate.setTimeout(handler, timeout, ...args);
        }
        return setTimeout(handler, timeout, ...args);
      },
      clearTimeout(handle) {
        const { delegate } = timeoutProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(() => {
    const { onUnhandledError } = config;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}
var init_reportUnhandledError = __esm({
  "node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js"() {
    "use strict";
    init_config();
    init_timeoutProvider();
  }
});

// node_modules/rxjs/dist/esm/internal/util/noop.js
function noop() {
}
var init_noop = __esm({
  "node_modules/rxjs/dist/esm/internal/util/noop.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/NotificationFactories.js
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}
var COMPLETE_NOTIFICATION;
var init_NotificationFactories = __esm({
  "node_modules/rxjs/dist/esm/internal/NotificationFactories.js"() {
    "use strict";
    COMPLETE_NOTIFICATION = (() => createNotification("C", void 0, void 0))();
  }
});

// node_modules/rxjs/dist/esm/internal/util/errorContext.js
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    const isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      const { errorThrown, error } = context;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}
var context;
var init_errorContext = __esm({
  "node_modules/rxjs/dist/esm/internal/util/errorContext.js"() {
    "use strict";
    init_config();
    context = null;
  }
});

// node_modules/rxjs/dist/esm/internal/Subscriber.js
function bind(fn2, thisArg) {
  return _bind.call(fn2, thisArg);
}
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  const { onStoppedNotification } = config;
  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));
}
var Subscriber, _bind, ConsumerObserver, SafeSubscriber, EMPTY_OBSERVER;
var init_Subscriber = __esm({
  "node_modules/rxjs/dist/esm/internal/Subscriber.js"() {
    "use strict";
    init_isFunction();
    init_Subscription();
    init_config();
    init_reportUnhandledError();
    init_noop();
    init_NotificationFactories();
    init_timeoutProvider();
    init_errorContext();
    Subscriber = class extends Subscription {
      constructor(destination) {
        super();
        this.isStopped = false;
        if (destination) {
          this.destination = destination;
          if (isSubscription(destination)) {
            destination.add(this);
          }
        } else {
          this.destination = EMPTY_OBSERVER;
        }
      }
      static create(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
      }
      next(value) {
        if (this.isStopped) {
          handleStoppedNotification(nextNotification(value), this);
        } else {
          this._next(value);
        }
      }
      error(err) {
        if (this.isStopped) {
          handleStoppedNotification(errorNotification(err), this);
        } else {
          this.isStopped = true;
          this._error(err);
        }
      }
      complete() {
        if (this.isStopped) {
          handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        } else {
          this.isStopped = true;
          this._complete();
        }
      }
      unsubscribe() {
        if (!this.closed) {
          this.isStopped = true;
          super.unsubscribe();
          this.destination = null;
        }
      }
      _next(value) {
        this.destination.next(value);
      }
      _error(err) {
        try {
          this.destination.error(err);
        } finally {
          this.unsubscribe();
        }
      }
      _complete() {
        try {
          this.destination.complete();
        } finally {
          this.unsubscribe();
        }
      }
    };
    _bind = Function.prototype.bind;
    ConsumerObserver = class {
      constructor(partialObserver) {
        this.partialObserver = partialObserver;
      }
      next(value) {
        const { partialObserver } = this;
        if (partialObserver.next) {
          try {
            partialObserver.next(value);
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      }
      error(err) {
        const { partialObserver } = this;
        if (partialObserver.error) {
          try {
            partialObserver.error(err);
          } catch (error) {
            handleUnhandledError(error);
          }
        } else {
          handleUnhandledError(err);
        }
      }
      complete() {
        const { partialObserver } = this;
        if (partialObserver.complete) {
          try {
            partialObserver.complete();
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      }
    };
    SafeSubscriber = class extends Subscriber {
      constructor(observerOrNext, error, complete) {
        super();
        let partialObserver;
        if (isFunction(observerOrNext) || !observerOrNext) {
          partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
            error: error !== null && error !== void 0 ? error : void 0,
            complete: complete !== null && complete !== void 0 ? complete : void 0
          };
        } else {
          let context2;
          if (this && config.useDeprecatedNextContext) {
            context2 = Object.create(observerOrNext);
            context2.unsubscribe = () => this.unsubscribe();
            partialObserver = {
              next: observerOrNext.next && bind(observerOrNext.next, context2),
              error: observerOrNext.error && bind(observerOrNext.error, context2),
              complete: observerOrNext.complete && bind(observerOrNext.complete, context2)
            };
          } else {
            partialObserver = observerOrNext;
          }
        }
        this.destination = new ConsumerObserver(partialObserver);
      }
    };
    EMPTY_OBSERVER = {
      closed: true,
      next: noop,
      error: defaultErrorHandler,
      complete: noop
    };
  }
});

// node_modules/rxjs/dist/esm/internal/symbol/observable.js
var observable;
var init_observable = __esm({
  "node_modules/rxjs/dist/esm/internal/symbol/observable.js"() {
    "use strict";
    observable = (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
  }
});

// node_modules/rxjs/dist/esm/internal/util/identity.js
function identity(x) {
  return x;
}
var init_identity = __esm({
  "node_modules/rxjs/dist/esm/internal/util/identity.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/util/pipe.js
function pipe(...fns) {
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input2) {
    return fns.reduce((prev, fn2) => fn2(prev), input2);
  };
}
var init_pipe = __esm({
  "node_modules/rxjs/dist/esm/internal/util/pipe.js"() {
    "use strict";
    init_identity();
  }
});

// node_modules/rxjs/dist/esm/internal/Observable.js
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
var Observable;
var init_Observable = __esm({
  "node_modules/rxjs/dist/esm/internal/Observable.js"() {
    "use strict";
    init_Subscriber();
    init_Subscription();
    init_observable();
    init_pipe();
    init_config();
    init_isFunction();
    init_errorContext();
    Observable = class _Observable {
      constructor(subscribe) {
        if (subscribe) {
          this._subscribe = subscribe;
        }
      }
      lift(operator) {
        const observable2 = new _Observable();
        observable2.source = this;
        observable2.operator = operator;
        return observable2;
      }
      subscribe(observerOrNext, error, complete) {
        const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(() => {
          const { operator, source } = this;
          subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));
        });
        return subscriber;
      }
      _trySubscribe(sink) {
        try {
          return this._subscribe(sink);
        } catch (err) {
          sink.error(err);
        }
      }
      forEach(next, promiseCtor) {
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => {
          const subscriber = new SafeSubscriber({
            next: (value) => {
              try {
                next(value);
              } catch (err) {
                reject(err);
                subscriber.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
          this.subscribe(subscriber);
        });
      }
      _subscribe(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      }
      [observable]() {
        return this;
      }
      pipe(...operations) {
        return pipeFromArray(operations)(this);
      }
      toPromise(promiseCtor) {
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => {
          let value;
          this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
        });
      }
    };
    Observable.create = (subscribe) => {
      return new Observable(subscribe);
    };
  }
});

// node_modules/rxjs/dist/esm/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return (source) => {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
var init_lift = __esm({
  "node_modules/rxjs/dist/esm/internal/util/lift.js"() {
    "use strict";
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber;
var init_OperatorSubscriber = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js"() {
    "use strict";
    init_Subscriber();
    OperatorSubscriber = class extends Subscriber {
      constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        super(destination);
        this.onFinalize = onFinalize;
        this.shouldUnsubscribe = shouldUnsubscribe;
        this._next = onNext ? function(value) {
          try {
            onNext(value);
          } catch (err) {
            destination.error(err);
          }
        } : super._next;
        this._error = onError ? function(err) {
          try {
            onError(err);
          } catch (err2) {
            destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        } : super._error;
        this._complete = onComplete ? function() {
          try {
            onComplete();
          } catch (err) {
            destination.error(err);
          } finally {
            this.unsubscribe();
          }
        } : super._complete;
      }
      unsubscribe() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
          const { closed } = this;
          super.unsubscribe();
          !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/operators/refCount.js
function refCount() {
  return operate((source, subscriber) => {
    let connection = null;
    source._refCount++;
    const refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, () => {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      const sharedConnection = source._connection;
      const conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}
var init_refCount = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/refCount.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js
var ConnectableObservable;
var init_ConnectableObservable = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js"() {
    "use strict";
    init_Observable();
    init_Subscription();
    init_refCount();
    init_OperatorSubscriber();
    init_lift();
    ConnectableObservable = class extends Observable {
      constructor(source, subjectFactory) {
        super();
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._subject = null;
        this._refCount = 0;
        this._connection = null;
        if (hasLift(source)) {
          this.lift = source.lift;
        }
      }
      _subscribe(subscriber) {
        return this.getSubject().subscribe(subscriber);
      }
      getSubject() {
        const subject = this._subject;
        if (!subject || subject.isStopped) {
          this._subject = this.subjectFactory();
        }
        return this._subject;
      }
      _teardown() {
        this._refCount = 0;
        const { _connection } = this;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      }
      connect() {
        let connection = this._connection;
        if (!connection) {
          connection = this._connection = new Subscription();
          const subject = this.getSubject();
          connection.add(this.source.subscribe(createOperatorSubscriber(subject, void 0, () => {
            this._teardown();
            subject.complete();
          }, (err) => {
            this._teardown();
            subject.error(err);
          }, () => this._teardown())));
          if (connection.closed) {
            this._connection = null;
            connection = Subscription.EMPTY;
          }
        }
        return connection;
      }
      refCount() {
        return refCount()(this);
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js
var animationFrameProvider;
var init_animationFrameProvider = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js"() {
    "use strict";
    init_Subscription();
    animationFrameProvider = {
      schedule(callback) {
        let request = requestAnimationFrame;
        let cancel = cancelAnimationFrame;
        const { delegate } = animationFrameProvider;
        if (delegate) {
          request = delegate.requestAnimationFrame;
          cancel = delegate.cancelAnimationFrame;
        }
        const handle = request((timestamp) => {
          cancel = void 0;
          callback(timestamp);
        });
        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));
      },
      requestAnimationFrame(...args) {
        const { delegate } = animationFrameProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);
      },
      cancelAnimationFrame(...args) {
        const { delegate } = animationFrameProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError;
var init_ObjectUnsubscribedError = __esm({
  "node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js"() {
    "use strict";
    init_createErrorClass();
    ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    });
  }
});

// node_modules/rxjs/dist/esm/internal/Subject.js
var Subject, AnonymousSubject;
var init_Subject = __esm({
  "node_modules/rxjs/dist/esm/internal/Subject.js"() {
    "use strict";
    init_Observable();
    init_Subscription();
    init_ObjectUnsubscribedError();
    init_arrRemove();
    init_errorContext();
    Subject = class extends Observable {
      constructor() {
        super();
        this.closed = false;
        this.currentObservers = null;
        this.observers = [];
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
      }
      lift(operator) {
        const subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
      }
      _throwIfClosed() {
        if (this.closed) {
          throw new ObjectUnsubscribedError();
        }
      }
      next(value) {
        errorContext(() => {
          this._throwIfClosed();
          if (!this.isStopped) {
            if (!this.currentObservers) {
              this.currentObservers = Array.from(this.observers);
            }
            for (const observer of this.currentObservers) {
              observer.next(value);
            }
          }
        });
      }
      error(err) {
        errorContext(() => {
          this._throwIfClosed();
          if (!this.isStopped) {
            this.hasError = this.isStopped = true;
            this.thrownError = err;
            const { observers } = this;
            while (observers.length) {
              observers.shift().error(err);
            }
          }
        });
      }
      complete() {
        errorContext(() => {
          this._throwIfClosed();
          if (!this.isStopped) {
            this.isStopped = true;
            const { observers } = this;
            while (observers.length) {
              observers.shift().complete();
            }
          }
        });
      }
      unsubscribe() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
      }
      get observed() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      }
      _trySubscribe(subscriber) {
        this._throwIfClosed();
        return super._trySubscribe(subscriber);
      }
      _subscribe(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
      }
      _innerSubscribe(subscriber) {
        const { hasError, isStopped, observers } = this;
        if (hasError || isStopped) {
          return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(() => {
          this.currentObservers = null;
          arrRemove(observers, subscriber);
        });
      }
      _checkFinalizedStatuses(subscriber) {
        const { hasError, thrownError, isStopped } = this;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped) {
          subscriber.complete();
        }
      }
      asObservable() {
        const observable2 = new Observable();
        observable2.source = this;
        return observable2;
      }
    };
    Subject.create = (destination, source) => {
      return new AnonymousSubject(destination, source);
    };
    AnonymousSubject = class extends Subject {
      constructor(destination, source) {
        super();
        this.destination = destination;
        this.source = source;
      }
      next(value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      }
      error(err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      }
      complete() {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      _subscribe(subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject;
var init_BehaviorSubject = __esm({
  "node_modules/rxjs/dist/esm/internal/BehaviorSubject.js"() {
    "use strict";
    init_Subject();
    BehaviorSubject = class extends Subject {
      constructor(_value) {
        super();
        this._value = _value;
      }
      get value() {
        return this.getValue();
      }
      _subscribe(subscriber) {
        const subscription = super._subscribe(subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
      }
      getValue() {
        const { hasError, thrownError, _value } = this;
        if (hasError) {
          throw thrownError;
        }
        this._throwIfClosed();
        return _value;
      }
      next(value) {
        super.next(this._value = value);
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider;
var init_dateTimestampProvider = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js"() {
    "use strict";
    dateTimestampProvider = {
      now() {
        return (dateTimestampProvider.delegate || Date).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm/internal/ReplaySubject.js
var ReplaySubject;
var init_ReplaySubject = __esm({
  "node_modules/rxjs/dist/esm/internal/ReplaySubject.js"() {
    "use strict";
    init_Subject();
    init_dateTimestampProvider();
    ReplaySubject = class extends Subject {
      constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {
        super();
        this._bufferSize = _bufferSize;
        this._windowTime = _windowTime;
        this._timestampProvider = _timestampProvider;
        this._buffer = [];
        this._infiniteTimeWindow = true;
        this._infiniteTimeWindow = _windowTime === Infinity;
        this._bufferSize = Math.max(1, _bufferSize);
        this._windowTime = Math.max(1, _windowTime);
      }
      next(value) {
        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;
        if (!isStopped) {
          _buffer.push(value);
          !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        super.next(value);
      }
      _subscribe(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        const subscription = this._innerSubscribe(subscriber);
        const { _infiniteTimeWindow, _buffer } = this;
        const copy = _buffer.slice();
        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
          subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
      }
      _trimBuffer() {
        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;
        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
          const now = _timestampProvider.now();
          let last3 = 0;
          for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
            last3 = i;
          }
          last3 && _buffer.splice(0, last3 + 1);
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/Action.js
var Action;
var init_Action = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/Action.js"() {
    "use strict";
    init_Subscription();
    Action = class extends Subscription {
      constructor(scheduler, work) {
        super();
      }
      schedule(state, delay = 0) {
        return this;
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js
var intervalProvider;
var init_intervalProvider = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js"() {
    "use strict";
    intervalProvider = {
      setInterval(handler, timeout, ...args) {
        const { delegate } = intervalProvider;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
          return delegate.setInterval(handler, timeout, ...args);
        }
        return setInterval(handler, timeout, ...args);
      },
      clearInterval(handle) {
        const { delegate } = intervalProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js
var AsyncAction;
var init_AsyncAction = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js"() {
    "use strict";
    init_Action();
    init_intervalProvider();
    init_arrRemove();
    AsyncAction = class extends Action {
      constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
      }
      schedule(state, delay = 0) {
        var _a;
        if (this.closed) {
          return this;
        }
        this.state = state;
        const id = this.id;
        const scheduler = this.scheduler;
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
      }
      requestAsyncId(scheduler, _id, delay = 0) {
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
      }
      recycleAsyncId(_scheduler, id, delay = 0) {
        if (delay != null && this.delay === delay && this.pending === false) {
          return id;
        }
        if (id != null) {
          intervalProvider.clearInterval(id);
        }
        return void 0;
      }
      execute(state, delay) {
        if (this.closed) {
          return new Error("executing a cancelled action");
        }
        this.pending = false;
        const error = this._execute(state, delay);
        if (error) {
          return error;
        } else if (this.pending === false && this.id != null) {
          this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
      }
      _execute(state, _delay) {
        let errored = false;
        let errorValue;
        try {
          this.work(state);
        } catch (e) {
          errored = true;
          errorValue = e ? e : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
          this.unsubscribe();
          return errorValue;
        }
      }
      unsubscribe() {
        if (!this.closed) {
          const { id, scheduler } = this;
          const { actions } = scheduler;
          this.work = this.state = this.scheduler = null;
          this.pending = false;
          arrRemove(actions, this);
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
          super.unsubscribe();
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/util/Immediate.js
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var nextHandle, resolved, activeHandles, Immediate;
var init_Immediate = __esm({
  "node_modules/rxjs/dist/esm/internal/util/Immediate.js"() {
    "use strict";
    nextHandle = 1;
    activeHandles = {};
    Immediate = {
      setImmediate(cb) {
        const handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
          resolved = Promise.resolve();
        }
        resolved.then(() => findAndClearHandle(handle) && cb());
        return handle;
      },
      clearImmediate(handle) {
        findAndClearHandle(handle);
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js
var setImmediate, clearImmediate, immediateProvider;
var init_immediateProvider = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js"() {
    "use strict";
    init_Immediate();
    ({ setImmediate, clearImmediate } = Immediate);
    immediateProvider = {
      setImmediate(...args) {
        const { delegate } = immediateProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);
      },
      clearImmediate(handle) {
        const { delegate } = immediateProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js
var AsapAction;
var init_AsapAction = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js"() {
    "use strict";
    init_AsyncAction();
    init_immediateProvider();
    AsapAction = class extends AsyncAction {
      constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
      }
      requestAsyncId(scheduler, id, delay = 0) {
        if (delay !== null && delay > 0) {
          return super.requestAsyncId(scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
      }
      recycleAsyncId(scheduler, id, delay = 0) {
        var _a;
        if (delay != null ? delay > 0 : this.delay > 0) {
          return super.recycleAsyncId(scheduler, id, delay);
        }
        const { actions } = scheduler;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          immediateProvider.clearImmediate(id);
          if (scheduler._scheduled === id) {
            scheduler._scheduled = void 0;
          }
        }
        return void 0;
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/Scheduler.js
var Scheduler;
var init_Scheduler = __esm({
  "node_modules/rxjs/dist/esm/internal/Scheduler.js"() {
    "use strict";
    init_dateTimestampProvider();
    Scheduler = class _Scheduler {
      constructor(schedulerActionCtor, now = _Scheduler.now) {
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
      }
      schedule(work, delay = 0, state) {
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
      }
    };
    Scheduler.now = dateTimestampProvider.now;
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js
var AsyncScheduler;
var init_AsyncScheduler = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js"() {
    "use strict";
    init_Scheduler();
    AsyncScheduler = class extends Scheduler {
      constructor(SchedulerAction, now = Scheduler.now) {
        super(SchedulerAction, now);
        this.actions = [];
        this._active = false;
      }
      flush(action) {
        const { actions } = this;
        if (this._active) {
          actions.push(action);
          return;
        }
        let error;
        this._active = true;
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while (action = actions.shift());
        this._active = false;
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js
var AsapScheduler;
var init_AsapScheduler = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js"() {
    "use strict";
    init_AsyncScheduler();
    AsapScheduler = class extends AsyncScheduler {
      flush(action) {
        this._active = true;
        const flushId = this._scheduled;
        this._scheduled = void 0;
        const { actions } = this;
        let error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/asap.js
var asapScheduler;
var init_asap = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/asap.js"() {
    "use strict";
    init_AsapAction();
    init_AsapScheduler();
    asapScheduler = new AsapScheduler(AsapAction);
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/async.js
var asyncScheduler, async;
var init_async = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/async.js"() {
    "use strict";
    init_AsyncAction();
    init_AsyncScheduler();
    asyncScheduler = new AsyncScheduler(AsyncAction);
    async = asyncScheduler;
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction;
var init_AnimationFrameAction = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js"() {
    "use strict";
    init_AsyncAction();
    init_animationFrameProvider();
    AnimationFrameAction = class extends AsyncAction {
      constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
      }
      requestAsyncId(scheduler, id, delay = 0) {
        if (delay !== null && delay > 0) {
          return super.requestAsyncId(scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(void 0)));
      }
      recycleAsyncId(scheduler, id, delay = 0) {
        var _a;
        if (delay != null ? delay > 0 : this.delay > 0) {
          return super.recycleAsyncId(scheduler, id, delay);
        }
        const { actions } = scheduler;
        if (id != null && id === scheduler._scheduled && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          animationFrameProvider.cancelAnimationFrame(id);
          scheduler._scheduled = void 0;
        }
        return void 0;
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler;
var init_AnimationFrameScheduler = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js"() {
    "use strict";
    init_AsyncScheduler();
    AnimationFrameScheduler = class extends AsyncScheduler {
      flush(action) {
        this._active = true;
        let flushId;
        if (action) {
          flushId = action.id;
        } else {
          flushId = this._scheduled;
          this._scheduled = void 0;
        }
        const { actions } = this;
        let error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      }
    };
  }
});

// node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js
var animationFrameScheduler;
var init_animationFrame = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js"() {
    "use strict";
    init_AnimationFrameAction();
    init_AnimationFrameScheduler();
    animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
  }
});

// node_modules/rxjs/dist/esm/internal/observable/empty.js
var EMPTY;
var init_empty = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/empty.js"() {
    "use strict";
    init_Observable();
    EMPTY = new Observable((subscriber) => subscriber.complete());
  }
});

// node_modules/rxjs/dist/esm/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}
var init_isScheduler = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isScheduler.js"() {
    "use strict";
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === "number" ? args.pop() : defaultValue;
}
var init_args = __esm({
  "node_modules/rxjs/dist/esm/internal/util/args.js"() {
    "use strict";
    init_isFunction();
    init_isScheduler();
  }
});

// node_modules/tslib/tslib.es6.mjs
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/util/isArrayLike.js
var isArrayLike;
var init_isArrayLike = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isArrayLike.js"() {
    "use strict";
    isArrayLike = (x) => x && typeof x.length === "number" && typeof x !== "function";
  }
});

// node_modules/rxjs/dist/esm/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
var init_isPromise = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isPromise.js"() {
    "use strict";
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js
function isInteropObservable(input2) {
  return isFunction(input2[observable]);
}
var init_isInteropObservable = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js"() {
    "use strict";
    init_observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
var init_isAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js"() {
    "use strict";
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input2) {
  return new TypeError(`You provided ${input2 !== null && typeof input2 === "object" ? "an invalid object" : `'${input2}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);
}
var init_throwUnobservableError = __esm({
  "node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator;
var init_iterator = __esm({
  "node_modules/rxjs/dist/esm/internal/symbol/iterator.js"() {
    "use strict";
    iterator = getSymbolIterator();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isIterable.js
function isIterable(input2) {
  return isFunction(input2 === null || input2 === void 0 ? void 0 : input2[iterator]);
}
var init_isIterable = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isIterable.js"() {
    "use strict";
    init_iterator();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const { value, done } = yield __await(reader.read());
        if (done) {
          return yield __await(void 0);
        }
        yield yield __await(value);
      }
    } finally {
      reader.releaseLock();
    }
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
var init_isReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js"() {
    "use strict";
    init_tslib_es6();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
function innerFrom(input2) {
  if (input2 instanceof Observable) {
    return input2;
  }
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return fromInteropObservable(input2);
    }
    if (isArrayLike(input2)) {
      return fromArrayLike(input2);
    }
    if (isPromise(input2)) {
      return fromPromise(input2);
    }
    if (isAsyncIterable(input2)) {
      return fromAsyncIterable(input2);
    }
    if (isIterable(input2)) {
      return fromIterable(input2);
    }
    if (isReadableStreamLike(input2)) {
      return fromReadableStreamLike(input2);
    }
  }
  throw createInvalidObservableTypeError(input2);
}
function fromInteropObservable(obj) {
  return new Observable((subscriber) => {
    const obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable((subscriber) => {
    for (let i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable((subscriber) => {
    promise.then((value) => {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, (err) => subscriber.error(err)).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable((subscriber) => {
    for (const value of iterable) {
      subscriber.next(value);
      if (subscriber.closed) {
        return;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable((subscriber) => {
    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_1, _a;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done; ) {
        const value = asyncIterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)) yield _a.call(asyncIterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
var init_innerFrom = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/innerFrom.js"() {
    "use strict";
    init_tslib_es6();
    init_isArrayLike();
    init_isPromise();
    init_Observable();
    init_isInteropObservable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isIterable();
    init_isReadableStreamLike();
    init_isFunction();
    init_reportUnhandledError();
    init_observable();
  }
});

// node_modules/rxjs/dist/esm/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {
  const scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}
var init_executeSchedule = __esm({
  "node_modules/rxjs/dist/esm/internal/util/executeSchedule.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/operators/observeOn.js
function observeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));
  });
}
var init_observeOn = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/observeOn.js"() {
    "use strict";
    init_executeSchedule();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));
  });
}
var init_subscribeOn = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js"() {
    "use strict";
    init_lift();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js
function scheduleObservable(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var init_scheduleObservable = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js"() {
    "use strict";
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js
function schedulePromise(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var init_schedulePromise = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js"() {
    "use strict";
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js
function scheduleArray(input2, scheduler) {
  return new Observable((subscriber) => {
    let i = 0;
    return scheduler.schedule(function() {
      if (i === input2.length) {
        subscriber.complete();
      } else {
        subscriber.next(input2[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
var init_scheduleArray = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js"() {
    "use strict";
    init_Observable();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js
function scheduleIterable(input2, scheduler) {
  return new Observable((subscriber) => {
    let iterator2;
    executeSchedule(subscriber, scheduler, () => {
      iterator2 = input2[iterator]();
      executeSchedule(subscriber, scheduler, () => {
        let value;
        let done;
        try {
          ({ value, done } = iterator2.next());
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return () => isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
  });
}
var init_scheduleIterable = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js"() {
    "use strict";
    init_Observable();
    init_iterator();
    init_isFunction();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input2, scheduler) {
  if (!input2) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable((subscriber) => {
    executeSchedule(subscriber, scheduler, () => {
      const iterator2 = input2[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, () => {
        iterator2.next().then((result) => {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
var init_scheduleAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js"() {
    "use strict";
    init_Observable();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input2, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input2), scheduler);
}
var init_scheduleReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js"() {
    "use strict";
    init_scheduleAsyncIterable();
    init_isReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js
function scheduled(input2, scheduler) {
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return scheduleObservable(input2, scheduler);
    }
    if (isArrayLike(input2)) {
      return scheduleArray(input2, scheduler);
    }
    if (isPromise(input2)) {
      return schedulePromise(input2, scheduler);
    }
    if (isAsyncIterable(input2)) {
      return scheduleAsyncIterable(input2, scheduler);
    }
    if (isIterable(input2)) {
      return scheduleIterable(input2, scheduler);
    }
    if (isReadableStreamLike(input2)) {
      return scheduleReadableStreamLike(input2, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input2);
}
var init_scheduled = __esm({
  "node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js"() {
    "use strict";
    init_scheduleObservable();
    init_schedulePromise();
    init_scheduleArray();
    init_scheduleIterable();
    init_scheduleAsyncIterable();
    init_isInteropObservable();
    init_isPromise();
    init_isArrayLike();
    init_isIterable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isReadableStreamLike();
    init_scheduleReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/from.js
function from(input2, scheduler) {
  return scheduler ? scheduled(input2, scheduler) : innerFrom(input2);
}
var init_from = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/from.js"() {
    "use strict";
    init_scheduled();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/of.js
function of(...args) {
  const scheduler = popScheduler(args);
  return from(args, scheduler);
}
var init_of = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/of.js"() {
    "use strict";
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;
  const init = (subscriber) => subscriber.error(errorFactory());
  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);
}
var init_throwError = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/throwError.js"() {
    "use strict";
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/isObservable.js
function isObservable(obj) {
  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));
}
var init_isObservable = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isObservable.js"() {
    "use strict";
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/util/EmptyError.js
var EmptyError;
var init_EmptyError = __esm({
  "node_modules/rxjs/dist/esm/internal/util/EmptyError.js"() {
    "use strict";
    init_createErrorClass();
    EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {
      _super(this);
      this.name = "EmptyError";
      this.message = "no elements in sequence";
    });
  }
});

// node_modules/rxjs/dist/esm/internal/util/isDate.js
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}
var init_isDate = __esm({
  "node_modules/rxjs/dist/esm/internal/util/isDate.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/operators/map.js
function map(project, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}
var init_map = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/map.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js
function callOrApply(fn2, args) {
  return isArray(args) ? fn2(...args) : fn2(args);
}
function mapOneOrManyArgs(fn2) {
  return map((args) => callOrApply(fn2, args));
}
var isArray;
var init_mapOneOrManyArgs = __esm({
  "node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js"() {
    "use strict";
    init_map();
    ({ isArray } = Array);
  }
});

// node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    const first2 = args[0];
    if (isArray2(first2)) {
      return { args: first2, keys: null };
    }
    if (isPOJO(first2)) {
      const keys = getKeys(first2);
      return {
        args: keys.map((key) => first2[key]),
        keys
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}
var isArray2, getPrototypeOf, objectProto, getKeys;
var init_argsArgArrayOrObject = __esm({
  "node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js"() {
    "use strict";
    ({ isArray: isArray2 } = Array);
    ({ getPrototypeOf, prototype: objectProto, keys: getKeys } = Object);
  }
});

// node_modules/rxjs/dist/esm/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});
}
var init_createObject = __esm({
  "node_modules/rxjs/dist/esm/internal/util/createObject.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/observable/combineLatest.js
function combineLatest(...args) {
  const scheduler = popScheduler(args);
  const resultSelector = popResultSelector(args);
  const { args: observables, keys } = argsArgArrayOrObject(args);
  if (observables.length === 0) {
    return from([], scheduler);
  }
  const result = new Observable(combineLatestInit(observables, scheduler, keys ? (values) => createObject(keys, values) : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform = identity) {
  return (subscriber) => {
    maybeSchedule(scheduler, () => {
      const { length } = observables;
      const values = new Array(length);
      let active = length;
      let remainingFirstValues = length;
      for (let i = 0; i < length; i++) {
        maybeSchedule(scheduler, () => {
          const source = from(observables[i], scheduler);
          let hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, (value) => {
            values[i] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, () => {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}
var init_combineLatest = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/combineLatest.js"() {
    "use strict";
    init_Observable();
    init_argsArgArrayOrObject();
    init_from();
    init_identity();
    init_mapOneOrManyArgs();
    init_args();
    init_createObject();
    init_OperatorSubscriber();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  const buffer = [];
  let active = 0;
  let index = 0;
  let isComplete = false;
  const checkComplete = () => {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  const outerNext = (value) => active < concurrent ? doInnerSub(value) : buffer.push(value);
  const doInnerSub = (value) => {
    expand && subscriber.next(value);
    active++;
    let innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, () => {
      innerComplete = true;
    }, void 0, () => {
      if (innerComplete) {
        try {
          active--;
          while (buffer.length && active < concurrent) {
            const bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));
            } else {
              doInnerSub(bufferedValue);
            }
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {
    isComplete = true;
    checkComplete();
  }));
  return () => {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
var init_mergeInternals = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js"() {
    "use strict";
    init_innerFrom();
    init_executeSchedule();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent = Infinity) {
  if (isFunction(resultSelector)) {
    return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));
}
var init_mergeMap = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/mergeMap.js"() {
    "use strict";
    init_map();
    init_innerFrom();
    init_lift();
    init_mergeInternals();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/mergeAll.js
function mergeAll(concurrent = Infinity) {
  return mergeMap(identity, concurrent);
}
var init_mergeAll = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/mergeAll.js"() {
    "use strict";
    init_mergeMap();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}
var init_concatAll = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/concatAll.js"() {
    "use strict";
    init_mergeAll();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/concat.js
function concat(...args) {
  return concatAll()(from(args, popScheduler(args)));
}
var init_concat = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/concat.js"() {
    "use strict";
    init_concatAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable((subscriber) => {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}
var init_defer = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/defer.js"() {
    "use strict";
    init_Observable();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/forkJoin.js
function forkJoin(...args) {
  const resultSelector = popResultSelector(args);
  const { args: sources, keys } = argsArgArrayOrObject(args);
  const result = new Observable((subscriber) => {
    const { length } = sources;
    if (!length) {
      subscriber.complete();
      return;
    }
    const values = new Array(length);
    let remainingCompletions = length;
    let remainingEmissions = length;
    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {
      let hasValue = false;
      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {
        if (!hasValue) {
          hasValue = true;
          remainingEmissions--;
        }
        values[sourceIndex] = value;
      }, () => remainingCompletions--, void 0, () => {
        if (!remainingCompletions || !hasValue) {
          if (!remainingEmissions) {
            subscriber.next(keys ? createObject(keys, values) : values);
          }
          subscriber.complete();
        }
      }));
    }
  });
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
var init_forkJoin = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/forkJoin.js"() {
    "use strict";
    init_Observable();
    init_argsArgArrayOrObject();
    init_innerFrom();
    init_args();
    init_OperatorSubscriber();
    init_mapOneOrManyArgs();
    init_createObject();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/timer.js
function timer(dueTime = 0, intervalOrScheduler, scheduler = async) {
  let intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if (isScheduler(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new Observable((subscriber) => {
    let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    let n = 0;
    return scheduler.schedule(function() {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(void 0, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}
var init_timer = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/timer.js"() {
    "use strict";
    init_Observable();
    init_async();
    init_isScheduler();
    init_isDate();
  }
});

// node_modules/rxjs/dist/esm/internal/observable/merge.js
function merge(...args) {
  const scheduler = popScheduler(args);
  const concurrent = popNumber(args, Infinity);
  const sources = args;
  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler));
}
var init_merge = __esm({
  "node_modules/rxjs/dist/esm/internal/observable/merge.js"() {
    "use strict";
    init_mergeAll();
    init_innerFrom();
    init_empty();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));
  });
}
var init_filter = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/filter.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/types.js
var init_types = __esm({
  "node_modules/rxjs/dist/esm/internal/types.js"() {
    "use strict";
  }
});

// node_modules/rxjs/dist/esm/internal/operators/audit.js
function audit(durationSelector) {
  return operate((source, subscriber) => {
    let hasValue = false;
    let lastValue = null;
    let durationSubscriber = null;
    let isComplete = false;
    const endDuration = () => {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;
      if (hasValue) {
        hasValue = false;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
      isComplete && subscriber.complete();
    };
    const cleanupDuration = () => {
      durationSubscriber = null;
      isComplete && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      lastValue = value;
      if (!durationSubscriber) {
        innerFrom(durationSelector(value)).subscribe(durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration));
      }
    }, () => {
      isComplete = true;
      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
    }));
  });
}
var init_audit = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/audit.js"() {
    "use strict";
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/auditTime.js
function auditTime(duration, scheduler = asyncScheduler) {
  return audit(() => timer(duration, scheduler));
}
var init_auditTime = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/auditTime.js"() {
    "use strict";
    init_async();
    init_audit();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/catchError.js
function catchError(selector) {
  return operate((source, subscriber) => {
    let innerSub = null;
    let syncUnsub = false;
    let handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, (err) => {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}
var init_catchError = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/catchError.js"() {
    "use strict";
    init_innerFrom();
    init_OperatorSubscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return (source, subscriber) => {
    let hasState = hasSeed;
    let state = seed;
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && (() => {
      hasState && subscriber.next(state);
      subscriber.complete();
    })));
  };
}
var init_scanInternals = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/scanInternals.js"() {
    "use strict";
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/concatMap.js
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}
var init_concatMap = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/concatMap.js"() {
    "use strict";
    init_mergeMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/debounceTime.js
function debounceTime(dueTime, scheduler = asyncScheduler) {
  return operate((source, subscriber) => {
    let activeTask = null;
    let lastValue = null;
    let lastTime = null;
    const emit = () => {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };
    function emitWhenIdle() {
      const targetTime = lastTime + dueTime;
      const now = scheduler.now();
      if (now < targetTime) {
        activeTask = this.schedule(void 0, targetTime - now);
        subscriber.add(activeTask);
        return;
      }
      emit();
    }
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      lastValue = value;
      lastTime = scheduler.now();
      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, () => {
      emit();
      subscriber.complete();
    }, void 0, () => {
      lastValue = activeTask = null;
    }));
  });
}
var init_debounceTime = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/debounceTime.js"() {
    "use strict";
    init_async();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}
var init_defaultIfEmpty = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/take.js
function take(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}
var init_take = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/take.js"() {
    "use strict";
    init_empty();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
function distinctUntilChanged(comparator, keySelector = identity) {
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate((source, subscriber) => {
    let previousKey;
    let first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}
var init_distinctUntilChanged = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js"() {
    "use strict";
    init_identity();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory = defaultErrorFactory) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}
var init_throwIfEmpty = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js"() {
    "use strict";
    init_EmptyError();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/finalize.js
function finalize(callback) {
  return operate((source, subscriber) => {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}
var init_finalize = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/finalize.js"() {
    "use strict";
    init_lift();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/first.js
function first(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}
var init_first = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/first.js"() {
    "use strict";
    init_EmptyError();
    init_filter();
    init_take();
    init_defaultIfEmpty();
    init_throwIfEmpty();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/takeLast.js
function takeLast(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let buffer = [];
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, () => {
      for (const value of buffer) {
        subscriber.next(value);
      }
      subscriber.complete();
    }, void 0, () => {
      buffer = null;
    }));
  });
}
var init_takeLast = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/takeLast.js"() {
    "use strict";
    init_empty();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/last.js
function last2(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}
var init_last = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/last.js"() {
    "use strict";
    init_EmptyError();
    init_filter();
    init_takeLast();
    init_throwIfEmpty();
    init_defaultIfEmpty();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/pairwise.js
function pairwise() {
  return operate((source, subscriber) => {
    let prev;
    let hasPrev = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}
var init_pairwise = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/pairwise.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/scan.js
function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}
var init_scan = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/scan.js"() {
    "use strict";
    init_lift();
    init_scanInternals();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/share.js
function share(options = {}) {
  const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;
  return (wrapperSource) => {
    let connection;
    let resetConnection;
    let subject;
    let refCount2 = 0;
    let hasCompleted = false;
    let hasErrored = false;
    const cancelReset = () => {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = void 0;
    };
    const reset = () => {
      cancelReset();
      connection = subject = void 0;
      hasCompleted = hasErrored = false;
    };
    const resetAndUnsubscribe = () => {
      const conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return operate((source, subscriber) => {
      refCount2++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(() => {
        refCount2--;
        if (refCount2 === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount2 > 0) {
        connection = new SafeSubscriber({
          next: (value) => dest.next(value),
          error: (err) => {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: () => {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        innerFrom(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on, ...args) {
  if (on === true) {
    reset();
    return;
  }
  if (on === false) {
    return;
  }
  const onSubscriber = new SafeSubscriber({
    next: () => {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return innerFrom(on(...args)).subscribe(onSubscriber);
}
var init_share = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/share.js"() {
    "use strict";
    init_innerFrom();
    init_Subject();
    init_Subscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
function shareReplay(configOrBufferSize, windowTime, scheduler) {
  let bufferSize;
  let refCount2 = false;
  if (configOrBufferSize && typeof configOrBufferSize === "object") {
    ({ bufferSize = Infinity, windowTime = Infinity, refCount: refCount2 = false, scheduler } = configOrBufferSize);
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return share({
    connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount2
  });
}
var init_shareReplay = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/shareReplay.js"() {
    "use strict";
    init_ReplaySubject();
    init_share();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/skip.js
function skip(count) {
  return filter((_, index) => count <= index);
}
var init_skip = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/skip.js"() {
    "use strict";
    init_filter();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/startWith.js
function startWith(...values) {
  const scheduler = popScheduler(values);
  return operate((source, subscriber) => {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}
var init_startWith = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/startWith.js"() {
    "use strict";
    init_concat();
    init_args();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate((source, subscriber) => {
    let innerSubscriber = null;
    let index = 0;
    let isComplete = false;
    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      let innerIndex = 0;
      const outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {
        innerSubscriber = null;
        checkComplete();
      }));
    }, () => {
      isComplete = true;
      checkComplete();
    }));
  });
}
var init_switchMap = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/switchMap.js"() {
    "use strict";
    init_innerFrom();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate((source, subscriber) => {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}
var init_takeUntil = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/takeUntil.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_noop();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/takeWhile.js
function takeWhile(predicate, inclusive = false) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}
var init_takeWhile = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/takeWhile.js"() {
    "use strict";
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  const tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate((source, subscriber) => {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    let isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, () => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, (err) => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, () => {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity;
}
var init_tap = __esm({
  "node_modules/rxjs/dist/esm/internal/operators/tap.js"() {
    "use strict";
    init_isFunction();
    init_lift();
    init_OperatorSubscriber();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm/index.js
var init_esm = __esm({
  "node_modules/rxjs/dist/esm/index.js"() {
    "use strict";
    init_Observable();
    init_ConnectableObservable();
    init_Subject();
    init_BehaviorSubject();
    init_asap();
    init_animationFrame();
    init_Subscription();
    init_pipe();
    init_isObservable();
    init_EmptyError();
    init_combineLatest();
    init_concat();
    init_defer();
    init_forkJoin();
    init_from();
    init_merge();
    init_of();
    init_throwError();
    init_empty();
    init_types();
  }
});

// node_modules/@angular/core/fesm2022/untracked.mjs
function createLinkedSignal(sourceFn, computationFn, equalityFn) {
  const node = Object.create(LINKED_SIGNAL_NODE);
  node.source = sourceFn;
  node.computation = computationFn;
  if (equalityFn != void 0) {
    node.equal = equalityFn;
  }
  const linkedSignalGetter = () => {
    producerUpdateValueVersion(node);
    producerAccessed(node);
    if (node.value === ERRORED) {
      throw node.error;
    }
    return node.value;
  };
  const getter = linkedSignalGetter;
  getter[SIGNAL] = node;
  if (typeof ngDevMode !== "undefined" && ngDevMode) {
    const debugName = node.debugName ? " (" + node.debugName + ")" : "";
    getter.toString = () => `[LinkedSignal${debugName}: ${node.value}]`;
  }
  runPostProducerCreatedFn(node);
  return getter;
}
function linkedSignalSetFn(node, newValue) {
  producerUpdateValueVersion(node);
  signalSetFn(node, newValue);
  producerMarkClean(node);
}
function linkedSignalUpdateFn(node, updater) {
  producerUpdateValueVersion(node);
  signalUpdateFn(node, updater);
  producerMarkClean(node);
}
function untracked(nonReactiveReadsFn) {
  const prevConsumer = setActiveConsumer(null);
  try {
    return nonReactiveReadsFn();
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
var LINKED_SIGNAL_NODE;
var init_untracked = __esm({
  "node_modules/@angular/core/fesm2022/untracked.mjs"() {
    "use strict";
    init_signal();
    LINKED_SIGNAL_NODE = /* @__PURE__ */ (() => {
      return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
        value: UNSET,
        dirty: true,
        error: null,
        equal: defaultEquals,
        kind: "linkedSignal",
        producerMustRecompute(node) {
          return node.value === UNSET || node.value === COMPUTING;
        },
        producerRecomputeValue(node) {
          if (node.value === COMPUTING) {
            throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? "Detected cycle in computations." : "");
          }
          const oldValue = node.value;
          node.value = COMPUTING;
          const prevConsumer = consumerBeforeComputation(node);
          let newValue;
          try {
            const newSourceValue = node.source();
            const prev = oldValue === UNSET || oldValue === ERRORED ? void 0 : {
              source: node.sourceValue,
              value: oldValue
            };
            newValue = node.computation(newSourceValue, prev);
            node.sourceValue = newSourceValue;
          } catch (err) {
            newValue = ERRORED;
            node.error = err;
          } finally {
            consumerAfterComputation(node, prevConsumer);
          }
          if (oldValue !== UNSET && newValue !== ERRORED && node.equal(oldValue, newValue)) {
            node.value = oldValue;
            return;
          }
          node.value = newValue;
          node.version++;
        }
      });
    })();
  }
});

// node_modules/@angular/core/fesm2022/weak_ref.mjs
function setAlternateWeakRefImpl(impl) {
}
var init_weak_ref = __esm({
  "node_modules/@angular/core/fesm2022/weak_ref.mjs"() {
    "use strict";
  }
});

// node_modules/@angular/core/fesm2022/primitives/signals.mjs
var init_signals = __esm({
  "node_modules/@angular/core/fesm2022/primitives/signals.mjs"() {
    "use strict";
    init_signal();
  }
});

// node_modules/@angular/core/fesm2022/primitives/di.mjs
var init_di = __esm({
  "node_modules/@angular/core/fesm2022/primitives/di.mjs"() {
    "use strict";
    init_not_found();
  }
});

// node_modules/@angular/core/fesm2022/root_effect_scheduler.mjs
function formatRuntimeErrorCode(code) {
  return `NG0${Math.abs(code)}`;
}
function formatRuntimeError(code, message) {
  const fullCode = formatRuntimeErrorCode(code);
  let errorMessage = `${fullCode}${message ? ": " + message : ""}`;
  if (ngDevMode && code < 0) {
    const addPeriodSeparator = !errorMessage.match(/[.,;!?\n]$/);
    const separator = addPeriodSeparator ? "." : "";
    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
  }
  return errorMessage;
}
function ngDevModeResetPerfCounters() {
  const locationString = typeof location !== "undefined" ? location.toString() : "";
  const newCounters = {
    hydratedNodes: 0,
    hydratedComponents: 0,
    dehydratedViewsRemoved: 0,
    dehydratedViewsCleanupRuns: 0,
    componentsSkippedHydration: 0,
    deferBlocksWithIncrementalHydration: 0
  };
  const allowNgDevModeTrue = locationString.indexOf("ngDevMode=false") === -1;
  if (!allowNgDevModeTrue) {
    _global["ngDevMode"] = false;
  } else {
    if (typeof _global["ngDevMode"] !== "object") {
      _global["ngDevMode"] = {};
    }
    Object.assign(_global["ngDevMode"], newCounters);
  }
  return newCounters;
}
function initNgDevMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (typeof ngDevMode !== "object" || Object.keys(ngDevMode).length === 0) {
      ngDevModeResetPerfCounters();
    }
    return typeof ngDevMode !== "undefined" && !!ngDevMode;
  }
  return false;
}
function getClosureSafeProperty(objWithPropertyToExtract) {
  for (let key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }
  throw Error(typeof ngDevMode !== "undefined" && ngDevMode ? "Could not find renamed property on target object." : "");
}
function fillProperties(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
function stringify(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return `[${token.map(stringify).join(", ")}]`;
  }
  if (token == null) {
    return "" + token;
  }
  const name = token.overriddenName || token.name;
  if (name) {
    return `${name}`;
  }
  const result = token.toString();
  if (result == null) {
    return "" + result;
  }
  const newLineIndex = result.indexOf("\n");
  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;
}
function concatStringsWithSpace(before, after) {
  if (!before)
    return after || "";
  if (!after)
    return before;
  return `${before} ${after}`;
}
function truncateMiddle(str, maxLength = 100) {
  if (!str || maxLength < 1 || str.length <= maxLength)
    return str;
  if (maxLength == 1)
    return str.substring(0, 1) + "...";
  const halfLimit = Math.round(maxLength / 2);
  return str.substring(0, halfLimit) + "..." + str.substring(str.length - halfLimit);
}
function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;
  forwardRefFn.toString = function() {
    return stringify(this());
  };
  return forwardRefFn;
}
function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
function isForwardRef(fn2) {
  return typeof fn2 === "function" && fn2.hasOwnProperty(__forward_ref__) && fn2.__forward_ref__ === forwardRef;
}
function assertNumber(actual, msg) {
  if (!(typeof actual === "number")) {
    throwError2(msg, typeof actual, "number", "===");
  }
}
function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, "Expected a number");
  assertLessThanOrEqual(actual, maxInclusive, "Expected number to be less than or equal to");
  assertGreaterThanOrEqual(actual, minInclusive, "Expected number to be greater than or equal to");
}
function assertString(actual, msg) {
  if (!(typeof actual === "string")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "string", "===");
  }
}
function assertFunction(actual, msg) {
  if (!(typeof actual === "function")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "function", "===");
  }
}
function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError2(msg, actual, expected, "==");
  }
}
function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError2(msg, actual, expected, "!=");
  }
}
function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError2(msg, actual, expected, "===");
  }
}
function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError2(msg, actual, expected, "!==");
  }
}
function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError2(msg, actual, expected, "<");
  }
}
function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError2(msg, actual, expected, "<=");
  }
}
function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError2(msg, actual, expected, ">");
  }
}
function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError2(msg, actual, expected, ">=");
  }
}
function assertNotDefined(actual, msg) {
  if (actual != null) {
    throwError2(msg, actual, null, "==");
  }
}
function assertDefined(actual, msg) {
  if (actual == null) {
    throwError2(msg, actual, null, "!=");
  }
}
function throwError2(msg, actual, expected, comparison) {
  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? "" : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}
function assertDomNode(node) {
  if (!(node instanceof Node)) {
    throwError2(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
  }
}
function assertElement(node) {
  if (!(node instanceof Element)) {
    throwError2(`The provided value must be an element but got ${stringify(node)}`);
  }
}
function assertIndexInRange(arr, index) {
  assertDefined(arr, "Array must be defined.");
  const maxLen = arr.length;
  if (index < 0 || index >= maxLen) {
    throwError2(`Index expected to be less than ${maxLen} but got ${index}`);
  }
}
function assertOneOf(value, ...validValues) {
  if (validValues.indexOf(value) !== -1)
    return true;
  throwError2(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
}
function assertNotReactive(fn2) {
  if (getActiveConsumer() !== null) {
    throwError2(`${fn2}() should never be called in a reactive context.`);
  }
}
function \u0275\u0275defineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: void 0
  };
}
function \u0275\u0275defineInjector(options) {
  return { providers: options.providers || [], imports: options.imports || [] };
}
function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF);
}
function isInjectable(type) {
  return getInjectableDef(type) !== null;
}
function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) && type[field] || null;
}
function getInheritedInjectableDef(type) {
  const def = type?.[NG_PROV_DEF] ?? null;
  if (def) {
    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token "${type.name}" that inherits its @Injectable decorator but does not provide one itself.
This will become an error in a future version of Angular. Please add @Injectable() to the "${type.name}" class.`);
    return def;
  } else {
    return null;
  }
}
function getInjectorDef(type) {
  return type && type.hasOwnProperty(NG_INJ_DEF) ? type[NG_INJ_DEF] : null;
}
function getInjectorProfilerContext() {
  !ngDevMode && throwError2("getInjectorProfilerContext should never be called in production mode");
  return _injectorProfilerContext;
}
function setInjectorProfilerContext(context2) {
  !ngDevMode && throwError2("setInjectorProfilerContext should never be called in production mode");
  const previous = _injectorProfilerContext;
  _injectorProfilerContext = context2;
  return previous;
}
function removeProfiler(profiler2) {
  const profilerIdx = injectorProfilerCallbacks.indexOf(profiler2);
  if (profilerIdx !== -1) {
    injectorProfilerCallbacks.splice(profilerIdx, 1);
  }
}
function setInjectorProfiler(injectorProfiler2) {
  !ngDevMode && throwError2("setInjectorProfiler should never be called in production mode");
  if (injectorProfiler2 !== null) {
    if (!injectorProfilerCallbacks.includes(injectorProfiler2)) {
      injectorProfilerCallbacks.push(injectorProfiler2);
    }
    return () => removeProfiler(injectorProfiler2);
  } else {
    injectorProfilerCallbacks.length = 0;
    return NOOP_PROFILER_REMOVAL;
  }
}
function injectorProfiler(event) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  for (let i = 0; i < injectorProfilerCallbacks.length; i++) {
    const injectorProfilerCallback = injectorProfilerCallbacks[i];
    injectorProfilerCallback(event);
  }
}
function emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  let token;
  if (typeof eventProvider === "function") {
    token = eventProvider;
  } else if (eventProvider instanceof InjectionToken) {
    token = eventProvider;
  } else {
    token = resolveForwardRef(eventProvider.provide);
  }
  let provider = eventProvider;
  if (eventProvider instanceof InjectionToken) {
    provider = eventProvider.\u0275prov || eventProvider;
  }
  injectorProfiler({
    type: 2,
    context: getInjectorProfilerContext(),
    providerRecord: { token, provider, isViewProvider }
  });
}
function emitInjectorToCreateInstanceEvent(token) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 4,
    context: getInjectorProfilerContext(),
    token
  });
}
function emitInstanceCreatedByInjectorEvent(instance) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 1,
    context: getInjectorProfilerContext(),
    instance: { value: instance }
  });
}
function emitInjectEvent(token, value, flags) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 0,
    context: getInjectorProfilerContext(),
    service: { token, value, flags }
  });
}
function emitEffectCreatedEvent(effect2) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 3,
    context: getInjectorProfilerContext(),
    effect: effect2
  });
}
function runInInjectorProfilerContext(injector, token, callback) {
  !ngDevMode && throwError2("runInInjectorProfilerContext should never be called in production mode");
  const prevInjectContext = setInjectorProfilerContext({ injector, token });
  try {
    callback();
  } finally {
    setInjectorProfilerContext(prevInjectContext);
  }
}
function isEnvironmentProviders(value) {
  return value && !!value.\u0275providers;
}
function renderStringify(value) {
  if (typeof value === "string")
    return value;
  if (value == null)
    return "";
  return String(value);
}
function stringifyForError(value) {
  if (typeof value === "function")
    return value.name || value.toString();
  if (typeof value === "object" && value != null && typeof value.type === "function") {
    return value.type.name || value.type.toString();
  }
  return renderStringify(value);
}
function debugStringifyTypeForError(type) {
  let componentDef = type[NG_COMP_DEF] || null;
  if (componentDef !== null && componentDef.debugInfo) {
    return stringifyTypeFromDebugInfo(componentDef.debugInfo);
  }
  return stringifyForError(type);
}
function stringifyTypeFromDebugInfo(debugInfo) {
  if (!debugInfo.filePath || !debugInfo.lineNumber) {
    return debugInfo.className;
  } else {
    return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;
  }
}
function cyclicDependencyError(token, path) {
  const message = ngDevMode ? `Circular dependency detected for \`${token}\`.` : "";
  return createRuntimeError(message, -200, path);
}
function cyclicDependencyErrorWithDetails(token, path) {
  return augmentRuntimeError(cyclicDependencyError(token, path), null);
}
function throwMixedMultiProviderError() {
  throw new Error(`Cannot mix multi providers and regular providers`);
}
function throwInvalidProviderError(ngModuleType, providers, provider) {
  if (ngModuleType && providers) {
    const providerDetail = providers.map((v) => v == provider ? "?" + provider + "?" : "...");
    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(", ")}]`);
  } else if (isEnvironmentProviders(provider)) {
    if (provider.\u0275fromNgModule) {
      throw new RuntimeError(207, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);
    } else {
      throw new RuntimeError(207, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);
    }
  } else {
    throw new Error("Invalid provider");
  }
}
function throwProviderNotFoundError(token, injectorName) {
  const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ""}`;
  throw new RuntimeError(-201, errorMessage);
}
function prependTokenToDependencyPath(error, token) {
  error[NG_TOKEN_PATH] ??= [];
  const currentPath = error[NG_TOKEN_PATH];
  let pathStr;
  if (typeof token === "object" && "multi" in token && token?.multi === true) {
    assertDefined(token.provide, "Token with multi: true should have a provide property");
    pathStr = stringifyForError(token.provide);
  } else {
    pathStr = stringifyForError(token);
  }
  if (currentPath[0] !== pathStr) {
    error[NG_TOKEN_PATH].unshift(pathStr);
  }
}
function augmentRuntimeError(error, source) {
  const tokenPath = error[NG_TOKEN_PATH];
  const errorCode = error[NG_RUNTIME_ERROR_CODE];
  const message = error[NG_RUNTIME_ERROR_MESSAGE] || error.message;
  error.message = formatErrorMessage(message, errorCode, tokenPath, source);
  return error;
}
function createRuntimeError(message, code, path) {
  const error = new RuntimeError(code, message);
  error[NG_RUNTIME_ERROR_CODE] = code;
  error[NG_RUNTIME_ERROR_MESSAGE] = message;
  if (path) {
    error[NG_TOKEN_PATH] = path;
  }
  return error;
}
function getRuntimeErrorCode(error) {
  return error[NG_RUNTIME_ERROR_CODE];
}
function formatErrorMessage(text2, code, path = [], source = null) {
  let pathDetails = "";
  if (path && path.length > 1) {
    pathDetails = ` Path: ${path.join(" -> ")}.`;
  }
  const sourceDetails = source ? ` Source: ${source}.` : "";
  return formatRuntimeError(code, `${text2}${sourceDetails}${pathDetails}`);
}
function getInjectImplementation() {
  return _injectImplementation;
}
function setInjectImplementation(impl) {
  const previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
function injectRootLimpMode(token, notFoundValue, flags) {
  const injectableDef = getInjectableDef(token);
  if (injectableDef && injectableDef.providedIn == "root") {
    return injectableDef.value === void 0 ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }
  if (flags & 8)
    return null;
  if (notFoundValue !== void 0)
    return notFoundValue;
  throwProviderNotFoundError(token, "Injector");
}
function assertInjectImplementationNotEqual(fn2) {
  ngDevMode && assertNotEqual(_injectImplementation, fn2, "Calling \u0275\u0275inject would cause infinite recursion");
}
function injectInjectorOnly(token, flags = 0) {
  const currentInjector = getCurrentInjector();
  if (currentInjector === void 0) {
    throw new RuntimeError(-203, ngDevMode && `The \`${stringify(token)}\` token injection failed. \`inject()\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \`runInInjectionContext\`.`);
  } else if (currentInjector === null) {
    return injectRootLimpMode(token, void 0, flags);
  } else {
    const options = convertToInjectOptions(flags);
    const value = currentInjector.retrieve(token, options);
    ngDevMode && emitInjectEvent(token, value, flags);
    if (isNotFound(value)) {
      if (options.optional) {
        return null;
      }
      throw value;
    }
    return value;
  }
}
function \u0275\u0275inject(token, flags = 0) {
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
function \u0275\u0275invalidFactoryDep(index) {
  throw new RuntimeError(202, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);
}
function inject2(token, options) {
  return \u0275\u0275inject(token, convertToBitFlags(options));
}
function convertToBitFlags(flags) {
  if (typeof flags === "undefined" || typeof flags === "number") {
    return flags;
  }
  return 0 | // comment to force a line break in the formatter
  (flags.optional && 8) | (flags.host && 1) | (flags.self && 2) | (flags.skipSelf && 4);
}
function convertToInjectOptions(flags) {
  return {
    optional: !!(flags & 8),
    host: !!(flags & 1),
    self: !!(flags & 2),
    skipSelf: !!(flags & 4)
  };
}
function injectArgs(types) {
  const args = [];
  for (let i = 0; i < types.length; i++) {
    const arg = resolveForwardRef(types[i]);
    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        throw new RuntimeError(900, ngDevMode && "Arguments array must have arguments.");
      }
      let type = void 0;
      let flags = 0;
      for (let j = 0; j < arg.length; j++) {
        const meta = arg[j];
        const flag = getInjectFlag(meta);
        if (typeof flag === "number") {
          if (flag === -1) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }
      args.push(\u0275\u0275inject(type, flags));
    } else {
      args.push(\u0275\u0275inject(arg));
    }
  }
  return args;
}
function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}
function getFactoryDef(type, throwNotFound) {
  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275fac' property.`);
  }
  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    let valueA = a[i];
    let valueB = b[i];
    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }
    if (valueB !== valueA) {
      return false;
    }
  }
  return true;
}
function flatten(list) {
  return list.flat(Number.POSITIVE_INFINITY);
}
function deepForEach(input2, fn2) {
  input2.forEach((value) => Array.isArray(value) ? deepForEach(value, fn2) : fn2(value));
}
function addToArray(arr, index, value) {
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}
function removeFromArray(arr, index) {
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}
function newArray(size, value) {
  const list = [];
  for (let i = 0; i < size; i++) {
    list.push(value);
  }
  return list;
}
function arraySplice(array, index, count) {
  const length = array.length - count;
  while (index < length) {
    array[index] = array[index + count];
    index++;
  }
  while (count--) {
    array.pop();
  }
}
function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, "Can't insert past array end.");
  let end = array.length;
  if (end == index) {
    array.push(value1, value2);
  } else if (end === 1) {
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);
    while (end > index) {
      const previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }
    array[index] = value1;
    array[index + 1] = value2;
  }
}
function keyValueArraySet(keyValueArray, key, value) {
  let index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }
  return index;
}
function keyValueArrayGet(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    return keyValueArray[index | 1];
  }
  return void 0;
}
function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, "Expecting an array");
  let start = 0;
  let end = array.length >> shift;
  while (end !== start) {
    const middle = start + (end - start >> 1);
    const current = array[middle << shift];
    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1;
    }
  }
  return ~(end << shift);
}
function getNgModuleDef(type) {
  return type[NG_MOD_DEF] || null;
}
function getNgModuleDefOrThrow(type) {
  const ngModuleDef = getNgModuleDef(type);
  if (!ngModuleDef) {
    throw new RuntimeError(915, (typeof ngDevMode === "undefined" || ngDevMode) && `Type ${stringify(type)} does not have '\u0275mod' property.`);
  }
  return ngModuleDef;
}
function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}
function getDirectiveDefOrThrow(type) {
  const def = getDirectiveDef(type);
  if (!def) {
    throw new RuntimeError(916, (typeof ngDevMode === "undefined" || ngDevMode) && `Type ${stringify(type)} does not have '\u0275dir' property.`);
  }
  return def;
}
function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}
function getPipeDef(type) {
  return type[NG_PIPE_DEF] || null;
}
function isStandalone(type) {
  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);
  return def !== null && def.standalone;
}
function makeEnvironmentProviders(providers) {
  return {
    \u0275providers: providers
  };
}
function provideEnvironmentInitializer(initializerFn) {
  return makeEnvironmentProviders([
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useValue: initializerFn
    }
  ]);
}
function importProvidersFrom(...sources) {
  return {
    \u0275providers: internalImportProvidersFrom(true, sources),
    \u0275fromNgModule: true
  };
}
function internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {
  const providersOut = [];
  const dedup = /* @__PURE__ */ new Set();
  let injectorTypesWithProviders;
  const collectProviders = (provider) => {
    providersOut.push(provider);
  };
  deepForEach(sources, (source) => {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && checkForStandaloneCmp) {
      const cmpDef = getComponentDef(source);
      if (cmpDef?.standalone) {
        throw new RuntimeError(800, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component "${stringifyForError(source)}"`);
      }
    }
    const internalSource = source;
    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {
      injectorTypesWithProviders ||= [];
      injectorTypesWithProviders.push(internalSource);
    }
  });
  if (injectorTypesWithProviders !== void 0) {
    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);
  }
  return providersOut;
}
function processInjectorTypesWithProviders(typesWithProviders, visitor) {
  for (let i = 0; i < typesWithProviders.length; i++) {
    const { ngModule, providers } = typesWithProviders[i];
    deepForEachProvider(providers, (provider) => {
      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);
      visitor(provider, ngModule);
    });
  }
}
function walkProviderTree(container, visitor, parents, dedup) {
  container = resolveForwardRef(container);
  if (!container)
    return false;
  let defType = null;
  let injDef = getInjectorDef(container);
  const cmpDef = !injDef && getComponentDef(container);
  if (!injDef && !cmpDef) {
    const ngModule = container.ngModule;
    injDef = getInjectorDef(ngModule);
    if (injDef) {
      defType = ngModule;
    } else {
      return false;
    }
  } else if (cmpDef && !cmpDef.standalone) {
    return false;
  } else {
    defType = container;
  }
  if (ngDevMode && parents.indexOf(defType) !== -1) {
    const defName = stringify(defType);
    const path = parents.map(stringify).concat(defName);
    throw cyclicDependencyErrorWithDetails(defName, path);
  }
  const isDuplicate = dedup.has(defType);
  if (cmpDef) {
    if (isDuplicate) {
      return false;
    }
    dedup.add(defType);
    if (cmpDef.dependencies) {
      const deps = typeof cmpDef.dependencies === "function" ? cmpDef.dependencies() : cmpDef.dependencies;
      for (const dep of deps) {
        walkProviderTree(dep, visitor, parents, dedup);
      }
    }
  } else if (injDef) {
    if (injDef.imports != null && !isDuplicate) {
      ngDevMode && parents.push(defType);
      dedup.add(defType);
      let importTypesWithProviders;
      try {
        deepForEach(injDef.imports, (imported) => {
          if (walkProviderTree(imported, visitor, parents, dedup)) {
            importTypesWithProviders ||= [];
            importTypesWithProviders.push(imported);
          }
        });
      } finally {
        ngDevMode && parents.pop();
      }
      if (importTypesWithProviders !== void 0) {
        processInjectorTypesWithProviders(importTypesWithProviders, visitor);
      }
    }
    if (!isDuplicate) {
      const factory = getFactoryDef(defType) || (() => new defType());
      visitor({ provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, defType);
      visitor({ provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, defType);
      visitor({ provide: ENVIRONMENT_INITIALIZER, useValue: () => \u0275\u0275inject(defType), multi: true }, defType);
    }
    const defProviders = injDef.providers;
    if (defProviders != null && !isDuplicate) {
      const injectorType = container;
      deepForEachProvider(defProviders, (provider) => {
        ngDevMode && validateProvider(provider, defProviders, injectorType);
        visitor(provider, injectorType);
      });
    }
  } else {
    return false;
  }
  return defType !== container && container.providers !== void 0;
}
function validateProvider(provider, providers, containerType) {
  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {
    return;
  }
  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
  if (!classRef) {
    throwInvalidProviderError(containerType, providers, provider);
  }
}
function deepForEachProvider(providers, fn2) {
  for (let provider of providers) {
    if (isEnvironmentProviders(provider)) {
      provider = provider.\u0275providers;
    }
    if (Array.isArray(provider)) {
      deepForEachProvider(provider, fn2);
    } else {
      fn2(provider);
    }
  }
}
function isValueProvider(value) {
  return value !== null && typeof value == "object" && USE_VALUE in value;
}
function isExistingProvider(value) {
  return !!(value && value.useExisting);
}
function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}
function isTypeProvider(value) {
  return typeof value === "function";
}
function isClassProvider(value) {
  return !!value.useClass;
}
function getNullInjector() {
  if (NULL_INJECTOR === void 0) {
    NULL_INJECTOR = new NullInjector();
  }
  return NULL_INJECTOR;
}
function injectableDefOrInjectorDefFactory(token) {
  const injectableDef = getInjectableDef(token);
  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
  if (factory !== null) {
    return factory;
  }
  if (token instanceof InjectionToken) {
    throw new RuntimeError(204, ngDevMode && `Token ${stringify(token)} is missing a \u0275prov definition.`);
  }
  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  }
  throw new RuntimeError(204, ngDevMode && "unreachable");
}
function getUndecoratedInjectableFactory(token) {
  const paramLength = token.length;
  if (paramLength > 0) {
    throw new RuntimeError(204, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, "?").join(", ")}).`);
  }
  const inheritedInjectableDef = getInheritedInjectableDef(token);
  if (inheritedInjectableDef !== null) {
    return () => inheritedInjectableDef.factory(token);
  } else {
    return () => new token();
  }
}
function providerToRecord(provider) {
  if (isValueProvider(provider)) {
    return makeRecord(void 0, provider.useValue);
  } else {
    const factory = providerToFactory(provider);
    return makeRecord(factory, NOT_YET);
  }
}
function providerToFactory(provider, ngModuleType, providers) {
  let factory = void 0;
  if (ngDevMode && isEnvironmentProviders(provider)) {
    throwInvalidProviderError(void 0, providers, provider);
  }
  if (isTypeProvider(provider)) {
    const unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = () => resolveForwardRef(provider.useValue);
    } else if (isFactoryProvider(provider)) {
      factory = () => provider.useFactory(...injectArgs(provider.deps || []));
    } else if (isExistingProvider(provider)) {
      factory = (_, flags) => \u0275\u0275inject(resolveForwardRef(provider.useExisting), flags !== void 0 && flags & 8 ? 8 : void 0);
    } else {
      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }
      if (hasDeps(provider)) {
        factory = () => new classRef(...injectArgs(provider.deps));
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }
  return factory;
}
function assertNotDestroyed(injector) {
  if (injector.destroyed) {
    throw new RuntimeError(205, ngDevMode && "Injector has already been destroyed.");
  }
}
function makeRecord(factory, value, multi = false) {
  return {
    factory,
    value,
    multi: multi ? [] : void 0
  };
}
function hasDeps(value) {
  return !!value.deps;
}
function hasOnDestroy(value) {
  return value !== null && typeof value === "object" && typeof value.ngOnDestroy === "function";
}
function couldBeInjectableType(value) {
  return typeof value === "function" || typeof value === "object" && value.ngMetadataName === "InjectionToken";
}
function forEachSingleProvider(providers, fn2) {
  for (const provider of providers) {
    if (Array.isArray(provider)) {
      forEachSingleProvider(provider, fn2);
    } else if (provider && isEnvironmentProviders(provider)) {
      forEachSingleProvider(provider.\u0275providers, fn2);
    } else {
      fn2(provider);
    }
  }
}
function runInInjectionContext(injector, fn2) {
  let internalInjector;
  if (injector instanceof R3Injector) {
    assertNotDestroyed(injector);
    internalInjector = injector;
  } else {
    internalInjector = new RetrievingInjector(injector);
  }
  let prevInjectorProfilerContext;
  if (ngDevMode) {
    prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });
  }
  const prevInjector = setCurrentInjector(internalInjector);
  const previousInjectImplementation = setInjectImplementation(void 0);
  try {
    return fn2();
  } finally {
    setCurrentInjector(prevInjector);
    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);
    setInjectImplementation(previousInjectImplementation);
  }
}
function isInInjectionContext() {
  return getInjectImplementation() !== void 0 || getCurrentInjector() != null;
}
function assertInInjectionContext(debugFn) {
  if (!isInInjectionContext()) {
    throw new RuntimeError(-203, ngDevMode && debugFn.name + "() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`");
  }
}
function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === "object";
}
function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}
function isContentQueryHost(tNode) {
  return (tNode.flags & 4) !== 0;
}
function isComponentHost(tNode) {
  return tNode.componentOffset > -1;
}
function isDirectiveHost(tNode) {
  return (tNode.flags & 1) === 1;
}
function isComponentDef(def) {
  return !!def.template;
}
function isRootView(target) {
  return (target[FLAGS] & 512) !== 0;
}
function isProjectionTNode(tNode) {
  return (tNode.type & 16) === 16;
}
function hasI18n(lView) {
  return (lView[FLAGS] & 32) === 32;
}
function isDestroyed(lView) {
  return (lView[FLAGS] & 256) === 256;
}
function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}
function assertTNodeCreationIndex(lView, index) {
  const adjustedIndex = index + HEADER_OFFSET;
  assertIndexInRange(lView, adjustedIndex);
  assertLessThan(adjustedIndex, lView[TVIEW].bindingStartIndex, "TNodes should be created before any bindings");
}
function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  const tData = tView.data;
  for (let i = HEADER_OFFSET; i < tData.length; i++) {
    if (tData[i] === tNode) {
      return;
    }
  }
  throwError2("This TNode does not belong to this TView.");
}
function assertTNode(tNode) {
  assertDefined(tNode, "TNode must be defined");
  if (!(tNode && typeof tNode === "object" && tNode.hasOwnProperty("directiveStylingLast"))) {
    throwError2("Not of type TNode, got: " + tNode);
  }
}
function assertTIcu(tIcu) {
  assertDefined(tIcu, "Expected TIcu to be defined");
  if (!(typeof tIcu.currentCaseLViewIndex === "number")) {
    throwError2("Object is not of TIcu type.");
  }
}
function assertComponentType(actual, msg = "Type passed in is not ComponentType, it does not have '\u0275cmp' property.") {
  if (!getComponentDef(actual)) {
    throwError2(msg);
  }
}
function assertNgModuleType(actual, msg = "Type passed in is not NgModuleType, it does not have '\u0275mod' property.") {
  if (!getNgModuleDef(actual)) {
    throwError2(msg);
  }
}
function assertHasParent(tNode) {
  assertDefined(tNode, "currentTNode should exist!");
  assertDefined(tNode.parent, "currentTNode should have a parent");
}
function assertLContainer(value) {
  assertDefined(value, "LContainer must be defined");
  assertEqual(isLContainer(value), true, "Expecting LContainer");
}
function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, "Expecting LView or undefined or null");
}
function assertLView(value) {
  assertDefined(value, "LView must be defined");
  assertEqual(isLView(value), true, "Expecting LView");
}
function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || "Should only be called in first create pass.");
}
function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, "Should only be called in first update pass.");
}
function assertDirectiveDef(obj) {
  if (obj.type === void 0 || obj.selectors == void 0 || obj.inputs === void 0) {
    throwError2(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
  }
}
function assertIndexInDeclRange(tView, index) {
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}
function assertIndexInExpandoRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}
function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError2(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
  }
}
function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], "Component views should exist.");
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, "Components with projection nodes (<ng-content>) must have projection slots defined.");
}
function assertParentView(lView, errMessage) {
  assertDefined(lView, "Component views should always have a parent view (component's host view)");
}
function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(
    lView,
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  );
  assertNumber(lView[injectorIndex + 0], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 1], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 2], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 3], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 4], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 5], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 6], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 7], "injectorIndex should point to a bloom filter");
  assertNumber(lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ], "injectorIndex should point to parent injector");
}
function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }
  return value;
}
function unwrapLView(value) {
  while (Array.isArray(value)) {
    if (typeof value[TYPE] === "object")
      return value;
    value = value[HOST];
  }
  return null;
}
function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Expected to be past HEADER_OFFSET");
  return unwrapRNode(lView[index]);
}
function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  const node = unwrapRNode(lView[tNode.index]);
  return node;
}
function getNativeByTNodeOrNull(tNode, lView) {
  const index = tNode === null ? -1 : tNode.index;
  if (index !== -1) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    const node = unwrapRNode(lView[index]);
    return node;
  }
  return null;
}
function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, "wrong index for TNode");
  ngDevMode && assertLessThan(index, tView.data.length, "wrong index for TNode");
  const tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}
function store(tView, lView, index, value) {
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }
  lView[index] = value;
}
function getComponentLViewByIndex(nodeIndex, hostView) {
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  const slotValue = hostView[nodeIndex];
  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
function isCreationMode(view) {
  return (view[FLAGS] & 4) === 4;
}
function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128) === 128;
}
function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}
function getConstant(consts, index) {
  if (index === null || index === void 0)
    return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
function markViewForRefresh(lView) {
  if (lView[FLAGS] & 1024) {
    return;
  }
  lView[FLAGS] |= 1024;
  if (viewAttachedToChangeDetector(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], "Declaration view should be defined if nesting level is greater than 0.");
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }
  return currentView;
}
function requiresRefreshOrTraversal(lView) {
  return !!(lView[FLAGS] & (1024 | 8192) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);
}
function updateAncestorTraversalFlagsOnAttach(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    8
    /* NotificationSource.ViewAttached */
  );
  if (lView[FLAGS] & 64) {
    lView[FLAGS] |= 1024;
  }
  if (requiresRefreshOrTraversal(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function markAncestorsForTraversal(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    0
    /* NotificationSource.MarkAncestorsForTraversal */
  );
  let parent = getLViewParent(lView);
  while (parent !== null) {
    if (parent[FLAGS] & 8192) {
      break;
    }
    parent[FLAGS] |= 8192;
    if (!viewAttachedToChangeDetector(parent)) {
      break;
    }
    parent = getLViewParent(parent);
  }
}
function storeLViewOnDestroy(lView, onDestroyCallback) {
  if (isDestroyed(lView)) {
    throw new RuntimeError(911, ngDevMode && "View has already been destroyed.");
  }
  if (lView[ON_DESTROY_HOOKS] === null) {
    lView[ON_DESTROY_HOOKS] = [];
  }
  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);
}
function removeLViewOnDestroy(lView, onDestroyCallback) {
  if (lView[ON_DESTROY_HOOKS] === null)
    return;
  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);
  if (destroyCBIdx !== -1) {
    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);
  }
}
function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  const parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
function getOrCreateLViewCleanup(view) {
  return view[CLEANUP] ??= [];
}
function getOrCreateTViewCleanup(tView) {
  return tView.cleanup ??= [];
}
function storeCleanupWithContext(tView, lView, context2, cleanupFn) {
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertDefined(context2, "Cleanup context is mandatory when registering framework-level destroy hooks");
  lCleanup.push(context2);
  if (tView.firstCreatePass) {
    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
  } else {
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }
  }
}
function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}
function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}
function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}
function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
function isInSkipHydrationBlock() {
  return instructionState.skipHydrationRootTNode !== null;
}
function isSkipHydrationRootTNode(tNode) {
  return instructionState.skipHydrationRootTNode === tNode;
}
function \u0275\u0275enableBindings() {
  instructionState.bindingsEnabled = true;
}
function enterSkipHydrationBlock(tNode) {
  instructionState.skipHydrationRootTNode = tNode;
}
function \u0275\u0275disableBindings() {
  instructionState.bindingsEnabled = false;
}
function leaveSkipHydrationBlock() {
  instructionState.skipHydrationRootTNode = null;
}
function getLView() {
  return instructionState.lFrame.lView;
}
function getTView() {
  return instructionState.lFrame.tView;
}
function \u0275\u0275restoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}
function \u0275\u0275resetView(value) {
  instructionState.lFrame.contextLView = null;
  return value;
}
function getCurrentTNode() {
  let currentTNode = getCurrentTNodePlaceholderOk();
  while (currentTNode !== null && currentTNode.type === 64) {
    currentTNode = currentTNode.parent;
  }
  return currentTNode;
}
function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}
function getCurrentParentTNode() {
  const lFrame = instructionState.lFrame;
  const currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}
function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  const lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}
function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}
function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}
function getContextLView() {
  const contextLView = instructionState.lFrame.contextLView;
  ngDevMode && assertDefined(contextLView, "contextLView must be defined.");
  return contextLView;
}
function isInCheckNoChangesMode() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode !== CheckNoChangesMode.Off;
}
function isExhaustiveCheckNoChanges() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;
}
function setIsInCheckNoChangesMode(mode) {
  !ngDevMode && throwError2("Must never be called in production mode");
  _checkNoChangesMode = mode;
}
function isRefreshingViews() {
  return _isRefreshingViews;
}
function setIsRefreshingViews(mode) {
  const prev = _isRefreshingViews;
  _isRefreshingViews = mode;
  return prev;
}
function getBindingRoot() {
  const lFrame = instructionState.lFrame;
  let index = lFrame.bindingRootIndex;
  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }
  return index;
}
function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}
function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}
function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}
function incrementBindingIndex(count) {
  const lFrame = instructionState.lFrame;
  const index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}
function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}
function setInI18nBlock(isInI18nBlock2) {
  instructionState.lFrame.inI18n = isInI18nBlock2;
}
function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  const lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
function getCurrentDirectiveDef(tData) {
  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}
function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}
function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
function getDeclarationTNode(lView) {
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  }
  if (tView.type === 1) {
    return lView[T_HOST];
  }
  return null;
}
function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);
  if (flags & 4) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    let parentTNode = tNode;
    let parentLView = lView;
    while (true) {
      ngDevMode && assertDefined(parentTNode, "Parent TNode should be defined");
      parentTNode = parentTNode.parent;
      if (parentTNode === null && !(flags & 1)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null)
          break;
        ngDevMode && assertDefined(parentLView, "Parent LView should be defined");
        parentLView = parentLView[DECLARATION_VIEW];
        if (parentTNode.type & (2 | 8)) {
          break;
        }
      } else {
        break;
      }
    }
    if (parentTNode === null) {
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }
  ngDevMode && assertTNodeForLView(tNode, lView);
  const lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], "????");
  ngDevMode && assertLViewOrUndefined(newView);
  const newLFrame = allocLFrame();
  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, "Expected clean LFrame");
    assertEqual(newLFrame.lView, null, "Expected clean LFrame");
    assertEqual(newLFrame.tView, null, "Expected clean LFrame");
    assertEqual(newLFrame.selectedIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.elementDepthCount, 0, "Expected clean LFrame");
    assertEqual(newLFrame.currentDirectiveIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentNamespace, null, "Expected clean LFrame");
    assertEqual(newLFrame.bindingRootIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentQueryIndex, 0, "Expected clean LFrame");
  }
  const tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
function allocLFrame() {
  const currentLFrame = instructionState.lFrame;
  const childLFrame = currentLFrame === null ? null : currentLFrame.child;
  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}
function createLFrame(parent) {
  const lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame);
  return lFrame;
}
function leaveViewLight() {
  const oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
function leaveView() {
  const oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}
function nextContextImpl(level) {
  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}
function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Index must be past HEADER_OFFSET (or -1).");
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, "Can't set index passed end of LView");
  instructionState.lFrame.selectedIndex = index;
}
function getSelectedTNode() {
  const lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
function \u0275\u0275namespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
function \u0275\u0275namespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
function \u0275\u0275namespaceHTML() {
  namespaceHTMLInternal();
}
function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}
function getNamespace() {
  return instructionState.lFrame.currentNamespace;
}
function wasLastNodeCreated() {
  return _wasLastNodeCreated;
}
function lastNodeWasCreated(flag) {
  _wasLastNodeCreated = flag;
}
function createInjector(defType, parent = null, additionalProviders = null, name) {
  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
  injector.resolveInjectorInitializers();
  return injector;
}
function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = /* @__PURE__ */ new Set()) {
  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];
  name = name || (typeof defType === "object" ? void 0 : stringify(defType));
  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);
}
function injectDestroyRef() {
  return new NodeInjectorDestroyRef(getLView());
}
function provideBrowserGlobalErrorListeners() {
  return makeEnvironmentProviders([
    provideEnvironmentInitializer(() => void inject2(globalErrorListeners))
  ]);
}
function isSignal(value) {
  return typeof value === "function" && value[SIGNAL] !== void 0;
}
function \u0275unwrapWritableSignal(value) {
  return null;
}
function signal(initialValue, options) {
  const [get2, set2, update] = createSignal(initialValue, options?.equal);
  const signalFn = get2;
  const node = signalFn[SIGNAL];
  signalFn.set = set2;
  signalFn.update = update;
  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);
  if (ngDevMode) {
    signalFn.toString = () => `[Signal: ${signalFn()}]`;
    node.debugName = options?.debugName;
  }
  return signalFn;
}
function signalAsReadonlyFn() {
  const node = this[SIGNAL];
  if (node.readonlyFn === void 0) {
    const readonlyFn = () => this();
    readonlyFn[SIGNAL] = node;
    node.readonlyFn = readonlyFn;
  }
  return node.readonlyFn;
}
function isWritableSignal(value) {
  return isSignal(value) && typeof value.set === "function";
}
function assertNotInReactiveContext(debugFn, extraContext) {
  if (getActiveConsumer() !== null) {
    throw new RuntimeError(-602, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ""}`);
  }
}
function injectViewContext() {
  return new ViewContext(getLView(), getCurrentTNode());
}
function noop2(...args) {
}
var ERROR_DETAILS_PAGE_BASE_URL, XSS_SECURITY_URL, RuntimeError, _global, __forward_ref__, defineInjectable, NG_PROV_DEF, NG_INJ_DEF, InjectionToken, _injectorProfilerContext, injectorProfilerCallbacks, NOOP_PROFILER_REMOVAL, NG_COMP_DEF, NG_DIR_DEF, NG_PIPE_DEF, NG_MOD_DEF, NG_FACTORY_DEF, NG_ELEMENT_ID, NG_ENV_ID, NG_RUNTIME_ERROR_CODE, NG_RUNTIME_ERROR_MESSAGE, NG_TOKEN_PATH, _injectImplementation, _THROW_IF_NOT_FOUND, THROW_IF_NOT_FOUND, DI_DECORATOR_FLAG, RetrievingInjector, EMPTY_OBJ, EMPTY_ARRAY, ENVIRONMENT_INITIALIZER, INJECTOR$1, INJECTOR_DEF_TYPES, NullInjector, USE_VALUE, INJECTOR_SCOPE, NOT_YET, CIRCULAR, NULL_INJECTOR, EnvironmentInjector, R3Injector, HOST, TVIEW, FLAGS, PARENT, NEXT, T_HOST, HYDRATION, CLEANUP, CONTEXT, INJECTOR, ENVIRONMENT, RENDERER, CHILD_HEAD, CHILD_TAIL, DECLARATION_VIEW, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, PREORDER_HOOK_FLAGS, QUERIES, ID, EMBEDDED_VIEW_INJECTOR, ON_DESTROY_HOOKS, EFFECTS_TO_SCHEDULE, EFFECTS, REACTIVE_TEMPLATE_CONSUMER, AFTER_RENDER_SEQUENCES_TO_ADD, HEADER_OFFSET, TYPE, DEHYDRATED_VIEWS, NATIVE, VIEW_REFS, MOVED_VIEWS, CONTAINER_HEADER_OFFSET, SVG_NAMESPACE, MATH_ML_NAMESPACE, instructionState, CheckNoChangesMode, _checkNoChangesMode, _isRefreshingViews, leaveDI, _wasLastNodeCreated, Injector, DOCUMENT, DestroyRef, NodeInjectorDestroyRef, ErrorHandler, INTERNAL_APPLICATION_ERROR_HANDLER, errorHandlerEnvironmentInitializer, globalErrorListeners, ChangeDetectionScheduler, ZONELESS_ENABLED, PROVIDED_ZONELESS, ZONELESS_SCHEDULER_DISABLED, SCHEDULE_IN_ROOT_ZONE, ViewContext, PendingTasksInternal, PendingTasks, EffectScheduler, ZoneAwareEffectScheduler;
var init_root_effect_scheduler = __esm({
  "node_modules/@angular/core/fesm2022/root_effect_scheduler.mjs"() {
    "use strict";
    init_not_found();
    init_signal();
    init_esm();
    init_signals();
    init_di();
    ERROR_DETAILS_PAGE_BASE_URL = "https://angular.dev/errors";
    XSS_SECURITY_URL = "https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss";
    RuntimeError = class extends Error {
      code;
      constructor(code, message) {
        super(formatRuntimeError(code, message));
        this.code = code;
      }
    };
    _global = globalThis;
    __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
    defineInjectable = \u0275\u0275defineInjectable;
    NG_PROV_DEF = getClosureSafeProperty({ \u0275prov: getClosureSafeProperty });
    NG_INJ_DEF = getClosureSafeProperty({ \u0275inj: getClosureSafeProperty });
    InjectionToken = class {
      _desc;
      /** @internal */
      ngMetadataName = "InjectionToken";
      \u0275prov;
      /**
       * @param _desc   Description for the token,
       *                used only for debugging purposes,
       *                it should but does not need to be unique
       * @param options Options for the token's usage, as described above
       */
      constructor(_desc, options) {
        this._desc = _desc;
        this.\u0275prov = void 0;
        if (typeof options == "number") {
          (typeof ngDevMode === "undefined" || ngDevMode) && assertLessThan(options, 0, "Only negative numbers are supported here");
          this.__NG_ELEMENT_ID__ = options;
        } else if (options !== void 0) {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: this,
            providedIn: options.providedIn || "root",
            factory: options.factory
          });
        }
      }
      /**
       * @internal
       */
      get multi() {
        return this;
      }
      toString() {
        return `InjectionToken ${this._desc}`;
      }
    };
    injectorProfilerCallbacks = [];
    NOOP_PROFILER_REMOVAL = () => {
    };
    NG_COMP_DEF = getClosureSafeProperty({ \u0275cmp: getClosureSafeProperty });
    NG_DIR_DEF = getClosureSafeProperty({ \u0275dir: getClosureSafeProperty });
    NG_PIPE_DEF = getClosureSafeProperty({ \u0275pipe: getClosureSafeProperty });
    NG_MOD_DEF = getClosureSafeProperty({ \u0275mod: getClosureSafeProperty });
    NG_FACTORY_DEF = getClosureSafeProperty({ \u0275fac: getClosureSafeProperty });
    NG_ELEMENT_ID = getClosureSafeProperty({
      __NG_ELEMENT_ID__: getClosureSafeProperty
    });
    NG_ENV_ID = getClosureSafeProperty({ __NG_ENV_ID__: getClosureSafeProperty });
    NG_RUNTIME_ERROR_CODE = getClosureSafeProperty({ "ngErrorCode": getClosureSafeProperty });
    NG_RUNTIME_ERROR_MESSAGE = getClosureSafeProperty({ "ngErrorMessage": getClosureSafeProperty });
    NG_TOKEN_PATH = getClosureSafeProperty({ "ngTokenPath": getClosureSafeProperty });
    _THROW_IF_NOT_FOUND = {};
    THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    DI_DECORATOR_FLAG = "__NG_DI_FLAG__";
    RetrievingInjector = class {
      injector;
      constructor(injector) {
        this.injector = injector;
      }
      retrieve(token, options) {
        const flags = convertToBitFlags(options) || 0;
        try {
          return this.injector.get(
            token,
            // When a dependency is requested with an optional flag, DI returns null as the default value.
            flags & 8 ? null : THROW_IF_NOT_FOUND,
            flags
          );
        } catch (e) {
          if (isNotFound(e)) {
            return e;
          }
          throw e;
        }
      }
    };
    EMPTY_OBJ = {};
    EMPTY_ARRAY = [];
    if ((typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode()) {
      Object.freeze(EMPTY_OBJ);
      Object.freeze(EMPTY_ARRAY);
    }
    ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? "ENVIRONMENT_INITIALIZER" : "");
    INJECTOR$1 = new InjectionToken(
      ngDevMode ? "INJECTOR" : "",
      // Disable tslint because this is const enum which gets inlined not top level prop access.
      // tslint:disable-next-line: no-toplevel-property-access
      -1
      /* InjectorMarkers.Injector */
    );
    INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? "INJECTOR_DEF_TYPES" : "");
    NullInjector = class {
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
        if (notFoundValue === THROW_IF_NOT_FOUND) {
          const message = ngDevMode ? `No provider found for \`${stringify(token)}\`.` : "";
          const error = createRuntimeError(
            message,
            -201
            /* RuntimeErrorCode.PROVIDER_NOT_FOUND */
          );
          error.name = "\u0275NotFound";
          throw error;
        }
        return notFoundValue;
      }
    };
    USE_VALUE = getClosureSafeProperty({
      provide: String,
      useValue: getClosureSafeProperty
    });
    INJECTOR_SCOPE = new InjectionToken(ngDevMode ? "Set Injector scope." : "");
    NOT_YET = {};
    CIRCULAR = {};
    NULL_INJECTOR = void 0;
    EnvironmentInjector = class {
    };
    R3Injector = class extends EnvironmentInjector {
      parent;
      source;
      scopes;
      /**
       * Map of tokens to records which contain the instances of those tokens.
       * - `null` value implies that we don't have the record. Used by tree-shakable injectors
       * to prevent further searches.
       */
      records = /* @__PURE__ */ new Map();
      /**
       * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
       */
      _ngOnDestroyHooks = /* @__PURE__ */ new Set();
      _onDestroyHooks = [];
      /**
       * Flag indicating that this injector was previously destroyed.
       */
      get destroyed() {
        return this._destroyed;
      }
      _destroyed = false;
      injectorDefTypes;
      constructor(providers, parent, source, scopes) {
        super();
        this.parent = parent;
        this.source = source;
        this.scopes = scopes;
        forEachSingleProvider(providers, (provider) => this.processProvider(provider));
        this.records.set(INJECTOR$1, makeRecord(void 0, this));
        if (scopes.has("environment")) {
          this.records.set(EnvironmentInjector, makeRecord(void 0, this));
        }
        const record = this.records.get(INJECTOR_SCOPE);
        if (record != null && typeof record.value === "string") {
          this.scopes.add(record.value);
        }
        this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, { self: true }));
      }
      retrieve(token, options) {
        const flags = convertToBitFlags(options) || 0;
        try {
          return this.get(
            token,
            // When a dependency is requested with an optional flag, DI returns null as the default value.
            THROW_IF_NOT_FOUND,
            flags
          );
        } catch (e) {
          if (isNotFound(e)) {
            return e;
          }
          throw e;
        }
      }
      /**
       * Destroy the injector and release references to every instance or provider associated with it.
       *
       * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
       * hook was found.
       */
      destroy() {
        assertNotDestroyed(this);
        this._destroyed = true;
        const prevConsumer = setActiveConsumer(null);
        try {
          for (const service of this._ngOnDestroyHooks) {
            service.ngOnDestroy();
          }
          const onDestroyHooks = this._onDestroyHooks;
          this._onDestroyHooks = [];
          for (const hook of onDestroyHooks) {
            hook();
          }
        } finally {
          this.records.clear();
          this._ngOnDestroyHooks.clear();
          this.injectorDefTypes.clear();
          setActiveConsumer(prevConsumer);
        }
      }
      onDestroy(callback) {
        assertNotDestroyed(this);
        this._onDestroyHooks.push(callback);
        return () => this.removeOnDestroy(callback);
      }
      runInContext(fn2) {
        assertNotDestroyed(this);
        const previousInjector = setCurrentInjector(this);
        const previousInjectImplementation = setInjectImplementation(void 0);
        let prevInjectContext;
        if (ngDevMode) {
          prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
        }
        try {
          return fn2();
        } finally {
          setCurrentInjector(previousInjector);
          setInjectImplementation(previousInjectImplementation);
          ngDevMode && setInjectorProfilerContext(prevInjectContext);
        }
      }
      get(token, notFoundValue = THROW_IF_NOT_FOUND, options) {
        assertNotDestroyed(this);
        if (token.hasOwnProperty(NG_ENV_ID)) {
          return token[NG_ENV_ID](this);
        }
        const flags = convertToBitFlags(options);
        let prevInjectContext;
        if (ngDevMode) {
          prevInjectContext = setInjectorProfilerContext({ injector: this, token });
        }
        const previousInjector = setCurrentInjector(this);
        const previousInjectImplementation = setInjectImplementation(void 0);
        try {
          if (!(flags & 4)) {
            let record = this.records.get(token);
            if (record === void 0) {
              const def = couldBeInjectableType(token) && getInjectableDef(token);
              if (def && this.injectableDefInScope(def)) {
                if (ngDevMode) {
                  runInInjectorProfilerContext(this, token, () => {
                    emitProviderConfiguredEvent(token);
                  });
                }
                record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
              } else {
                record = null;
              }
              this.records.set(token, record);
            }
            if (record != null) {
              return this.hydrate(token, record, flags);
            }
          }
          const nextInjector = !(flags & 2) ? this.parent : getNullInjector();
          notFoundValue = flags & 8 && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
          return nextInjector.get(token, notFoundValue);
        } catch (error) {
          const errorCode = getRuntimeErrorCode(error);
          if (errorCode === -200 || errorCode === -201) {
            if (!ngDevMode) {
              throw new RuntimeError(errorCode, null);
            }
            prependTokenToDependencyPath(error, token);
            if (previousInjector) {
              throw error;
            } else {
              throw augmentRuntimeError(error, this.source);
            }
          } else {
            throw error;
          }
        } finally {
          setInjectImplementation(previousInjectImplementation);
          setCurrentInjector(previousInjector);
          ngDevMode && setInjectorProfilerContext(prevInjectContext);
        }
      }
      /** @internal */
      resolveInjectorInitializers() {
        const prevConsumer = setActiveConsumer(null);
        const previousInjector = setCurrentInjector(this);
        const previousInjectImplementation = setInjectImplementation(void 0);
        let prevInjectContext;
        if (ngDevMode) {
          prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
        }
        try {
          const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, { self: true });
          if (ngDevMode && !Array.isArray(initializers)) {
            throw new RuntimeError(-209, `Unexpected type of the \`ENVIRONMENT_INITIALIZER\` token value (expected an array, but got ${typeof initializers}). Please check that the \`ENVIRONMENT_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
          }
          for (const initializer of initializers) {
            initializer();
          }
        } finally {
          setCurrentInjector(previousInjector);
          setInjectImplementation(previousInjectImplementation);
          ngDevMode && setInjectorProfilerContext(prevInjectContext);
          setActiveConsumer(prevConsumer);
        }
      }
      toString() {
        const tokens = [];
        const records = this.records;
        for (const token of records.keys()) {
          tokens.push(stringify(token));
        }
        return `R3Injector[${tokens.join(", ")}]`;
      }
      /**
       * Process a `SingleProvider` and add it.
       */
      processProvider(provider) {
        provider = resolveForwardRef(provider);
        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
        const record = providerToRecord(provider);
        if (ngDevMode) {
          runInInjectorProfilerContext(this, token, () => {
            if (isValueProvider(provider)) {
              emitInjectorToCreateInstanceEvent(token);
              emitInstanceCreatedByInjectorEvent(provider.useValue);
            }
            emitProviderConfiguredEvent(provider);
          });
        }
        if (!isTypeProvider(provider) && provider.multi === true) {
          let multiRecord = this.records.get(token);
          if (multiRecord) {
            if (ngDevMode && multiRecord.multi === void 0) {
              throwMixedMultiProviderError();
            }
          } else {
            multiRecord = makeRecord(void 0, NOT_YET, true);
            multiRecord.factory = () => injectArgs(multiRecord.multi);
            this.records.set(token, multiRecord);
          }
          token = provider;
          multiRecord.multi.push(provider);
        } else {
          if (ngDevMode) {
            const existing = this.records.get(token);
            if (existing && existing.multi !== void 0) {
              throwMixedMultiProviderError();
            }
          }
        }
        this.records.set(token, record);
      }
      hydrate(token, record, flags) {
        const prevConsumer = setActiveConsumer(null);
        try {
          if (record.value === CIRCULAR) {
            throw cyclicDependencyError(stringify(token));
          } else if (record.value === NOT_YET) {
            record.value = CIRCULAR;
            if (ngDevMode) {
              runInInjectorProfilerContext(this, token, () => {
                emitInjectorToCreateInstanceEvent(token);
                record.value = record.factory(void 0, flags);
                emitInstanceCreatedByInjectorEvent(record.value);
              });
            } else {
              record.value = record.factory(void 0, flags);
            }
          }
          if (typeof record.value === "object" && record.value && hasOnDestroy(record.value)) {
            this._ngOnDestroyHooks.add(record.value);
          }
          return record.value;
        } finally {
          setActiveConsumer(prevConsumer);
        }
      }
      injectableDefInScope(def) {
        if (!def.providedIn) {
          return false;
        }
        const providedIn = resolveForwardRef(def.providedIn);
        if (typeof providedIn === "string") {
          return providedIn === "any" || this.scopes.has(providedIn);
        } else {
          return this.injectorDefTypes.has(providedIn);
        }
      }
      removeOnDestroy(callback) {
        const destroyCBIdx = this._onDestroyHooks.indexOf(callback);
        if (destroyCBIdx !== -1) {
          this._onDestroyHooks.splice(destroyCBIdx, 1);
        }
      }
    };
    HOST = 0;
    TVIEW = 1;
    FLAGS = 2;
    PARENT = 3;
    NEXT = 4;
    T_HOST = 5;
    HYDRATION = 6;
    CLEANUP = 7;
    CONTEXT = 8;
    INJECTOR = 9;
    ENVIRONMENT = 10;
    RENDERER = 11;
    CHILD_HEAD = 12;
    CHILD_TAIL = 13;
    DECLARATION_VIEW = 14;
    DECLARATION_COMPONENT_VIEW = 15;
    DECLARATION_LCONTAINER = 16;
    PREORDER_HOOK_FLAGS = 17;
    QUERIES = 18;
    ID = 19;
    EMBEDDED_VIEW_INJECTOR = 20;
    ON_DESTROY_HOOKS = 21;
    EFFECTS_TO_SCHEDULE = 22;
    EFFECTS = 23;
    REACTIVE_TEMPLATE_CONSUMER = 24;
    AFTER_RENDER_SEQUENCES_TO_ADD = 25;
    HEADER_OFFSET = 26;
    TYPE = 1;
    DEHYDRATED_VIEWS = 6;
    NATIVE = 7;
    VIEW_REFS = 8;
    MOVED_VIEWS = 9;
    CONTAINER_HEADER_OFFSET = 10;
    SVG_NAMESPACE = "svg";
    MATH_ML_NAMESPACE = "math";
    instructionState = {
      lFrame: createLFrame(null),
      bindingsEnabled: true,
      skipHydrationRootTNode: null
    };
    (function(CheckNoChangesMode2) {
      CheckNoChangesMode2[CheckNoChangesMode2["Off"] = 0] = "Off";
      CheckNoChangesMode2[CheckNoChangesMode2["Exhaustive"] = 1] = "Exhaustive";
      CheckNoChangesMode2[CheckNoChangesMode2["OnlyDirtyViews"] = 2] = "OnlyDirtyViews";
    })(CheckNoChangesMode || (CheckNoChangesMode = {}));
    _checkNoChangesMode = 0;
    _isRefreshingViews = false;
    leaveDI = leaveViewLight;
    _wasLastNodeCreated = true;
    Injector = class _Injector {
      static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
      static NULL = new NullInjector();
      static create(options, parent) {
        if (Array.isArray(options)) {
          return createInjector({ name: "" }, parent, options, "");
        } else {
          const name = options.name ?? "";
          return createInjector({ name }, options.parent, options.providers, name);
        }
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _Injector,
          providedIn: "any",
          factory: () => \u0275\u0275inject(INJECTOR$1)
        })
      );
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = -1;
    };
    DOCUMENT = new InjectionToken(ngDevMode ? "DocumentToken" : "");
    DestroyRef = class {
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectDestroyRef;
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ENV_ID__ = (injector) => injector;
    };
    NodeInjectorDestroyRef = class extends DestroyRef {
      _lView;
      constructor(_lView) {
        super();
        this._lView = _lView;
      }
      get destroyed() {
        return isDestroyed(this._lView);
      }
      onDestroy(callback) {
        const lView = this._lView;
        storeLViewOnDestroy(lView, callback);
        return () => removeLViewOnDestroy(lView, callback);
      }
    };
    ErrorHandler = class {
      /**
       * @internal
       */
      _console = console;
      handleError(error) {
        this._console.error("ERROR", error);
      }
    };
    INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "internal error handler" : "", {
      providedIn: "root",
      factory: () => {
        const injector = inject2(EnvironmentInjector);
        let userErrorHandler;
        return (e) => {
          if (injector.destroyed && !userErrorHandler) {
            setTimeout(() => {
              throw e;
            });
          } else {
            userErrorHandler ??= injector.get(ErrorHandler);
            userErrorHandler.handleError(e);
          }
        };
      }
    });
    errorHandlerEnvironmentInitializer = {
      provide: ENVIRONMENT_INITIALIZER,
      useValue: () => void inject2(ErrorHandler),
      multi: true
    };
    globalErrorListeners = new InjectionToken(ngDevMode ? "GlobalErrorListeners" : "", {
      providedIn: "root",
      factory: () => {
        if (false) {
          return;
        }
        const window2 = inject2(DOCUMENT).defaultView;
        if (!window2) {
          return;
        }
        const errorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
        const rejectionListener = (e) => {
          errorHandler(e.reason);
          e.preventDefault();
        };
        const errorListener = (e) => {
          if (e.error) {
            errorHandler(e.error);
          } else {
            errorHandler(new Error(ngDevMode ? `An ErrorEvent with no error occurred. See Error.cause for details: ${e.message}` : e.message, { cause: e }));
          }
          e.preventDefault();
        };
        const setupEventListeners = () => {
          window2.addEventListener("unhandledrejection", rejectionListener);
          window2.addEventListener("error", errorListener);
        };
        if (typeof Zone !== "undefined") {
          Zone.root.run(setupEventListeners);
        } else {
          setupEventListeners();
        }
        inject2(DestroyRef).onDestroy(() => {
          window2.removeEventListener("error", errorListener);
          window2.removeEventListener("unhandledrejection", rejectionListener);
        });
      }
    });
    ChangeDetectionScheduler = class {
    };
    ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless enabled" : "", { providedIn: "root", factory: () => false });
    PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless provided" : "", { providedIn: "root", factory: () => false });
    ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "scheduler disabled" : "");
    SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "run changes outside zone in root" : "");
    ViewContext = class {
      view;
      node;
      constructor(view, node) {
        this.view = view;
        this.node = node;
      }
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectViewContext;
    };
    PendingTasksInternal = class _PendingTasksInternal {
      taskId = 0;
      pendingTasks = /* @__PURE__ */ new Set();
      destroyed = false;
      pendingTask = new BehaviorSubject(false);
      get hasPendingTasks() {
        return this.destroyed ? false : this.pendingTask.value;
      }
      /**
       * In case the service is about to be destroyed, return a self-completing observable.
       * Otherwise, return the observable that emits the current state of pending tasks.
       */
      get hasPendingTasksObservable() {
        if (this.destroyed) {
          return new Observable((subscriber) => {
            subscriber.next(false);
            subscriber.complete();
          });
        }
        return this.pendingTask;
      }
      add() {
        if (!this.hasPendingTasks && !this.destroyed) {
          this.pendingTask.next(true);
        }
        const taskId = this.taskId++;
        this.pendingTasks.add(taskId);
        return taskId;
      }
      has(taskId) {
        return this.pendingTasks.has(taskId);
      }
      remove(taskId) {
        this.pendingTasks.delete(taskId);
        if (this.pendingTasks.size === 0 && this.hasPendingTasks) {
          this.pendingTask.next(false);
        }
      }
      ngOnDestroy() {
        this.pendingTasks.clear();
        if (this.hasPendingTasks) {
          this.pendingTask.next(false);
        }
        this.destroyed = true;
        this.pendingTask.unsubscribe();
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _PendingTasksInternal,
          providedIn: "root",
          factory: () => new _PendingTasksInternal()
        })
      );
    };
    PendingTasks = class _PendingTasks {
      internalPendingTasks = inject2(PendingTasksInternal);
      scheduler = inject2(ChangeDetectionScheduler);
      errorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
      /**
       * Adds a new task that should block application's stability.
       * @returns A cleanup function that removes a task when called.
       */
      add() {
        const taskId = this.internalPendingTasks.add();
        return () => {
          if (!this.internalPendingTasks.has(taskId)) {
            return;
          }
          this.scheduler.notify(
            11
            /* NotificationSource.PendingTaskRemoved */
          );
          this.internalPendingTasks.remove(taskId);
        };
      }
      /**
       * Runs an asynchronous function and blocks the application's stability until the function completes.
       *
       * ```ts
       * pendingTasks.run(async () => {
       *   const userData = await fetch('/api/user');
       *   this.userData.set(userData);
       * });
       * ```
       *
       * @param fn The asynchronous function to execute
       * @developerPreview 19.0
       */
      run(fn2) {
        const removeTask = this.add();
        fn2().catch(this.errorHandler).finally(removeTask);
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _PendingTasks,
          providedIn: "root",
          factory: () => new _PendingTasks()
        })
      );
    };
    EffectScheduler = class _EffectScheduler {
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _EffectScheduler,
          providedIn: "root",
          factory: () => new ZoneAwareEffectScheduler()
        })
      );
    };
    ZoneAwareEffectScheduler = class {
      dirtyEffectCount = 0;
      queues = /* @__PURE__ */ new Map();
      add(handle) {
        this.enqueue(handle);
        this.schedule(handle);
      }
      schedule(handle) {
        if (!handle.dirty) {
          return;
        }
        this.dirtyEffectCount++;
      }
      remove(handle) {
        const zone = handle.zone;
        const queue = this.queues.get(zone);
        if (!queue.has(handle)) {
          return;
        }
        queue.delete(handle);
        if (handle.dirty) {
          this.dirtyEffectCount--;
        }
      }
      enqueue(handle) {
        const zone = handle.zone;
        if (!this.queues.has(zone)) {
          this.queues.set(zone, /* @__PURE__ */ new Set());
        }
        const queue = this.queues.get(zone);
        if (queue.has(handle)) {
          return;
        }
        queue.add(handle);
      }
      /**
       * Run all scheduled effects.
       *
       * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no
       * ordering guarantee between effects scheduled in different zones.
       */
      flush() {
        while (this.dirtyEffectCount > 0) {
          let ranOneEffect = false;
          for (const [zone, queue] of this.queues) {
            if (zone === null) {
              ranOneEffect ||= this.flushQueue(queue);
            } else {
              ranOneEffect ||= zone.run(() => this.flushQueue(queue));
            }
          }
          if (!ranOneEffect) {
            this.dirtyEffectCount = 0;
          }
        }
      }
      flushQueue(queue) {
        let ranOneEffect = false;
        for (const handle of queue) {
          if (!handle.dirty) {
            continue;
          }
          this.dirtyEffectCount--;
          ranOneEffect = true;
          handle.run();
        }
        return ranOneEffect;
      }
    };
  }
});

// node_modules/rxjs/dist/esm/operators/index.js
var init_operators = __esm({
  "node_modules/rxjs/dist/esm/operators/index.js"() {
    "use strict";
    init_auditTime();
    init_catchError();
    init_concatMap();
    init_debounceTime();
    init_defaultIfEmpty();
    init_distinctUntilChanged();
    init_filter();
    init_finalize();
    init_first();
    init_last();
    init_map();
    init_mergeMap();
    init_pairwise();
    init_refCount();
    init_scan();
    init_share();
    init_shareReplay();
    init_skip();
    init_startWith();
    init_switchMap();
    init_take();
    init_takeLast();
    init_takeUntil();
    init_takeWhile();
    init_tap();
  }
});

// node_modules/@angular/core/fesm2022/attribute.mjs
var Attribute;
var init_attribute = __esm({
  "node_modules/@angular/core/fesm2022/attribute.mjs"() {
    "use strict";
    Attribute = {
      /**
       * The jsaction attribute defines a mapping of a DOM event to a
       * generic event (aka jsaction), to which the actual event handlers
       * that implement the behavior of the application are bound. The
       * value is a semicolon separated list of colon separated pairs of
       * an optional DOM event name and a jsaction name. If the optional
       * DOM event name is omitted, 'click' is assumed. The jsaction names
       * are dot separated pairs of a namespace and a simple jsaction
       * name.
       *
       * See grammar in README.md for expected syntax in the attribute value.
       */
      JSACTION: "jsaction"
    };
  }
});

// node_modules/@angular/core/fesm2022/debug_node.mjs
function noSideEffects(fn2) {
  return { toString: fn2 }.toString();
}
function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function DecoratorFactory(...args) {
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, ...args);
        return this;
      }
      const annotationInstance = new DecoratorFactory(...args);
      return function TypeDecorator(cls) {
        if (typeFn)
          typeFn(cls, ...args);
        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
        annotations.push(annotationInstance);
        return cls;
      };
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}
function makeMetadataCtor(props) {
  return function ctor(...args) {
    if (props) {
      const values = props(...args);
      for (const propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}
function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory(...args) {
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const annotationInstance = new ParamDecoratorFactory(...args);
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }
    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}
function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory(...args) {
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const decoratorInstance = new PropDecoratorFactory(...args);
      function PropDecorator(target, name2) {
        if (target === void 0) {
          throw new Error("Standard Angular field decorators are not supported in JIT mode.");
        }
        const constructor = target.constructor;
        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
        meta[name2] = meta.hasOwnProperty(name2) && meta[name2] || [];
        meta[name2].unshift(decoratorInstance);
      }
      return PropDecorator;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
function getCompilerFacade(request) {
  const globalNg = _global["ng"];
  if (globalNg && globalNg.\u0275compilerFacade) {
    return globalNg.\u0275compilerFacade;
  }
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.error(`JIT compilation failed for ${request.kind}`, request.type);
    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.

`;
    if (request.usage === 1) {
      message += `The ${request.kind} is part of a library that has been partially compiled.
`;
      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.
`;
      message += "\n";
      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.
`;
    } else {
      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.
`;
    }
    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',
`;
    message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
    throw new Error(message);
  } else {
    throw new Error("JIT compiler unavailable");
  }
}
function isType(v) {
  return typeof v === "function";
}
function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }
  return decoratorInvocations.map((decoratorInvocation) => {
    const decoratorType = decoratorInvocation.type;
    const annotationCls = decoratorType.annotationCls;
    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return new annotationCls(...annotationArgs);
  });
}
function getParentCtor(ctor) {
  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  const parentCtor = parentProto ? parentProto.constructor : null;
  return parentCtor || Object;
}
function applyValueToInputField(instance, inputSignalNode, privateName, value) {
  if (inputSignalNode !== null) {
    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);
  } else {
    instance[privateName] = value;
  }
}
function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }
  return rememberChangeHistoryAndInvokeOnChangesHook;
}
function rememberChangeHistoryAndInvokeOnChangesHook() {
  const simpleChangesStore = getSimpleChangesStore(this);
  const current = simpleChangesStore?.current;
  if (current) {
    const previous = simpleChangesStore.previous;
    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      for (let key in current) {
        previous[key] = current[key];
      }
    }
    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}
function ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {
  const declaredName = this.declaredInputs[publicName];
  ngDevMode && assertString(declaredName, "Name of input in ngOnChanges has to be a string");
  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });
  const current = simpleChangesStore.current || (simpleChangesStore.current = {});
  const previous = simpleChangesStore.previous;
  const previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  applyValueToInputField(instance, inputSignalNode, privateName, value);
}
function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}
function setSimpleChangesStore(instance, store2) {
  return instance[SIMPLE_CHANGES_STORE] = store2;
}
function removeProfiler2(profiler2) {
  const profilerIdx = profilerCallbacks.indexOf(profiler2);
  if (profilerIdx !== -1) {
    profilerCallbacks.splice(profilerIdx, 1);
  }
}
function setProfiler(profiler2) {
  if (profiler2 !== null) {
    if (!profilerCallbacks.includes(profiler2)) {
      profilerCallbacks.push(profiler2);
    }
    return () => removeProfiler2(profiler2);
  } else {
    profilerCallbacks.length = 0;
    return NOOP_PROFILER_REMOVAL2;
  }
}
function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;
  if (ngOnChanges) {
    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);
  }
  if (ngOnInit) {
    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);
  }
  if (ngDoCheck) {
    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);
  }
}
function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    const directiveDef = tView.data[i];
    ngDevMode && assertDefined(directiveDef, "Expecting DirectiveDef");
    const lifecycleHooks = directiveDef.type.prototype;
    const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;
    if (ngAfterContentInit) {
      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);
    }
    if (ngAfterContentChecked) {
      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);
    }
    if (ngAfterViewInit) {
      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);
    }
    if (ngAfterViewChecked) {
      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);
    }
    if (ngOnDestroy != null) {
      (tView.destroyHooks ??= []).push(i, ngOnDestroy);
    }
  }
}
function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3, nodeIndex);
}
function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init pre-order hooks should not be called more than once");
  if ((lView[FLAGS] & 3) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}
function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init hooks phase should not be incremented after all init hooks have been run.");
  let flags = lView[FLAGS];
  if ((flags & 3) === initPhase) {
    flags &= 16383;
    flags += 1;
    lView[FLAGS] = flags;
  }
}
function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, "Hooks should never be run when in check no changes mode.");
  const startIndex = currentNodeIndex !== void 0 ? currentView[PREORDER_HOOK_FLAGS] & 65535 : 0;
  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  const max = arr.length - 1;
  let lastNodeIndexFound = 0;
  for (let i = startIndex; i < max; i++) {
    const hook = arr[i + 1];
    if (typeof hook === "number") {
      lastNodeIndexFound = arr[i];
      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      const isInitHook = arr[i] < 0;
      if (isInitHook) {
        currentView[PREORDER_HOOK_FLAGS] += 65536;
      }
      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760) + i + 2;
      }
      i++;
    }
  }
}
function callHookInternal(directive, hook) {
  profiler(4, directive, hook);
  const prevConsumer = setActiveConsumer(null);
  try {
    hook.call(directive);
  } finally {
    setActiveConsumer(prevConsumer);
    profiler(5, directive, hook);
  }
}
function callHook(currentView, initPhase, arr, i) {
  const isInitHook = arr[i] < 0;
  const hook = arr[i + 1];
  const directiveIndex = isInitHook ? -arr[i] : arr[i];
  const directive = currentView[directiveIndex];
  if (isInitHook) {
    const indexWithintInitPhase = currentView[FLAGS] >> 14;
    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 && (currentView[FLAGS] & 3) === initPhase) {
      currentView[FLAGS] += 16384;
      callHookInternal(directive, hook);
    }
  } else {
    callHookInternal(directive, hook);
  }
}
function toTNodeTypeAsString(tNodeType) {
  let text2 = "";
  tNodeType & 1 && (text2 += "|Text");
  tNodeType & 2 && (text2 += "|Element");
  tNodeType & 4 && (text2 += "|Container");
  tNodeType & 8 && (text2 += "|ElementContainer");
  tNodeType & 16 && (text2 += "|Projection");
  tNodeType & 32 && (text2 += "|IcuContainer");
  tNodeType & 64 && (text2 += "|Placeholder");
  tNodeType & 128 && (text2 += "|LetDeclaration");
  return text2.length > 0 ? text2.substring(1) : text2;
}
function isTNodeShape(value) {
  return value != null && typeof value === "object" && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === "number" || Array.isArray(value.insertBeforeIndex));
}
function isLetDeclaration(tNode) {
  return !!(tNode.type & 128);
}
function hasClassInput(tNode) {
  return (tNode.flags & 8) !== 0;
}
function hasStyleInput(tNode) {
  return (tNode.flags & 16) !== 0;
}
function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, "should be called with a TNode");
  if ((tNode.type & expectedTypes) === 0) {
    throwError2(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
  }
}
function assertPureTNodeType(type) {
  if (!(type === 2 || type === 1 || type === 4 || type === 8 || type === 32 || type === 16 || type === 64 || type === 128)) {
    throwError2(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
  }
}
function setUpAttributes(renderer, native, attrs) {
  let i = 0;
  while (i < attrs.length) {
    const value = attrs[i];
    if (typeof value === "number") {
      if (value !== 0) {
        break;
      }
      i++;
      const namespaceURI = attrs[i++];
      const attrName = attrs[i++];
      const attrVal = attrs[i++];
      renderer.setAttribute(native, attrName, attrVal, namespaceURI);
    } else {
      const attrName = value;
      const attrVal = attrs[++i];
      if (isAnimationProp(attrName)) {
        renderer.setProperty(native, attrName, attrVal);
      } else {
        renderer.setAttribute(native, attrName, attrVal);
      }
      i++;
    }
  }
  return i;
}
function isNameOnlyAttributeMarker(marker) {
  return marker === 3 || marker === 4 || marker === 6;
}
function isAnimationProp(name) {
  return name.charCodeAt(0) === 64;
}
function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) ;
  else if (dst === null || dst.length === 0) {
    dst = src.slice();
  } else {
    let srcMarker = -1;
    for (let i = 0; i < src.length; i++) {
      const item = src[i];
      if (typeof item === "number") {
        srcMarker = item;
      } else {
        if (srcMarker === 0) ;
        else if (srcMarker === -1 || srcMarker === 2) {
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }
  return dst;
}
function mergeHostAttribute(dst, marker, key1, key2, value) {
  let i = 0;
  let markerInsertPosition = dst.length;
  if (marker === -1) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      const dstValue = dst[i++];
      if (typeof dstValue === "number") {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  }
  while (i < dst.length) {
    const item = dst[i];
    if (typeof item === "number") {
      break;
    } else if (item === key1) {
      {
        if (value !== null) {
          dst[i + 1] = value;
        }
        return;
      }
    }
    i++;
    if (value !== null)
      i++;
  }
  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }
  dst.splice(i++, 0, key1);
  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}
function getParentInjectorIndex(parentLocation) {
  if (ngDevMode) {
    assertNumber(parentLocation, "Number expected");
    assertNotEqual(parentLocation, -1, "Not a valid state.");
    const parentInjectorIndex = parentLocation & 32767;
    assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, "Parent injector must be pointing past HEADER_OFFSET.");
  }
  return parentLocation & 32767;
}
function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16;
}
function getParentInjectorView(location2, startView) {
  let viewOffset = getParentInjectorViewOffset(location2);
  let parentView = startView;
  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }
  return parentView;
}
function setIncludeViewProviders(v) {
  const oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, "expected firstCreatePass to be true");
  let id;
  if (typeof type === "string") {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  }
  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  }
  const bloomHash = id & BLOOM_MASK;
  const mask = 1 << bloomHash;
  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
function getOrCreateNodeInjectorForNode(tNode, lView) {
  const existingInjectorIndex = getInjectorIndex(tNode, lView);
  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }
  const tView = lView[TVIEW];
  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode);
    insertBloom(lView, null);
    insertBloom(tView.blueprint, null);
  }
  const parentLoc = getParentInjectorLocation(tNode, lView);
  const injectorIndex = tNode.injectorIndex;
  if (hasParentInjector(parentLoc)) {
    const parentIndex = getParentInjectorIndex(parentLoc);
    const parentLView = getParentInjectorView(parentLoc, lView);
    const parentData = parentLView[TVIEW].data;
    for (let i = 0; i < 8; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }
  lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] = parentLoc;
  return injectorIndex;
}
function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}
function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
  // copied down from the parent node. No injector has been created yet on this node.
  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[
    tNode.injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    return tNode.parent.injectorIndex;
  }
  let declarationViewOffset = 0;
  let parentTNode = null;
  let lViewCursor = lView;
  while (lViewCursor !== null) {
    parentTNode = getTNodeFromLView(lViewCursor);
    if (parentTNode === null) {
      return NO_PARENT_INJECTOR;
    }
    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];
    if (parentTNode.injectorIndex !== -1) {
      return parentTNode.injectorIndex | declarationViewOffset << 16;
    }
  }
  return NO_PARENT_INJECTOR;
}
function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(
    tNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  ngDevMode && assertDefined(tNode, "expecting tNode");
  if (attrNameToInject === "class") {
    return tNode.classes;
  }
  if (attrNameToInject === "style") {
    return tNode.styles;
  }
  const attrs = tNode.attrs;
  if (attrs) {
    const attrsLength = attrs.length;
    let i = 0;
    while (i < attrsLength) {
      const value = attrs[i];
      if (isNameOnlyAttributeMarker(value))
        break;
      if (value === 0) {
        i = i + 2;
      } else if (typeof value === "number") {
        i++;
        while (i < attrsLength && typeof attrs[i] === "string") {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }
  return null;
}
function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & 8 || notFoundValue !== void 0) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, "NodeInjector");
  }
}
function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & 8 && notFoundValue === void 0) {
    notFoundValue = null;
  }
  if ((flags & (2 | 1)) === 0) {
    const moduleInjector = lView[INJECTOR];
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (moduleInjector) {
        return moduleInjector.get(
          token,
          notFoundValue,
          flags & 8
          /* InternalInjectFlags.Optional */
        );
      } else {
        return injectRootLimpMode(
          token,
          notFoundValue,
          flags & 8
          /* InternalInjectFlags.Optional */
        );
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }
  return notFoundValueOrThrow(notFoundValue, token, flags);
}
function getOrCreateInjectable(tNode, lView, token, flags = 0, notFoundValue) {
  if (tNode !== null) {
    if (lView[FLAGS] & 2048 && // The token must be present on the current node injector when the `Self`
    // flag is set, so the lookup on embedded view injector(s) can be skipped.
    !(flags & 2)) {
      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND2);
      if (embeddedInjectorValue !== NOT_FOUND2) {
        return embeddedInjectorValue;
      }
    }
    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND2);
    if (value !== NOT_FOUND2) {
      return value;
    }
  }
  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}
function lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {
  const bloomHash = bloomHashBitOrFactory(token);
  if (typeof bloomHash === "function") {
    if (!enterDI(lView, tNode, flags)) {
      return flags & 1 ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
    }
    try {
      let value;
      if (ngDevMode) {
        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {
          emitInjectorToCreateInstanceEvent(token);
          value = bloomHash(flags);
          emitInstanceCreatedByInjectorEvent(value);
        });
      } else {
        value = bloomHash(flags);
      }
      if (value == null && !(flags & 8)) {
        throwProviderNotFoundError(token);
      } else {
        return value;
      }
    } finally {
      leaveDI();
    }
  } else if (typeof bloomHash === "number") {
    let previousTView = null;
    let injectorIndex = getInjectorIndex(tNode, lView);
    let parentLocation = NO_PARENT_INJECTOR;
    let hostTElementNode = flags & 1 ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
    if (injectorIndex === -1 || flags & 4) {
      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
        injectorIndex = -1;
      } else {
        previousTView = lView[TVIEW];
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      }
    }
    while (injectorIndex !== -1) {
      ngDevMode && assertNodeInjector(lView, injectorIndex);
      const tView = lView[TVIEW];
      ngDevMode && assertTNodeForLView(tView.data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ], lView);
      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
        if (instance !== NOT_FOUND2) {
          return instance;
        }
      }
      parentLocation = lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
        previousTView = tView;
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      } else {
        injectorIndex = -1;
      }
    }
  }
  return notFoundValue;
}
function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  const currentTView = lView[TVIEW];
  const tNode = currentTView.data[
    injectorIndex + 8
    /* NodeInjectorOffset.TNODE */
  ];
  const canAccessViewProviders = previousTView == null ? (
    // 1) This is the first invocation `previousTView == null` which means that we are at the
    // `TNode` of where injector is starting to look. In such a case the only time we are allowed
    // to look into the ViewProviders is if:
    // - we are on a component
    // - AND the injector set `includeViewProviders` to true (implying that the token can see
    // ViewProviders because it is the Component or a Service which itself was declared in
    // ViewProviders)
    isComponentHost(tNode) && includeViewProviders
  ) : (
    // 2) `previousTView != null` which means that we are now walking across the parent nodes.
    // In such a case we are only allowed to look into the ViewProviders if:
    // - We just crossed from child View to Parent View `previousTView != currentTView`
    // - AND the parent TNode is an Element.
    // This means that we just came from the Component's View and therefore are allowed to see
    // into the ViewProviders.
    previousTView != currentTView && (tNode.type & 3) !== 0
  );
  const isHostSpecialCase = flags & 1 && hostTElementNode === tNode;
  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode, flags);
  } else {
    return NOT_FOUND2;
  }
}
function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  const nodeProviderIndexes = tNode.providerIndexes;
  const tInjectables = tView.data;
  const injectablesStart = nodeProviderIndexes & 1048575;
  const directivesStart = tNode.directiveStart;
  const directiveEnd = tNode.directiveEnd;
  const cptViewProvidersCount = nodeProviderIndexes >> 20;
  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
  for (let i = startingIndex; i < endIndex; i++) {
    const providerTokenOrDef = tInjectables[i];
    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }
  if (isHostSpecialCase) {
    const dirDef = tInjectables[directivesStart];
    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }
  return null;
}
function getNodeInjectable(lView, tView, index, tNode, flags) {
  let value = lView[index];
  const tData = tView.data;
  if (value instanceof NodeInjectorFactory) {
    const factory = value;
    ngDevMode && injectionPath.push(factory.name ?? "unknown");
    if (factory.resolving) {
      const token2 = stringifyForError(tData[index]);
      if (ngDevMode) {
        throw cyclicDependencyErrorWithDetails(token2, injectionPath);
      } else {
        throw cyclicDependencyError(token2);
      }
    }
    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    const token = tData[index].type || tData[index];
    let prevInjectContext;
    if (ngDevMode) {
      const injector = new NodeInjector(tNode, lView);
      prevInjectContext = setInjectorProfilerContext({ injector, token });
    }
    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    const success = enterDI(
      lView,
      tNode,
      0
      /* InternalInjectFlags.Default */
    );
    ngDevMode && assertEqual(success, true, "Because flags do not contain `SkipSelf' we expect this to always succeed.");
    try {
      ngDevMode && emitInjectorToCreateInstanceEvent(token);
      value = lView[index] = factory.factory(void 0, flags, tData, lView, tNode);
      ngDevMode && emitInstanceCreatedByInjectorEvent(value);
      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
      ngDevMode && (injectionPath = []);
    }
  }
  return value;
}
function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, "token must be defined");
  if (typeof token === "string") {
    return token.charCodeAt(0) || 0;
  }
  const tokenId = (
    // First check with `hasOwnProperty` so we don't get an inherited ID.
    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : void 0
  );
  if (typeof tokenId === "number") {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1, "Expecting to get Special Injector Id");
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}
function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  const mask = 1 << bloomHash;
  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
  return !!(value & mask);
}
function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & 2) && !(flags & 1 && isFirstHostTNode);
}
function getNodeInjectorLView(nodeInjector) {
  return nodeInjector._lView;
}
function getNodeInjectorTNode(nodeInjector) {
  return nodeInjector._tNode;
}
function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}
function \u0275\u0275getInheritedFactory(type) {
  return noSideEffects(() => {
    const ownConstructor = type.prototype.constructor;
    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    const objectPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    while (parent && parent !== objectPrototype) {
      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
      if (factory && factory !== ownFactory) {
        return factory;
      }
      parent = Object.getPrototypeOf(parent);
    }
    return (t) => new t();
  });
}
function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return () => {
      const factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }
  return getFactoryDef(type);
}
function lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {
  let currentTNode = tNode;
  let currentLView = lView;
  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 && !isRootView(currentLView)) {
    ngDevMode && assertTNodeForLView(currentTNode, currentLView);
    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | 2, NOT_FOUND2);
    if (nodeInjectorValue !== NOT_FOUND2) {
      return nodeInjectorValue;
    }
    let parentTNode = currentTNode.parent;
    if (!parentTNode) {
      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];
      if (embeddedViewInjector) {
        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND2, flags);
        if (embeddedViewInjectorValue !== NOT_FOUND2) {
          return embeddedViewInjectorValue;
        }
      }
      parentTNode = getTNodeFromLView(currentLView);
      currentLView = currentLView[DECLARATION_VIEW];
    }
    currentTNode = parentTNode;
  }
  return notFoundValue;
}
function getTNodeFromLView(lView) {
  const tView = lView[TVIEW];
  const tViewType = tView.type;
  if (tViewType === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  } else if (tViewType === 1) {
    return lView[T_HOST];
  }
  return null;
}
function \u0275\u0275injectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}
function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}
function convertDependencies(deps) {
  return deps.map((dep) => reflectDependency(dep));
}
function reflectDependency(dep) {
  const meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };
  if (Array.isArray(dep) && dep.length > 0) {
    for (let j = 0; j < dep.length; j++) {
      const param = dep[j];
      if (param === void 0) {
        continue;
      }
      const proto = Object.getPrototypeOf(param);
      if (param instanceof Optional || proto.ngMetadataName === "Optional") {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === "SkipSelf") {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === "Self") {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === "Host") {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute2) {
        if (param.attributeName === void 0) {
          throw new RuntimeError(204, ngDevMode && `Attribute name must be defined.`);
        }
        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === void 0 || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }
  return meta;
}
function compileInjectable(type, meta) {
  let ngInjectableDef = null;
  let ngFactoryDef = null;
  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: () => {
        if (ngInjectableDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/\u0275prov.js`, getInjectableMetadata(type, meta));
        }
        return ngInjectableDef;
      }
    });
  }
  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/\u0275fac.js`, {
            name: type.name,
            type,
            typeArgumentCount: 0,
            // In JIT mode types are not available nor used.
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }
        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}
function isUseClassProvider(meta) {
  return meta.useClass !== void 0;
}
function isUseValueProvider(meta) {
  return USE_VALUE2 in meta;
}
function isUseFactoryProvider(meta) {
  return meta.useFactory !== void 0;
}
function isUseExistingProvider(meta) {
  return meta.useExisting !== void 0;
}
function getInjectableMetadata(type, srcMeta) {
  const meta = srcMeta || { providedIn: null };
  const compilerMeta = {
    name: type.name,
    type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };
  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== void 0) {
    compilerMeta.deps = convertDependencies(meta.deps);
  }
  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }
  return compilerMeta;
}
function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}
function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
function symbolIterator() {
  return this._results[Symbol.iterator]();
}
function hasSkipHydrationAttrOnTNode(tNode) {
  const attrs = tNode.mergedAttrs;
  if (attrs === null)
    return false;
  for (let i = 0; i < attrs.length; i += 2) {
    const value = attrs[i];
    if (typeof value === "number")
      return false;
    if (typeof value === "string" && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {
      return true;
    }
  }
  return false;
}
function hasSkipHydrationAttrOnRElement(rNode) {
  return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);
}
function hasInSkipHydrationBlockFlag(tNode) {
  return (tNode.flags & 128) === 128;
}
function isInSkipHydrationBlock2(tNode) {
  if (hasInSkipHydrationBlockFlag(tNode)) {
    return true;
  }
  let currentTNode = tNode.parent;
  while (currentTNode) {
    if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {
      return true;
    }
    currentTNode = currentTNode.parent;
  }
  return false;
}
function isI18nInSkipHydrationBlock(parentTNode) {
  return hasInSkipHydrationBlockFlag(parentTNode) || hasSkipHydrationAttrOnTNode(parentTNode) || isInSkipHydrationBlock2(parentTNode);
}
function getUniqueLViewId() {
  return uniqueIdCounter++;
}
function registerLView(lView) {
  ngDevMode && assertNumber(lView[ID], "LView must have an ID in order to be registered");
  TRACKED_LVIEWS.set(lView[ID], lView);
}
function getLViewById(id) {
  ngDevMode && assertNumber(id, "ID used for LView lookup must be a number");
  return TRACKED_LVIEWS.get(id) || null;
}
function unregisterLView(lView) {
  ngDevMode && assertNumber(lView[ID], "Cannot stop tracking an LView that does not have an ID");
  TRACKED_LVIEWS.delete(lView[ID]);
}
function getTrackedLViews() {
  return TRACKED_LVIEWS;
}
function getLContext(target) {
  let mpValue = readPatchedData(target);
  if (mpValue) {
    if (isLView(mpValue)) {
      const lView = mpValue;
      let nodeIndex;
      let component = void 0;
      let directives = void 0;
      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided component was not found in the application");
        }
        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided directive was not found in the application");
        }
        directives = getDirectivesAtNodeIndex(nodeIndex, lView);
      } else {
        nodeIndex = findViaNativeElement(lView, target);
        if (nodeIndex == -1) {
          return null;
        }
      }
      const native = unwrapRNode(lView[nodeIndex]);
      const existingCtx = readPatchedData(native);
      const context2 = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);
      if (component && context2.component === void 0) {
        context2.component = component;
        attachPatchData(context2.component, context2);
      }
      if (directives && context2.directives === void 0) {
        context2.directives = directives;
        for (let i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context2);
        }
      }
      attachPatchData(context2.native, context2);
      mpValue = context2;
    }
  } else {
    const rElement = target;
    ngDevMode && assertDomNode(rElement);
    let parent = rElement;
    while (parent = parent.parentNode) {
      const parentContext = readPatchedData(parent);
      if (parentContext) {
        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;
        if (!lView) {
          return null;
        }
        const index = findViaNativeElement(lView, rElement);
        if (index >= 0) {
          const native = unwrapRNode(lView[index]);
          const context2 = createLContext(lView, index, native);
          attachPatchData(native, context2);
          mpValue = context2;
          break;
        }
      }
    }
  }
  return mpValue || null;
}
function createLContext(lView, nodeIndex, native) {
  return new LContext(lView[ID], nodeIndex, native);
}
function getComponentViewByInstance(componentInstance) {
  let patchedData = readPatchedData(componentInstance);
  let lView;
  if (isLView(patchedData)) {
    const contextLView = patchedData;
    const nodeIndex = findViaComponent(contextLView, componentInstance);
    lView = getComponentLViewByIndex(nodeIndex, contextLView);
    const context2 = createLContext(contextLView, nodeIndex, lView[HOST]);
    context2.component = componentInstance;
    attachPatchData(componentInstance, context2);
    attachPatchData(context2.native, context2);
  } else {
    const context2 = patchedData;
    const contextLView = context2.lView;
    ngDevMode && assertLView(contextLView);
    lView = getComponentLViewByIndex(context2.nodeIndex, contextLView);
  }
  return lView;
}
function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, "Target expected");
  if (isLView(data)) {
    target[MONKEY_PATCH_KEY_NAME] = data[ID];
    registerLView(data);
  } else {
    target[MONKEY_PATCH_KEY_NAME] = data;
  }
}
function readPatchedData(target) {
  ngDevMode && assertDefined(target, "Target expected");
  const data = target[MONKEY_PATCH_KEY_NAME];
  return typeof data === "number" ? getLViewById(data) : data || null;
}
function readPatchedLView(target) {
  const value = readPatchedData(target);
  if (value) {
    return isLView(value) ? value : value.lView;
  }
  return null;
}
function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275cmp;
}
function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275dir;
}
function findViaNativeElement(lView, target) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }
  return -1;
}
function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }
    return tNode.parent && tNode.parent.next;
  }
}
function findViaComponent(lView, componentInstance) {
  const componentIndices = lView[TVIEW].components;
  if (componentIndices) {
    for (let i = 0; i < componentIndices.length; i++) {
      const elementComponentIndex = componentIndices[i];
      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    const rootComponent = rootComponentView[CONTEXT];
    if (rootComponent === componentInstance) {
      return HEADER_OFFSET;
    }
  }
  return -1;
}
function findViaDirective(lView, directiveInstance) {
  let tNode = lView[TVIEW].firstChild;
  while (tNode) {
    const directiveIndexStart = tNode.directiveStart;
    const directiveIndexEnd = tNode.directiveEnd;
    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }
    tNode = traverseNextElement(tNode);
  }
  return -1;
}
function getDirectivesAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  if (tNode.directiveStart === 0)
    return EMPTY_ARRAY;
  const results = [];
  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    const directiveInstance = lView[i];
    if (!isComponentInstance(directiveInstance)) {
      results.push(directiveInstance);
    }
  }
  return results;
}
function getComponentAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;
}
function discoverLocalRefs(lView, nodeIndex) {
  const tNode = lView[TVIEW].data[nodeIndex];
  if (tNode && tNode.localNames) {
    const result = {};
    let localIndex = tNode.index + 1;
    for (let i = 0; i < tNode.localNames.length; i += 2) {
      result[tNode.localNames[i]] = lView[localIndex];
      localIndex++;
    }
    return result;
  }
  return null;
}
function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, "component");
  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
  while (lView && !isRootView(lView)) {
    lView = getLViewParent(lView);
  }
  ngDevMode && assertLView(lView);
  return lView;
}
function getRootContext(viewOrComponent) {
  const rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], "Root view has no context. Perhaps it is disconnected?");
  return rootView[CONTEXT];
}
function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}
function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }
  return viewOrContainer;
}
function getComponent(element2) {
  ngDevMode && assertDomElement(element2);
  const context2 = getLContext(element2);
  if (context2 === null)
    return null;
  if (context2.component === void 0) {
    const lView = context2.lView;
    if (lView === null) {
      return null;
    }
    context2.component = getComponentAtNodeIndex(context2.nodeIndex, lView);
  }
  return context2.component;
}
function getContext(element2) {
  assertDomElement(element2);
  const context2 = getLContext(element2);
  const lView = context2 ? context2.lView : null;
  return lView === null ? null : lView[CONTEXT];
}
function getOwningComponent(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  let lView = context2 ? context2.lView : null;
  if (lView === null)
    return null;
  let parent;
  while (lView[TVIEW].type === 2 && (parent = getLViewParent(lView))) {
    lView = parent;
  }
  return isRootView(lView) ? null : lView[CONTEXT];
}
function getRootComponents(elementOrDir) {
  const lView = readPatchedLView(elementOrDir);
  return lView !== null ? [getRootContext(lView)] : [];
}
function getInjector(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  const lView = context2 ? context2.lView : null;
  if (lView === null)
    return Injector.NULL;
  const tNode = lView[TVIEW].data[context2.nodeIndex];
  return new NodeInjector(tNode, lView);
}
function getInjectionTokens(element2) {
  const context2 = getLContext(element2);
  const lView = context2 ? context2.lView : null;
  if (lView === null)
    return [];
  const tView = lView[TVIEW];
  const tNode = tView.data[context2.nodeIndex];
  const providerTokens = [];
  const startIndex = tNode.providerIndexes & 1048575;
  const endIndex = tNode.directiveEnd;
  for (let i = startIndex; i < endIndex; i++) {
    let value = tView.data[i];
    if (isDirectiveDefHack(value)) {
      value = value.type;
    }
    providerTokens.push(value);
  }
  return providerTokens;
}
function getDirectives(node) {
  if (node instanceof Text) {
    return [];
  }
  const context2 = getLContext(node);
  const lView = context2 ? context2.lView : null;
  if (lView === null) {
    return [];
  }
  const tView = lView[TVIEW];
  const nodeIndex = context2.nodeIndex;
  if (!tView?.data[nodeIndex]) {
    return [];
  }
  if (context2.directives === void 0) {
    context2.directives = getDirectivesAtNodeIndex(nodeIndex, lView);
  }
  return context2.directives === null ? [] : [...context2.directives];
}
function getDirectiveMetadata$1(directiveOrComponentInstance) {
  const { constructor } = directiveOrComponentInstance;
  if (!constructor) {
    throw new Error("Unable to find the instance constructor");
  }
  const componentDef = getComponentDef(constructor);
  if (componentDef) {
    const inputs = extractInputDebugMetadata(componentDef.inputs);
    return {
      inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }
  const directiveDef = getDirectiveDef(constructor);
  if (directiveDef) {
    const inputs = extractInputDebugMetadata(directiveDef.inputs);
    return { inputs, outputs: directiveDef.outputs };
  }
  return null;
}
function getLocalRefs(target) {
  const context2 = getLContext(target);
  if (context2 === null)
    return {};
  if (context2.localRefs === void 0) {
    const lView = context2.lView;
    if (lView === null) {
      return {};
    }
    context2.localRefs = discoverLocalRefs(lView, context2.nodeIndex);
  }
  return context2.localRefs || {};
}
function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
function getListeners(element2) {
  ngDevMode && assertDomElement(element2);
  const lContext = getLContext(element2);
  const lView = lContext === null ? null : lContext.lView;
  if (lView === null)
    return [];
  const tView = lView[TVIEW];
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  const listeners = [];
  if (tCleanup && lCleanup) {
    for (let i = 0; i < tCleanup.length; ) {
      const firstParam = tCleanup[i++];
      const secondParam = tCleanup[i++];
      if (typeof firstParam === "string") {
        const name = firstParam;
        const listenerElement = unwrapRNode(lView[secondParam]);
        const callback = lCleanup[tCleanup[i++]];
        const useCaptureOrIndx = tCleanup[i++];
        const type = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0 ? "dom" : "output";
        const useCapture = typeof useCaptureOrIndx === "boolean" ? useCaptureOrIndx : false;
        if (element2 == listenerElement) {
          listeners.push({ element: element2, name, callback, useCapture, type });
        }
      }
    }
  }
  listeners.sort(sortListeners);
  return listeners;
}
function sortListeners(a, b) {
  if (a.name == b.name)
    return 0;
  return a.name < b.name ? -1 : 1;
}
function isDirectiveDefHack(obj) {
  return obj.type !== void 0 && obj.declaredInputs !== void 0 && obj.resolveHostDirectives !== void 0;
}
function assertDomElement(value) {
  if (typeof Element !== "undefined" && !(value instanceof Element)) {
    throw new Error("Expecting instance of DOM Element");
  }
}
function extractInputDebugMetadata(inputs) {
  const res = {};
  for (const key in inputs) {
    if (inputs.hasOwnProperty(key)) {
      const value = inputs[key];
      if (value !== void 0) {
        res[key] = value[0];
      }
    }
  }
  return res;
}
function setDocument(document2) {
  DOCUMENT2 = document2;
}
function getDocument() {
  if (DOCUMENT2 !== void 0) {
    return DOCUMENT2;
  } else if (typeof document !== "undefined") {
    return document;
  }
  throw new RuntimeError(210, (typeof ngDevMode === "undefined" || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);
}
function makeStateKey(key) {
  return key;
}
function initTransferState() {
  const transferState = new TransferState();
  if (true) {
    transferState.store = retrieveTransferredState(getDocument(), inject2(APP_ID));
  }
  return transferState;
}
function retrieveTransferredState(doc, appId) {
  const script = doc.getElementById(appId + "-state");
  if (script?.textContent) {
    try {
      return JSON.parse(script.textContent);
    } catch (e) {
      console.warn("Exception while restoring TransferState for app " + appId, e);
    }
  }
  return {};
}
function onInteraction(trigger, callback) {
  let entry = interactionTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    interactionTriggers.set(trigger, entry);
    for (const name of interactionEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const { callbacks, listener: listener2 } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      interactionTriggers.delete(trigger);
      for (const name of interactionEventNames) {
        trigger.removeEventListener(name, listener2, eventListenerOptions);
      }
    }
  };
}
function onHover(trigger, callback) {
  let entry = hoverTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    hoverTriggers.set(trigger, entry);
    for (const name of hoverEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const { callbacks, listener: listener2 } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      for (const name of hoverEventNames) {
        trigger.removeEventListener(name, listener2, eventListenerOptions);
      }
      hoverTriggers.delete(trigger);
    }
  };
}
function createIntersectionObserver() {
  return new IntersectionObserver((entries) => {
    for (const current of entries) {
      if (current.isIntersecting && viewportTriggers.has(current.target)) {
        viewportTriggers.get(current.target).listener();
      }
    }
  });
}
function onViewport(trigger, callback, observerFactoryFn) {
  let entry = viewportTriggers.get(trigger);
  intersectionObserver = intersectionObserver || observerFactoryFn();
  if (!entry) {
    entry = new DeferEventEntry();
    intersectionObserver.observe(trigger);
    viewportTriggers.set(trigger, entry);
    observedViewportElements++;
  }
  entry.callbacks.add(callback);
  return () => {
    if (!viewportTriggers.has(trigger)) {
      return;
    }
    entry.callbacks.delete(callback);
    if (entry.callbacks.size === 0) {
      intersectionObserver?.unobserve(trigger);
      viewportTriggers.delete(trigger);
      observedViewportElements--;
    }
    if (observedViewportElements === 0) {
      intersectionObserver?.disconnect();
      intersectionObserver = null;
    }
  };
}
function setJSActionAttributes(nativeElement, eventTypes, parentDeferBlockId = null) {
  if (eventTypes.length === 0 || nativeElement.nodeType !== Node.ELEMENT_NODE) {
    return;
  }
  const existingAttr = nativeElement.getAttribute(Attribute.JSACTION);
  const parts = eventTypes.reduce((prev, curr) => {
    return (existingAttr?.indexOf(curr) ?? -1) === -1 ? prev + curr + ":;" : prev;
  }, "");
  nativeElement.setAttribute(Attribute.JSACTION, `${existingAttr ?? ""}${parts}`);
  const blockName = parentDeferBlockId ?? "";
  if (blockName !== "" && parts.length > 0) {
    nativeElement.setAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE, blockName);
  }
}
function removeListenersFromBlocks(blockNames, jsActionMap) {
  if (blockNames.length > 0) {
    let blockList = [];
    for (let blockName of blockNames) {
      if (jsActionMap.has(blockName)) {
        blockList = [...blockList, ...jsActionMap.get(blockName)];
      }
    }
    const replayList = new Set(blockList);
    replayList.forEach(removeListeners);
  }
}
function invokeListeners(event, currentTarget) {
  const handlerFns = currentTarget?.__jsaction_fns?.get(event.type);
  if (!handlerFns || !currentTarget?.isConnected) {
    return;
  }
  for (const handler of handlerFns) {
    handler(event);
  }
}
function setStashFn(appId, fn2) {
  stashEventListeners.set(appId, fn2);
  return () => stashEventListeners.delete(appId);
}
function stashEventListenerImpl(lView, target, eventName, wrappedListener) {
  _stashEventListenerImpl(lView, target, eventName, wrappedListener);
}
function enableStashEventListenerImpl() {
  if (!isStashEventListenerImplEnabled) {
    _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {
      const appId = lView[INJECTOR].get(APP_ID);
      const stashEventListener = stashEventListeners.get(appId);
      stashEventListener?.(target, eventName, wrappedListener);
    };
    isStashEventListenerImplEnabled = true;
  }
}
function isDetachedByI18n(tNode) {
  return (tNode.flags & 32) === 32;
}
function isInternalHydrationTransferStateKey(key) {
  return key === TRANSFER_STATE_TOKEN_ID || key === TRANSFER_STATE_DEFER_BLOCKS_INFO;
}
function retrieveHydrationInfoImpl(rNode, injector, isRootView2 = false) {
  let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);
  if (nghAttrValue == null)
    return null;
  const [componentViewNgh, rootViewNgh] = nghAttrValue.split("|");
  nghAttrValue = isRootView2 ? rootViewNgh : componentViewNgh;
  if (!nghAttrValue)
    return null;
  const rootNgh = rootViewNgh ? `|${rootViewNgh}` : "";
  const remainingNgh = isRootView2 ? componentViewNgh : rootNgh;
  let data = {};
  if (nghAttrValue !== "") {
    const transferState = injector.get(TransferState, null, { optional: true });
    if (transferState !== null) {
      const nghData = transferState.get(NGH_DATA_KEY, []);
      data = nghData[Number(nghAttrValue)];
      ngDevMode && assertDefined(data, "Unable to retrieve hydration info from the TransferState.");
    }
  }
  const dehydratedView = {
    data,
    firstChild: rNode.firstChild ?? null
  };
  if (isRootView2) {
    dehydratedView.firstChild = rNode;
    setSegmentHead(dehydratedView, 0, rNode.nextSibling);
  }
  if (remainingNgh) {
    rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);
  } else {
    rNode.removeAttribute(NGH_ATTR_NAME);
  }
  ngDevMode && markRNodeAsClaimedByHydration(
    rNode,
    /* checkIfAlreadyClaimed */
    false
  );
  ngDevMode && ngDevMode.hydratedComponents++;
  return dehydratedView;
}
function enableRetrieveHydrationInfoImpl() {
  _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;
}
function retrieveHydrationInfo(rNode, injector, isRootView2 = false) {
  return _retrieveHydrationInfoImpl(rNode, injector, isRootView2);
}
function getLNodeForHydration(viewRef) {
  let lView = viewRef._lView;
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    return null;
  }
  if (isRootView(lView)) {
    lView = lView[HEADER_OFFSET];
  }
  return lView;
}
function getTextNodeContent(node) {
  return node.textContent?.replace(/\s/gm, "");
}
function processTextNodeMarkersBeforeHydration(node) {
  const doc = getDocument();
  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {
    acceptNode(node2) {
      const content = getTextNodeContent(node2);
      const isTextNodeMarker = content === "ngetn" || content === "ngtns";
      return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    }
  });
  let currentNode;
  const nodes = [];
  while (currentNode = commentNodesIterator.nextNode()) {
    nodes.push(currentNode);
  }
  for (const node2 of nodes) {
    if (node2.textContent === "ngetn") {
      node2.replaceWith(doc.createTextNode(""));
    } else {
      node2.remove();
    }
  }
}
function patchHydrationInfo(node, info) {
  node[HYDRATION_INFO_KEY] = info;
}
function readHydrationInfo(node) {
  return node[HYDRATION_INFO_KEY] ?? null;
}
function markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {
  if (!ngDevMode) {
    throw new Error("Calling `markRNodeAsClaimedByHydration` in prod mode is not supported and likely a mistake.");
  }
  if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {
    throw new Error("Trying to claim a node, which was claimed already.");
  }
  patchHydrationInfo(node, { status: HydrationStatus.Hydrated });
  ngDevMode.hydratedNodes++;
}
function markRNodeAsSkippedByHydration(node) {
  if (!ngDevMode) {
    throw new Error("Calling `markRNodeAsSkippedByHydration` in prod mode is not supported and likely a mistake.");
  }
  patchHydrationInfo(node, { status: HydrationStatus.Skipped });
  ngDevMode.componentsSkippedHydration++;
}
function countBlocksSkippedByHydration(injector) {
  const transferState = injector.get(TransferState);
  const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});
  if (ngDevMode) {
    ngDevMode.deferBlocksWithIncrementalHydration = Object.keys(nghDeferData).length;
  }
}
function markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {
  if (!ngDevMode) {
    throw new Error("Calling `markRNodeAsMismatchedByHydration` in prod mode is not supported and likely a mistake.");
  }
  while (node && !getComponent(node)) {
    node = node?.parentNode;
  }
  if (node) {
    patchHydrationInfo(node, {
      status: HydrationStatus.Mismatched,
      expectedNodeDetails,
      actualNodeDetails
    });
  }
}
function isRNodeClaimedForHydration(node) {
  return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;
}
function setSegmentHead(hydrationInfo, index, node) {
  hydrationInfo.segmentHeads ??= {};
  hydrationInfo.segmentHeads[index] = node;
}
function getSegmentHead(hydrationInfo, index) {
  return hydrationInfo.segmentHeads?.[index] ?? null;
}
function isIncrementalHydrationEnabled(injector) {
  return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {
    optional: true
  });
}
function assertIncrementalHydrationIsConfigured(injector) {
  if (!isIncrementalHydrationEnabled(injector)) {
    throw new RuntimeError(508, "Angular has detected that some `@defer` blocks use `hydrate` triggers, but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` call is added as an argument for the `provideClientHydration()` function call in your application config.");
  }
}
function assertSsrIdDefined(ssrUniqueId) {
  assertDefined(ssrUniqueId, "Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present");
}
function getNgContainerSize(hydrationInfo, index) {
  const data = hydrationInfo.data;
  let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;
  if (size === null && data[CONTAINERS]?.[index]) {
    size = calcSerializedContainerSize(hydrationInfo, index);
  }
  return size;
}
function isSerializedElementContainer(hydrationInfo, index) {
  return hydrationInfo.data[ELEMENT_CONTAINERS]?.[index] !== void 0;
}
function getSerializedContainerViews(hydrationInfo, index) {
  return hydrationInfo.data[CONTAINERS]?.[index] ?? null;
}
function calcSerializedContainerSize(hydrationInfo, index) {
  const views = getSerializedContainerViews(hydrationInfo, index) ?? [];
  let numNodes = 0;
  for (let view of views) {
    numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);
  }
  return numNodes;
}
function initDisconnectedNodes(hydrationInfo) {
  if (typeof hydrationInfo.disconnectedNodes === "undefined") {
    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];
    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;
  }
  return hydrationInfo.disconnectedNodes;
}
function isDisconnectedNode$1(hydrationInfo, index) {
  if (typeof hydrationInfo.disconnectedNodes === "undefined") {
    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];
    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;
  }
  return !!initDisconnectedNodes(hydrationInfo)?.has(index);
}
function canHydrateNode(lView, tNode) {
  const hydrationInfo = lView[HYDRATION];
  return hydrationInfo !== null && !isInSkipHydrationBlock() && !isDetachedByI18n(tNode) && !isDisconnectedNode$1(hydrationInfo, tNode.index - HEADER_OFFSET);
}
function processTextNodeBeforeSerialization(context2, node) {
  const el = node;
  const corruptedTextNodes = context2.corruptedTextNodes;
  if (el.textContent === "") {
    corruptedTextNodes.set(
      el,
      "ngetn"
      /* TextNodeMarker.EmptyNode */
    );
  } else if (el.nextSibling?.nodeType === Node.TEXT_NODE) {
    corruptedTextNodes.set(
      el,
      "ngtns"
      /* TextNodeMarker.Separator */
    );
  }
}
function convertHydrateTriggersToJsAction(triggers) {
  let actionList = [];
  if (triggers !== null) {
    if (triggers.has(
      4
      /* DeferBlockTrigger.Hover */
    )) {
      actionList.push(...hoverEventNames);
    }
    if (triggers.has(
      3
      /* DeferBlockTrigger.Interaction */
    )) {
      actionList.push(...interactionEventNames);
    }
  }
  return actionList;
}
function getParentBlockHydrationQueue(deferBlockId, injector) {
  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
  const transferState = injector.get(TransferState);
  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});
  let isTopMostDeferBlock = false;
  let currentBlockId = deferBlockId;
  let parentBlockPromise = null;
  const hydrationQueue = [];
  while (!isTopMostDeferBlock && currentBlockId) {
    ngDevMode && assertEqual(hydrationQueue.indexOf(currentBlockId), -1, "Internal error: defer block hierarchy has a cycle.");
    isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);
    const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);
    if (parentBlockPromise === null && hydratingParentBlock != null) {
      parentBlockPromise = hydratingParentBlock.promise;
      break;
    }
    hydrationQueue.unshift(currentBlockId);
    currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];
  }
  return { parentBlockPromise, hydrationQueue };
}
function gatherDeferBlocksByJSActionAttribute(doc) {
  const jsactionNodes = doc.body.querySelectorAll("[jsaction]");
  const blockMap = /* @__PURE__ */ new Set();
  const eventTypes = [hoverEventNames.join(":;"), interactionEventNames.join(":;")].join("|");
  for (let node of jsactionNodes) {
    const attr = node.getAttribute("jsaction");
    const blockId = node.getAttribute("ngb");
    if (attr?.match(eventTypes) && blockId !== null) {
      blockMap.add(node);
    }
  }
  return blockMap;
}
function appendDeferBlocksToJSActionMap(doc, injector) {
  const blockMap = gatherDeferBlocksByJSActionAttribute(doc);
  const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);
  for (let rNode of blockMap) {
    sharedMapFunction(rNode, jsActionMap);
  }
}
function retrieveDeferBlockDataImpl(injector) {
  const transferState = injector.get(TransferState, null, { optional: true });
  if (transferState !== null) {
    const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});
    ngDevMode && assertDefined(nghDeferData, "Unable to retrieve defer block info from the TransferState.");
    return nghDeferData;
  }
  return {};
}
function enableRetrieveDeferBlockDataImpl() {
  _retrieveDeferBlockDataImpl = retrieveDeferBlockDataImpl;
}
function retrieveDeferBlockData(injector) {
  return _retrieveDeferBlockDataImpl(injector);
}
function isTimerTrigger(triggerInfo) {
  return typeof triggerInfo === "object" && triggerInfo.trigger === 5;
}
function getHydrateTimerTrigger(blockData) {
  const trigger = blockData[DEFER_HYDRATE_TRIGGERS]?.find((t) => isTimerTrigger(t));
  return trigger?.delay ?? null;
}
function hasHydrateTrigger(blockData, trigger) {
  return blockData[DEFER_HYDRATE_TRIGGERS]?.includes(trigger) ?? false;
}
function createBlockSummary(blockInfo) {
  return {
    data: blockInfo,
    hydrate: {
      idle: hasHydrateTrigger(
        blockInfo,
        0
        /* DeferBlockTrigger.Idle */
      ),
      immediate: hasHydrateTrigger(
        blockInfo,
        1
        /* DeferBlockTrigger.Immediate */
      ),
      timer: getHydrateTimerTrigger(blockInfo),
      viewport: hasHydrateTrigger(
        blockInfo,
        2
        /* DeferBlockTrigger.Viewport */
      )
    }
  };
}
function processBlockData(injector) {
  const blockData = retrieveDeferBlockData(injector);
  let blockDetails = /* @__PURE__ */ new Map();
  for (let blockId in blockData) {
    blockDetails.set(blockId, createBlockSummary(blockData[blockId]));
  }
  return blockDetails;
}
function isSsrContentsIntegrity(node) {
  return !!node && node.nodeType === Node.COMMENT_NODE && node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER;
}
function skipTextNodes(node) {
  while (node && node.nodeType === Node.TEXT_NODE) {
    node = node.previousSibling;
  }
  return node;
}
function verifySsrContentsIntegrity(doc) {
  for (const node of doc.body.childNodes) {
    if (isSsrContentsIntegrity(node)) {
      return;
    }
  }
  const beforeBody = skipTextNodes(doc.body.previousSibling);
  if (isSsrContentsIntegrity(beforeBody)) {
    return;
  }
  let endOfHead = skipTextNodes(doc.head.lastChild);
  if (isSsrContentsIntegrity(endOfHead)) {
    return;
  }
  throw new RuntimeError(-507, typeof ngDevMode !== "undefined" && ngDevMode && "Angular hydration logic detected that HTML content of this page was modified after it was produced during server side rendering. Make sure that there are no optimizations that remove comment nodes from HTML enabled on your CDN. Angular hydration relies on HTML produced by the server, including whitespaces and comment nodes.");
}
function refreshContentQueries(tView, lView) {
  const contentQueries = tView.contentQueries;
  if (contentQueries !== null) {
    const prevConsumer = setActiveConsumer(null);
    try {
      for (let i = 0; i < contentQueries.length; i += 2) {
        const queryStartIdx = contentQueries[i];
        const directiveDefIdx = contentQueries[i + 1];
        if (directiveDefIdx !== -1) {
          const directiveDef = tView.data[directiveDefIdx];
          ngDevMode && assertDefined(directiveDef, "DirectiveDef not found.");
          ngDevMode && assertDefined(directiveDef.contentQueries, "contentQueries function should be defined");
          setCurrentQueryIndex(queryStartIdx);
          directiveDef.contentQueries(2, lView[directiveDefIdx], directiveDefIdx);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, "View queries function to execute must be defined.");
  setCurrentQueryIndex(0);
  const prevConsumer = setActiveConsumer(null);
  try {
    viewQueryFn(flags, component);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
        const def = tView.data[directiveIndex];
        if (def.contentQueries) {
          const directiveInstance = lView[directiveIndex];
          ngDevMode && assertDefined(directiveIndex, "Incorrect reference to a directive defining a content query");
          def.contentQueries(1, directiveInstance, directiveIndex);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function getPolicy$1() {
  if (policy$1 === void 0) {
    policy$1 = null;
    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy("angular", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy$1;
}
function trustedHTMLFromString(html) {
  return getPolicy$1()?.createHTML(html) || html;
}
function trustedScriptURLFromString(url) {
  return getPolicy$1()?.createScriptURL(url) || url;
}
function getPolicy() {
  if (policy === void 0) {
    policy = null;
    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy("angular#unsafe-bypass", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy;
}
function trustedHTMLFromStringBypass(html) {
  return getPolicy()?.createHTML(html) || html;
}
function trustedScriptFromStringBypass(script) {
  return getPolicy()?.createScript(script) || script;
}
function trustedScriptURLFromStringBypass(url) {
  return getPolicy()?.createScriptURL(url) || url;
}
function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}
function allowSanitizationBypassAndThrow(value, type) {
  const actualType = getSanitizationBypassType(value);
  if (actualType != null && actualType !== type) {
    if (actualType === "ResourceURL" && type === "URL")
      return true;
    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);
  }
  return actualType === type;
}
function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
function getInertBodyHelper(defaultDoc) {
  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(""), "text/html");
  } catch {
    return false;
  }
}
function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN))
    return url;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);
  }
  return "unsafe:" + url;
}
function tagSet(tags) {
  const res = {};
  for (const t of tags.split(","))
    res[t] = true;
  return res;
}
function merge2(...sets) {
  const res = {};
  for (const s of sets) {
    for (const v in s) {
      if (s.hasOwnProperty(v))
        res[v] = true;
    }
  }
  return res;
}
function isClobberedElement(parentNode, childNode) {
  return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;
}
function getNextSibling(node) {
  const nextSibling = node.nextSibling;
  if (nextSibling && node !== nextSibling.previousSibling) {
    throw clobberedElementError(nextSibling);
  }
  return nextSibling;
}
function getFirstChild(node) {
  const firstChild = node.firstChild;
  if (firstChild && isClobberedElement(node, firstChild)) {
    throw clobberedElementError(firstChild);
  }
  return firstChild;
}
function getNodeName(node) {
  const nodeName = node.nodeName;
  return typeof nodeName === "string" ? nodeName : "FORM";
}
function clobberedElementError(node) {
  return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
}
function encodeEntities(value) {
  return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match) {
    const hi = match.charCodeAt(0);
    const low = match.charCodeAt(1);
    return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
  }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
    return "&#" + match.charCodeAt(0) + ";";
  }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  let inertBodyElement = null;
  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    let mXSSAttempts = 5;
    let parsedHtml = unsafeHtml;
    do {
      if (mXSSAttempts === 0) {
        throw new Error("Failed to sanitize html because the input is unstable");
      }
      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);
    const sanitizer = new SanitizingHtmlSerializer();
    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
    if ((typeof ngDevMode === "undefined" || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);
    }
    return trustedHTMLFromString(safeHtml);
  } finally {
    if (inertBodyElement) {
      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
      while (parent.firstChild) {
        parent.firstChild.remove();
      }
    }
  }
}
function getTemplateContent(el) {
  return "content" in el && isTemplateElement(el) ? el.content : null;
}
function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === "TEMPLATE";
}
function \u0275\u0275sanitizeHtml(unsafeHtml) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeHtml,
    "HTML"
    /* BypassType.Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }
  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
function \u0275\u0275sanitizeStyle(unsafeStyle) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeStyle,
    "Style"
    /* BypassType.Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }
  return renderStringify(unsafeStyle);
}
function \u0275\u0275sanitizeUrl(unsafeUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeUrl,
    "URL"
    /* BypassType.Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }
  return _sanitizeUrl(renderStringify(unsafeUrl));
}
function \u0275\u0275sanitizeResourceUrl(unsafeResourceUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeResourceUrl,
    "ResourceURL"
    /* BypassType.ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }
  throw new RuntimeError(904, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
}
function \u0275\u0275sanitizeScript(unsafeScript) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeScript,
    "Script"
    /* BypassType.Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }
  throw new RuntimeError(905, ngDevMode && "unsafe value used in a script context");
}
function \u0275\u0275trustConstantHtml(html) {
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join("?")}`);
  }
  return trustedHTMLFromString(html[0]);
}
function \u0275\u0275trustConstantResourceUrl(url) {
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join("?")}`);
  }
  return trustedScriptURLFromString(url[0]);
}
function getUrlSanitizer(tag, prop) {
  if (prop === "src" && (tag === "embed" || tag === "frame" || tag === "iframe" || tag === "media" || tag === "script") || prop === "href" && (tag === "base" || tag === "link")) {
    return \u0275\u0275sanitizeResourceUrl;
  }
  return \u0275\u0275sanitizeUrl;
}
function \u0275\u0275sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}
function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
    throw new RuntimeError(306, errorMessage);
  }
}
function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
    throw new RuntimeError(306, errorMessage);
  }
}
function getSanitizer() {
  const lView = getLView();
  return lView && lView[ENVIRONMENT].sanitizer;
}
function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, (text2) => text2.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
}
function provideNgReflectAttributes() {
  const providers = typeof ngDevMode === "undefined" || ngDevMode ? [
    {
      provide: NG_REFLECT_ATTRS_FLAG,
      useValue: true
    }
  ] : [];
  return makeEnvironmentProviders(providers);
}
function normalizeDebugBindingName(name) {
  name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
  return `ng-reflect-${name}`;
}
function camelCaseToDashCase(input2) {
  return input2.replace(CAMEL_CASE_REGEXP, (...m) => "-" + m[1].toLowerCase());
}
function normalizeDebugBindingValue(value) {
  try {
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e) {
    return "[ERROR] Exception while trying to serialize the value";
  }
}
function \u0275setUnknownElementStrictMode(shouldThrow) {
  shouldThrowErrorOnUnknownElement = shouldThrow;
}
function \u0275getUnknownElementStrictMode() {
  return shouldThrowErrorOnUnknownElement;
}
function \u0275setUnknownPropertyStrictMode(shouldThrow) {
  shouldThrowErrorOnUnknownProperty = shouldThrow;
}
function \u0275getUnknownPropertyStrictMode() {
  return shouldThrowErrorOnUnknownProperty;
}
function validateElementIsKnown(lView, tNode) {
  const tView = lView[TVIEW];
  if (tView.schemas === null)
    return;
  const tagName = tNode.value;
  if (!isDirectiveHost(tNode) && tagName !== null) {
    const isUnknown = (
      // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because
      // Domino doesn't expose HTMLUnknownElement globally.
      typeof HTMLUnknownElement !== "undefined" && HTMLUnknownElement && getNativeByTNode(tNode, lView) instanceof HTMLUnknownElement || typeof customElements !== "undefined" && tagName.indexOf("-") > -1 && !customElements.get(tagName)
    );
    if (isUnknown && !matchingSchemas(tView.schemas, tagName)) {
      const isHostStandalone = isHostComponentStandalone(lView);
      const templateLocation = getTemplateLocationDetails(lView);
      const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
      let message = `'${tagName}' is not a known element${templateLocation}:
`;
      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared"}.
`;
      if (tagName && tagName.indexOf("-") > -1) {
        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
      } else {
        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
      }
      if (shouldThrowErrorOnUnknownElement) {
        throw new RuntimeError(304, message);
      } else {
        console.error(formatRuntimeError(304, message));
      }
    }
  }
}
function isPropertyValid(element2, propName, tagName, schemas) {
  if (schemas === null)
    return true;
  if (matchingSchemas(schemas, tagName) || propName in element2 || isAnimationProp(propName)) {
    return true;
  }
  return typeof Node === "undefined" || Node === null || !(element2 instanceof Node);
}
function handleUnknownPropertyError(propName, tagName, nodeType, lView) {
  if (!tagName && nodeType === 4) {
    tagName = "ng-template";
  }
  const isHostStandalone = isHostComponentStandalone(lView);
  const templateLocation = getTemplateLocationDetails(lView);
  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;
  const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
  const importLocation = isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared";
  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {
    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);
    message += `
If the '${propName}' is an Angular control flow directive, please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;
  } else {
    message += `
1. If '${tagName}' is an Angular component and it has the '${propName}' input, then verify that it is ${importLocation}.`;
    if (tagName && tagName.indexOf("-") > -1) {
      message += `
2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
      message += `
3. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    } else {
      message += `
2. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    }
  }
  reportUnknownPropertyError(message);
}
function reportUnknownPropertyError(message) {
  if (shouldThrowErrorOnUnknownProperty) {
    throw new RuntimeError(303, message);
  } else {
    console.error(formatRuntimeError(303, message));
  }
}
function getDeclarationComponentDef(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  if (!context2)
    return null;
  return context2.constructor ? getComponentDef(context2.constructor) : null;
}
function isHostComponentStandalone(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const componentDef = getDeclarationComponentDef(lView);
  return !!componentDef?.standalone;
}
function getTemplateLocationDetails(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  return componentClassName ? ` (used in the '${componentClassName}' component template)` : "";
}
function matchingSchemas(schemas, tagName) {
  if (schemas !== null) {
    for (let i = 0; i < schemas.length; i++) {
      const schema = schemas[i];
      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf("-") > -1) {
        return true;
      }
    }
  }
  return false;
}
function \u0275\u0275resolveWindow(element2) {
  return element2.ownerDocument.defaultView;
}
function \u0275\u0275resolveDocument(element2) {
  return element2.ownerDocument;
}
function \u0275\u0275resolveBody(element2) {
  return element2.ownerDocument.body;
}
function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
function assertStandaloneComponentType(type) {
  assertComponentDef(type);
  const componentDef = getComponentDef(type);
  if (!componentDef.standalone) {
    throw new RuntimeError(907, `The ${stringifyForError(type)} component is not marked as standalone, but Angular expects to have a standalone component here. Please make sure the ${stringifyForError(type)} component has the \`standalone: true\` flag in the decorator.`);
  }
}
function assertComponentDef(type) {
  if (!getComponentDef(type)) {
    throw new RuntimeError(906, `The ${stringifyForError(type)} is not an Angular component, make sure it has the \`@Component\` decorator.`);
  }
}
function throwMultipleComponentError(tNode, first2, second) {
  throw new RuntimeError(-300, `Multiple components match node with tagname ${tNode.value}: ${stringifyForError(first2)} and ${stringifyForError(second)}`);
}
function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  const field = propName ? ` for '${propName}'` : "";
  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ""}`;
  if (creationMode) {
    msg += ` It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?`;
  }
  throw new RuntimeError(-100, msg);
}
function formatValue(value) {
  let strValue = String(value);
  try {
    if (Array.isArray(value) || strValue === "[object Object]") {
      strValue = JSON.stringify(value);
    }
  } catch (error) {
  }
  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + "\u2026" : strValue;
}
function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
  let oldValue = prefix, newValue = prefix;
  for (let i = 0; i < chunks.length; i++) {
    const slotIdx = rootIndex + i;
    oldValue += `${lView[slotIdx]}${chunks[i]}`;
    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
  }
  return { propName, oldValue, newValue };
}
function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  const tData = lView[TVIEW].data;
  const metadata = tData[bindingIndex];
  if (typeof metadata === "string") {
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    }
    return { propName: metadata, oldValue, newValue };
  }
  if (metadata === null) {
    let idx = bindingIndex - 1;
    while (typeof tData[idx] !== "string" && tData[idx + 1] === null) {
      idx--;
    }
    const meta = tData[idx];
    if (typeof meta === "string") {
      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, "g"));
      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }
  return { propName: void 0, oldValue, newValue };
}
function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, "", 'can not look for "" string.');
  let end = className.length;
  while (true) {
    const foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1)
      return foundIndex;
    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32) {
      const length = classToSearch.length;
      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32) {
        return foundIndex;
      }
    }
    startingIndex = foundIndex + 1;
  }
}
function isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), "Class name expected to be lowercase.");
  let i = 0;
  if (isProjectionMode) {
    for (; i < attrs.length && typeof attrs[i] === "string"; i += 2) {
      if (attrs[i] === "class" && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {
        return true;
      }
    }
  } else if (isInlineTemplate(tNode)) {
    return false;
  }
  i = attrs.indexOf(1, i);
  if (i > -1) {
    let item;
    while (++i < attrs.length && typeof (item = attrs[i]) === "string") {
      if (item.toLowerCase() === cssClassToMatch) {
        return true;
      }
    }
  }
  return false;
}
function isInlineTemplate(tNode) {
  return tNode.type === 4 && tNode.value !== NG_TEMPLATE_SELECTOR;
}
function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  const tagNameToCompare = tNode.type === 4 && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], "Selector should have a tag name");
  let mode = 4;
  const nodeAttrs = tNode.attrs;
  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;
  let skipToNextSelector = false;
  for (let i = 0; i < selector.length; i++) {
    const current = selector[i];
    if (typeof current === "number") {
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      }
      if (skipToNextSelector && isPositive(current))
        continue;
      skipToNextSelector = false;
      mode = current | mode & 1;
      continue;
    }
    if (skipToNextSelector)
      continue;
    if (mode & 4) {
      mode = 2 | mode & 1;
      if (current !== "" && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === "" && selector.length === 1) {
        if (isPositive(mode))
          return false;
        skipToNextSelector = true;
      }
    } else if (mode & 8) {
      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {
        if (isPositive(mode))
          return false;
        skipToNextSelector = true;
      }
    } else {
      const selectorAttrValue = selector[++i];
      const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
      if (attrIndexInNode === -1) {
        if (isPositive(mode))
          return false;
        skipToNextSelector = true;
        continue;
      }
      if (selectorAttrValue !== "") {
        let nodeAttrValue;
        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = "";
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0, "We do not match directives on namespaced attributes");
          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }
        if (mode & 2 && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
        }
      }
    }
  }
  return isPositive(mode) || skipToNextSelector;
}
function isPositive(mode) {
  return (mode & 1) === 0;
}
function findAttrIndexInNode(name, attrs, isInlineTemplate2, isProjectionMode) {
  if (attrs === null)
    return -1;
  let i = 0;
  if (isProjectionMode || !isInlineTemplate2) {
    let bindingsMode = false;
    while (i < attrs.length) {
      const maybeAttrName = attrs[i];
      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3 || maybeAttrName === 6) {
        bindingsMode = true;
      } else if (maybeAttrName === 1 || maybeAttrName === 2) {
        let value = attrs[++i];
        while (typeof value === "string") {
          value = attrs[++i];
        }
        continue;
      } else if (maybeAttrName === 4) {
        break;
      } else if (maybeAttrName === 0) {
        i += 4;
        continue;
      }
      i += bindingsMode ? 1 : 2;
    }
    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}
function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
  for (let i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }
  return false;
}
function getProjectAsAttrValue(tNode) {
  const nodeAttrs = tNode.attrs;
  if (nodeAttrs != null) {
    const ngProjectAsAttrIdx = nodeAttrs.indexOf(
      5
      /* AttributeMarker.ProjectAs */
    );
    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }
  return null;
}
function getNameOnlyMarkerIndex(nodeAttrs) {
  for (let i = 0; i < nodeAttrs.length; i++) {
    const nodeAttr = nodeAttrs[i];
    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }
  return nodeAttrs.length;
}
function matchTemplateAttribute(attrs, name) {
  let i = attrs.indexOf(
    4
    /* AttributeMarker.Template */
  );
  if (i > -1) {
    i++;
    while (i < attrs.length) {
      const attr = attrs[i];
      if (typeof attr === "number")
        return -1;
      if (attr === name)
        return i;
      i++;
    }
  }
  return -1;
}
function isSelectorInSelectorList(selector, list) {
  selectorListLoop: for (let i = 0; i < list.length; i++) {
    const currentSelectorInList = list[i];
    if (selector.length !== currentSelectorInList.length) {
      continue;
    }
    for (let j = 0; j < selector.length; j++) {
      if (selector[j] !== currentSelectorInList[j]) {
        continue selectorListLoop;
      }
    }
    return true;
  }
  return false;
}
function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ":not(" + chunk.trim() + ")" : chunk;
}
function stringifyCSSSelector(selector) {
  let result = selector[0];
  let i = 1;
  let mode = 2;
  let currentChunk = "";
  let isNegativeMode = false;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode & 2) {
        const attrValue = selector[++i];
        currentChunk += "[" + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : "") + "]";
      } else if (mode & 8) {
        currentChunk += "." + valueOrMarker;
      } else if (mode & 4) {
        currentChunk += " " + valueOrMarker;
      }
    } else {
      if (currentChunk !== "" && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = "";
      }
      mode = valueOrMarker;
      isNegativeMode = isNegativeMode || !isPositive(mode);
    }
    i++;
  }
  if (currentChunk !== "") {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }
  return result;
}
function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(",");
}
function extractAttrsAndClassesFromSelector(selector) {
  const attrs = [];
  const classes = [];
  let i = 1;
  let mode = 2;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode === 2) {
        if (valueOrMarker !== "") {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8) {
        classes.push(valueOrMarker);
      }
    } else {
      if (!isPositive(mode))
        break;
      mode = valueOrMarker;
    }
    i++;
  }
  if (classes.length) {
    attrs.push(1, ...classes);
  }
  return attrs;
}
function createTextNode(renderer, value) {
  return renderer.createText(value);
}
function updateTextNode(renderer, rNode, value) {
  renderer.setValue(rNode, value);
}
function createCommentNode(renderer, value) {
  return renderer.createComment(escapeCommentText(value));
}
function createElementNode(renderer, name, namespace) {
  return renderer.createElement(name, namespace);
}
function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  renderer.insertBefore(parent, child, beforeNode, isMove);
}
function nativeAppendChild(renderer, parent, child) {
  ngDevMode && assertDefined(parent, "parent node must be defined");
  renderer.appendChild(parent, child);
}
function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
function nativeRemoveNode(renderer, rNode, isHostElement) {
  renderer.removeChild(null, rNode, isHostElement);
}
function clearElementContents(rElement) {
  rElement.textContent = "";
}
function writeDirectStyle(renderer, element2, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  renderer.setAttribute(element2, "style", newValue);
}
function writeDirectClass(renderer, element2, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  if (newValue === "") {
    renderer.removeAttribute(element2, "class");
  } else {
    renderer.setAttribute(element2, "class", newValue);
  }
}
function setupStaticAttributes(renderer, element2, tNode) {
  const { mergedAttrs, classes, styles } = tNode;
  if (mergedAttrs !== null) {
    setUpAttributes(renderer, element2, mergedAttrs);
  }
  if (classes !== null) {
    writeDirectClass(renderer, element2, classes);
  }
  if (styles !== null) {
    writeDirectStyle(renderer, element2, styles);
  }
}
function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {
  const bindingStartIndex = HEADER_OFFSET + decls;
  const initialViewLength = bindingStartIndex + vars;
  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  const consts = typeof constsOrFactory === "function" ? constsOrFactory() : constsOrFactory;
  const tView = blueprint[TVIEW] = {
    type,
    blueprint,
    template: templateFn,
    queries: null,
    viewQuery,
    declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === "function" ? directives() : directives,
    pipeRegistry: typeof pipes === "function" ? pipes() : pipes,
    firstChild: null,
    schemas,
    consts,
    incompleteFirstPass: false,
    ssrId
  };
  if (ngDevMode) {
    Object.seal(tView);
  }
  return tView;
}
function createViewBlueprint(bindingStartIndex, initialViewLength) {
  const blueprint = [];
  for (let i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }
  return blueprint;
}
function getOrCreateComponentTView(def) {
  const tView = def.tView;
  if (tView === null || tView.incompleteFirstPass) {
    const declTNode = null;
    return def.tView = createTView(1, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);
  }
  return tView;
}
function createLView(parentLView, tView, context2, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {
  const lView = tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4 | 128 | 8 | 64 | 1024;
  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048) {
    lView[FLAGS] |= 2048;
  }
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context2;
  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];
  ngDevMode && assertDefined(lView[ENVIRONMENT], "LViewEnvironment is required");
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], "Renderer is required");
  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
  lView[T_HOST] = tHostNode;
  lView[ID] = getUniqueLViewId();
  lView[HYDRATION] = hydrationInfo;
  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;
  ngDevMode && assertEqual(tView.type == 2 ? parentLView !== null : true, true, "Embedded views must have parentLView");
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  return lView;
}
function createComponentLView(lView, hostTNode, def) {
  const native = getNativeByTNode(hostTNode, lView);
  const tView = getOrCreateComponentTView(def);
  const rendererFactory = lView[ENVIRONMENT].rendererFactory;
  const componentView = addToEndOfViewTree(lView, createLView(lView, tView, null, getInitialLViewFlagsFromDef(def), native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));
  return lView[hostTNode.index] = componentView;
}
function getInitialLViewFlagsFromDef(def) {
  let flags = 16;
  if (def.signals) {
    flags = 4096;
  } else if (def.onPush) {
    flags = 64;
  }
  return flags;
}
function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0)
    return -1;
  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], "`LView` must be associated with `TView`!");
    assertEqual(tView.data.length, lView.length, "Expecting LView to be same size as TView");
    assertEqual(tView.data.length, tView.blueprint.length, "Expecting Blueprint to be same size as TView");
    assertFirstUpdatePass(tView);
  }
  const allocIdx = lView.length;
  for (let i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }
  return allocIdx;
}
function addToEndOfViewTree(lView, lViewOrLContainer) {
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }
  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
}
function \u0275\u0275advance(delta = 1) {
  ngDevMode && assertGreaterThan(delta, 0, "Can only advance forward");
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
}
function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);
  if (!checkNoChangesMode) {
    const hooksInitPhaseCompleted = (lView[FLAGS] & 3) === 3;
    if (hooksInitPhaseCompleted) {
      const preOrderCheckHooks = tView.preOrderCheckHooks;
      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      const preOrderHooks = tView.preOrderHooks;
      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0, index);
      }
    }
  }
  setSelectedIndex(index);
}
function writeToDirectiveInput(def, instance, publicName, value) {
  const prevConsumer = setActiveConsumer(null);
  try {
    if (ngDevMode) {
      if (!def.inputs.hasOwnProperty(publicName)) {
        throw new Error(`ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of "${publicName}"`);
      }
      if (instance instanceof NodeInjectorFactory) {
        throw new Error(`ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`);
      }
    }
    const [privateName, flags, transform2] = def.inputs[publicName];
    let inputSignalNode = null;
    if ((flags & InputFlags.SignalBased) !== 0) {
      const field = instance[privateName];
      inputSignalNode = field[SIGNAL];
    }
    if (inputSignalNode !== null && inputSignalNode.transformFn !== void 0) {
      value = inputSignalNode.transformFn(value);
    } else if (transform2 !== null) {
      value = transform2.call(instance, value);
    }
    if (def.setInput !== null) {
      def.setInput(instance, inputSignalNode, value, publicName, privateName);
    } else {
      applyValueToInputField(instance, inputSignalNode, privateName, value);
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === void 0) {
    _icuContainerIterate = loader();
  }
}
function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  if (lNodeToHandle != null) {
    let lContainer;
    let isComponent2 = false;
    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent2 = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], "HOST must be defined for a component LView");
      lNodeToHandle = lNodeToHandle[HOST];
    }
    const rNode = unwrapRNode(lNodeToHandle);
    if (action === 0 && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1 && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2) {
      nativeRemoveNode(renderer, rNode, isComponent2);
    } else if (action === 3) {
      renderer.destroyNode(rNode);
    }
    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}
function removeViewFromDOM(tView, lView) {
  detachViewFromDOM(tView, lView);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
function addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1, parentNativeNode, beforeNode);
}
function detachViewFromDOM(tView, lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    9
    /* NotificationSource.ViewDetachedFromDOM */
  );
  applyView(tView, lView, lView[RENDERER], 2, null, null);
}
function destroyViewTree(rootView) {
  let lViewOrLContainer = rootView[CHILD_HEAD];
  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }
  while (lViewOrLContainer) {
    let next = null;
    if (isLView(lViewOrLContainer)) {
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer);
      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView)
        next = firstView;
    }
    if (!next) {
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }
        lViewOrLContainer = lViewOrLContainer[PARENT];
      }
      if (lViewOrLContainer === null)
        lViewOrLContainer = rootView;
      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }
      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }
    lViewOrLContainer = next;
  }
}
function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], "A projected view should belong to a non-empty projected views collection");
  const movedViews = declarationContainer[MOVED_VIEWS];
  const declarationViewIndex = movedViews.indexOf(lView);
  movedViews.splice(declarationViewIndex, 1);
}
function destroyLView(tView, lView) {
  if (isDestroyed(lView)) {
    return;
  }
  const renderer = lView[RENDERER];
  if (renderer.destroyNode) {
    applyView(tView, lView, renderer, 3, null, null);
  }
  destroyViewTree(lView);
}
function cleanUpView(tView, lView) {
  if (isDestroyed(lView)) {
    return;
  }
  const prevConsumer = setActiveConsumer(null);
  try {
    lView[FLAGS] &= ~128;
    lView[FLAGS] |= 256;
    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView);
    if (lView[TVIEW].type === 1) {
      lView[RENDERER].destroy();
    }
    const declarationContainer = lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      }
      const lQueries = lView[QUERIES];
      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
    unregisterLView(lView);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function processCleanups(tView, lView) {
  ngDevMode && assertNotReactive(processCleanups.name);
  const tCleanup = tView.cleanup;
  const lCleanup = lView[CLEANUP];
  if (tCleanup !== null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === "string") {
        const targetIdx = tCleanup[i + 3];
        ngDevMode && assertNumber(targetIdx, "cleanup target must be a number");
        if (targetIdx >= 0) {
          lCleanup[targetIdx]();
        } else {
          lCleanup[-targetIdx].unsubscribe();
        }
        i += 2;
      } else {
        const context2 = lCleanup[tCleanup[i + 1]];
        tCleanup[i].call(context2);
      }
    }
  }
  if (lCleanup !== null) {
    lView[CLEANUP] = null;
  }
  const destroyHooks = lView[ON_DESTROY_HOOKS];
  if (destroyHooks !== null) {
    lView[ON_DESTROY_HOOKS] = null;
    for (let i = 0; i < destroyHooks.length; i++) {
      const destroyHooksFn = destroyHooks[i];
      ngDevMode && assertFunction(destroyHooksFn, "Expecting destroy hook to be a function.");
      destroyHooksFn();
    }
  }
  const effects = lView[EFFECTS];
  if (effects !== null) {
    lView[EFFECTS] = null;
    for (const effect2 of effects) {
      effect2.destroy();
    }
  }
}
function executeOnDestroys(tView, lView) {
  ngDevMode && assertNotReactive(executeOnDestroys.name);
  let destroyHooks;
  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (let i = 0; i < destroyHooks.length; i += 2) {
      const context2 = lView[destroyHooks[i]];
      if (!(context2 instanceof NodeInjectorFactory)) {
        const toCall = destroyHooks[i + 1];
        if (Array.isArray(toCall)) {
          for (let j = 0; j < toCall.length; j += 2) {
            const callContext = context2[toCall[j]];
            const hook = toCall[j + 1];
            profiler(4, callContext, hook);
            try {
              hook.call(callContext);
            } finally {
              profiler(5, callContext, hook);
            }
          }
        } else {
          profiler(4, context2, toCall);
          try {
            toCall.call(context2);
          } finally {
            profiler(5, context2, toCall);
          }
        }
      }
    }
  }
}
function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
function getClosestRElement(tView, tNode, lView) {
  let parentTNode = tNode;
  while (parentTNode !== null && parentTNode.type & (8 | 32 | 128)) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  }
  if (parentTNode === null) {
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(
      parentTNode,
      3 | 4
      /* TNodeType.Container */
    );
    if (isComponentHost(parentTNode)) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      const { encapsulation } = tView.data[parentTNode.directiveStart + parentTNode.componentOffset];
      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {
        return null;
      }
    }
    return getNativeByTNode(parentTNode, lView);
  }
}
function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8 | 32)) {
    return getNativeByTNode(parentTNode, lView);
  }
  return null;
}
function setI18nHandling(getInsertInFrontOfRNodeWithI18n2, processI18nInsertBefore2) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n2;
  _processI18nInsertBefore = processI18nInsertBefore2;
}
function appendChild(tView, lView, childRNode, childTNode) {
  const parentRNode = getParentRElement(tView, childTNode, lView);
  const renderer = lView[RENDERER];
  const parentTNode = childTNode.parent || lView[T_HOST];
  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (let i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }
  _processI18nInsertBefore !== void 0 && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 32 | 16 | 128
      /* TNodeType.LetDeclaration */
    );
    const tNodeType = tNode.type;
    if (tNodeType & 3) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8) {
      const elIcuContainerChild = tNode.child;
      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        const rNodeOrLContainer = lView[tNode.index];
        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 128) {
      return getFirstNativeNode(lView, tNode.next);
    } else if (tNodeType & 32) {
      let nextRNode = icuContainerIterate(tNode, lView);
      let rNode = nextRNode();
      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      const projectionNodes = getProjectionNodes(lView, tNode);
      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }
  return null;
}
function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }
  return null;
}
function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
  if (nextViewIndex < lContainer.length) {
    const lView = lContainer[nextViewIndex];
    const firstTNodeOfView = lView[TVIEW].firstChild;
    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }
  return lContainer[NATIVE];
}
function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    if (tNode.type === 128) {
      tNode = tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const rawSlotValue = lView[tNode.index];
    const tNodeType = tNode.type;
    if (isProjection) {
      if (action === 0) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 2;
      }
    }
    if (!isDetachedByI18n(tNode)) {
      if (tNodeType & 8) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;
        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(
          tNode,
          3 | 4
          /* TNodeType.Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}
function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
function applyProjection(tView, lView, tProjectionNode) {
  const renderer = lView[RENDERER];
  const parentRNode = getParentRElement(tView, tProjectionNode, lView);
  const parentTNode = tProjectionNode.parent || lView[T_HOST];
  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0, lView, tProjectionNode, parentRNode, beforeNode);
}
function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  const componentLView = lView[DECLARATION_COMPONENT_VIEW];
  const componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, "number", "expecting projection index");
  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
  if (Array.isArray(nodeToProjectOrRNodes)) {
    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
      const rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    let nodeToProject = nodeToProjectOrRNodes;
    const projectedComponentLView = componentLView[PARENT];
    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {
      nodeToProject.flags |= 128;
    }
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  const anchor = lContainer[NATIVE];
  const native = unwrapRNode(lContainer);
  if (anchor !== native) {
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
function applyStyling(renderer, isClassBased, rNode, prop, value) {
  if (isClassBased) {
    if (!value) {
      renderer.removeClass(rNode, prop);
    } else {
      renderer.addClass(rNode, prop);
    }
  } else {
    let flags = prop.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value == null) {
      renderer.removeStyle(rNode, prop, flags);
    } else {
      const isImportant = typeof value === "string" ? value.endsWith("!important") : false;
      if (isImportant) {
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }
      renderer.setStyle(rNode, prop, value, flags);
    }
  }
}
function executeTemplate(tView, lView, templateFn, rf, context2) {
  const prevSelectedIndex = getSelectedIndex();
  const isUpdatePhase = rf & 2;
  try {
    setSelectedIndex(-1);
    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
    }
    const preHookType = isUpdatePhase ? 2 : 0;
    profiler(preHookType, context2, templateFn);
    templateFn(rf, context2);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    const postHookType = isUpdatePhase ? 3 : 1;
    profiler(postHookType, context2, templateFn);
  }
}
function createDirectivesInstances(tView, lView, tNode) {
  instantiateAllDirectives(tView, lView, tNode);
  if ((tNode.flags & 64) === 64) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    let localIndex = tNode.index + 1;
    for (let i = 0; i < localNames.length; i += 2) {
      const index = localNames[i + 1];
      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
function locateHostElement(renderer, elementOrSelector, encapsulation, injector) {
  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);
  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;
  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);
  applyRootElementTransform(rootElement);
  return rootElement;
}
function applyRootElementTransform(rootElement) {
  _applyRootElementTransformImpl(rootElement);
}
function applyRootElementTransformImpl(rootElement) {
  if (hasSkipHydrationAttrOnRElement(rootElement)) {
    clearElementContents(rootElement);
  } else {
    processTextNodeMarkersBeforeHydration(rootElement);
  }
}
function enableApplyRootElementTransformImpl() {
  _applyRootElementTransformImpl = applyRootElementTransformImpl;
}
function mapPropName(name) {
  if (name === "class")
    return "className";
  if (name === "for")
    return "htmlFor";
  if (name === "formaction")
    return "formAction";
  if (name === "innerHtml")
    return "innerHTML";
  if (name === "readonly")
    return "readOnly";
  if (name === "tabindex")
    return "tabIndex";
  return name;
}
function setPropertyAndInputs(tNode, lView, propName, value, renderer, sanitizer) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  const tView = lView[TVIEW];
  const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);
  if (hasSetInput) {
    isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);
    ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);
    return;
  }
  if (tNode.type & 3) {
    propName = mapPropName(propName);
  }
  setDomProperty(tNode, lView, propName, value, renderer, sanitizer);
}
function setDomProperty(tNode, lView, propName, value, renderer, sanitizer) {
  if (tNode.type & 3) {
    const element2 = getNativeByTNode(tNode, lView);
    if (ngDevMode) {
      validateAgainstEventProperties(propName);
      if (!isPropertyValid(element2, propName, tNode.value, lView[TVIEW].schemas)) {
        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
      }
    }
    value = sanitizer != null ? sanitizer(value, tNode.value || "", propName) : value;
    renderer.setProperty(element2, propName, value);
  } else if (tNode.type & 12) {
    if (ngDevMode && !matchingSchemas(lView[TVIEW].schemas, tNode.value)) {
      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
    }
  }
}
function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
  if (!(childComponentLView[FLAGS] & 16)) {
    childComponentLView[FLAGS] |= 64;
  }
}
function setNgReflectProperty(lView, tNode, attrName, value) {
  const environment = lView[ENVIRONMENT];
  if (!environment.ngReflect) {
    return;
  }
  const element2 = getNativeByTNode(tNode, lView);
  const renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  const debugValue = normalizeDebugBindingValue(value);
  if (tNode.type & 3) {
    if (value == null) {
      renderer.removeAttribute(element2, attrName);
    } else {
      renderer.setAttribute(element2, attrName, debugValue);
    }
  } else {
    const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);
    renderer.setValue(element2, textContent);
  }
}
function setNgReflectProperties(lView, tView, tNode, publicName, value) {
  const environment = lView[ENVIRONMENT];
  if (!environment.ngReflect || !(tNode.type & (3 | 4))) {
    return;
  }
  const inputConfig = tNode.inputs?.[publicName];
  const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];
  if (hostInputConfig) {
    for (let i = 0; i < hostInputConfig.length; i += 2) {
      const index = hostInputConfig[i];
      const publicName2 = hostInputConfig[i + 1];
      const def = tView.data[index];
      setNgReflectProperty(lView, tNode, def.inputs[publicName2][0], value);
    }
  }
  if (inputConfig) {
    for (const index of inputConfig) {
      const def = tView.data[index];
      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);
    }
  }
}
function instantiateAllDirectives(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  if (isComponentHost(tNode)) {
    ngDevMode && assertTNodeType(
      tNode,
      3
      /* TNodeType.AnyRNode */
    );
    createComponentLView(lView, tNode, tView.data[start + tNode.componentOffset]);
  }
  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }
  const initialInputs = tNode.initialInputs;
  for (let i = start; i < end; i++) {
    const def = tView.data[i];
    const directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);
    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }
    if (isComponentDef(def)) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);
    }
  }
}
function invokeDirectivesHostBindings(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const elementIndex = tNode.index;
  const currentDirectiveIndex = getCurrentDirectiveIndex();
  try {
    setSelectedIndex(elementIndex);
    for (let dirIndex = start; dirIndex < end; dirIndex++) {
      const def = tView.data[dirIndex];
      const directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);
      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1, directive);
  }
}
function findDirectiveDefMatches(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  const registry = tView.directiveRegistry;
  let matches = null;
  if (registry) {
    for (let i = 0; i < registry.length; i++) {
      const def = registry[i];
      if (isNodeMatchingSelectorList(
        tNode,
        def.selectors,
        /* isProjectionMode */
        false
      )) {
        matches ??= [];
        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2, `"${tNode.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${stringify(def.type)} component.`);
            if (matches.length && isComponentDef(matches[0])) {
              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);
            }
          }
          matches.unshift(def);
        } else {
          matches.push(def);
        }
      }
    }
  }
  return matches;
}
function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2, `Attempted to set attribute \`${name}\` on a container node. Host bindings are not valid on ng-container or ng-template.`);
  }
  const element2 = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element2, namespace, tNode.value, name, value, sanitizer);
}
function setElementAttribute(renderer, element2, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    renderer.removeAttribute(element2, name, namespace);
  } else {
    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || "", name);
    renderer.setAttribute(element2, name, strValue, namespace);
  }
}
function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  const initialInputs = initialInputData[directiveIndex];
  if (initialInputs !== null) {
    for (let i = 0; i < initialInputs.length; i += 2) {
      const lookupName = initialInputs[i];
      const value = initialInputs[i + 1];
      writeToDirectiveInput(def, instance, lookupName, value);
      if (ngDevMode) {
        setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);
      }
    }
  }
}
function elementLikeStartShared(tNode, lView, index, name, locateOrCreateNativeNode) {
  const adjustedIndex = HEADER_OFFSET + index;
  const tView = lView[TVIEW];
  const native = locateOrCreateNativeNode(tView, lView, tNode, name, index);
  lView[adjustedIndex] = native;
  setCurrentTNode(tNode, true);
  const isElement = tNode.type === 2;
  if (isElement) {
    setupStaticAttributes(lView[RENDERER], native, tNode);
    if (getElementDepthCount() === 0 || isDirectiveHost(tNode)) {
      attachPatchData(native, lView);
    }
    increaseElementDepthCount();
  } else {
    attachPatchData(native, lView);
  }
  if (wasLastNodeCreated() && (!isElement || !isDetachedByI18n(tNode))) {
    appendChild(tView, lView, native, tNode);
  }
  return tNode;
}
function elementLikeEndShared(tNode) {
  let currentTNode = tNode;
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  return currentTNode;
}
function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
  if (tData[bindingIndex] === null) {
    if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {
      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      let bindingMetadata = propertyName;
      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }
      tData[bindingIndex] = bindingMetadata;
    }
  }
}
function loadComponentRenderer(currentDef, tNode, lView) {
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }
  return lView[RENDERER];
}
function handleUncaughtError(lView, error) {
  const injector = lView[INJECTOR];
  if (!injector) {
    return;
  }
  const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);
  errorHandler?.(error);
}
function setAllInputsForProperty(tNode, tView, lView, publicName, value) {
  const inputs = tNode.inputs?.[publicName];
  const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];
  let hasMatch = false;
  if (hostDirectiveInputs) {
    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {
      const index = hostDirectiveInputs[i];
      ngDevMode && assertIndexInRange(lView, index);
      const publicName2 = hostDirectiveInputs[i + 1];
      const def = tView.data[index];
      writeToDirectiveInput(def, lView[index], publicName2, value);
      hasMatch = true;
    }
  }
  if (inputs) {
    for (const index of inputs) {
      ngDevMode && assertIndexInRange(lView, index);
      const instance = lView[index];
      const def = tView.data[index];
      writeToDirectiveInput(def, instance, publicName, value);
      hasMatch = true;
    }
  }
  return hasMatch;
}
function setDirectiveInput(tNode, tView, lView, target, publicName, value) {
  let hostIndex = null;
  let hostDirectivesStart = null;
  let hostDirectivesEnd = null;
  let hasSet = false;
  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {
    throw new Error(`Node does not have a directive with type ${target.type.name}`);
  }
  const data = tNode.directiveToIndex.get(target.type);
  if (typeof data === "number") {
    hostIndex = data;
  } else {
    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;
  }
  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveInputs?.hasOwnProperty(publicName)) {
    const hostDirectiveInputs = tNode.hostDirectiveInputs[publicName];
    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {
      const index = hostDirectiveInputs[i];
      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {
        ngDevMode && assertIndexInRange(lView, index);
        const def = tView.data[index];
        const hostDirectivePublicName = hostDirectiveInputs[i + 1];
        writeToDirectiveInput(def, lView[index], hostDirectivePublicName, value);
        hasSet = true;
      } else if (index > hostDirectivesEnd) {
        break;
      }
    }
  }
  if (hostIndex !== null && target.inputs.hasOwnProperty(publicName)) {
    ngDevMode && assertIndexInRange(lView, hostIndex);
    writeToDirectiveInput(target, lView[hostIndex], publicName, value);
    hasSet = true;
  }
  return hasSet;
}
function renderComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, "Should be run in creation mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  const componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  const hostRNode = componentView[HOST];
  if (hostRNode !== null && componentView[HYDRATION] === null) {
    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);
  }
  profiler(
    18
    /* ProfilerEvent.ComponentStart */
  );
  renderView(componentTView, componentView, componentView[CONTEXT]);
  profiler(19, componentView[CONTEXT]);
}
function syncViewWithBlueprint(tView, lView) {
  for (let i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
function renderView(tView, lView, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), true, "Should be run in creation mode");
  ngDevMode && assertNotReactive(renderView.name);
  enterView(lView);
  try {
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(1, viewQuery, context2);
    }
    const templateFn = tView.template;
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1, context2);
    }
    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    }
    lView[QUERIES]?.finishViewCreation(tView);
    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    }
    if (tView.staticViewQueries) {
      executeViewQueryFn(2, tView.viewQuery, context2);
    }
    const components = tView.components;
    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }
    throw error;
  } finally {
    lView[FLAGS] &= ~4;
    leaveView();
  }
}
function renderChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    renderComponent(hostLView, components[i]);
  }
}
function createAndRenderEmbeddedLView(declarationLView, templateTNode, context2, options) {
  const prevConsumer = setActiveConsumer(null);
  try {
    const embeddedTView = templateTNode.tView;
    ngDevMode && assertDefined(embeddedTView, "TView must be defined for a template node.");
    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);
    const isSignalView = declarationLView[FLAGS] & 4096;
    const viewFlags = isSignalView ? 4096 : 16;
    const embeddedLView = createLView(declarationLView, embeddedTView, context2, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);
    const declarationLContainer = declarationLView[templateTNode.index];
    ngDevMode && assertLContainer(declarationLContainer);
    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
    const declarationViewLQueries = declarationLView[QUERIES];
    if (declarationViewLQueries !== null) {
      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
    }
    renderView(embeddedTView, embeddedLView, context2);
    return embeddedLView;
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function shouldAddViewToDom(tNode, dehydratedView) {
  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);
}
function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
  while (tNode !== null) {
    if (tNode.type === 128) {
      tNode = isProjection ? tNode.projectionNext : tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const lNode = lView[tNode.index];
    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    }
    if (isLContainer(lNode)) {
      collectNativeNodesInLContainer(lNode, result);
    }
    const tNodeType = tNode.type;
    if (tNodeType & 8) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32) {
      const nextRNode = icuContainerIterate(tNode, lView);
      let rNode;
      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16) {
      const nodesInSlot = getProjectionNodes(lView, tNode);
      if (Array.isArray(nodesInSlot)) {
        result.push(...nodesInSlot);
      } else {
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
  return result;
}
function collectNativeNodesInLContainer(lContainer, result) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lViewInAContainer = lContainer[i];
    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
    if (lViewFirstChildTNode !== null) {
      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
    }
  }
  if (lContainer[NATIVE] !== lContainer[HOST]) {
    result.push(lContainer[NATIVE]);
  }
}
function addAfterRenderSequencesForView(lView) {
  if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {
    for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {
      sequence.impl.addSequence(sequence);
    }
    lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;
  }
}
function getOrBorrowReactiveLViewConsumer(lView) {
  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);
}
function borrowReactiveLViewConsumer(lView) {
  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
function maybeReturnReactiveLViewConsumer(consumer) {
  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {
    return;
  }
  consumer.lView = null;
  freeConsumers.push(consumer);
}
function getOrCreateTemporaryConsumer(lView) {
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
function viewShouldHaveReactiveConsumer(tView) {
  return tView.type !== 2;
}
function isReactiveLViewConsumer(node) {
  return node.kind === "template";
}
function runEffectsInView(view) {
  if (view[EFFECTS] === null) {
    return;
  }
  let tryFlushEffects = true;
  while (tryFlushEffects) {
    let foundDirtyEffect = false;
    for (const effect2 of view[EFFECTS]) {
      if (!effect2.dirty) {
        continue;
      }
      foundDirtyEffect = true;
      if (effect2.zone === null || Zone.current === effect2.zone) {
        effect2.run();
      } else {
        effect2.zone.run(() => effect2.run());
      }
    }
    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & 8192);
  }
}
function detectChangesInternal(lView, mode = 0) {
  const environment = lView[ENVIRONMENT];
  const rendererFactory = environment.rendererFactory;
  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
  if (!checkNoChangesMode) {
    rendererFactory.begin?.();
  }
  try {
    detectChangesInViewWhileDirty(lView, mode);
  } finally {
    if (!checkNoChangesMode) {
      rendererFactory.end?.();
    }
  }
}
function detectChangesInViewWhileDirty(lView, mode) {
  const lastIsRefreshingViewsValue = isRefreshingViews();
  try {
    setIsRefreshingViews(true);
    detectChangesInView(lView, mode);
    if (ngDevMode && isExhaustiveCheckNoChanges()) {
      return;
    }
    let retries = 0;
    while (requiresRefreshOrTraversal(lView)) {
      if (retries === MAXIMUM_REFRESH_RERUNS$1) {
        throw new RuntimeError(103, ngDevMode && "Infinite change detection while trying to refresh views. There may be components which each cause the other to require a refresh, causing an infinite loop.");
      }
      retries++;
      detectChangesInView(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  } finally {
    setIsRefreshingViews(lastIsRefreshingViewsValue);
  }
}
function checkNoChangesInternal(lView, exhaustive) {
  setIsInCheckNoChangesMode(exhaustive ? CheckNoChangesMode.Exhaustive : CheckNoChangesMode.OnlyDirtyViews);
  try {
    detectChangesInternal(lView);
  } finally {
    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);
  }
}
function refreshView(tView, lView, templateFn, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), false, "Should be run in update mode");
  if (isDestroyed(lView))
    return;
  const flags = lView[FLAGS];
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();
  enterView(lView);
  let returnConsumerToPool = true;
  let prevConsumer = null;
  let currentConsumer = null;
  if (!isInCheckNoChangesPass) {
    if (viewShouldHaveReactiveConsumer(tView)) {
      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (getActiveConsumer() === null) {
      returnConsumerToPool = false;
      currentConsumer = getOrCreateTemporaryConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {
      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
      lView[REACTIVE_TEMPLATE_CONSUMER] = null;
    }
  }
  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2, context2);
    }
    const hooksInitPhaseCompleted = (flags & 3) === 3;
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;
        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;
        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0, null);
        }
        incrementInitPhaseFlags(
          lView,
          0
          /* InitPhaseState.OnInitHooksToBeRun */
        );
      }
    }
    if (!isInExhaustiveCheckNoChangesPass) {
      markTransplantedViewsForRefresh(lView);
    }
    runEffectsInView(lView);
    detectChangesInEmbeddedViews(
      lView,
      0
      /* ChangeDetectionMode.Global */
    );
    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const contentCheckHooks = tView.contentCheckHooks;
        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        const contentHooks = tView.contentHooks;
        if (contentHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            contentHooks,
            1
            /* InitPhaseState.AfterContentInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          1
          /* InitPhaseState.AfterContentInitHooksToBeRun */
        );
      }
    }
    processHostBindingOpCodes(tView, lView);
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        0
        /* ChangeDetectionMode.Global */
      );
    }
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(2, viewQuery, context2);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const viewCheckHooks = tView.viewCheckHooks;
        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        const viewHooks = tView.viewHooks;
        if (viewHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            viewHooks,
            2
            /* InitPhaseState.AfterViewInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          2
          /* InitPhaseState.AfterViewInitHooksToBeRun */
        );
      }
    }
    if (tView.firstUpdatePass === true) {
      tView.firstUpdatePass = false;
    }
    if (lView[EFFECTS_TO_SCHEDULE]) {
      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {
        notifyEffect();
      }
      lView[EFFECTS_TO_SCHEDULE] = null;
    }
    if (!isInCheckNoChangesPass) {
      addAfterRenderSequencesForView(lView);
      lView[FLAGS] &= ~(64 | 8);
    }
  } catch (e) {
    if (!isInCheckNoChangesPass) {
      markAncestorsForTraversal(lView);
    }
    throw e;
  } finally {
    if (currentConsumer !== null) {
      consumerAfterComputation(currentConsumer, prevConsumer);
      if (returnConsumerToPool) {
        maybeReturnReactiveLViewConsumer(currentConsumer);
      }
    }
    leaveView();
  }
}
function detectChangesInEmbeddedViews(lView, mode) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];
      detectChangesInViewIfAttached(embeddedLView, mode);
    }
  }
}
function markTransplantedViewsForRefresh(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!(lContainer[FLAGS] & 2))
      continue;
    const movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, "Transplanted View flags set but missing MOVED_VIEWS");
    for (let i = 0; i < movedViews.length; i++) {
      const movedLView = movedViews[i];
      markViewForRefresh(movedLView);
    }
  }
}
function detectChangesInComponent(hostLView, componentHostIdx, mode) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, "Should be run in update mode");
  profiler(
    18
    /* ProfilerEvent.ComponentStart */
  );
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  detectChangesInViewIfAttached(componentView, mode);
  profiler(19, componentView[CONTEXT]);
}
function detectChangesInViewIfAttached(lView, mode) {
  if (!viewAttachedToChangeDetector(lView)) {
    return;
  }
  detectChangesInView(lView, mode);
}
function detectChangesInView(lView, mode) {
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const tView = lView[TVIEW];
  const flags = lView[FLAGS];
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];
  let shouldRefreshView = !!(mode === 0 && flags & 16);
  shouldRefreshView ||= !!(flags & 64 && mode === 0 && !isInCheckNoChangesPass);
  shouldRefreshView ||= !!(flags & 1024);
  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));
  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());
  if (consumer) {
    consumer.dirty = false;
  }
  lView[FLAGS] &= ~(8192 | 1024);
  if (shouldRefreshView) {
    refreshView(tView, lView, tView.template, lView[CONTEXT]);
  } else if (flags & 8192) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (!isInCheckNoChangesPass) {
        runEffectsInView(lView);
      }
      detectChangesInEmbeddedViews(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
      const components = tView.components;
      if (components !== null) {
        detectChangesInChildComponents(
          lView,
          components,
          1
          /* ChangeDetectionMode.Targeted */
        );
      }
      if (!isInCheckNoChangesPass) {
        addAfterRenderSequencesForView(lView);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function detectChangesInChildComponents(hostLView, components, mode) {
  for (let i = 0; i < components.length; i++) {
    detectChangesInComponent(hostLView, components[i], mode);
  }
}
function processHostBindingOpCodes(tView, lView) {
  const hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null)
    return;
  try {
    for (let i = 0; i < hostBindingOpCodes.length; i++) {
      const opCode = hostBindingOpCodes[i];
      if (opCode < 0) {
        setSelectedIndex(~opCode);
      } else {
        const directiveIdx = opCode;
        const bindingRootIndx = hostBindingOpCodes[++i];
        const hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        const context2 = lView[directiveIdx];
        profiler(24, context2);
        hostBindingFn(2, context2);
        profiler(25, context2);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
function markViewDirty(lView, source) {
  const dirtyBitsToUse = isRefreshingViews() ? (
    // When we are actively refreshing views, we only use the `Dirty` bit to mark a view
    64
  ) : (
    // When we are not actively refreshing a view tree, it is absolutely
    // valid to update state and mark views dirty. We use the `RefreshView` flag in this
    // case to allow synchronously rerunning change detection. This applies today to
    // afterRender hooks as well as animation listeners which execute after detecting
    // changes in a view when the render factory flushes.
    1024 | 64
  );
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);
  while (lView) {
    lView[FLAGS] |= dirtyBitsToUse;
    const parent = getLViewParent(lView);
    if (isRootView(lView) && !parent) {
      return lView;
    }
    lView = parent;
  }
  return null;
}
function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  const lContainer = [
    hostNative,
    // host native
    true,
    // Boolean `true` in this position signifies that this is an `LContainer`
    0,
    // flags
    currentView,
    // parent
    null,
    // next
    tNode,
    // t_host
    null,
    // dehydrated views
    native,
    // native,
    null,
    // view refs
    null
    // moved views
  ];
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, "Should allocate correct number of slots for LContainer header.");
  return lContainer;
}
function getLViewFromLContainer(lContainer, index) {
  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;
  if (adjustedIndex < lContainer.length) {
    const lView = lContainer[adjustedIndex];
    ngDevMode && assertLView(lView);
    return lView;
  }
  return void 0;
}
function addLViewToLContainer(lContainer, lView, index, addToDOM = true) {
  const tView = lView[TVIEW];
  insertView(tView, lView, lContainer, index);
  if (addToDOM) {
    const beforeNode = getBeforeNodeForView(index, lContainer);
    const renderer = lView[RENDERER];
    const parentRNode = renderer.parentNode(lContainer[NATIVE]);
    if (parentRNode !== null) {
      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
    }
  }
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {
    hydrationInfo.firstChild = null;
  }
}
function removeLViewFromLContainer(lContainer, index) {
  const lView = detachView(lContainer, index);
  if (lView !== void 0) {
    destroyLView(lView[TVIEW], lView);
  }
  return lView;
}
function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET)
    return;
  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  const viewToDetach = lContainer[indexInContainer];
  if (viewToDetach) {
    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }
    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }
    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);
    const lQueries = removedLView[QUERIES];
    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }
    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null;
    viewToDetach[FLAGS] &= ~128;
  }
  return viewToDetach;
}
function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  const indexInContainer = CONTAINER_HEADER_OFFSET + index;
  const containerLength = lContainer.length;
  if (index > 0) {
    lContainer[indexInContainer - 1][NEXT] = lView;
  }
  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }
  lView[PARENT] = lContainer;
  const declarationLContainer = lView[DECLARATION_LCONTAINER];
  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  }
  const lQueries = lView[QUERIES];
  if (lQueries !== null) {
    lQueries.insertView(tView);
  }
  updateAncestorTraversalFlagsOnAttach(lView);
  lView[FLAGS] |= 128;
}
function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, "LView required");
  ngDevMode && assertLContainer(declarationContainer);
  const movedViews = declarationContainer[MOVED_VIEWS];
  const parent = lView[PARENT];
  ngDevMode && assertDefined(parent, "missing parent");
  if (isLView(parent)) {
    declarationContainer[FLAGS] |= 2;
  } else {
    const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(insertedComponentLView, "Missing insertedComponentLView");
    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(declaredComponentLView, "Missing declaredComponentLView");
    if (declaredComponentLView !== insertedComponentLView) {
      declarationContainer[FLAGS] |= 2;
    }
  }
  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}
function isViewDirty(view) {
  return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & 64);
}
function markForRefresh(view) {
  markViewForRefresh(view._lView);
}
function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4) {
    ngDevMode && assertDefined(hostTNode.tView, "TView must be allocated");
    return new TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }
  return null;
}
function getFriendlyStringFromTNodeType(tNodeType) {
  switch (tNodeType) {
    case 4:
      return "view container";
    case 2:
      return "element";
    case 8:
      return "ng-container";
    case 32:
      return "icu";
    case 64:
      return "i18n";
    case 16:
      return "projection";
    case 1:
      return "text";
    case 128:
      return "@let";
    default:
      return "<unknown>";
  }
}
function validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {
  if (!node || node.nodeType !== nodeType || node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== tagName?.toLowerCase()) {
    const expectedNode = shortRNodeDescription(nodeType, tagName, null);
    let header = `During hydration Angular expected ${expectedNode} but `;
    const hostComponentDef = getDeclarationComponentDef(lView);
    const componentClassName = hostComponentDef?.type?.name;
    const expectedDom = describeExpectedDom(lView, tNode, isViewContainerAnchor);
    const expected = `Angular expected this DOM:

${expectedDom}

`;
    let actual = "";
    const componentHostElement = unwrapRNode(lView[HOST]);
    if (!node) {
      header += `the node was not found.

`;
      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom);
    } else {
      const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);
      header += `found ${actualNode}.

`;
      const actualDom = describeDomFromNode(node);
      actual = `Actual DOM is:

${actualDom}

`;
      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom, actualDom);
    }
    const footer = getHydrationErrorFooter(componentClassName);
    const message = header + expected + actual + getHydrationAttributeNote() + footer;
    throw new RuntimeError(-500, message);
  }
}
function validateSiblingNodeExists(node) {
  validateNodeExists(node);
  if (!node.nextSibling) {
    const header = "During hydration Angular expected more sibling nodes to be present.\n\n";
    const actual = `Actual DOM is:

${describeDomFromNode(node)}

`;
    const footer = getHydrationErrorFooter();
    const message = header + actual + footer;
    markRNodeAsHavingHydrationMismatch(node, "", actual);
    throw new RuntimeError(-501, message);
  }
}
function validateNodeExists(node, lView = null, tNode = null) {
  if (!node) {
    const header = "During hydration, Angular expected an element to be present at this location.\n\n";
    let expected = "";
    let footer = "";
    if (lView !== null && tNode !== null) {
      expected = describeExpectedDom(lView, tNode, false);
      footer = getHydrationErrorFooter();
      markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, "");
    }
    throw new RuntimeError(-502, `${header}${expected}

${footer}`);
  }
}
function nodeNotFoundError(lView, tNode) {
  const header = "During serialization, Angular was unable to find an element in the DOM:\n\n";
  const expected = `${describeExpectedDom(lView, tNode, false)}

`;
  const footer = getHydrationErrorFooter();
  throw new RuntimeError(-502, header + expected + footer);
}
function nodeNotFoundAtPathError(host, path) {
  const header = `During hydration Angular was unable to locate a node using the "${path}" path, starting from the ${describeRNode(host)} node.

`;
  const footer = getHydrationErrorFooter();
  markRNodeAsHavingHydrationMismatch(host);
  throw new RuntimeError(-502, header + footer);
}
function unsupportedProjectionOfDomNodes(rNode) {
  const header = "During serialization, Angular detected DOM nodes that were created outside of Angular context and provided as projectable nodes (likely via `ViewContainerRef.createComponent` or `createComponent` APIs). Hydration is not supported for such cases, consider refactoring the code to avoid this pattern or using `ngSkipHydration` on the host element of the component.\n\n";
  const actual = `${describeDomFromNode(rNode)}

`;
  const message = header + actual + getHydrationAttributeNote();
  return new RuntimeError(-503, message);
}
function invalidSkipHydrationHost(rNode) {
  const header = "The `ngSkipHydration` flag is applied on a node that doesn't act as a component host. Hydration can be skipped only on per-component basis.\n\n";
  const actual = `${describeDomFromNode(rNode)}

`;
  const footer = "Please move the `ngSkipHydration` attribute to the component host element.\n\n";
  const message = header + actual + footer;
  return new RuntimeError(-504, message);
}
function stringifyTNodeAttrs(tNode) {
  const results = [];
  if (tNode.attrs) {
    for (let i = 0; i < tNode.attrs.length; ) {
      const attrName = tNode.attrs[i++];
      if (typeof attrName == "number") {
        break;
      }
      const attrValue = tNode.attrs[i++];
      results.push(`${attrName}="${shorten(attrValue)}"`);
    }
  }
  return results.join(" ");
}
function stringifyRNodeAttrs(rNode) {
  const results = [];
  for (let i = 0; i < rNode.attributes.length; i++) {
    const attr = rNode.attributes[i];
    if (internalAttrs.has(attr.name))
      continue;
    results.push(`${attr.name}="${shorten(attr.value)}"`);
  }
  return results.join(" ");
}
function describeTNode(tNode, innerContent = "\u2026") {
  switch (tNode.type) {
    case 1:
      const content = tNode.value ? `(${tNode.value})` : "";
      return `#text${content}`;
    case 2:
      const attrs = stringifyTNodeAttrs(tNode);
      const tag = tNode.value.toLowerCase();
      return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
    case 8:
      return "<!-- ng-container -->";
    case 4:
      return "<!-- container -->";
    default:
      const typeAsString = getFriendlyStringFromTNodeType(tNode.type);
      return `#node(${typeAsString})`;
  }
}
function describeRNode(rNode, innerContent = "\u2026") {
  const node = rNode;
  switch (node.nodeType) {
    case Node.ELEMENT_NODE:
      const tag = node.tagName.toLowerCase();
      const attrs = stringifyRNodeAttrs(node);
      return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
    case Node.TEXT_NODE:
      const content = node.textContent ? shorten(node.textContent) : "";
      return `#text${content ? `(${content})` : ""}`;
    case Node.COMMENT_NODE:
      return `<!-- ${shorten(node.textContent ?? "")} -->`;
    default:
      return `#node(${node.nodeType})`;
  }
}
function describeExpectedDom(lView, tNode, isViewContainerAnchor) {
  const spacer = "  ";
  let content = "";
  if (tNode.prev) {
    content += spacer + "\u2026\n";
    content += spacer + describeTNode(tNode.prev) + "\n";
  } else if (tNode.type && tNode.type & 12) {
    content += spacer + "\u2026\n";
  }
  if (isViewContainerAnchor) {
    content += spacer + describeTNode(tNode) + "\n";
    content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}
`;
  } else {
    content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}
`;
  }
  content += spacer + "\u2026\n";
  const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;
  if (parentRNode) {
    content = describeRNode(parentRNode, "\n" + content);
  }
  return content;
}
function describeDomFromNode(node) {
  const spacer = "  ";
  let content = "";
  const currentNode = node;
  if (currentNode.previousSibling) {
    content += spacer + "\u2026\n";
    content += spacer + describeRNode(currentNode.previousSibling) + "\n";
  }
  content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}
`;
  if (node.nextSibling) {
    content += spacer + "\u2026\n";
  }
  if (node.parentNode) {
    content = describeRNode(currentNode.parentNode, "\n" + content);
  }
  return content;
}
function shortRNodeDescription(nodeType, tagName, textContent) {
  switch (nodeType) {
    case Node.ELEMENT_NODE:
      return `<${tagName.toLowerCase()}>`;
    case Node.TEXT_NODE:
      const content = textContent ? ` (with the "${shorten(textContent)}" content)` : "";
      return `a text node${content}`;
    case Node.COMMENT_NODE:
      return "a comment node";
    default:
      return `#node(nodeType=${nodeType})`;
  }
}
function getHydrationErrorFooter(componentClassName) {
  const componentInfo = componentClassName ? `the "${componentClassName}"` : "corresponding";
  return `To fix this problem:
  * check ${componentInfo} component for hydration-related issues
  * check to see if your template has valid HTML structure
  * or skip hydration by adding the \`ngSkipHydration\` attribute to its host node in a template

`;
}
function getHydrationAttributeNote() {
  return "Note: attributes are only displayed to better represent the DOM but have no effect on hydration mismatches.\n\n";
}
function stripNewlines(input2) {
  return input2.replace(/\s+/gm, "");
}
function shorten(input2, maxLength = 50) {
  if (!input2) {
    return "";
  }
  input2 = stripNewlines(input2);
  return input2.length > maxLength ? `${input2.substring(0, maxLength - 1)}\u2026` : input2;
}
function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
  if (Array.isArray(tNodeInsertBeforeIndex)) {
    ngDevMode && assertDomNode(childRNode);
    let i18nParent = childRNode;
    let anchorRNode = null;
    if (!(childTNode.type & 3)) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }
    if (i18nParent !== null && childTNode.componentOffset === -1) {
      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        const i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertPureTNodeType(type);
  let tNode = tView.data[index];
  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);
    if (isInI18nBlock()) {
      tNode.flags |= 32;
    }
  } else if (tNode.type & 64) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    const parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, "Expecting same index");
  }
  setCurrentTNode(tNode, true);
  return tNode;
}
function createTNodeAtIndex(tView, index, type, name, attrs) {
  const currentTNode = getCurrentTNodePlaceholderOk();
  const isParent = isCurrentTNodeParent();
  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);
  linkTNodeInTView(tView, tNode, currentTNode, isParent);
  return tNode;
}
function linkTNodeInTView(tView, tNode, currentTNode, isParent) {
  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }
  if (currentTNode !== null) {
    if (isParent) {
      if (currentTNode.child == null && tNode.parent !== null) {
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        currentTNode.next = tNode;
        tNode.prev = currentTNode;
      }
    }
  }
}
function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertNotSame(attrs, void 0, "'undefined' is not valid value for 'attrs'");
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  let injectorIndex = tParent ? tParent.injectorIndex : -1;
  let flags = 0;
  if (isInSkipHydrationBlock()) {
    flags |= 128;
  }
  const tNode = {
    type,
    index,
    insertBeforeIndex: null,
    injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    componentOffset: -1,
    propertyBindings: null,
    flags,
    providerIndexes: 0,
    value,
    attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: null,
    inputs: null,
    hostDirectiveInputs: null,
    outputs: null,
    hostDirectiveOutputs: null,
    directiveToIndex: null,
    tView: null,
    next: null,
    prev: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: void 0,
    classes: null,
    classesWithoutHost: null,
    residualClasses: void 0,
    classBindings: 0,
    styleBindings: 0
  };
  if (ngDevMode) {
    Object.seal(tNode);
  }
  return tNode;
}
function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, "We expect that insertBeforeIndex is not set");
  previousTNodes.push(newTNode);
  if (previousTNodes.length > 1) {
    for (let i = previousTNodes.length - 2; i >= 0; i--) {
      const existingTNode = previousTNodes[i];
      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}
function isI18nText(tNode) {
  return !(tNode.type & 64);
}
function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}
function getInsertBeforeIndex(tNode) {
  const index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}
function setInsertBeforeIndex(tNode, value) {
  const index = tNode.insertBeforeIndex;
  if (Array.isArray(index)) {
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
function getTIcu(tView, index) {
  const value = tView.data[index];
  if (value === null || typeof value === "string")
    return null;
  if (ngDevMode && !(value.hasOwnProperty("tView") || value.hasOwnProperty("currentCaseLViewIndex"))) {
    throwError2("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: " + value);
  }
  const tIcu = value.hasOwnProperty("currentCaseLViewIndex") ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
function setTIcu(tView, index, tIcu) {
  const tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty("tView"), true, "We expect to get 'null'|'TIcuContainer'");
  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(
      tNode,
      32
      /* TNodeType.Icu */
    );
    tNode.value = tIcu;
  }
}
function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  let insertBeforeIndex = tNode.insertBeforeIndex;
  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [
      null,
      index
    ];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, "Expecting array here");
    insertBeforeIndex.push(index);
  }
}
function createTNodePlaceholder(tView, previousTNodes, index) {
  const tNode = createTNodeAtIndex(tView, index, 64, null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
function getCurrentICUCaseIndex(tIcu, lView) {
  const currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}
function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17;
}
function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070) >>> 1;
}
function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1;
}
function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, "Missing parent index");
  ngDevMode && assertGreaterThan(refIdx, 0, "Missing ref index");
  return opCode | parentIdx << 17 | refIdx << 1;
}
function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
function enterIcu(state, tIcu, lView) {
  state.index = 0;
  const currentCase = getCurrentICUCaseIndex(tIcu, lView);
  if (currentCase !== null) {
    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
    state.removes = tIcu.remove[currentCase];
  } else {
    state.removes = EMPTY_ARRAY;
  }
}
function icuContainerIteratorNext(state) {
  if (state.index < state.removes.length) {
    const removeOpCode = state.removes[state.index++];
    ngDevMode && assertNumber(removeOpCode, "Expecting OpCode number");
    if (removeOpCode > 0) {
      const rNode = state.lView[removeOpCode];
      ngDevMode && assertDomNode(rNode);
      return rNode;
    } else {
      state.stack.push(state.index, state.removes);
      const tIcuIndex = ~removeOpCode;
      const tIcu = state.lView[TVIEW].data[tIcuIndex];
      ngDevMode && assertTIcu(tIcu);
      enterIcu(state, tIcu, state.lView);
      return icuContainerIteratorNext(state);
    }
  } else {
    if (state.stack.length === 0) {
      return null;
    } else {
      state.removes = state.stack.pop();
      state.index = state.stack.pop();
      return icuContainerIteratorNext(state);
    }
  }
}
function loadIcuContainerVisitor() {
  const _state = {
    stack: [],
    index: -1
  };
  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _state.lView = lView;
    while (_state.stack.length)
      _state.stack.pop();
    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(_state, tIcuContainerNode.value, lView);
    return icuContainerIteratorNext.bind(null, _state);
  }
  return icuContainerIteratorStart;
}
function createIcuIterator(tIcu, lView) {
  const state = {
    stack: [],
    index: -1,
    lView
  };
  ngDevMode && assertTIcu(tIcu);
  enterIcu(state, tIcu, lView);
  return icuContainerIteratorNext.bind(null, state);
}
function compressNodeLocation(referenceNode, path) {
  const result = [referenceNode];
  for (const segment of path) {
    const lastIdx = result.length - 1;
    if (lastIdx > 0 && result[lastIdx - 1] === segment) {
      const value = result[lastIdx] || 1;
      result[lastIdx] = value + 1;
    } else {
      result.push(segment, "");
    }
  }
  return result.join("");
}
function decompressNodeLocation(path) {
  const matches = path.match(REF_EXTRACTOR_REGEXP);
  const [_, refNodeId, refNodeName, rest] = matches;
  const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;
  const steps = [];
  for (const [_2, step, count] of rest.matchAll(/(f|n)(\d*)/g)) {
    const repeat = parseInt(count, 10) || 1;
    steps.push(step, repeat);
  }
  return [ref, ...steps];
}
function isFirstElementInNgContainer(tNode) {
  return !tNode.prev && tNode.parent?.type === 8;
}
function getNoOffsetIndex(tNode) {
  return tNode.index - HEADER_OFFSET;
}
function isDisconnectedNode(tNode, lView) {
  return !(tNode.type & (16 | 128)) && !!lView[tNode.index] && isDisconnectedRNode(unwrapRNode(lView[tNode.index]));
}
function isDisconnectedRNode(rNode) {
  return !!rNode && !rNode.isConnected;
}
function locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex) {
  const i18nNodes = hydrationInfo.i18nNodes;
  if (i18nNodes) {
    return i18nNodes.get(noOffsetIndex);
  }
  return void 0;
}
function tryLocateRNodeByPath(hydrationInfo, lView, noOffsetIndex) {
  const nodes = hydrationInfo.data[NODES];
  const path = nodes?.[noOffsetIndex];
  return path ? locateRNodeByPath(path, lView) : null;
}
function locateNextRNode(hydrationInfo, tView, lView, tNode) {
  const noOffsetIndex = getNoOffsetIndex(tNode);
  let native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);
  if (native === void 0) {
    const nodes = hydrationInfo.data[NODES];
    if (nodes?.[noOffsetIndex]) {
      native = locateRNodeByPath(nodes[noOffsetIndex], lView);
    } else if (tView.firstChild === tNode) {
      native = hydrationInfo.firstChild;
    } else {
      const previousTNodeParent = tNode.prev === null;
      const previousTNode = tNode.prev ?? tNode.parent;
      ngDevMode && assertDefined(previousTNode, "Unexpected state: current TNode does not have a connection to the previous node or a parent node.");
      if (isFirstElementInNgContainer(tNode)) {
        const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);
        native = getSegmentHead(hydrationInfo, noOffsetParentIndex);
      } else {
        let previousRElement = getNativeByTNode(previousTNode, lView);
        if (previousTNodeParent) {
          native = previousRElement.firstChild;
        } else {
          const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);
          const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);
          if (previousTNode.type === 2 && segmentHead) {
            const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);
            const nodesToSkip = numRootNodesToSkip + 1;
            native = siblingAfter(nodesToSkip, segmentHead);
          } else {
            native = previousRElement.nextSibling;
          }
        }
      }
    }
  }
  return native;
}
function siblingAfter(skip2, from2) {
  let currentNode = from2;
  for (let i = 0; i < skip2; i++) {
    ngDevMode && validateSiblingNodeExists(currentNode);
    currentNode = currentNode.nextSibling;
  }
  return currentNode;
}
function stringifyNavigationInstructions(instructions) {
  const container = [];
  for (let i = 0; i < instructions.length; i += 2) {
    const step = instructions[i];
    const repeat = instructions[i + 1];
    for (let r = 0; r < repeat; r++) {
      container.push(step === NODE_NAVIGATION_STEP_FIRST_CHILD ? "firstChild" : "nextSibling");
    }
  }
  return container.join(".");
}
function navigateToNode(from2, instructions) {
  let node = from2;
  for (let i = 0; i < instructions.length; i += 2) {
    const step = instructions[i];
    const repeat = instructions[i + 1];
    for (let r = 0; r < repeat; r++) {
      if (ngDevMode && !node) {
        throw nodeNotFoundAtPathError(from2, stringifyNavigationInstructions(instructions));
      }
      switch (step) {
        case NODE_NAVIGATION_STEP_FIRST_CHILD:
          node = node.firstChild;
          break;
        case NODE_NAVIGATION_STEP_NEXT_SIBLING:
          node = node.nextSibling;
          break;
      }
    }
  }
  if (ngDevMode && !node) {
    throw nodeNotFoundAtPathError(from2, stringifyNavigationInstructions(instructions));
  }
  return node;
}
function locateRNodeByPath(path, lView) {
  const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);
  let ref;
  if (referenceNode === REFERENCE_NODE_HOST) {
    ref = lView[DECLARATION_COMPONENT_VIEW][HOST];
  } else if (referenceNode === REFERENCE_NODE_BODY) {
    ref = \u0275\u0275resolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);
  } else {
    const parentElementId = Number(referenceNode);
    ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);
  }
  return navigateToNode(ref, navigationInstructions);
}
function navigateBetween(start, finish) {
  if (start === finish) {
    return [];
  } else if (start.parentElement == null || finish.parentElement == null) {
    return null;
  } else if (start.parentElement === finish.parentElement) {
    return navigateBetweenSiblings(start, finish);
  } else {
    const parent = finish.parentElement;
    const parentPath = navigateBetween(start, parent);
    const childPath = navigateBetween(parent.firstChild, finish);
    if (!parentPath || !childPath)
      return null;
    return [
      // First navigate to `finish`'s parent
      ...parentPath,
      // Then to its first child.
      NODE_NAVIGATION_STEP_FIRST_CHILD,
      // And finally from that node to `finish` (maybe a no-op if we're already there).
      ...childPath
    ];
  }
}
function navigateBetweenSiblings(start, finish) {
  const nav = [];
  let node = null;
  for (node = start; node != null && node !== finish; node = node.nextSibling) {
    nav.push(NODE_NAVIGATION_STEP_NEXT_SIBLING);
  }
  return node == null ? null : nav;
}
function calcPathBetween(from2, to, fromNodeName) {
  const path = navigateBetween(from2, to);
  return path === null ? null : compressNodeLocation(fromNodeName, path);
}
function calcPathForNode(tNode, lView, excludedParentNodes) {
  let parentTNode = tNode.parent;
  let parentIndex;
  let parentRNode;
  let referenceNodeName;
  while (parentTNode !== null && (isDisconnectedNode(parentTNode, lView) || excludedParentNodes?.has(parentTNode.index))) {
    parentTNode = parentTNode.parent;
  }
  if (parentTNode === null || !(parentTNode.type & 3)) {
    parentIndex = referenceNodeName = REFERENCE_NODE_HOST;
    parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];
  } else {
    parentIndex = parentTNode.index;
    parentRNode = unwrapRNode(lView[parentIndex]);
    referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);
  }
  let rNode = unwrapRNode(lView[tNode.index]);
  if (tNode.type & (12 | 32)) {
    const firstRNode = getFirstNativeNode(lView, tNode);
    if (firstRNode) {
      rNode = firstRNode;
    }
  }
  let path = calcPathBetween(parentRNode, rNode, referenceNodeName);
  if (path === null && parentRNode !== rNode) {
    const body = parentRNode.ownerDocument.body;
    path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);
    if (path === null) {
      throw nodeNotFoundError(lView, tNode);
    }
  }
  return path;
}
function gatherDeferBlocksCommentNodes(doc, node) {
  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, { acceptNode });
  let currentNode;
  const nodesByBlockId = /* @__PURE__ */ new Map();
  while (currentNode = commentNodesIterator.nextNode()) {
    const nghPattern = "ngh=";
    const content = currentNode?.textContent;
    const nghIdx = content?.indexOf(nghPattern) ?? -1;
    if (nghIdx > -1) {
      const nghValue = content.substring(nghIdx + nghPattern.length).trim();
      ngDevMode && assertEqual(nghValue.startsWith("d"), true, "Invalid defer block id found in a comment node.");
      nodesByBlockId.set(nghValue, currentNode);
    }
  }
  return nodesByBlockId;
}
function acceptNode(node) {
  return node.textContent?.trimStart().startsWith("ngh=") ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
}
function setIsI18nHydrationSupportEnabled(enabled) {
  _isI18nHydrationSupportEnabled = enabled;
}
function isI18nHydrationSupportEnabled() {
  return _isI18nHydrationSupportEnabled;
}
function prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {
  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);
}
function enablePrepareI18nBlockForHydrationImpl() {
  _prepareI18nBlockForHydrationImpl = prepareI18nBlockForHydrationImpl;
}
function isI18nHydrationEnabled(injector) {
  injector = injector ?? inject2(Injector);
  return injector.get(IS_I18N_HYDRATION_ENABLED, false);
}
function getOrComputeI18nChildren(tView, context2) {
  let i18nChildren = context2.i18nChildren.get(tView);
  if (i18nChildren === void 0) {
    i18nChildren = collectI18nChildren(tView);
    context2.i18nChildren.set(tView, i18nChildren);
  }
  return i18nChildren;
}
function collectI18nChildren(tView) {
  const children = /* @__PURE__ */ new Set();
  function collectI18nViews(node) {
    children.add(node.index);
    switch (node.kind) {
      case 1:
      case 2: {
        for (const childNode of node.children) {
          collectI18nViews(childNode);
        }
        break;
      }
      case 3: {
        for (const caseNodes of node.cases) {
          for (const caseNode of caseNodes) {
            collectI18nViews(caseNode);
          }
        }
        break;
      }
    }
  }
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    const tI18n = tView.data[i];
    if (!tI18n || !tI18n.ast) {
      continue;
    }
    for (const node of tI18n.ast) {
      collectI18nViews(node);
    }
  }
  return children.size === 0 ? null : children;
}
function trySerializeI18nBlock(lView, index, context2) {
  if (!context2.isI18nHydrationEnabled) {
    return null;
  }
  const tView = lView[TVIEW];
  const tI18n = tView.data[index];
  if (!tI18n || !tI18n.ast) {
    return null;
  }
  const parentTNode = tView.data[tI18n.parentTNodeIndex];
  if (parentTNode && isI18nInSkipHydrationBlock(parentTNode)) {
    return null;
  }
  const serializedI18nBlock = {
    caseQueue: [],
    disconnectedNodes: /* @__PURE__ */ new Set(),
    disjointNodes: /* @__PURE__ */ new Set()
  };
  serializeI18nBlock(lView, serializedI18nBlock, context2, tI18n.ast);
  return serializedI18nBlock.caseQueue.length === 0 && serializedI18nBlock.disconnectedNodes.size === 0 && serializedI18nBlock.disjointNodes.size === 0 ? null : serializedI18nBlock;
}
function serializeI18nBlock(lView, serializedI18nBlock, context2, nodes) {
  let prevRNode = null;
  for (const node of nodes) {
    const nextRNode = serializeI18nNode(lView, serializedI18nBlock, context2, node);
    if (nextRNode) {
      if (isDisjointNode(prevRNode, nextRNode)) {
        serializedI18nBlock.disjointNodes.add(node.index - HEADER_OFFSET);
      }
      prevRNode = nextRNode;
    }
  }
  return prevRNode;
}
function isDisjointNode(prevNode, nextNode) {
  return prevNode && prevNode.nextSibling !== nextNode;
}
function serializeI18nNode(lView, serializedI18nBlock, context2, node) {
  const maybeRNode = unwrapRNode(lView[node.index]);
  if (!maybeRNode || isDisconnectedRNode(maybeRNode)) {
    serializedI18nBlock.disconnectedNodes.add(node.index - HEADER_OFFSET);
    return null;
  }
  const rNode = maybeRNode;
  switch (node.kind) {
    case 0: {
      processTextNodeBeforeSerialization(context2, rNode);
      break;
    }
    case 1:
    case 2: {
      serializeI18nBlock(lView, serializedI18nBlock, context2, node.children);
      break;
    }
    case 3: {
      const currentCase = lView[node.currentCaseLViewIndex];
      if (currentCase != null) {
        const caseIdx = currentCase < 0 ? ~currentCase : currentCase;
        serializedI18nBlock.caseQueue.push(caseIdx);
        serializeI18nBlock(lView, serializedI18nBlock, context2, node.cases[caseIdx]);
      }
      break;
    }
  }
  return getFirstNativeNodeForI18nNode(lView, node);
}
function getFirstNativeNodeForI18nNode(lView, node) {
  const tView = lView[TVIEW];
  const maybeTNode = tView.data[node.index];
  if (isTNodeShape(maybeTNode)) {
    return getFirstNativeNode(lView, maybeTNode);
  } else if (node.kind === 3) {
    const icuIterator = createIcuIterator(maybeTNode, lView);
    let rNode = icuIterator();
    return rNode ?? unwrapRNode(lView[node.index]);
  } else {
    return unwrapRNode(lView[node.index]) ?? null;
  }
}
function setCurrentNode(state, node) {
  state.currentNode = node;
}
function appendI18nNodeToCollection(context2, state, astNode) {
  const noOffsetIndex = astNode.index - HEADER_OFFSET;
  const { disconnectedNodes } = context2;
  const currentNode = state.currentNode;
  if (state.isConnected) {
    context2.i18nNodes.set(noOffsetIndex, currentNode);
    disconnectedNodes.delete(noOffsetIndex);
  } else {
    disconnectedNodes.add(noOffsetIndex);
  }
  return currentNode;
}
function skipSiblingNodes(state, skip2) {
  let currentNode = state.currentNode;
  for (let i = 0; i < skip2; i++) {
    if (!currentNode) {
      break;
    }
    currentNode = currentNode?.nextSibling ?? null;
  }
  return currentNode;
}
function forkHydrationState(state, nextNode) {
  return { currentNode: nextNode, isConnected: state.isConnected };
}
function prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex) {
  const hydrationInfo = lView[HYDRATION];
  if (!hydrationInfo) {
    return;
  }
  if (!isI18nHydrationSupportEnabled() || parentTNode && (isI18nInSkipHydrationBlock(parentTNode) || isDisconnectedNode$1(hydrationInfo, parentTNode.index - HEADER_OFFSET))) {
    return;
  }
  const tView = lView[TVIEW];
  const tI18n = tView.data[index];
  ngDevMode && assertDefined(tI18n, "Expected i18n data to be present in a given TView slot during hydration");
  function findHydrationRoot() {
    if (isRootTemplateMessage(subTemplateIndex)) {
      ngDevMode && assertDefined(parentTNode, "Expected parent TNode while hydrating i18n root");
      const rootNode = locateNextRNode(hydrationInfo, tView, lView, parentTNode);
      return parentTNode.type & 8 ? rootNode : rootNode.firstChild;
    }
    return hydrationInfo?.firstChild;
  }
  const currentNode = findHydrationRoot();
  ngDevMode && assertDefined(currentNode, "Expected root i18n node during hydration");
  const disconnectedNodes = initDisconnectedNodes(hydrationInfo) ?? /* @__PURE__ */ new Set();
  const i18nNodes = hydrationInfo.i18nNodes ??= /* @__PURE__ */ new Map();
  const caseQueue = hydrationInfo.data[I18N_DATA]?.[index - HEADER_OFFSET] ?? [];
  const dehydratedIcuData = hydrationInfo.dehydratedIcuData ??= /* @__PURE__ */ new Map();
  collectI18nNodesFromDom({ hydrationInfo, lView, i18nNodes, disconnectedNodes, caseQueue, dehydratedIcuData }, { currentNode, isConnected: true }, tI18n.ast);
  hydrationInfo.disconnectedNodes = disconnectedNodes.size === 0 ? null : disconnectedNodes;
}
function collectI18nNodesFromDom(context2, state, nodeOrNodes) {
  if (Array.isArray(nodeOrNodes)) {
    let nextState = state;
    for (const node of nodeOrNodes) {
      const targetNode = tryLocateRNodeByPath(context2.hydrationInfo, context2.lView, node.index - HEADER_OFFSET);
      if (targetNode) {
        nextState = forkHydrationState(state, targetNode);
      }
      collectI18nNodesFromDom(context2, nextState, node);
    }
  } else {
    if (context2.disconnectedNodes.has(nodeOrNodes.index - HEADER_OFFSET)) {
      return;
    }
    switch (nodeOrNodes.kind) {
      case 0: {
        const currentNode = appendI18nNodeToCollection(context2, state, nodeOrNodes);
        setCurrentNode(state, currentNode?.nextSibling ?? null);
        break;
      }
      case 1: {
        collectI18nNodesFromDom(context2, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);
        const currentNode = appendI18nNodeToCollection(context2, state, nodeOrNodes);
        setCurrentNode(state, currentNode?.nextSibling ?? null);
        break;
      }
      case 2: {
        const noOffsetIndex = nodeOrNodes.index - HEADER_OFFSET;
        const { hydrationInfo } = context2;
        const containerSize = getNgContainerSize(hydrationInfo, noOffsetIndex);
        switch (nodeOrNodes.type) {
          case 0: {
            const currentNode = appendI18nNodeToCollection(context2, state, nodeOrNodes);
            if (isSerializedElementContainer(hydrationInfo, noOffsetIndex)) {
              collectI18nNodesFromDom(context2, state, nodeOrNodes.children);
              const nextNode = skipSiblingNodes(state, 1);
              setCurrentNode(state, nextNode);
            } else {
              collectI18nNodesFromDom(context2, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);
              setCurrentNode(state, currentNode?.nextSibling ?? null);
              if (containerSize !== null) {
                const nextNode = skipSiblingNodes(state, containerSize + 1);
                setCurrentNode(state, nextNode);
              }
            }
            break;
          }
          case 1: {
            ngDevMode && assertNotEqual(containerSize, null, "Expected a container size while hydrating i18n subtemplate");
            appendI18nNodeToCollection(context2, state, nodeOrNodes);
            const nextNode = skipSiblingNodes(state, containerSize + 1);
            setCurrentNode(state, nextNode);
            break;
          }
        }
        break;
      }
      case 3: {
        const selectedCase = state.isConnected ? context2.caseQueue.shift() : null;
        const childState = { currentNode: null, isConnected: false };
        for (let i = 0; i < nodeOrNodes.cases.length; i++) {
          collectI18nNodesFromDom(context2, i === selectedCase ? state : childState, nodeOrNodes.cases[i]);
        }
        if (selectedCase !== null) {
          context2.dehydratedIcuData.set(nodeOrNodes.index, { case: selectedCase, node: nodeOrNodes });
        }
        const currentNode = appendI18nNodeToCollection(context2, state, nodeOrNodes);
        setCurrentNode(state, currentNode?.nextSibling ?? null);
        break;
      }
    }
  }
}
function claimDehydratedIcuCase(lView, icuIndex, caseIndex) {
  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);
}
function enableClaimDehydratedIcuCaseImpl() {
  _claimDehydratedIcuCaseImpl = claimDehydratedIcuCaseImpl;
}
function claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex) {
  const dehydratedIcuDataMap = lView[HYDRATION]?.dehydratedIcuData;
  if (dehydratedIcuDataMap) {
    const dehydratedIcuData = dehydratedIcuDataMap.get(icuIndex);
    if (dehydratedIcuData?.case === caseIndex) {
      dehydratedIcuDataMap.delete(icuIndex);
    }
  }
}
function cleanupI18nHydrationData(lView) {
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo) {
    const { i18nNodes, dehydratedIcuData: dehydratedIcuDataMap } = hydrationInfo;
    if (i18nNodes && dehydratedIcuDataMap) {
      const renderer = lView[RENDERER];
      for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {
        cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);
      }
    }
    hydrationInfo.i18nNodes = void 0;
    hydrationInfo.dehydratedIcuData = void 0;
  }
}
function cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData) {
  for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {
    const rNode = i18nNodes.get(node.index - HEADER_OFFSET);
    if (rNode) {
      nativeRemoveNode(renderer, rNode, false);
    }
  }
}
function removeDehydratedViews(lContainer) {
  const views = lContainer[DEHYDRATED_VIEWS] ?? [];
  const parentLView = lContainer[PARENT];
  const renderer = parentLView[RENDERER];
  const retainedViews = [];
  for (const view of views) {
    if (view.data[DEFER_BLOCK_ID] !== void 0) {
      retainedViews.push(view);
    } else {
      removeDehydratedView(view, renderer);
      ngDevMode && ngDevMode.dehydratedViewsRemoved++;
    }
  }
  lContainer[DEHYDRATED_VIEWS] = retainedViews;
}
function removeDehydratedViewList(deferBlock) {
  const { lContainer } = deferBlock;
  const dehydratedViews = lContainer[DEHYDRATED_VIEWS];
  if (dehydratedViews === null)
    return;
  const parentLView = lContainer[PARENT];
  const renderer = parentLView[RENDERER];
  for (const view of dehydratedViews) {
    removeDehydratedView(view, renderer);
    ngDevMode && ngDevMode.dehydratedViewsRemoved++;
  }
}
function removeDehydratedView(dehydratedView, renderer) {
  let nodesRemoved = 0;
  let currentRNode = dehydratedView.firstChild;
  if (currentRNode) {
    const numNodes = dehydratedView.data[NUM_ROOT_NODES];
    while (nodesRemoved < numNodes) {
      ngDevMode && validateSiblingNodeExists(currentRNode);
      const nextSibling = currentRNode.nextSibling;
      nativeRemoveNode(renderer, currentRNode, false);
      currentRNode = nextSibling;
      nodesRemoved++;
    }
  }
}
function cleanupLContainer(lContainer) {
  removeDehydratedViews(lContainer);
  const hostLView = lContainer[HOST];
  if (isLView(hostLView)) {
    cleanupLView(hostLView);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    cleanupLView(lContainer[i]);
  }
}
function cleanupLView(lView) {
  cleanupI18nHydrationData(lView);
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (isLContainer(lView[i])) {
      const lContainer = lView[i];
      cleanupLContainer(lContainer);
    } else if (isLView(lView[i])) {
      cleanupLView(lView[i]);
    }
  }
}
function cleanupDehydratedViews(appRef) {
  const viewRefs = appRef._views;
  for (const viewRef of viewRefs) {
    const lNode = getLNodeForHydration(viewRef);
    if (lNode !== null && lNode[HOST] !== null) {
      if (isLView(lNode)) {
        cleanupLView(lNode);
      } else {
        cleanupLContainer(lNode);
      }
      ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;
    }
  }
}
function cleanupHydratedDeferBlocks(deferBlock, hydratedBlocks, registry, appRef) {
  if (deferBlock !== null) {
    registry.cleanup(hydratedBlocks);
    cleanupLContainer(deferBlock.lContainer);
    cleanupDehydratedViews(appRef);
  }
}
function locateDehydratedViewsInContainer(currentRNode, serializedViews) {
  const dehydratedViews = [];
  for (const serializedView of serializedViews) {
    for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {
      const view = {
        data: serializedView,
        firstChild: null
      };
      if (serializedView[NUM_ROOT_NODES] > 0) {
        view.firstChild = currentRNode;
        currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);
      }
      dehydratedViews.push(view);
    }
  }
  return [currentRNode, dehydratedViews];
}
function enableFindMatchingDehydratedViewImpl() {
  _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;
  _findAndReconcileMatchingDehydratedViewsImpl = findAndReconcileMatchingDehydratedViewsImpl;
}
function findMatchingDehydratedViewImpl(lContainer, template2) {
  if (hasMatchingDehydratedView(lContainer, template2)) {
    return lContainer[DEHYDRATED_VIEWS].shift();
  } else {
    removeDehydratedViews(lContainer);
    return null;
  }
}
function findMatchingDehydratedView(lContainer, template2) {
  return _findMatchingDehydratedViewImpl(lContainer, template2);
}
function findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView) {
  if (templateTNode.tView.ssrId === null)
    return null;
  const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);
  if (hostLView[TVIEW].firstUpdatePass && dehydratedView === null) {
    removeStaleDehydratedBranch(hostLView, templateTNode);
  }
  return dehydratedView;
}
function findAndReconcileMatchingDehydratedViews(lContainer, templateTNode, hostLView) {
  return _findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView);
}
function removeStaleDehydratedBranch(hostLView, tNode) {
  let currentTNode = tNode;
  while (currentTNode) {
    if (cleanupMatchingDehydratedViews(hostLView, currentTNode))
      return;
    if ((currentTNode.flags & 256) === 256) {
      break;
    }
    currentTNode = currentTNode.prev;
  }
  currentTNode = tNode.next;
  while (currentTNode) {
    if ((currentTNode.flags & 512) !== 512) {
      break;
    }
    if (cleanupMatchingDehydratedViews(hostLView, currentTNode))
      return;
    currentTNode = currentTNode.next;
  }
}
function hasMatchingDehydratedView(lContainer, template2) {
  const views = lContainer[DEHYDRATED_VIEWS];
  if (!template2 || views === null || views.length === 0) {
    return false;
  }
  return views[0].data[TEMPLATE_ID] === template2;
}
function cleanupMatchingDehydratedViews(hostLView, currentTNode) {
  const ssrId = currentTNode.tView?.ssrId;
  if (ssrId == null)
    return false;
  const container = hostLView[currentTNode.index];
  if (isLContainer(container) && hasMatchingDehydratedView(container, ssrId)) {
    removeDehydratedViews(container);
    return true;
  }
  return false;
}
function injectRenderer2() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];
}
function isModuleWithProviders(value) {
  return value.ngModule !== void 0;
}
function isNgModule(value) {
  return !!getNgModuleDef(value);
}
function isPipe(value) {
  return !!getPipeDef(value);
}
function isDirective(value) {
  return !!getDirectiveDef(value);
}
function isComponent(value) {
  return !!getComponentDef(value);
}
function getDependencyTypeForError(type) {
  if (getComponentDef(type))
    return "component";
  if (getDirectiveDef(type))
    return "directive";
  if (getPipeDef(type))
    return "pipe";
  return "type";
}
function verifyStandaloneImport(depType, importingType) {
  if (isForwardRef(depType)) {
    depType = resolveForwardRef(depType);
    if (!depType) {
      throw new Error(`Expected forwardRef function, imported from "${stringifyForError(importingType)}", to return a standalone entity or NgModule but got "${stringifyForError(depType) || depType}".`);
    }
  }
  if (getNgModuleDef(depType) == null) {
    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef(depType);
    if (def != null) {
      if (!def.standalone) {
        throw new Error(`The "${stringifyForError(depType)}" ${getDependencyTypeForError(depType)}, imported from "${stringifyForError(importingType)}", is not standalone. Did you forget to add the standalone: true flag?`);
      }
    } else {
      if (isModuleWithProviders(depType)) {
        throw new Error(`A module with providers was imported from "${stringifyForError(importingType)}". Modules with providers are not supported in standalone components imports.`);
      } else {
        throw new Error(`The "${stringifyForError(depType)}" type, imported from "${stringifyForError(importingType)}", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);
      }
    }
  }
}
function addSet(sourceSet, targetSet) {
  for (const m of sourceSet) {
    targetSet.add(m);
  }
}
function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), "Expecting to be called in first template pass only");
  let styles = writeToHost ? tNode.styles : null;
  let classes = writeToHost ? tNode.classes : null;
  let mode = 0;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const value = attrs[i];
      if (typeof value === "number") {
        mode = value;
      } else if (mode == 1) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2) {
        const style = value;
        const styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style + ": " + styleValue + ";");
      }
    }
  }
  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
function \u0275\u0275directiveInject(token, flags = 0) {
  const lView = getLView();
  if (lView === null) {
    ngDevMode && assertInjectImplementationNotEqual(\u0275\u0275directiveInject);
    return \u0275\u0275inject(token, flags);
  }
  const tNode = getCurrentTNode();
  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
  ngDevMode && emitInjectEvent(token, value, flags);
  return value;
}
function \u0275\u0275invalidFactory() {
  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : "invalid";
  throw new Error(msg);
}
function resolveDirectives(tView, lView, tNode, localRefs, directiveMatcher) {
  ngDevMode && assertFirstCreatePass(tView);
  const exportsMap = localRefs === null ? null : { "": -1 };
  const matchedDirectiveDefs = directiveMatcher(tView, tNode);
  if (matchedDirectiveDefs !== null) {
    let directiveDefs = matchedDirectiveDefs;
    let hostDirectiveDefs = null;
    let hostDirectiveRanges = null;
    for (const def of matchedDirectiveDefs) {
      if (def.resolveHostDirectives !== null) {
        [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] = def.resolveHostDirectives(matchedDirectiveDefs);
        break;
      }
    }
    ngDevMode && assertNoDuplicateDirectives(directiveDefs);
    initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs, hostDirectiveRanges);
  }
  if (exportsMap !== null && localRefs !== null) {
    cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  }
}
function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  const localNames = tNode.localNames = [];
  for (let i = 0; i < localRefs.length; i += 2) {
    const index = exportsMap[localRefs[i + 1]];
    if (index == null)
      throw new RuntimeError(-301, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
    localNames.push(localRefs[i], index);
  }
}
function markAsComponentHost(tView, hostTNode, componentOffset) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertGreaterThan(componentOffset, -1, "componentOffset must be great than -1");
  hostTNode.componentOffset = componentOffset;
  (tView.components ??= []).push(hostTNode.index);
}
function initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs, hostDirectiveRanges) {
  ngDevMode && assertFirstCreatePass(tView);
  const directivesLength = directives.length;
  let hasSeenComponent = false;
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    if (!hasSeenComponent && isComponentDef(def)) {
      hasSeenComponent = true;
      markAsComponentHost(tView, tNode, i);
    }
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);
  }
  initTNodeFlags(tNode, tView.data.length, directivesLength);
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    if (def.providersResolver)
      def.providersResolver(def);
  }
  let preOrderHooksFound = false;
  let preOrderCheckHooksFound = false;
  let directiveIdx = allocExpando(tView, lView, directivesLength, null);
  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, "TNode.directiveStart should point to just allocated space");
  if (directivesLength > 0) {
    tNode.directiveToIndex = /* @__PURE__ */ new Map();
  }
  for (let i = 0; i < directivesLength; i++) {
    const def = directives[i];
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
    saveNameToExportMap(directiveIdx, def, exportsMap);
    if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {
      const [start, end] = hostDirectiveRanges.get(def);
      tNode.directiveToIndex.set(def.type, [
        directiveIdx,
        start + tNode.directiveStart,
        end + tNode.directiveStart
      ]);
    } else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {
      tNode.directiveToIndex.set(def.type, directiveIdx);
    }
    if (def.contentQueries !== null)
      tNode.flags |= 4;
    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)
      tNode.flags |= 64;
    const lifeCycleHooks = def.type.prototype;
    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderHooks ??= []).push(tNode.index);
      preOrderHooksFound = true;
    }
    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderCheckHooks ??= []).push(tNode.index);
      preOrderCheckHooksFound = true;
    }
    directiveIdx++;
  }
  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);
}
function initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {
    const directiveDef = tView.data[index];
    if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {
      setupSelectorMatchedInputsOrOutputs(0, tNode, directiveDef, index);
      setupSelectorMatchedInputsOrOutputs(1, tNode, directiveDef, index);
      setupInitialInputs(tNode, index, false);
    } else {
      const hostDirectiveDef = hostDirectiveDefs.get(directiveDef);
      setupHostDirectiveInputsOrOutputs(0, tNode, hostDirectiveDef, index);
      setupHostDirectiveInputsOrOutputs(1, tNode, hostDirectiveDef, index);
      setupInitialInputs(tNode, index, true);
    }
  }
}
function setupSelectorMatchedInputsOrOutputs(mode, tNode, def, directiveIndex) {
  const aliasMap = mode === 0 ? def.inputs : def.outputs;
  for (const publicName in aliasMap) {
    if (aliasMap.hasOwnProperty(publicName)) {
      let bindings;
      if (mode === 0) {
        bindings = tNode.inputs ??= {};
      } else {
        bindings = tNode.outputs ??= {};
      }
      bindings[publicName] ??= [];
      bindings[publicName].push(directiveIndex);
      setShadowStylingInputFlags(tNode, publicName);
    }
  }
}
function setupHostDirectiveInputsOrOutputs(mode, tNode, config2, directiveIndex) {
  const aliasMap = mode === 0 ? config2.inputs : config2.outputs;
  for (const initialName in aliasMap) {
    if (aliasMap.hasOwnProperty(initialName)) {
      const publicName = aliasMap[initialName];
      let bindings;
      if (mode === 0) {
        bindings = tNode.hostDirectiveInputs ??= {};
      } else {
        bindings = tNode.hostDirectiveOutputs ??= {};
      }
      bindings[publicName] ??= [];
      bindings[publicName].push(directiveIndex, initialName);
      setShadowStylingInputFlags(tNode, publicName);
    }
  }
}
function setShadowStylingInputFlags(tNode, publicName) {
  if (publicName === "class") {
    tNode.flags |= 8;
  } else if (publicName === "style") {
    tNode.flags |= 16;
  }
}
function setupInitialInputs(tNode, directiveIndex, isHostDirective) {
  const { attrs, inputs, hostDirectiveInputs } = tNode;
  if (attrs === null || !isHostDirective && inputs === null || isHostDirective && hostDirectiveInputs === null || // Do not use unbound attributes as inputs to structural directives, since structural
  // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
  isInlineTemplate(tNode)) {
    tNode.initialInputs ??= [];
    tNode.initialInputs.push(null);
    return;
  }
  let inputsToStore = null;
  let i = 0;
  while (i < attrs.length) {
    const attrName = attrs[i];
    if (attrName === 0) {
      i += 4;
      continue;
    } else if (attrName === 5) {
      i += 2;
      continue;
    } else if (typeof attrName === "number") {
      break;
    }
    if (!isHostDirective && inputs.hasOwnProperty(attrName)) {
      const inputConfig = inputs[attrName];
      for (const index of inputConfig) {
        if (index === directiveIndex) {
          inputsToStore ??= [];
          inputsToStore.push(attrName, attrs[i + 1]);
          break;
        }
      }
    } else if (isHostDirective && hostDirectiveInputs.hasOwnProperty(attrName)) {
      const config2 = hostDirectiveInputs[attrName];
      for (let j = 0; j < config2.length; j += 2) {
        if (config2[j] === directiveIndex) {
          inputsToStore ??= [];
          inputsToStore.push(config2[j + 1], attrs[i + 1]);
          break;
        }
      }
    }
    i += 2;
  }
  tNode.initialInputs ??= [];
  tNode.initialInputs.push(inputsToStore);
}
function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, "Must be in Expando section");
  tView.data[directiveIndex] = def;
  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), \u0275\u0275directiveInject, ngDevMode ? def.type.name : null);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}
function registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  const hostBindings = def.hostBindings;
  if (hostBindings) {
    let hostBindingOpCodes = tView.hostBindingOpCodes;
    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }
    const elementIndx = ~tNode.index;
    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      hostBindingOpCodes.push(elementIndx);
    }
    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
function lastSelectedElementIdx(hostBindingOpCodes) {
  let i = hostBindingOpCodes.length;
  while (i > 0) {
    const value = hostBindingOpCodes[--i];
    if (typeof value === "number" && value < 0) {
      return value;
    }
  }
  return 0;
}
function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (let i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }
    if (isComponentDef(def))
      exportsMap[""] = directiveIdx;
  }
}
function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, "Reached the max number of directives");
  tNode.flags |= 1;
  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
function assertNoDuplicateDirectives(directives) {
  if (directives.length < 2) {
    return;
  }
  const seenDirectives = /* @__PURE__ */ new Set();
  for (const current of directives) {
    if (seenDirectives.has(current)) {
      throw new RuntimeError(309, `Directive ${current.type.name} matches multiple times on the same element. Directives can only match an element once.`);
    }
    seenDirectives.add(current);
  }
}
function directiveHostFirstCreatePass(index, lView, type, name, directiveMatcher, bindingsEnabled, attrsIndex, localRefsIndex) {
  const tView = lView[TVIEW];
  ngDevMode && assertFirstCreatePass(tView);
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, type, name, attrs);
  if (bindingsEnabled) {
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), directiveMatcher);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function directiveHostEndFirstCreatePass(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  registerPostOrderHooks(tView, tNode);
  if (isContentQueryHost(tNode)) {
    tView.queries.elementEnd(tNode);
  }
}
function domOnlyFirstCreatePass(index, tView, type, name, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, type, name, attrs);
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  if (localRefsIndex != null) {
    const refs = getConstant(tViewConsts, localRefsIndex);
    tNode.localNames = [];
    for (let i = 0; i < refs.length; i += 2) {
      tNode.localNames.push(refs[i], -1);
    }
  }
  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function isListLikeIterable(obj) {
  if (!isJsObject(obj))
    return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  Symbol.iterator in obj;
}
function areIterablesEqual(a, b, comparator) {
  const iterator1 = a[Symbol.iterator]();
  const iterator2 = b[Symbol.iterator]();
  while (true) {
    const item1 = iterator1.next();
    const item2 = iterator2.next();
    if (item1.done && item2.done)
      return true;
    if (item1.done || item2.done)
      return false;
    if (!comparator(item1.value, item2.value))
      return false;
  }
}
function iterateListLike(obj, fn2) {
  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn2(obj[i]);
    }
  } else {
    const iterator2 = obj[Symbol.iterator]();
    let item;
    while (!(item = iterator2.next()).done) {
      fn2(item.value);
    }
  }
}
function isJsObject(o) {
  return o !== null && (typeof o === "function" || typeof o === "object");
}
function devModeEqual(a, b) {
  const isListLikeIterableA = isListLikeIterable(a);
  const isListLikeIterableB = isListLikeIterable(b);
  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    const isAObject = a && (typeof a === "object" || typeof a === "function");
    const isBObject = b && (typeof b === "object" || typeof b === "function");
    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}
function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, "Stored value should never be NO_CHANGE.");
  return lView[bindingIndex];
}
function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
  if (value === NO_CHANGE) {
    return false;
  }
  const oldValue = lView[bindingIndex];
  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : void 0;
      if (!devModeEqual(oldValueToCompare, value)) {
        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);
      }
      return false;
    }
    lView[bindingIndex] = value;
    return true;
  }
}
function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  const different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
function wrapListener(tNode, lView, listenerFn) {
  return function wrapListenerIn_markDirtyAndPreventDefault(event) {
    const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;
    markViewDirty(
      startView,
      5
      /* NotificationSource.Listener */
    );
    const context2 = lView[CONTEXT];
    let result = executeListenerWithErrorHandling(lView, context2, listenerFn, event);
    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
    while (nextListenerFn) {
      result = executeListenerWithErrorHandling(lView, context2, nextListenerFn, event) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }
    return result;
  };
}
function executeListenerWithErrorHandling(lView, context2, listenerFn, e) {
  const prevConsumer = setActiveConsumer(null);
  try {
    profiler(6, context2, listenerFn);
    return listenerFn(e) !== false;
  } catch (error) {
    handleUncaughtError(lView, error);
    return false;
  } finally {
    profiler(7, context2, listenerFn);
    setActiveConsumer(prevConsumer);
  }
}
function listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, originalListener, wrappedListener) {
  ngDevMode && assertNotSame(wrappedListener, originalListener, "Expected wrapped and original listeners to be different.");
  const isTNodeDirectiveHost = isDirectiveHost(tNode);
  let hasCoalesced = false;
  let existingListener = null;
  if (!eventTargetResolver && isTNodeDirectiveHost) {
    existingListener = findExistingListener(tView, lView, eventName, tNode.index);
  }
  if (existingListener !== null) {
    const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
    lastListenerFn.__ngNextListenerFn__ = originalListener;
    existingListener.__ngLastListenerFn__ = originalListener;
    hasCoalesced = true;
  } else {
    const native = getNativeByTNode(tNode, lView);
    const target = eventTargetResolver ? eventTargetResolver(native) : native;
    stashEventListenerImpl(lView, target, eventName, wrappedListener);
    const cleanupFn = renderer.listen(target, eventName, wrappedListener);
    const idxOrTargetGetter = eventTargetResolver ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;
    storeListenerCleanup(idxOrTargetGetter, tView, lView, eventName, wrappedListener, cleanupFn, false);
  }
  return hasCoalesced;
}
function findExistingListener(tView, lView, eventName, tNodeIndex) {
  const tCleanup = tView.cleanup;
  if (tCleanup != null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      const cleanupEventName = tCleanup[i];
      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIndex) {
        const lCleanup = lView[CLEANUP];
        const listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup && lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      }
      if (typeof cleanupEventName === "string") {
        i += 2;
      }
    }
  }
  return null;
}
function storeListenerCleanup(indexOrTargetGetter, tView, lView, eventName, listenerFn, cleanup, isOutput2) {
  const tCleanup = tView.firstCreatePass ? getOrCreateTViewCleanup(tView) : null;
  const lCleanup = getOrCreateLViewCleanup(lView);
  const index = lCleanup.length;
  lCleanup.push(listenerFn, cleanup);
  tCleanup && tCleanup.push(eventName, indexOrTargetGetter, index, (index + 1) * (isOutput2 ? -1 : 1));
}
function createOutputListener(tNode, lView, listenerFn, targetDef, eventName) {
  const wrappedListener = wrapListener(tNode, lView, listenerFn);
  const hasBound = listenToDirectiveOutput(tNode, lView, targetDef, eventName, wrappedListener);
  if (!hasBound && ngDevMode) {
    throw new RuntimeError(316, `${stringifyForError(targetDef.type)} does not have an output with a public name of "${eventName}".`);
  }
}
function listenToDirectiveOutput(tNode, lView, target, eventName, listenerFn) {
  let hostIndex = null;
  let hostDirectivesStart = null;
  let hostDirectivesEnd = null;
  let hasOutput = false;
  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {
    throw new Error(`Node does not have a directive with type ${target.type.name}`);
  }
  const data = tNode.directiveToIndex.get(target.type);
  if (typeof data === "number") {
    hostIndex = data;
  } else {
    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;
  }
  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveOutputs?.hasOwnProperty(eventName)) {
    const hostDirectiveOutputs = tNode.hostDirectiveOutputs[eventName];
    for (let i = 0; i < hostDirectiveOutputs.length; i += 2) {
      const index = hostDirectiveOutputs[i];
      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {
        ngDevMode && assertIndexInRange(lView, index);
        hasOutput = true;
        listenToOutput(tNode, lView, index, hostDirectiveOutputs[i + 1], eventName, listenerFn);
      } else if (index > hostDirectivesEnd) {
        break;
      }
    }
  }
  if (target.outputs.hasOwnProperty(eventName)) {
    ngDevMode && assertIndexInRange(lView, hostIndex);
    hasOutput = true;
    listenToOutput(tNode, lView, hostIndex, eventName, eventName, listenerFn);
  }
  return hasOutput;
}
function listenToOutput(tNode, lView, directiveIndex, lookupName, eventName, listenerFn) {
  ngDevMode && assertIndexInRange(lView, directiveIndex);
  const instance = lView[directiveIndex];
  const tView = lView[TVIEW];
  const def = tView.data[directiveIndex];
  const propertyName = def.outputs[lookupName];
  const output2 = instance[propertyName];
  if (ngDevMode && !isOutputSubscribable(output2)) {
    throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);
  }
  const subscription = output2.subscribe(listenerFn);
  storeListenerCleanup(tNode.index, tView, lView, eventName, listenerFn, subscription, true);
}
function isOutputSubscribable(value) {
  return value != null && typeof value.subscribe === "function";
}
function inputBindingUpdate(targetDirectiveIdx, publicName, value) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = lView[TVIEW];
    const tNode = getSelectedTNode();
    const componentLView = getComponentLViewByIndex(tNode.index, lView);
    markViewDirty(
      componentLView,
      1
      /* NotificationSource.SetInput */
    );
    const targetDef = tView.directiveRegistry[targetDirectiveIdx];
    if (ngDevMode && !targetDef) {
      throw new RuntimeError(315, `Input binding to property "${publicName}" does not have a target.`);
    }
    const hasSet = setDirectiveInput(tNode, tView, lView, targetDef, publicName, value);
    if (ngDevMode) {
      if (!hasSet) {
        throw new RuntimeError(315, `${stringifyForError(targetDef.type)} does not have an input with a public name of "${publicName}".`);
      }
      storePropertyBindingMetadata(tView.data, tNode, publicName, bindingIndex);
    }
  }
}
function inputBinding(publicName, value) {
  const binding = {
    [BINDING]: INPUT_BINDING_METADATA,
    update: () => inputBindingUpdate(binding.targetIdx, publicName, value())
  };
  return binding;
}
function outputBinding(eventName, listener2) {
  const binding = {
    [BINDING]: OUTPUT_BINDING_METADATA,
    create: () => {
      const lView = getLView();
      const tNode = getCurrentTNode();
      const tView = lView[TVIEW];
      const targetDef = tView.directiveRegistry[binding.targetIdx];
      createOutputListener(tNode, lView, listener2, targetDef, eventName);
    }
  };
  return binding;
}
function twoWayBinding(publicName, value) {
  const input2 = inputBinding(publicName, value);
  const output2 = outputBinding(publicName + "Change", (eventValue) => value.set(eventValue));
  ngDevMode && assertNotDefined(input2.create, "Unexpected `create` callback in inputBinding");
  ngDevMode && assertNotDefined(output2.update, "Unexpected `update` callback in outputBinding");
  const binding = {
    [BINDING]: {
      kind: "twoWay",
      requiredVars: input2[BINDING].requiredVars + output2[BINDING].requiredVars
    },
    set targetIdx(idx) {
      input2.targetIdx = idx;
      output2.targetIdx = idx;
    },
    create: output2.create,
    update: input2.update
  };
  return binding;
}
function toInputRefArray(map2) {
  return Object.keys(map2).map((name) => {
    const [propName, flags, transform2] = map2[name];
    const inputData = {
      propName,
      templateName: name,
      isSignal: (flags & InputFlags.SignalBased) !== 0
    };
    if (transform2) {
      inputData.transform = transform2;
    }
    return inputData;
  });
}
function toOutputRefArray(map2) {
  return Object.keys(map2).map((name) => ({ propName: map2[name], templateName: name }));
}
function verifyNotAnOrphanComponent(componentDef) {
  if (componentDef.debugInfo?.forbidOrphanRendering) {
    if (depsTracker.isOrphanComponent(componentDef.type)) {
      throw new RuntimeError(981, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(componentDef.type)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);
    }
  }
}
function createRootViewInjector(componentDef, environmentInjector, injector) {
  let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;
  if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {
    realEnvironmentInjector = componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;
  }
  const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;
  return rootViewInjector;
}
function createRootLViewEnvironment(rootLViewInjector) {
  const rendererFactory = rootLViewInjector.get(RendererFactory2, null);
  if (rendererFactory === null) {
    throw new RuntimeError(407, ngDevMode && "Angular was not able to inject a renderer (RendererFactory2). Likely this is due to a broken DI hierarchy. Make sure that any injector used to create this component has a correct parent.");
  }
  const sanitizer = rootLViewInjector.get(Sanitizer, null);
  const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);
  let ngReflect = false;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    ngReflect = rootLViewInjector.get(NG_REFLECT_ATTRS_FLAG, NG_REFLECT_ATTRS_FLAG_DEFAULT);
  }
  return {
    rendererFactory,
    sanitizer,
    changeDetectionScheduler,
    ngReflect
  };
}
function createHostElement(componentDef, render) {
  const tagName = (componentDef.selectors[0][0] || "div").toLowerCase();
  const namespace = tagName === "svg" ? SVG_NAMESPACE : tagName === "math" ? MATH_ML_NAMESPACE : null;
  return createElementNode(render, tagName, namespace);
}
function createRootTView(rootSelectorOrNode, componentDef, componentBindings, directives) {
  const tAttributes = rootSelectorOrNode ? ["ng-version", "20.1.4"] : (
    // Extract attributes and classes from the first selector only to match VE behavior.
    extractAttrsAndClassesFromSelector(componentDef.selectors[0])
  );
  let creationBindings = null;
  let updateBindings = null;
  let varsToAllocate = 0;
  if (componentBindings) {
    for (const binding of componentBindings) {
      varsToAllocate += binding[BINDING].requiredVars;
      if (binding.create) {
        binding.targetIdx = 0;
        (creationBindings ??= []).push(binding);
      }
      if (binding.update) {
        binding.targetIdx = 0;
        (updateBindings ??= []).push(binding);
      }
    }
  }
  if (directives) {
    for (let i = 0; i < directives.length; i++) {
      const directive = directives[i];
      if (typeof directive !== "function") {
        for (const binding of directive.bindings) {
          varsToAllocate += binding[BINDING].requiredVars;
          const targetDirectiveIdx = i + 1;
          if (binding.create) {
            binding.targetIdx = targetDirectiveIdx;
            (creationBindings ??= []).push(binding);
          }
          if (binding.update) {
            binding.targetIdx = targetDirectiveIdx;
            (updateBindings ??= []).push(binding);
          }
        }
      }
    }
  }
  const directivesToApply = [componentDef];
  if (directives) {
    for (const directive of directives) {
      const directiveType = typeof directive === "function" ? directive : directive.type;
      const directiveDef = ngDevMode ? getDirectiveDefOrThrow(directiveType) : getDirectiveDef(directiveType);
      if (ngDevMode && !directiveDef.standalone) {
        throw new RuntimeError(907, `The ${stringifyForError(directiveType)} directive must be standalone in order to be applied to a dynamically-created component.`);
      }
      directivesToApply.push(directiveDef);
    }
  }
  const rootTView = createTView(0, null, getRootTViewTemplate(creationBindings, updateBindings), 1, varsToAllocate, directivesToApply, null, null, null, [tAttributes], null);
  return rootTView;
}
function getRootTViewTemplate(creationBindings, updateBindings) {
  if (!creationBindings && !updateBindings) {
    return null;
  }
  return (flags) => {
    if (flags & 1 && creationBindings) {
      for (const binding of creationBindings) {
        binding.create();
      }
    }
    if (flags & 2 && updateBindings) {
      for (const binding of updateBindings) {
        binding.update();
      }
    }
  };
}
function isInputBinding(binding) {
  const kind = binding[BINDING].kind;
  return kind === "input" || kind === "twoWay";
}
function projectNodes(tNode, ngContentSelectors, projectableNodes) {
  const projection2 = tNode.projection = [];
  for (let i = 0; i < ngContentSelectors.length; i++) {
    const nodesforSlot = projectableNodes[i];
    projection2.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);
  }
}
function injectViewContainerRef() {
  const previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}
function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}
function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(
    hostTNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  let lContainer;
  const slotValue = hostLView[hostTNode.index];
  if (isLContainer(slotValue)) {
    lContainer = slotValue;
  } else {
    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);
    hostLView[hostTNode.index] = lContainer;
    addToEndOfViewTree(hostLView, lContainer);
  }
  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);
  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
function insertAnchorNode(hostLView, hostTNode) {
  const renderer = hostLView[RENDERER];
  const commentNode = renderer.createComment(ngDevMode ? "container" : "");
  const hostNative = getNativeByTNode(hostTNode, hostLView);
  const parentOfHostNative = renderer.parentNode(hostNative);
  nativeInsertBefore(renderer, parentOfHostNative, commentNode, renderer.nextSibling(hostNative), false);
  return commentNode;
}
function populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {
  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);
}
function createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
  if (lContainer[NATIVE])
    return;
  let commentNode;
  if (hostTNode.type & 8) {
    commentNode = unwrapRNode(slotValue);
  } else {
    commentNode = insertAnchorNode(hostLView, hostTNode);
  }
  lContainer[NATIVE] = commentNode;
}
function populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {
  if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {
    return true;
  }
  const hydrationInfo = hostLView[HYDRATION];
  const noOffsetIndex = tNode.index - HEADER_OFFSET;
  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock2(tNode) || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);
  if (isNodeCreationMode) {
    return false;
  }
  const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);
  const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];
  ngDevMode && assertDefined(serializedViews, "Unexpected state: no hydration info available for a given TNode, which represents a view container.");
  const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);
  if (ngDevMode) {
    validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);
    markRNodeAsClaimedByHydration(commentNode, false);
  }
  lContainer[NATIVE] = commentNode;
  lContainer[DEHYDRATED_VIEWS] = dehydratedViews;
  return true;
}
function locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
  if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {
    createAnchorNode(lContainer, hostLView, hostTNode, slotValue);
  }
}
function enableLocateOrCreateContainerRefImpl() {
  _locateOrCreateAnchorNode = locateOrCreateAnchorNode;
  _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;
}
function getIdxOfMatchingSelector(tNode, selector) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    for (let i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }
  return null;
}
function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3 | 8)) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4) {
    return createTemplateRef(tNode, currentView);
  }
  return null;
}
function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    return createSpecialToken(lView, tNode, read);
  } else {
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}
function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError2(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
  }
}
function materializeViewResults(tView, lView, tQuery, queryIndex) {
  const lQuery = lView[QUERIES].queries[queryIndex];
  if (lQuery.matches === null) {
    const tViewData = tView.data;
    const tQueryMatches = tQuery.matches;
    const result = [];
    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {
      const matchedNodeIdx = tQueryMatches[i];
      if (matchedNodeIdx < 0) {
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        const tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }
    lQuery.matches = result;
  }
  return lQuery.matches;
}
function collectQueryResults(tView, lView, queryIndex, result) {
  const tQuery = tView.queries.getByIndex(queryIndex);
  const tQueryMatches = tQuery.matches;
  if (tQueryMatches !== null) {
    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const tNodeIdx = tQueryMatches[i];
      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        const childQueryIndex = tQueryMatches[i + 1];
        const declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer);
        for (let i2 = CONTAINER_HEADER_OFFSET; i2 < declarationLContainer.length; i2++) {
          const embeddedLView = declarationLContainer[i2];
          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
        if (declarationLContainer[MOVED_VIEWS] !== null) {
          const embeddedLViews = declarationLContainer[MOVED_VIEWS];
          for (let i2 = 0; i2 < embeddedLViews.length; i2++) {
            const embeddedLView = embeddedLViews[i2];
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }
  return result;
}
function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], "LQueries should be defined when trying to load a query");
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}
function createLQuery(tView, lView, flags) {
  const queryList = new QueryList(
    (flags & 4) === 4
    /* QueryFlags.emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;
  return lQueries.push(new LQuery_(queryList)) - 1;
}
function createViewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
    if ((flags & 2) === 2) {
      tView.staticViewQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function createContentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    const tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);
    if ((flags & 2) === 2) {
      tView.staticContentQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function splitQueryMultiSelectors(locator) {
  return locator.split(",").map((s) => s.trim());
}
function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null)
    tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}
function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}
function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, "TQueries must be defined to retrieve a TQuery");
  return tView.queries.getByIndex(index);
}
function getQueryResults(lView, queryIndex) {
  const tView = lView[TVIEW];
  const tQuery = getTQuery(tView, queryIndex);
  return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
}
function createQuerySignalFn(firstOnly, required, opts) {
  let node;
  const signalFn = createComputed(() => {
    node._dirtyCounter();
    const value = refreshSignalQuery(node, firstOnly);
    if (required && value === void 0) {
      throw new RuntimeError(-951, ngDevMode && "Child query result is required but no value is available.");
    }
    return value;
  });
  node = signalFn[SIGNAL];
  node._dirtyCounter = signal(0);
  node._flatValue = void 0;
  if (ngDevMode) {
    signalFn.toString = () => `[Query Signal]`;
    node.debugName = opts?.debugName;
  }
  return signalFn;
}
function createSingleResultOptionalQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    false,
    opts
  );
}
function createSingleResultRequiredQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    true,
    opts
  );
}
function createMultiResultQuerySignalFn(opts) {
  return createQuerySignalFn(
    /* firstOnly */
    false,
    /* required */
    false,
    opts
  );
}
function bindQueryToSignal(target, queryIndex) {
  const node = target[SIGNAL];
  node._lView = getLView();
  node._queryIndex = queryIndex;
  node._queryList = loadQueryInternal(node._lView, queryIndex);
  node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));
}
function refreshSignalQuery(node, firstOnly) {
  const lView = node._lView;
  const queryIndex = node._queryIndex;
  if (lView === void 0 || queryIndex === void 0 || lView[FLAGS] & 4) {
    return firstOnly ? void 0 : EMPTY_ARRAY;
  }
  const queryList = loadQueryInternal(lView, queryIndex);
  const results = getQueryResults(lView, queryIndex);
  queryList.reset(results, unwrapElementRef);
  if (firstOnly) {
    return queryList.first;
  } else {
    const resultChanged = queryList._changesDetected;
    if (resultChanged || node._flatValue === void 0) {
      return node._flatValue = queryList.toArray();
    }
    return node._flatValue;
  }
}
function resolveComponentResources(resourceResolver) {
  const componentResolved = [];
  const urlMap = /* @__PURE__ */ new Map();
  function cachedResourceResolve(url) {
    let promise = urlMap.get(url);
    if (!promise) {
      const resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }
    return promise;
  }
  componentResourceResolutionQueue.forEach((component, type) => {
    const promises = [];
    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then((template2) => {
        component.template = template2;
      }));
    }
    const styles = typeof component.styles === "string" ? [component.styles] : component.styles || [];
    component.styles = styles;
    if (component.styleUrl && component.styleUrls?.length) {
      throw new Error("@Component cannot define both `styleUrl` and `styleUrls`. Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple");
    } else if (component.styleUrls?.length) {
      const styleOffset = component.styles.length;
      const styleUrls = component.styleUrls;
      component.styleUrls.forEach((styleUrl, index) => {
        styles.push("");
        promises.push(cachedResourceResolve(styleUrl).then((style) => {
          styles[styleOffset + index] = style;
          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
          if (styleUrls.length == 0) {
            component.styleUrls = void 0;
          }
        }));
      });
    } else if (component.styleUrl) {
      promises.push(cachedResourceResolve(component.styleUrl).then((style) => {
        styles.push(style);
        component.styleUrl = void 0;
      }));
    }
    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(() => void 0);
}
function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}
function isComponentDefPendingResolution(type) {
  return componentDefPendingResolution.has(type);
}
function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty("template") || component.styleUrls && component.styleUrls.length || component.styleUrl);
}
function clearResolutionOfComponentResourcesQueue() {
  const old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = /* @__PURE__ */ new Map();
  return old;
}
function restoreComponentResolutionQueue(queue) {
  componentDefPendingResolution.clear();
  queue.forEach((_, type) => componentDefPendingResolution.add(type));
  componentResourceResolutionQueue = queue;
}
function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}
function unwrapResponse(response) {
  return typeof response == "string" ? response : response.text();
}
function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming && checkForDuplicateNgModules) {
    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
  }
}
function registerNgModuleType(ngModuleType, id) {
  const existing = modules.get(id) || null;
  assertSameOrNotExisting(id, existing, ngModuleType);
  modules.set(id, ngModuleType);
}
function getRegisteredNgModuleType(id) {
  return modules.get(id);
}
function setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {
  checkForDuplicateNgModules = !allowDuplicates;
}
function \u0275\u0275validateIframeAttribute(attrValue, tagName, attrName) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  const element2 = getNativeByTNode(tNode, lView);
  if (tNode.type === 2 && tagName.toLowerCase() === "iframe") {
    const iframe = element2;
    iframe.src = "";
    iframe.srcdoc = trustedHTMLFromString("");
    nativeRemoveNode(lView[RENDERER], iframe);
    const errorMessage = ngDevMode && `Angular has detected that the \`${attrName}\` was applied as a binding to an <iframe>${getTemplateLocationDetails(lView)}. For security reasons, the \`${attrName}\` can be set on an <iframe> as a static attribute only. 
To fix this, switch the \`${attrName}\` binding to a static attribute in a template or in host bindings section.`;
    throw new RuntimeError(-910, errorMessage);
  }
  return attrValue;
}
function performanceMarkFeature(feature) {
  if (markedFeatures.has(feature)) {
    return;
  }
  markedFeatures.add(feature);
  performance?.mark?.("mark_feature_usage", { detail: { feature } });
}
function createNgModule(ngModule, parentInjector) {
  return new NgModuleRef2(ngModule, parentInjector ?? null, []);
}
function createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {
  return new NgModuleRef2(moduleType, parentInjector, additionalProviders, false);
}
function createEnvironmentInjector(providers, parent, debugName = null) {
  const adapter = new EnvironmentNgModuleRefAdapter({
    providers,
    parent,
    debugName,
    runEnvironmentInitializers: true
  });
  return adapter.injector;
}
function \u0275\u0275defineComponent(componentDefinition) {
  return noSideEffects(() => {
    (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
    const baseDef = getNgDirectiveDef(componentDefinition);
    const def = __spreadProps(__spreadValues({}, baseDef), {
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      template: componentDefinition.template,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      // assigned in noSideEffects
      pipeDefs: null,
      // assigned in noSideEffects
      dependencies: baseDef.standalone && componentDefinition.dependencies || null,
      getStandaloneInjector: baseDef.standalone ? (parentInjector) => {
        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);
      } : null,
      getExternalStyles: null,
      signals: componentDefinition.signals ?? false,
      data: componentDefinition.data || {},
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      schemas: componentDefinition.schemas || null,
      tView: null,
      id: ""
    });
    if (baseDef.standalone) {
      performanceMarkFeature("NgStandalone");
    }
    initFeatures(def);
    const dependencies = componentDefinition.dependencies;
    def.directiveDefs = extractDefListOrFactory(dependencies, extractDirectiveDef);
    def.pipeDefs = extractDefListOrFactory(dependencies, getPipeDef);
    def.id = getComponentId(def);
    return def;
  });
}
function extractDirectiveDef(type) {
  return getComponentDef(type) || getDirectiveDef(type);
}
function \u0275\u0275defineNgModule(def) {
  return noSideEffects(() => {
    const res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };
    return res;
  });
}
function parseAndConvertInputsForDefinition(obj, declaredInputs) {
  if (obj == null)
    return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      const value = obj[minifiedKey];
      let publicName;
      let declaredName;
      let inputFlags;
      let transform2;
      if (Array.isArray(value)) {
        inputFlags = value[0];
        publicName = value[1];
        declaredName = value[2] ?? publicName;
        transform2 = value[3] || null;
      } else {
        publicName = value;
        declaredName = value;
        inputFlags = InputFlags.None;
        transform2 = null;
      }
      newLookup[publicName] = [minifiedKey, inputFlags, transform2];
      declaredInputs[publicName] = declaredName;
    }
  }
  return newLookup;
}
function parseAndConvertOutputsForDefinition(obj) {
  if (obj == null)
    return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      newLookup[obj[minifiedKey]] = minifiedKey;
    }
  }
  return newLookup;
}
function \u0275\u0275defineDirective(directiveDefinition) {
  return noSideEffects(() => {
    const def = getNgDirectiveDef(directiveDefinition);
    initFeatures(def);
    return def;
  });
}
function \u0275\u0275definePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    standalone: pipeDef.standalone ?? true,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
function getNgDirectiveDef(directiveDefinition) {
  const declaredInputs = {};
  return {
    type: directiveDefinition.type,
    providersResolver: null,
    factory: null,
    hostBindings: directiveDefinition.hostBindings || null,
    hostVars: directiveDefinition.hostVars || 0,
    hostAttrs: directiveDefinition.hostAttrs || null,
    contentQueries: directiveDefinition.contentQueries || null,
    declaredInputs,
    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,
    exportAs: directiveDefinition.exportAs || null,
    standalone: directiveDefinition.standalone ?? true,
    signals: directiveDefinition.signals === true,
    selectors: directiveDefinition.selectors || EMPTY_ARRAY,
    viewQuery: directiveDefinition.viewQuery || null,
    features: directiveDefinition.features || null,
    setInput: null,
    resolveHostDirectives: null,
    hostDirectives: null,
    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),
    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),
    debugInfo: null
  };
}
function initFeatures(definition) {
  definition.features?.forEach((fn2) => fn2(definition));
}
function extractDefListOrFactory(dependencies, defExtractor) {
  if (!dependencies) {
    return null;
  }
  return () => {
    const resolvedDependencies = typeof dependencies === "function" ? dependencies() : dependencies;
    const result = [];
    for (const dep of resolvedDependencies) {
      const definition = defExtractor(dep);
      if (definition !== null) {
        result.push(definition);
      }
    }
    return result;
  };
}
function getComponentId(componentDef) {
  let hash = 0;
  const componentDefConsts = typeof componentDef.consts === "function" ? "" : componentDef.consts;
  const hashSelectors = [
    componentDef.selectors,
    componentDef.ngContentSelectors,
    componentDef.hostVars,
    componentDef.hostAttrs,
    componentDefConsts,
    componentDef.vars,
    componentDef.decls,
    componentDef.encapsulation,
    componentDef.standalone,
    componentDef.signals,
    componentDef.exportAs,
    JSON.stringify(componentDef.inputs),
    JSON.stringify(componentDef.outputs),
    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not
    // match in the server and browser bundles.
    Object.getOwnPropertyNames(componentDef.type.prototype),
    !!componentDef.contentQueries,
    !!componentDef.viewQuery
  ];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    for (const item of hashSelectors) {
      assertNotEqual(typeof item, "function", "Internal error: attempting to use a function in component id computation logic.");
    }
  }
  for (const char of hashSelectors.join("|")) {
    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;
  }
  hash += 2147483647 + 1;
  const compId = "c" + hash;
  if ((typeof ngDevMode === "undefined" || ngDevMode) && true) {
    if (GENERATED_COMP_IDS.has(compId)) {
      const previousCompDefType = GENERATED_COMP_IDS.get(compId);
      if (previousCompDefType !== componentDef.type) {
        console.warn(formatRuntimeError(-912, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));
      }
    } else {
      GENERATED_COMP_IDS.set(compId, componentDef.type);
    }
  }
  return compId;
}
function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
function \u0275\u0275InheritDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let shouldInheritFields = true;
  const inheritanceChain = [definition];
  while (superType) {
    let superDef = void 0;
    if (isComponentDef(definition)) {
      superDef = superType.\u0275cmp || superType.\u0275dir;
    } else {
      if (superType.\u0275cmp) {
        throw new RuntimeError(903, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);
      }
      superDef = superType.\u0275dir;
    }
    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef);
        const writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
        const superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings);
        const superViewQuery = superDef.viewQuery;
        const superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries);
        mergeInputsWithTransforms(definition, superDef);
        fillProperties(definition.outputs, superDef.outputs);
        if (isComponentDef(superDef) && superDef.data.animation) {
          const defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      }
      const features = superDef.features;
      if (features) {
        for (let i = 0; i < features.length; i++) {
          const feature = features[i];
          if (feature && feature.ngInherit) {
            feature(definition);
          }
          if (feature === \u0275\u0275InheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }
    superType = Object.getPrototypeOf(superType);
  }
  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
function mergeInputsWithTransforms(target, source) {
  for (const key in source.inputs) {
    if (!source.inputs.hasOwnProperty(key)) {
      continue;
    }
    if (target.inputs.hasOwnProperty(key)) {
      continue;
    }
    const value = source.inputs[key];
    if (value !== void 0) {
      target.inputs[key] = value;
      target.declaredInputs[key] = source.declaredInputs[key];
    }
  }
}
function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  let hostVars = 0;
  let hostAttrs = null;
  for (let i = inheritanceChain.length - 1; i >= 0; i--) {
    const def = inheritanceChain[i];
    def.hostVars = hostVars += def.hostVars;
    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}
function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}
function inheritViewQuery(definition, superViewQuery) {
  const prevViewQuery = definition.viewQuery;
  if (prevViewQuery) {
    definition.viewQuery = (rf, ctx) => {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}
function inheritContentQueries(definition, superContentQueries) {
  const prevContentQueries = definition.contentQueries;
  if (prevContentQueries) {
    definition.contentQueries = (rf, ctx, directiveIndex) => {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}
function inheritHostBindings(definition, superHostBindings) {
  const prevHostBindings = definition.hostBindings;
  if (prevHostBindings) {
    definition.hostBindings = (rf, ctx) => {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
function \u0275\u0275CopyDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let superDef = void 0;
  if (isComponentDef(definition)) {
    superDef = superType.\u0275cmp;
  } else {
    superDef = superType.\u0275dir;
  }
  const defAny = definition;
  for (const field of COPY_DIRECTIVE_FIELDS) {
    defAny[field] = superDef[field];
  }
  if (isComponentDef(superDef)) {
    for (const field of COPY_COMPONENT_FIELDS) {
      defAny[field] = superDef[field];
    }
  }
}
function \u0275\u0275HostDirectivesFeature(rawHostDirectives) {
  const feature = (definition) => {
    const isEager = Array.isArray(rawHostDirectives);
    if (definition.hostDirectives === null) {
      definition.resolveHostDirectives = resolveHostDirectives;
      definition.hostDirectives = isEager ? rawHostDirectives.map(createHostDirectiveDef) : [rawHostDirectives];
    } else if (isEager) {
      definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));
    } else {
      definition.hostDirectives.unshift(rawHostDirectives);
    }
  };
  feature.ngInherit = true;
  return feature;
}
function resolveHostDirectives(matches) {
  const allDirectiveDefs = [];
  let hasComponent = false;
  let hostDirectiveDefs = null;
  let hostDirectiveRanges = null;
  for (let i = 0; i < matches.length; i++) {
    const def = matches[i];
    if (def.hostDirectives !== null) {
      const start = allDirectiveDefs.length;
      hostDirectiveDefs ??= /* @__PURE__ */ new Map();
      hostDirectiveRanges ??= /* @__PURE__ */ new Map();
      findHostDirectiveDefs(def, allDirectiveDefs, hostDirectiveDefs);
      hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);
    }
    if (i === 0 && isComponentDef(def)) {
      hasComponent = true;
      allDirectiveDefs.push(def);
    }
  }
  for (let i = hasComponent ? 1 : 0; i < matches.length; i++) {
    allDirectiveDefs.push(matches[i]);
  }
  return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];
}
function findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {
  if (currentDef.hostDirectives !== null) {
    for (const configOrFn of currentDef.hostDirectives) {
      if (typeof configOrFn === "function") {
        const resolved2 = configOrFn();
        for (const config2 of resolved2) {
          trackHostDirectiveDef(createHostDirectiveDef(config2), matchedDefs, hostDirectiveDefs);
        }
      } else {
        trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);
      }
    }
  }
}
function trackHostDirectiveDef(def, matchedDefs, hostDirectiveDefs) {
  const hostDirectiveDef = getDirectiveDef(def.directive);
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    validateHostDirective(def, hostDirectiveDef);
  }
  patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);
  findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);
  hostDirectiveDefs.set(hostDirectiveDef, def);
  matchedDefs.push(hostDirectiveDef);
}
function createHostDirectiveDef(config2) {
  return typeof config2 === "function" ? { directive: resolveForwardRef(config2), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ } : {
    directive: resolveForwardRef(config2.directive),
    inputs: bindingArrayToMap(config2.inputs),
    outputs: bindingArrayToMap(config2.outputs)
  };
}
function bindingArrayToMap(bindings) {
  if (bindings === void 0 || bindings.length === 0) {
    return EMPTY_OBJ;
  }
  const result = {};
  for (let i = 0; i < bindings.length; i += 2) {
    result[bindings[i]] = bindings[i + 1];
  }
  return result;
}
function patchDeclaredInputs(declaredInputs, exposedInputs) {
  for (const publicName in exposedInputs) {
    if (exposedInputs.hasOwnProperty(publicName)) {
      const remappedPublicName = exposedInputs[publicName];
      const privateName = declaredInputs[publicName];
      if ((typeof ngDevMode === "undefined" || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {
        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);
      }
      declaredInputs[remappedPublicName] = privateName;
    }
  }
}
function validateHostDirective(hostDirectiveConfig, directiveDef) {
  const type = hostDirectiveConfig.directive;
  if (directiveDef === null) {
    if (getComponentDef(type) !== null) {
      throw new RuntimeError(310, `Host directive ${type.name} cannot be a component.`);
    }
    throw new RuntimeError(307, `Could not resolve metadata for host directive ${type.name}. Make sure that the ${type.name} class is annotated with an @Directive decorator.`);
  }
  if (!directiveDef.standalone) {
    throw new RuntimeError(308, `Host directive ${directiveDef.type.name} must be standalone.`);
  }
  validateMappings("input", directiveDef, hostDirectiveConfig.inputs);
  validateMappings("output", directiveDef, hostDirectiveConfig.outputs);
}
function validateMappings(bindingType, def, hostDirectiveBindings) {
  const className = def.type.name;
  const bindings = bindingType === "input" ? def.inputs : def.outputs;
  for (const publicName in hostDirectiveBindings) {
    if (hostDirectiveBindings.hasOwnProperty(publicName)) {
      if (!bindings.hasOwnProperty(publicName)) {
        throw new RuntimeError(311, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);
      }
      const remappedPublicName = hostDirectiveBindings[publicName];
      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {
        throw new RuntimeError(312, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);
      }
    }
  }
}
function templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags) {
  if (declarationTView.firstCreatePass) {
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
    const embeddedTView = tNode.tView = createTView(
      2,
      tNode,
      templateFn,
      decls,
      vars,
      declarationTView.directiveRegistry,
      declarationTView.pipeRegistry,
      null,
      declarationTView.schemas,
      declarationTView.consts,
      null
      /* ssrId */
    );
    if (declarationTView.queries !== null) {
      declarationTView.queries.template(declarationTView, tNode);
      embeddedTView.queries = declarationTView.queries.embeddedTView(tNode);
    }
  }
  if (flags) {
    tNode.flags |= flags;
  }
  setCurrentTNode(tNode, false);
  const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);
  if (wasLastNodeCreated()) {
    appendChild(declarationTView, declarationLView, comment, tNode);
  }
  attachPatchData(comment, declarationLView);
  const lContainer = createLContainer(comment, declarationLView, comment, tNode);
  declarationLView[index + HEADER_OFFSET] = lContainer;
  addToEndOfViewTree(declarationLView, lContainer);
  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);
}
function declareDirectiveHostTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {
  const adjustedIndex = index + HEADER_OFFSET;
  let tNode;
  if (declarationTView.firstCreatePass) {
    tNode = getOrCreateTNode(declarationTView, adjustedIndex, 4, tagName || null, attrs || null);
    if (getBindingsEnabled()) {
      resolveDirectives(declarationTView, declarationLView, tNode, getConstant(declarationTView.consts, localRefsIndex), findDirectiveDefMatches);
    }
    registerPostOrderHooks(declarationTView, tNode);
  } else {
    tNode = declarationTView.data[adjustedIndex];
  }
  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(declarationTView, declarationLView, tNode);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);
  }
  return tNode;
}
function declareNoDirectiveHostTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {
  const adjustedIndex = index + HEADER_OFFSET;
  let tNode;
  if (declarationTView.firstCreatePass) {
    tNode = getOrCreateTNode(declarationTView, adjustedIndex, 4, tagName || null, attrs || null);
    if (localRefsIndex != null) {
      const refs = getConstant(declarationTView.consts, localRefsIndex);
      tNode.localNames = [];
      for (let i = 0; i < refs.length; i += 2) {
        tNode.localNames.push(refs[i], -1);
      }
    }
  } else {
    tNode = declarationTView.data[adjustedIndex];
  }
  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);
  }
  return tNode;
}
function \u0275\u0275template(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, void 0, localRefsIndex, localRefExtractor);
  return \u0275\u0275template;
}
function \u0275\u0275domTemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, void 0, localRefsIndex, localRefExtractor);
  return \u0275\u0275domTemplate;
}
function createContainerAnchorImpl(tView, lView, tNode, index) {
  lastNodeWasCreated(true);
  return lView[RENDERER].createComment(ngDevMode ? "container" : "");
}
function locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {
  const isNodeCreationMode = !canHydrateNode(lView, tNode);
  lastNodeWasCreated(isNodeCreationMode);
  const ssrId = lView[HYDRATION]?.data[TEMPLATES]?.[index] ?? null;
  if (ssrId !== null && tNode.tView !== null) {
    if (tNode.tView.ssrId === null) {
      tNode.tView.ssrId = ssrId;
    } else {
      ngDevMode && assertEqual(tNode.tView.ssrId, ssrId, "Unexpected value of the `ssrId` for this TView");
    }
  }
  if (isNodeCreationMode) {
    return createContainerAnchorImpl(tView, lView);
  }
  const hydrationInfo = lView[HYDRATION];
  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);
  ngDevMode && validateNodeExists(currentRNode, lView, tNode);
  setSegmentHead(hydrationInfo, index, currentRNode);
  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);
  const comment = siblingAfter(viewContainerSize, currentRNode);
  if (ngDevMode) {
    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);
    markRNodeAsClaimedByHydration(comment);
  }
  return comment;
}
function enableLocateOrCreateContainerAnchorImpl() {
  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;
}
function storeTriggerCleanupFn(type, lDetails, cleanupFn) {
  const key = getCleanupFnKeyByType(type);
  if (lDetails[key] === null) {
    lDetails[key] = [];
  }
  lDetails[key].push(cleanupFn);
}
function invokeTriggerCleanupFns(type, lDetails) {
  const key = getCleanupFnKeyByType(type);
  const cleanupFns = lDetails[key];
  if (cleanupFns !== null) {
    for (const cleanupFn of cleanupFns) {
      cleanupFn();
    }
    lDetails[key] = null;
  }
}
function invokeAllTriggerCleanupFns(lDetails) {
  invokeTriggerCleanupFns(1, lDetails);
  invokeTriggerCleanupFns(0, lDetails);
  invokeTriggerCleanupFns(2, lDetails);
}
function getCleanupFnKeyByType(type) {
  let key = TRIGGER_CLEANUP_FNS;
  if (type === 1) {
    key = PREFETCH_TRIGGER_CLEANUP_FNS;
  } else if (type === 2) {
    key = HYDRATE_TRIGGER_CLEANUP_FNS;
  }
  return key;
}
function scheduleCallbackWithRafRace(callback) {
  let timeoutId;
  let animationFrameId;
  function cleanup() {
    callback = noop2;
    try {
      if (animationFrameId !== void 0 && typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animationFrameId);
      }
      if (timeoutId !== void 0) {
        clearTimeout(timeoutId);
      }
    } catch {
    }
  }
  timeoutId = setTimeout(() => {
    callback();
    cleanup();
  });
  if (typeof requestAnimationFrame === "function") {
    animationFrameId = requestAnimationFrame(() => {
      callback();
      cleanup();
    });
  }
  return () => cleanup();
}
function scheduleCallbackWithMicrotask(callback) {
  queueMicrotask(() => callback());
  return () => {
    callback = noop2;
  };
}
function checkStable(zone) {
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;
      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(() => zone.onStable.emit(null));
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}
function delayChangeDetectionForEvents(zone) {
  if (zone.isCheckStableRunning || zone.callbackScheduled) {
    return;
  }
  zone.callbackScheduled = true;
  function scheduleCheckStable() {
    scheduleCallbackWithRafRace(() => {
      zone.callbackScheduled = false;
      updateMicroTaskStatus(zone);
      zone.isCheckStableRunning = true;
      checkStable(zone);
      zone.isCheckStableRunning = false;
    });
  }
  if (zone.scheduleInRootZone) {
    Zone.root.run(() => {
      scheduleCheckStable();
    });
  } else {
    zone._outer.run(() => {
      scheduleCheckStable();
    });
  }
  updateMicroTaskStatus(zone);
}
function forkInnerZoneWithAngularBehavior(zone) {
  const delayChangeDetectionForEventsDelegate = () => {
    delayChangeDetectionForEvents(zone);
  };
  const instanceId = ngZoneInstanceId++;
  zone._inner = zone._inner.fork({
    name: "angular",
    properties: {
      [isAngularZoneProperty]: true,
      [angularZoneInstanceIdProperty]: instanceId,
      [angularZoneInstanceIdProperty + instanceId]: true
    },
    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
      if (shouldBeIgnoredByZone(applyArgs)) {
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      }
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === "eventTask" || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection && // Do not delay change detection when the task is the scheduler's tick.
        // We need to synchronously trigger the stability logic so that the
        // zone-based scheduler can prevent a duplicate ApplicationRef.tick
        // by first checking if the scheduler tick is running. This does seem a bit roundabout,
        // but we _do_ still want to trigger all the correct events when we exit the zone.run
        // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which
        // relies on these events happening after change detection runs).
        // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate
        // but is added here as well to prevent reads of applyArgs when not necessary
        !zone.callbackScheduled && !isSchedulerTick(applyArgs)) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onHasTask: (delegate, current, target, hasTaskState) => {
      delegate.hasTask(target, hasTaskState);
      if (current === target) {
        if (hasTaskState.change == "microTask") {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == "macroTask") {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: (delegate, current, target, error) => {
      delegate.handleError(target, error);
      zone.runOutsideAngular(() => zone.onError.emit(error));
      return false;
    }
  });
}
function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.callbackScheduled === true) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}
function onEnter(zone) {
  zone._nesting++;
  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}
function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
function shouldBeIgnoredByZone(applyArgs) {
  return hasApplyArgsData(applyArgs, "__ignore_ng_zone__");
}
function isSchedulerTick(applyArgs) {
  return hasApplyArgsData(applyArgs, "__scheduler_tick__");
}
function hasApplyArgsData(applyArgs, key) {
  if (!Array.isArray(applyArgs)) {
    return false;
  }
  if (applyArgs.length !== 1) {
    return false;
  }
  return applyArgs[0]?.data?.[key] === true;
}
function getNgZone(ngZoneToUse = "zone.js", options) {
  if (ngZoneToUse === "noop") {
    return new NoopNgZone();
  }
  if (ngZoneToUse === "zone.js") {
    return new NgZone(options);
  }
  return ngZoneToUse;
}
function afterEveryRender(callbackOrSpec, options) {
  ngDevMode && assertNotInReactiveContext(afterEveryRender, "Call `afterEveryRender` outside of a reactive context. For example, schedule the render callback inside the component constructor`.");
  if (ngDevMode && !options?.injector) {
    assertInInjectionContext(afterEveryRender);
  }
  const injector = options?.injector ?? inject2(Injector);
  if (false) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterRender");
  return afterEveryRenderImpl(
    callbackOrSpec,
    injector,
    options,
    /* once */
    false
  );
}
function afterNextRender(callbackOrSpec, options) {
  if (ngDevMode && !options?.injector) {
    assertInInjectionContext(afterNextRender);
  }
  const injector = options?.injector ?? inject2(Injector);
  if (false) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterNextRender");
  return afterEveryRenderImpl(
    callbackOrSpec,
    injector,
    options,
    /* once */
    true
  );
}
function getHooks(callbackOrSpec) {
  if (callbackOrSpec instanceof Function) {
    return [
      void 0,
      void 0,
      /* MixedReadWrite */
      callbackOrSpec,
      void 0
    ];
  } else {
    return [
      callbackOrSpec.earlyRead,
      callbackOrSpec.write,
      callbackOrSpec.mixedReadWrite,
      callbackOrSpec.read
    ];
  }
}
function afterEveryRenderImpl(callbackOrSpec, injector, options, once) {
  const manager = injector.get(AfterRenderManager);
  manager.impl ??= injector.get(AfterRenderImpl);
  const tracing = injector.get(TracingService, null, { optional: true });
  const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
  const viewContext = injector.get(ViewContext, null, { optional: true });
  const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec), viewContext?.view, once, destroyRef, tracing?.snapshot(null));
  manager.impl.register(sequence);
  return sequence;
}
function getDeferBlockDataIndex(deferBlockIndex) {
  return deferBlockIndex + 1;
}
function getLDeferBlockDetails(lView, tNode) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return lView[slotIndex];
}
function setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  lView[slotIndex] = lDetails;
}
function getTDeferBlockDetails(tView, tNode) {
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return tView.data[slotIndex];
}
function setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  tView.data[slotIndex] = deferBlockConfig;
}
function getTemplateIndexForState(newState, hostLView, tNode) {
  const tView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  switch (newState) {
    case DeferBlockState.Complete:
      return tDetails.primaryTmplIndex;
    case DeferBlockState.Loading:
      return tDetails.loadingTmplIndex;
    case DeferBlockState.Error:
      return tDetails.errorTmplIndex;
    case DeferBlockState.Placeholder:
      return tDetails.placeholderTmplIndex;
    default:
      ngDevMode && throwError2(`Unexpected defer block state: ${newState}`);
      return null;
  }
}
function getMinimumDurationForState(tDetails, currentState) {
  if (currentState === DeferBlockState.Placeholder) {
    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;
  } else if (currentState === DeferBlockState.Loading) {
    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;
  }
  return null;
}
function getLoadingBlockAfter(tDetails) {
  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;
}
function addDepsToRegistry(currentDeps, newDeps) {
  if (!currentDeps || currentDeps.length === 0) {
    return newDeps;
  }
  const currentDepSet = new Set(currentDeps);
  for (const dep of newDeps) {
    currentDepSet.add(dep);
  }
  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);
}
function getPrimaryBlockTNode(tView, tDetails) {
  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;
  return getTNode(tView, adjustedIndex);
}
function assertDeferredDependenciesLoaded(tDetails) {
  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, "Expecting all deferred dependencies to be loaded.");
}
function isTDeferBlockDetails(value) {
  return value !== null && typeof value === "object" && typeof value.primaryTmplIndex === "number";
}
function isDeferBlock(tView, tNode) {
  let tDetails = null;
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  if (HEADER_OFFSET < slotIndex && slotIndex < tView.bindingStartIndex) {
    tDetails = getTDeferBlockDetails(tView, tNode);
  }
  return !!tDetails && isTDeferBlockDetails(tDetails);
}
function trackTriggerForDebugging(tView, tNode, textRepresentation) {
  const tDetails = getTDeferBlockDetails(tView, tNode);
  tDetails.debug ??= {};
  tDetails.debug.triggers ??= /* @__PURE__ */ new Set();
  tDetails.debug.triggers.add(textRepresentation);
}
function onViewportWrapper(trigger, callback, injector) {
  const ngZone = injector.get(NgZone);
  return onViewport(trigger, () => ngZone.run(callback), () => ngZone.runOutsideAngular(() => createIntersectionObserver()));
}
function getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {
  if (walkUpTimes == null) {
    return deferredHostLView;
  }
  if (walkUpTimes >= 0) {
    return walkUpViews(walkUpTimes, deferredHostLView);
  }
  const deferredContainer = deferredHostLView[deferredTNode.index];
  ngDevMode && assertLContainer(deferredContainer);
  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;
  if (ngDevMode && triggerLView !== null) {
    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    assertEqual(renderedState, DeferBlockState.Placeholder, "Expected a placeholder to be rendered in this defer block.");
    assertLView(triggerLView);
  }
  return triggerLView;
}
function getTriggerElement(triggerLView, triggerIndex) {
  const element2 = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);
  ngDevMode && assertElement(element2);
  return element2;
}
function registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {
  const injector = initialLView[INJECTOR];
  const zone = injector.get(NgZone);
  let poll;
  function pollDomTrigger() {
    if (isDestroyed(initialLView)) {
      poll.destroy();
      return;
    }
    const lDetails = getLDeferBlockDetails(initialLView, tNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {
      poll.destroy();
      return;
    }
    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);
    if (!triggerLView) {
      return;
    }
    poll.destroy();
    if (isDestroyed(triggerLView)) {
      return;
    }
    const element2 = getTriggerElement(triggerLView, triggerIndex);
    const cleanup = registerFn(element2, () => {
      zone.run(() => {
        if (initialLView !== triggerLView) {
          removeLViewOnDestroy(triggerLView, cleanup);
        }
        callback();
      });
    }, injector);
    if (initialLView !== triggerLView) {
      storeLViewOnDestroy(triggerLView, cleanup);
    }
    storeTriggerCleanupFn(type, lDetails, cleanup);
  }
  poll = afterEveryRender({ read: pollDomTrigger }, { injector });
}
function onIdle(callback, injector) {
  const scheduler = injector.get(IdleScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(callback);
  return cleanupFn;
}
function onTimer(delay) {
  return (callback, injector) => scheduleTimerTrigger(delay, callback, injector);
}
function scheduleTimerTrigger(delay, callback, injector) {
  const scheduler = injector.get(TimerScheduler);
  const ngZone = injector.get(NgZone);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(delay, callback, ngZone);
  return cleanupFn;
}
function getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {
  return parentInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? "DeferBlock Injector" : "");
}
function createDeferBlockInjector(parentInjector, tDetails, providers) {
  if (parentInjector instanceof ChainedInjector) {
    const origInjector = parentInjector.injector;
    const parentEnvInjector2 = parentInjector.parentInjector;
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector2, tDetails, providers);
    return new ChainedInjector(origInjector, envInjector);
  }
  const parentEnvInjector = parentInjector.get(EnvironmentInjector);
  if (parentEnvInjector !== parentInjector) {
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);
    return new ChainedInjector(parentInjector, envInjector);
  }
  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);
}
function renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {
  const hostLView = lContainer[PARENT];
  const hostTView = hostLView[TVIEW];
  if (isDestroyed(hostLView))
    return;
  ngDevMode && assertTNodeForLView(tNode, hostLView);
  const lDetails = getLDeferBlockDetails(hostLView, tNode);
  ngDevMode && assertDefined(lDetails, "Expected a defer block state defined");
  const currentState = lDetails[DEFER_BLOCK_STATE];
  const ssrState = lDetails[SSR_BLOCK_STATE];
  if (ssrState !== null && newState < ssrState) {
    return;
  }
  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {
    const tDetails = getTDeferBlockDetails(hostTView, tNode);
    const needsScheduling = !skipTimerScheduling && true && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));
    if (ngDevMode && needsScheduling) {
      assertDefined(applyDeferBlockStateWithSchedulingImpl, "Expected scheduling function to be defined");
    }
    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;
    try {
      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);
    } catch (error) {
      handleUncaughtError(hostLView, error);
    }
  }
}
function findMatchingDehydratedViewForDeferBlock(lContainer, lDetails) {
  const dehydratedViewIx = lContainer[DEHYDRATED_VIEWS]?.findIndex((view) => view.data[DEFER_BLOCK_STATE$1] === lDetails[DEFER_BLOCK_STATE]) ?? -1;
  const dehydratedView = dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS][dehydratedViewIx] : null;
  return { dehydratedView, dehydratedViewIx };
}
function applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {
  profiler(
    20
    /* ProfilerEvent.DeferBlockStateStart */
  );
  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);
  if (stateTmplIndex !== null) {
    lDetails[DEFER_BLOCK_STATE] = newState;
    const hostTView = hostLView[TVIEW];
    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;
    const activeBlockTNode = getTNode(hostTView, adjustedIndex);
    const viewIndex = 0;
    removeLViewFromLContainer(lContainer, viewIndex);
    let injector;
    if (newState === DeferBlockState.Complete) {
      const tDetails = getTDeferBlockDetails(hostTView, tNode);
      const providers = tDetails.providers;
      if (providers && providers.length > 0) {
        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);
      }
    }
    const { dehydratedView, dehydratedViewIx } = findMatchingDehydratedViewForDeferBlock(lContainer, lDetails);
    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {
      injector,
      dehydratedView
    });
    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));
    markViewDirty(
      embeddedLView,
      2
      /* NotificationSource.DeferBlockStateUpdate */
    );
    if (dehydratedViewIx > -1) {
      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);
    }
    if ((newState === DeferBlockState.Complete || newState === DeferBlockState.Error) && Array.isArray(lDetails[ON_COMPLETE_FNS])) {
      for (const callback of lDetails[ON_COMPLETE_FNS]) {
        callback();
      }
      lDetails[ON_COMPLETE_FNS] = null;
    }
  }
  profiler(
    21
    /* ProfilerEvent.DeferBlockStateEnd */
  );
}
function applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {
  const now = Date.now();
  const hostTView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(hostTView, tNode);
  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    const loadingAfter = getLoadingBlockAfter(tDetails);
    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;
    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {
      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);
      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;
    } else {
      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {
        lDetails[LOADING_AFTER_CLEANUP_FN]();
        lDetails[LOADING_AFTER_CLEANUP_FN] = null;
        lDetails[NEXT_DEFER_BLOCK_STATE] = null;
      }
      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);
      const duration = getMinimumDurationForState(tDetails, newState);
      if (duration !== null) {
        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;
        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);
      }
    }
  } else {
    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
  }
}
function scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {
  const callback = () => {
    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    lDetails[NEXT_DEFER_BLOCK_STATE] = null;
    if (nextState !== null) {
      renderDeferBlockState(nextState, tNode, lContainer);
    }
  };
  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);
}
function isValidStateChange(currentState, newState) {
  return currentState < newState;
}
function renderPlaceholder(lView, tNode) {
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);
}
function renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {
  ngDevMode && assertDefined(tDetails.loadingPromise, "Expected loading Promise to exist on this defer block");
  tDetails.loadingPromise.then(() => {
    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
    }
  });
}
function \u0275\u0275deferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {
  const tViewConsts = tView.consts;
  if (placeholderConfigIndex != null) {
    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);
  }
  if (loadingConfigIndex != null) {
    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);
  }
  if (applyDeferBlockStateWithSchedulingImpl === null) {
    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;
  }
}
function getAsyncClassMetadataFn(type) {
  const componentClass = type;
  return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;
}
function setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {
  const componentClass = type;
  componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then((dependencies) => {
    metadataSetterFn(...dependencies);
    componentClass[ASYNC_COMPONENT_METADATA_FN] = null;
    return dependencies;
  });
  return componentClass[ASYNC_COMPONENT_METADATA_FN];
}
function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(() => {
    const clazz = type;
    if (decorators !== null) {
      if (clazz.hasOwnProperty("decorators") && clazz.decorators !== void 0) {
        clazz.decorators.push(...decorators);
      } else {
        clazz.decorators = decorators;
      }
    }
    if (ctorParameters !== null) {
      clazz.ctorParameters = ctorParameters;
    }
    if (propDecorators !== null) {
      if (clazz.hasOwnProperty("propDecorators") && clazz.propDecorators !== void 0) {
        clazz.propDecorators = __spreadValues(__spreadValues({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
function getFrameworkDIDebugData() {
  return frameworkDIDebugData;
}
function setupFrameworkInjectorProfiler() {
  frameworkDIDebugData.reset();
  setInjectorProfiler(injectorProfilerEventHandler);
}
function injectorProfilerEventHandler(injectorProfilerEvent) {
  const { context: context2, type } = injectorProfilerEvent;
  if (type === 0) {
    handleInjectEvent(context2, injectorProfilerEvent.service);
  } else if (type === 1) {
    handleInstanceCreatedByInjectorEvent(context2, injectorProfilerEvent.instance);
  } else if (type === 2) {
    handleProviderConfiguredEvent(context2, injectorProfilerEvent.providerRecord);
  } else if (type === 3) {
    handleEffectCreatedEvent(context2, injectorProfilerEvent.effect);
  }
}
function handleEffectCreatedEvent(context2, effect2) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An EffectCreated event must be run within an injection context.");
  }
  const { resolverToEffects } = frameworkDIDebugData;
  if (!resolverToEffects.has(diResolver)) {
    resolverToEffects.set(diResolver, []);
  }
  resolverToEffects.get(diResolver).push(effect2);
}
function handleInjectEvent(context2, data) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An Inject event must be run within an injection context.");
  }
  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;
  if (!diResolverToInstantiatedToken.has(diResolver)) {
    diResolverToInstantiatedToken.set(diResolver, /* @__PURE__ */ new WeakMap());
  }
  if (!canBeHeldWeakly(context2.token)) {
    return;
  }
  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);
  if (!instantiatedTokenToDependencies.has(context2.token)) {
    instantiatedTokenToDependencies.set(context2.token, []);
  }
  const { token, value, flags } = data;
  assertDefined(context2.token, "Injector profiler context token is undefined.");
  const dependencies = instantiatedTokenToDependencies.get(context2.token);
  assertDefined(dependencies, "Could not resolve dependencies for token.");
  if (context2.injector instanceof NodeInjector) {
    dependencies.push({ token, value, flags, injectedIn: getNodeInjectorContext(context2.injector) });
  } else {
    dependencies.push({ token, value, flags });
  }
}
function getNodeInjectorContext(injector) {
  if (!(injector instanceof NodeInjector)) {
    throwError2("getNodeInjectorContext must be called with a NodeInjector");
  }
  const lView = getNodeInjectorLView(injector);
  const tNode = getNodeInjectorTNode(injector);
  if (tNode === null) {
    return;
  }
  assertTNodeForLView(tNode, lView);
  return { lView, tNode };
}
function handleInstanceCreatedByInjectorEvent(context2, data) {
  const { value } = data;
  if (data.value == null) {
    return;
  }
  if (getDIResolver(context2.injector) === null) {
    throwError2("An InjectorCreatedInstance event must be run within an injection context.");
  }
  let standaloneComponent = void 0;
  if (typeof value === "object") {
    standaloneComponent = value?.constructor;
  }
  if (standaloneComponent == void 0 || !isStandaloneComponent(standaloneComponent)) {
    return;
  }
  const environmentInjector = context2.injector.get(EnvironmentInjector, null, { optional: true });
  if (environmentInjector === null) {
    return;
  }
  const { standaloneInjectorToComponent } = frameworkDIDebugData;
  if (standaloneInjectorToComponent.has(environmentInjector)) {
    return;
  }
  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);
}
function isStandaloneComponent(value) {
  const def = getComponentDef(value);
  return !!def?.standalone;
}
function handleProviderConfiguredEvent(context2, data) {
  const { resolverToProviders } = frameworkDIDebugData;
  let diResolver;
  if (context2?.injector instanceof NodeInjector) {
    diResolver = getNodeInjectorTNode(context2.injector);
  } else {
    diResolver = context2.injector;
  }
  if (diResolver === null) {
    throwError2("A ProviderConfigured event must be run within an injection context.");
  }
  if (!resolverToProviders.has(diResolver)) {
    resolverToProviders.set(diResolver, []);
  }
  resolverToProviders.get(diResolver).push(data);
}
function getDIResolver(injector) {
  let diResolver = null;
  if (injector === void 0) {
    return diResolver;
  }
  if (injector instanceof NodeInjector) {
    diResolver = getNodeInjectorLView(injector);
  } else {
    diResolver = injector;
  }
  return diResolver;
}
function canBeHeldWeakly(value) {
  return value !== null && (typeof value === "object" || typeof value === "function" || typeof value === "symbol");
}
function applyChanges(component) {
  ngDevMode && assertDefined(component, "component");
  markViewDirty(
    getComponentViewByInstance(component),
    3
    /* NotificationSource.DebugApplyChanges */
  );
  getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));
}
function detectChanges(component) {
  const view = getComponentViewByInstance(component);
  view[FLAGS] |= 1024;
  detectChangesInternal(view);
}
function getDeferBlocks$1(lView, deferBlocks) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (isLContainer(lView[i])) {
      const lContainer = lView[i];
      const isLast = i === tView.bindingStartIndex - 1;
      if (!isLast) {
        const tNode = tView.data[i];
        const tDetails = getTDeferBlockDetails(tView, tNode);
        if (isTDeferBlockDetails(tDetails)) {
          deferBlocks.push({ lContainer, lView, tNode, tDetails });
          continue;
        }
      }
      if (isLView(lContainer[HOST])) {
        getDeferBlocks$1(lContainer[HOST], deferBlocks);
      }
      for (let j = CONTAINER_HEADER_OFFSET; j < lContainer.length; j++) {
        getDeferBlocks$1(lContainer[j], deferBlocks);
      }
    } else if (isLView(lView[i])) {
      getDeferBlocks$1(lView[i], deferBlocks);
    }
  }
}
function getDeferBlocks(node) {
  const results = [];
  const lView = getLContext(node)?.lView;
  if (lView) {
    findDeferBlocks(node, lView, results);
  }
  return results;
}
function findDeferBlocks(node, lView, results) {
  const viewInjector = lView[INJECTOR];
  const registry = viewInjector.get(DEHYDRATED_BLOCK_REGISTRY, null, { optional: true });
  const blocks = [];
  getDeferBlocks$1(lView, blocks);
  const transferState = viewInjector.get(TransferState);
  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});
  for (const details of blocks) {
    const native = getNativeByTNode(details.tNode, details.lView);
    const lDetails = getLDeferBlockDetails(details.lView, details.tNode);
    if (!node.contains(native)) {
      continue;
    }
    const tDetails = details.tDetails;
    const renderedLView = getRendererLView(details);
    const rootNodes = [];
    const hydrationState = inferHydrationState(tDetails, lDetails, registry);
    if (renderedLView !== null) {
      collectNativeNodes(renderedLView[TVIEW], renderedLView, renderedLView[TVIEW].firstChild, rootNodes);
    } else if (hydrationState === "dehydrated") {
      const deferId = lDetails[SSR_UNIQUE_ID];
      const deferData = deferBlockParents[deferId];
      const numberOfRootNodes = deferData[NUM_ROOT_NODES];
      let collectedNodeCount = 0;
      const deferBlockCommentNode = details.lContainer[NATIVE];
      let currentNode = deferBlockCommentNode.previousSibling;
      while (collectedNodeCount < numberOfRootNodes && currentNode) {
        rootNodes.unshift(currentNode);
        currentNode = currentNode.previousSibling;
        collectedNodeCount++;
      }
    }
    const data = {
      state: stringifyState(lDetails[DEFER_BLOCK_STATE]),
      incrementalHydrationState: hydrationState,
      hasErrorBlock: tDetails.errorTmplIndex !== null,
      loadingBlock: {
        exists: tDetails.loadingTmplIndex !== null,
        minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,
        afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null
      },
      placeholderBlock: {
        exists: tDetails.placeholderTmplIndex !== null,
        minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null
      },
      triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],
      rootNodes
    };
    results.push(data);
    if (renderedLView !== null) {
      findDeferBlocks(node, renderedLView, results);
    }
  }
}
function stringifyState(state) {
  switch (state) {
    case DeferBlockState.Complete:
      return "complete";
    case DeferBlockState.Loading:
      return "loading";
    case DeferBlockState.Placeholder:
      return "placeholder";
    case DeferBlockState.Error:
      return "error";
    case DeferBlockInternalState.Initial:
      return "initial";
    default:
      throw new Error(`Unrecognized state ${state}`);
  }
}
function inferHydrationState(tDetails, lDetails, registry) {
  if (registry === null || lDetails[SSR_UNIQUE_ID] === null || tDetails.hydrateTriggers === null || tDetails.hydrateTriggers.has(
    7
    /* DeferBlockTrigger.Never */
  )) {
    return "not-configured";
  }
  return registry.has(lDetails[SSR_UNIQUE_ID]) ? "dehydrated" : "hydrated";
}
function getRendererLView(details) {
  if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {
    return null;
  }
  const lView = details.lContainer[CONTAINER_HEADER_OFFSET];
  ngDevMode && assertLView(lView);
  return lView;
}
function getDependenciesFromInjectable(injector, token) {
  const instance = injector.get(token, null, { self: true, optional: true });
  if (instance === null) {
    throw new Error(`Unable to determine instance of ${token} in given injector`);
  }
  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);
  const resolutionPath = getInjectorResolutionPath(injector);
  const dependencies = unformattedDependencies.map((dep) => {
    const formattedDependency = {
      value: dep.value
    };
    const flags = dep.flags;
    formattedDependency.flags = {
      optional: (8 & flags) === 8,
      host: (1 & flags) === 1,
      self: (2 & flags) === 2,
      skipSelf: (4 & flags) === 4
    };
    for (let i = 0; i < resolutionPath.length; i++) {
      const injectorToCheck = resolutionPath[i];
      if (i === 0 && formattedDependency.flags.skipSelf) {
        continue;
      }
      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {
        break;
      }
      const instance2 = injectorToCheck.get(dep.token, null, {
        self: true,
        optional: true
      });
      if (instance2 !== null) {
        if (formattedDependency.flags.host) {
          const firstInjector = resolutionPath[0];
          const lookupFromFirstInjector = firstInjector.get(dep.token, null, __spreadProps(__spreadValues({}, formattedDependency.flags), {
            optional: true
          }));
          if (lookupFromFirstInjector !== null) {
            formattedDependency.providedIn = injectorToCheck;
          }
          break;
        }
        formattedDependency.providedIn = injectorToCheck;
        break;
      }
      if (i === 0 && formattedDependency.flags.self) {
        break;
      }
    }
    if (dep.token)
      formattedDependency.token = dep.token;
    return formattedDependency;
  });
  return { instance, dependencies };
}
function getDependenciesForTokenInInjector(token, injector) {
  const { resolverToTokenToDependencies } = getFrameworkDIDebugData();
  if (!(injector instanceof NodeInjector)) {
    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];
  }
  const lView = getNodeInjectorLView(injector);
  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);
  const dependencies = tokenDependencyMap?.get(token) ?? [];
  return dependencies.filter((dependency) => {
    const dependencyNode = dependency.injectedIn?.tNode;
    if (dependencyNode === void 0) {
      return false;
    }
    const instanceNode = getNodeInjectorTNode(injector);
    assertTNode(dependencyNode);
    assertTNode(instanceNode);
    return dependencyNode === instanceNode;
  });
}
function getProviderImportsContainer(injector) {
  const { standaloneInjectorToComponent } = getFrameworkDIDebugData();
  if (standaloneInjectorToComponent.has(injector)) {
    return standaloneInjectorToComponent.get(injector);
  }
  const defTypeRef = injector.get(NgModuleRef$1, null, { self: true, optional: true });
  if (defTypeRef === null) {
    return null;
  }
  if (defTypeRef.instance === null) {
    return null;
  }
  return defTypeRef.instance.constructor;
}
function getNodeInjectorProviders(injector) {
  const diResolver = getNodeInjectorTNode(injector);
  const { resolverToProviders } = getFrameworkDIDebugData();
  return resolverToProviders.get(diResolver) ?? [];
}
function getProviderImportPaths(providerImportsContainer) {
  const providerToPath = /* @__PURE__ */ new Map();
  const visitedContainers = /* @__PURE__ */ new Set();
  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);
  walkProviderTree(providerImportsContainer, visitor, [], /* @__PURE__ */ new Set());
  return providerToPath;
}
function walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {
  return (provider, container) => {
    if (!providerToPath.has(provider)) {
      providerToPath.set(provider, [container]);
    }
    if (!visitedContainers.has(container)) {
      for (const prov of providerToPath.keys()) {
        const existingImportPath = providerToPath.get(prov);
        let containerDef = getInjectorDef(container);
        if (!containerDef) {
          const ngModule = container.ngModule;
          containerDef = getInjectorDef(ngModule);
        }
        if (!containerDef) {
          return;
        }
        const lastContainerAddedToPath = existingImportPath[0];
        let isNextStepInPath = false;
        deepForEach(containerDef.imports, (moduleImport) => {
          if (isNextStepInPath) {
            return;
          }
          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;
          if (isNextStepInPath) {
            providerToPath.get(prov)?.unshift(container);
          }
        });
      }
    }
    visitedContainers.add(container);
  };
}
function getEnvironmentInjectorProviders(injector) {
  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];
  if (isPlatformInjector(injector)) {
    return providerRecordsWithoutImportPaths;
  }
  const providerImportsContainer = getProviderImportsContainer(injector);
  if (providerImportsContainer === null) {
    return providerRecordsWithoutImportPaths;
  }
  const providerToPath = getProviderImportPaths(providerImportsContainer);
  const providerRecords = [];
  for (const providerRecord of providerRecordsWithoutImportPaths) {
    const provider = providerRecord.provider;
    const token = provider.provide;
    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {
      continue;
    }
    let importPath = providerToPath.get(provider) ?? [];
    const def = getComponentDef(providerImportsContainer);
    const isStandaloneComponent3 = !!def?.standalone;
    if (isStandaloneComponent3) {
      importPath = [providerImportsContainer, ...importPath];
    }
    providerRecords.push(__spreadProps(__spreadValues({}, providerRecord), { importPath }));
  }
  return providerRecords;
}
function isPlatformInjector(injector) {
  return injector instanceof R3Injector && injector.scopes.has("platform");
}
function getInjectorProviders(injector) {
  if (injector instanceof NodeInjector) {
    return getNodeInjectorProviders(injector);
  } else if (injector instanceof EnvironmentInjector) {
    return getEnvironmentInjectorProviders(injector);
  }
  throwError2("getInjectorProviders only supports NodeInjector and EnvironmentInjector");
}
function getInjectorMetadata(injector) {
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    const tNode = getNodeInjectorTNode(injector);
    assertTNodeForLView(tNode, lView);
    return { type: "element", source: getNativeByTNode(tNode, lView) };
  }
  if (injector instanceof R3Injector) {
    return { type: "environment", source: injector.source ?? null };
  }
  if (injector instanceof NullInjector) {
    return { type: "null", source: null };
  }
  return null;
}
function getInjectorResolutionPath(injector) {
  const resolutionPath = [injector];
  getInjectorResolutionPathHelper(injector, resolutionPath);
  return resolutionPath;
}
function getInjectorResolutionPathHelper(injector, resolutionPath) {
  const parent = getInjectorParent(injector);
  if (parent === null) {
    if (injector instanceof NodeInjector) {
      const firstInjector = resolutionPath[0];
      if (firstInjector instanceof NodeInjector) {
        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);
        if (moduleInjector === null) {
          throwError2("NodeInjector must have some connection to the module injector tree");
        }
        resolutionPath.push(moduleInjector);
        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);
      }
      return resolutionPath;
    }
  } else {
    resolutionPath.push(parent);
    getInjectorResolutionPathHelper(parent, resolutionPath);
  }
  return resolutionPath;
}
function getInjectorParent(injector) {
  if (injector instanceof R3Injector) {
    return injector.parent;
  }
  let tNode;
  let lView;
  if (injector instanceof NodeInjector) {
    tNode = getNodeInjectorTNode(injector);
    lView = getNodeInjectorLView(injector);
  } else if (injector instanceof NullInjector) {
    return null;
  } else if (injector instanceof ChainedInjector) {
    return injector.parentInjector;
  } else {
    throwError2("getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector");
  }
  const parentLocation = getParentInjectorLocation(tNode, lView);
  if (hasParentInjector(parentLocation)) {
    const parentInjectorIndex = getParentInjectorIndex(parentLocation);
    const parentLView = getParentInjectorView(parentLocation, lView);
    const parentTView = parentLView[TVIEW];
    const parentTNode = parentTView.data[
      parentInjectorIndex + 8
      /* NodeInjectorOffset.TNODE */
    ];
    return new NodeInjector(parentTNode, parentLView);
  } else {
    const chainedInjector = lView[INJECTOR];
    const injectorParent = chainedInjector.injector?.parent;
    if (injectorParent instanceof NodeInjector) {
      return injectorParent;
    }
  }
  return null;
}
function getModuleInjectorOfNodeInjector(injector) {
  let lView;
  if (injector instanceof NodeInjector) {
    lView = getNodeInjectorLView(injector);
  } else {
    throwError2("getModuleInjectorOfNodeInjector must be called with a NodeInjector");
  }
  const inj = lView[INJECTOR];
  const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;
  if (!moduleInjector) {
    throwError2("NodeInjector must have some connection to the module injector tree");
  }
  return moduleInjector;
}
function isComputedNode(node) {
  return node.kind === "computed";
}
function isTemplateEffectNode(node) {
  return node.kind === "template";
}
function isSignalNode(node) {
  return node.kind === "signal";
}
function getTemplateConsumer(injector) {
  const tNode = getNodeInjectorTNode(injector);
  assertTNode(tNode);
  const lView = getNodeInjectorLView(injector);
  assertLView(lView);
  const templateLView = lView[tNode.index];
  if (isLView(templateLView)) {
    return templateLView[REACTIVE_TEMPLATE_CONSUMER] ?? null;
  }
  return null;
}
function getNodesAndEdgesFromSignalMap(signalMap) {
  const nodes = Array.from(signalMap.keys());
  const debugSignalGraphNodes = [];
  const edges = [];
  for (const [consumer, producers] of signalMap.entries()) {
    const consumerIndex = nodes.indexOf(consumer);
    let id = signalDebugMap.get(consumer);
    if (!id) {
      counter$1++;
      id = counter$1.toString();
      signalDebugMap.set(consumer, id);
    }
    if (isComputedNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        value: consumer.value,
        kind: consumer.kind,
        epoch: consumer.version,
        debuggableFn: consumer.computation,
        id
      });
    } else if (isSignalNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        value: consumer.value,
        kind: consumer.kind,
        epoch: consumer.version,
        id
      });
    } else if (isTemplateEffectNode(consumer)) {
      debugSignalGraphNodes.push({
        label: consumer.debugName ?? consumer.lView?.[HOST]?.tagName?.toLowerCase?.(),
        kind: consumer.kind,
        epoch: consumer.version,
        id
      });
    } else {
      debugSignalGraphNodes.push({
        label: consumer.debugName,
        kind: consumer.kind,
        epoch: consumer.version,
        id
      });
    }
    for (const producer of producers) {
      edges.push({ consumer: consumerIndex, producer: nodes.indexOf(producer) });
    }
  }
  return { nodes: debugSignalGraphNodes, edges };
}
function extractEffectsFromInjector(injector) {
  let diResolver = injector;
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    diResolver = lView;
  }
  const resolverToEffects = getFrameworkDIDebugData().resolverToEffects;
  const effects = resolverToEffects.get(diResolver) ?? [];
  return effects.map((effect2) => effect2[SIGNAL]);
}
function extractSignalNodesAndEdgesFromRoots(nodes, signalDependenciesMap = /* @__PURE__ */ new Map()) {
  for (const node of nodes) {
    if (signalDependenciesMap.has(node)) {
      continue;
    }
    const producerNodes = [];
    for (let link = node.producers; link !== void 0; link = link.nextProducer) {
      const producer = link.producer;
      producerNodes.push(producer);
    }
    signalDependenciesMap.set(node, producerNodes);
    extractSignalNodesAndEdgesFromRoots(producerNodes, signalDependenciesMap);
  }
  return signalDependenciesMap;
}
function getSignalGraph(injector) {
  let templateConsumer = null;
  if (!(injector instanceof NodeInjector) && !(injector instanceof R3Injector)) {
    return throwError2("getSignalGraph must be called with a NodeInjector or R3Injector");
  }
  if (injector instanceof NodeInjector) {
    templateConsumer = getTemplateConsumer(injector);
  }
  const nonTemplateEffectNodes = extractEffectsFromInjector(injector);
  const signalNodes = templateConsumer ? [templateConsumer, ...nonTemplateEffectNodes] : nonTemplateEffectNodes;
  const signalDependenciesMap = extractSignalNodesAndEdgesFromRoots(signalNodes);
  return getNodesAndEdgesFromSignalMap(signalDependenciesMap);
}
function measureStart(startEvent) {
  eventsStack.push([startEvent, counter]);
  console.timeStamp("Event_" + startEvent + "_" + counter++);
}
function measureEnd(startEvent, entryName, color) {
  const top = eventsStack.pop();
  assertDefined(top, "Profiling error: could not find start event entry " + startEvent);
  assertEqual(top[0], startEvent, `Profiling error: expected to see ${startEvent} event but got ${top[0]}`);
  console.timeStamp(entryName, "Event_" + top[0] + "_" + top[1], void 0, "\u{1F170}\uFE0F Angular", void 0, color);
}
function getComponentMeasureName(instance) {
  return instance.constructor.name;
}
function getProviderTokenMeasureName(token) {
  if (isTypeProvider(token)) {
    return token.name;
  } else if (token.provide != null) {
    return getProviderTokenMeasureName(token.provide);
  }
  return token.toString();
}
function enableProfiling() {
  performanceMarkFeature("Chrome DevTools profiling");
  if (typeof ngDevMode !== "undefined" && ngDevMode) {
    const removeInjectorProfiler = setInjectorProfiler(chromeDevToolsInjectorProfiler);
    const removeProfiler3 = setProfiler(devToolsProfiler);
    return () => {
      removeInjectorProfiler();
      removeProfiler3();
    };
  }
  return () => {
  };
}
function publishDefaultGlobalUtils$1() {
  if (!_published) {
    _published = true;
    if (typeof window !== "undefined") {
      setupFrameworkInjectorProfiler();
    }
    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {
      publishGlobalUtil(methodName, method);
    }
  }
}
function publishGlobalUtil(name, fn2) {
  publishUtil(name, fn2);
}
function publishExternalGlobalUtil(name, fn2) {
  publishUtil(name, fn2);
}
function publishUtil(name, fn2) {
  if (typeof COMPILED === "undefined" || !COMPILED) {
    const w = _global;
    ngDevMode && assertDefined(fn2, "function not defined");
    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};
    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn2;
  }
}
function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}
function isPromise2(obj) {
  return !!obj && typeof obj.then === "function";
}
function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === "function";
}
function provideAppInitializer(initializerFn) {
  return makeEnvironmentProviders([
    {
      provide: APP_INITIALIZER,
      multi: true,
      useValue: initializerFn
    }
  ]);
}
function publishDefaultGlobalUtils() {
  ngDevMode && publishDefaultGlobalUtils$1();
}
function publishSignalConfiguration() {
  setThrowInvalidWriteToSignalError(() => {
    let errorMessage = "";
    if (ngDevMode) {
      const activeConsumer2 = getActiveConsumer();
      errorMessage = activeConsumer2 && isReactiveLViewConsumer(activeConsumer2) ? "Writing to signals is not allowed while Angular renders the template (eg. interpolations)" : "Writing to signals is not allowed in a `computed`";
    }
    throw new RuntimeError(600, errorMessage);
  });
}
function isBoundToModule(cf) {
  return cf.isBoundToModule;
}
function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    return objs.reduce(optionsReducer, dst);
  }
  return __spreadValues(__spreadValues({}, dst), objs);
}
function warnIfDestroyed(destroyed) {
  if (destroyed) {
    console.warn(formatRuntimeError(406, "This instance of the `ApplicationRef` has already been destroyed."));
  }
}
function remove(list, el) {
  const index = list.indexOf(el);
  if (index > -1) {
    list.splice(index, 1);
  }
}
function scheduleDelayedTrigger(scheduleFn) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  if (!shouldTriggerDeferBlock(0, lView))
    return;
  const injector = lView[INJECTOR];
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const cleanupFn = scheduleFn(() => triggerDeferBlock(0, lView, tNode), injector);
  storeTriggerCleanupFn(0, lDetails, cleanupFn);
}
function scheduleDelayedPrefetching(scheduleFn, trigger) {
  if (false)
    return;
  const lView = getLView();
  const injector = lView[INJECTOR];
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);
    const cleanupFn = scheduleFn(prefetch, injector);
    storeTriggerCleanupFn(1, lDetails, cleanupFn);
  }
}
function scheduleDelayedHydrating(scheduleFn, lView, tNode) {
  if (false)
    return;
  const injector = lView[INJECTOR];
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
  ngDevMode && assertSsrIdDefined(ssrUniqueId);
  const cleanupFn = scheduleFn(() => triggerHydrationFromBlockName(injector, ssrUniqueId), injector);
  storeTriggerCleanupFn(2, lDetails, cleanupFn);
}
function triggerPrefetching(tDetails, lView, tNode) {
  triggerResourceLoading(tDetails, lView, tNode);
}
function triggerResourceLoading(tDetails, lView, tNode) {
  const injector = lView[INJECTOR];
  const tView = lView[TVIEW];
  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {
    return tDetails.loadingPromise ?? Promise.resolve();
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);
  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;
  invokeTriggerCleanupFns(1, lDetails);
  let dependenciesFn = tDetails.dependencyResolverFn;
  if (ngDevMode) {
    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {
      optional: true
    });
    if (deferDependencyInterceptor) {
      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);
    }
  }
  const removeTask = injector.get(PendingTasks).add();
  if (!dependenciesFn) {
    tDetails.loadingPromise = Promise.resolve().then(() => {
      tDetails.loadingPromise = null;
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      removeTask();
    });
    return tDetails.loadingPromise;
  }
  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {
    let failed = false;
    const directiveDefs = [];
    const pipeDefs = [];
    for (const result of results) {
      if (result.status === "fulfilled") {
        const dependency = result.value;
        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);
        if (directiveDef) {
          directiveDefs.push(directiveDef);
        } else {
          const pipeDef = getPipeDef(dependency);
          if (pipeDef) {
            pipeDefs.push(pipeDef);
          }
        }
      } else {
        failed = true;
        break;
      }
    }
    if (failed) {
      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;
      if (tDetails.errorTmplIndex === null) {
        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : "";
        const error = new RuntimeError(-750, ngDevMode && `Loading dependencies for \`@defer\` block failed, but no \`@error\` block was configured${templateLocation}. Consider using the \`@error\` block to render an error state.`);
        handleUncaughtError(lView, error);
      }
    } else {
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      const primaryBlockTView = primaryBlockTNode.tView;
      if (directiveDefs.length > 0) {
        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);
        const directiveTypes = directiveDefs.map((def) => def.type);
        const providers = internalImportProvidersFrom(false, ...directiveTypes);
        tDetails.providers = providers;
      }
      if (pipeDefs.length > 0) {
        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);
      }
    }
  });
  return tDetails.loadingPromise.finally(() => {
    tDetails.loadingPromise = null;
    removeTask();
  });
}
function shouldTriggerDeferBlock(triggerType, lView) {
  if (triggerType === 0 && true && false) {
    return false;
  }
  const injector = lView[INJECTOR];
  const config2 = injector.get(DEFER_BLOCK_CONFIG, null, { optional: true });
  if (config2?.behavior === DeferBlockBehavior.Manual) {
    return false;
  }
  return true;
}
function triggerDeferBlock(triggerType, lView, tNode) {
  const tView = lView[TVIEW];
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  if (!shouldTriggerDeferBlock(triggerType, lView))
    return;
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const tDetails = getTDeferBlockDetails(tView, tNode);
  invokeAllTriggerCleanupFns(lDetails);
  switch (tDetails.loadingState) {
    case DeferDependenciesLoadingState.NOT_STARTED:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      triggerResourceLoading(tDetails, lView, tNode);
      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {
        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      }
      break;
    case DeferDependenciesLoadingState.IN_PROGRESS:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.COMPLETE:
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.FAILED:
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
      break;
    default:
      if (ngDevMode) {
        throwError2("Unknown defer block state");
      }
  }
}
function triggerHydrationFromBlockName(injector, blockName, replayQueuedEventsFn) {
  return __async(this, null, function* () {
    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
    if (blocksBeingHydrated.has(blockName)) {
      return;
    }
    const { parentBlockPromise, hydrationQueue } = getParentBlockHydrationQueue(blockName, injector);
    if (hydrationQueue.length === 0)
      return;
    if (parentBlockPromise !== null) {
      hydrationQueue.shift();
    }
    populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);
    if (parentBlockPromise !== null) {
      yield parentBlockPromise;
    }
    const topmostParentBlock = hydrationQueue[0];
    if (dehydratedBlockRegistry.has(topmostParentBlock)) {
      yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);
    } else {
      dehydratedBlockRegistry.awaitParentBlock(topmostParentBlock, () => __async(null, null, function* () {
        return yield triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);
      }));
    }
  });
}
function triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn) {
  return __async(this, null, function* () {
    const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
    const pendingTasks = injector.get(PendingTasksInternal);
    const taskId = pendingTasks.add();
    for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {
      const dehydratedBlockId = hydrationQueue[blockQueueIdx];
      const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);
      if (dehydratedDeferBlock != null) {
        yield triggerResourceLoadingForHydration(dehydratedDeferBlock);
        yield nextRender(injector);
        if (deferBlockHasErrored(dehydratedDeferBlock)) {
          removeDehydratedViewList(dehydratedDeferBlock);
          cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);
          break;
        }
        blocksBeingHydrated.get(dehydratedBlockId).resolve();
      } else {
        cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);
        cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);
        break;
      }
    }
    const lastBlockName = hydrationQueue[hydrationQueue.length - 1];
    yield blocksBeingHydrated.get(lastBlockName)?.promise;
    pendingTasks.remove(taskId);
    if (replayQueuedEventsFn) {
      replayQueuedEventsFn(hydrationQueue);
    }
    cleanupHydratedDeferBlocks(dehydratedBlockRegistry.get(lastBlockName), hydrationQueue, dehydratedBlockRegistry, injector.get(ApplicationRef));
  });
}
function deferBlockHasErrored(deferBlock) {
  return getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] === DeferBlockState.Error;
}
function cleanupParentContainer(currentBlockIdx, hydrationQueue, dehydratedBlockRegistry) {
  const parentDeferBlockIdx = currentBlockIdx - 1;
  const parentDeferBlock = parentDeferBlockIdx > -1 ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx]) : null;
  if (parentDeferBlock) {
    cleanupLContainer(parentDeferBlock.lContainer);
  }
}
function cleanupRemainingHydrationQueue(hydrationQueue, dehydratedBlockRegistry) {
  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;
  for (const dehydratedBlockId in hydrationQueue) {
    blocksBeingHydrated.get(dehydratedBlockId)?.reject();
  }
  dehydratedBlockRegistry.cleanup(hydrationQueue);
}
function populateHydratingStateForQueue(registry, queue) {
  for (let blockId of queue) {
    registry.hydrating.set(blockId, Promise.withResolvers());
  }
}
function nextRender(injector) {
  return new Promise((resolveFn) => afterNextRender(resolveFn, { injector }));
}
function triggerResourceLoadingForHydration(dehydratedBlock) {
  return __async(this, null, function* () {
    const { tNode, lView } = dehydratedBlock;
    const lDetails = getLDeferBlockDetails(lView, tNode);
    return new Promise((resolve) => {
      onDeferBlockCompletion(lDetails, resolve);
      triggerDeferBlock(2, lView, tNode);
    });
  });
}
function onDeferBlockCompletion(lDetails, callback) {
  if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {
    lDetails[ON_COMPLETE_FNS] = [];
  }
  lDetails[ON_COMPLETE_FNS].push(callback);
}
function shouldAttachTrigger(triggerType, lView, tNode) {
  if (triggerType === 0) {
    return shouldAttachRegularTrigger(lView, tNode);
  } else if (triggerType === 2) {
    return !shouldAttachRegularTrigger(lView, tNode);
  }
  return true;
}
function hasHydrateTriggers(flags) {
  return flags != null && (flags & 1) === 1;
}
function shouldAttachRegularTrigger(lView, tNode) {
  const injector = lView[INJECTOR];
  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);
  const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);
  const _hasHydrateTriggers = hasHydrateTriggers(tDetails.flags);
  if (false) {
    return !incrementalHydrationEnabled || !_hasHydrateTriggers;
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;
  if (_hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {
    return false;
  }
  return true;
}
function getHydrateTriggers(tView, tNode) {
  const tDetails = getTDeferBlockDetails(tView, tNode);
  return tDetails.hydrateTriggers ??= /* @__PURE__ */ new Map();
}
function processAndInitTriggers(injector, blockData, nodes) {
  const idleElements = [];
  const timerElements = [];
  const viewportElements = [];
  const immediateElements = [];
  for (let [blockId, blockSummary] of blockData) {
    const commentNode = nodes.get(blockId);
    if (commentNode !== void 0) {
      const numRootNodes = blockSummary.data[NUM_ROOT_NODES];
      let currentNode = commentNode;
      for (let i = 0; i < numRootNodes; i++) {
        currentNode = currentNode.previousSibling;
        if (currentNode.nodeType !== Node.ELEMENT_NODE) {
          continue;
        }
        const elementTrigger = { el: currentNode, blockName: blockId };
        if (blockSummary.hydrate.idle) {
          idleElements.push(elementTrigger);
        }
        if (blockSummary.hydrate.immediate) {
          immediateElements.push(elementTrigger);
        }
        if (blockSummary.hydrate.timer !== null) {
          elementTrigger.delay = blockSummary.hydrate.timer;
          timerElements.push(elementTrigger);
        }
        if (blockSummary.hydrate.viewport) {
          viewportElements.push(elementTrigger);
        }
      }
    }
  }
  setIdleTriggers(injector, idleElements);
  setImmediateTriggers(injector, immediateElements);
  setViewportTriggers(injector, viewportElements);
  setTimerTriggers(injector, timerElements);
}
function setIdleTriggers(injector, elementTriggers) {
  for (const elementTrigger of elementTriggers) {
    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);
    const cleanupFn = onIdle(onInvoke, injector);
    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);
  }
}
function setViewportTriggers(injector, elementTriggers) {
  if (elementTriggers.length > 0) {
    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    for (let elementTrigger of elementTriggers) {
      const cleanupFn = onViewportWrapper(elementTrigger.el, () => triggerHydrationFromBlockName(injector, elementTrigger.blockName), injector);
      registry.addCleanupFn(elementTrigger.blockName, cleanupFn);
    }
  }
}
function setTimerTriggers(injector, elementTriggers) {
  for (const elementTrigger of elementTriggers) {
    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);
    const timerFn = onTimer(elementTrigger.delay);
    const cleanupFn = timerFn(onInvoke, injector);
    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);
  }
}
function setImmediateTriggers(injector, elementTriggers) {
  for (const elementTrigger of elementTriggers) {
    triggerHydrationFromBlockName(injector, elementTrigger.blockName);
  }
}
function \u0275\u0275defer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling, flags) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = declareNoDirectiveHostTemplate(lView, tView, index, null, 0, 0);
  const injector = lView[INJECTOR];
  if (tView.firstCreatePass) {
    performanceMarkFeature("NgDefer");
    if (ngDevMode) {
      if (false) {
        logHmrWarning(injector);
      }
      if (hasHydrateTriggers(flags)) {
        assertIncrementalHydrationIsConfigured(injector);
      }
    }
    const tDetails = {
      primaryTmplIndex,
      loadingTmplIndex: loadingTmplIndex ?? null,
      placeholderTmplIndex: placeholderTmplIndex ?? null,
      errorTmplIndex: errorTmplIndex ?? null,
      placeholderBlockConfig: null,
      loadingBlockConfig: null,
      dependencyResolverFn: dependencyResolverFn ?? null,
      loadingState: DeferDependenciesLoadingState.NOT_STARTED,
      loadingPromise: null,
      providers: null,
      hydrateTriggers: null,
      debug: null,
      flags: flags ?? 0
    };
    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);
    setTDeferBlockDetails(tView, adjustedIndex, tDetails);
  }
  const lContainer = lView[adjustedIndex];
  populateDehydratedViewsInLContainer(lContainer, tNode, lView);
  let ssrBlockState = null;
  let ssrUniqueId = null;
  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {
    const info = lContainer[DEHYDRATED_VIEWS][0].data;
    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;
    ssrBlockState = info[DEFER_BLOCK_STATE$1];
  }
  const lDetails = [
    null,
    // NEXT_DEFER_BLOCK_STATE
    DeferBlockInternalState.Initial,
    // DEFER_BLOCK_STATE
    null,
    // STATE_IS_FROZEN_UNTIL
    null,
    // LOADING_AFTER_CLEANUP_FN
    null,
    // TRIGGER_CLEANUP_FNS
    null,
    // PREFETCH_TRIGGER_CLEANUP_FNS
    ssrUniqueId,
    // SSR_UNIQUE_ID
    ssrBlockState,
    // SSR_BLOCK_STATE
    null,
    // ON_COMPLETE_FNS
    null
    // HYDRATE_TRIGGER_CLEANUP_FNS
  ];
  setLDeferBlockDetails(lView, adjustedIndex, lDetails);
  let registry = null;
  if (ssrUniqueId !== null) {
    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);
    registry.add(ssrUniqueId, { lView, tNode, lContainer });
  }
  const onLViewDestroy = () => {
    invokeAllTriggerCleanupFns(lDetails);
    if (ssrUniqueId !== null) {
      registry?.cleanup([ssrUniqueId]);
    }
  };
  storeTriggerCleanupFn(0, lDetails, () => removeLViewOnDestroy(lView, onLViewDestroy));
  storeLViewOnDestroy(lView, onLViewDestroy);
}
function \u0275\u0275deferWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "when <expression>");
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      if (value === false && renderedState === DeferBlockInternalState.Initial) {
        renderPlaceholder(lView, tNode);
      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {
        triggerDeferBlock(0, lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferPrefetchWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch when <expression>");
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tView = lView[TVIEW];
      const tNode2 = getSelectedTNode();
      const tDetails = getTDeferBlockDetails(tView, tNode2);
      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
        triggerPrefetching(tDetails, lView, tNode2);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferHydrateWhen(rawValue) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate when <expression>");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const bindingIndex = nextBindingIndex();
  const tView = getTView();
  const hydrateTriggers = getHydrateTriggers(tView, tNode);
  hydrateTriggers.set(6, null);
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    if (false) {
      triggerDeferBlock(2, lView, tNode);
    } else {
      const injector = lView[INJECTOR];
      const prevConsumer = setActiveConsumer(null);
      try {
        const value = Boolean(rawValue);
        if (value === true) {
          const lDetails = getLDeferBlockDetails(lView, tNode);
          const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
          ngDevMode && assertSsrIdDefined(ssrUniqueId);
          triggerHydrationFromBlockName(injector, ssrUniqueId);
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
}
function \u0275\u0275deferHydrateNever() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate never");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(7, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "on idle");
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  scheduleDelayedTrigger(onIdle);
}
function \u0275\u0275deferPrefetchOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch on idle");
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  scheduleDelayedPrefetching(onIdle);
}
function \u0275\u0275deferHydrateOnIdle() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on idle");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(0, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    scheduleDelayedHydrating(onIdle, lView, tNode);
  }
}
function \u0275\u0275deferOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "on immediate");
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);
  if (tDetails.loadingTmplIndex === null) {
    renderPlaceholder(lView, tNode);
  }
  triggerDeferBlock(0, lView, tNode);
}
function \u0275\u0275deferPrefetchOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "prefetch on immediate");
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function \u0275\u0275deferHydrateOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on immediate");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(1, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    const injector = lView[INJECTOR];
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];
    ngDevMode && assertSsrIdDefined(ssrUniqueId);
    triggerHydrationFromBlockName(injector, ssrUniqueId);
  }
}
function \u0275\u0275deferOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  scheduleDelayedTrigger(onTimer(delay));
}
function \u0275\u0275deferPrefetchOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  scheduleDelayedPrefetching(onTimer(delay));
}
function \u0275\u0275deferHydrateOnTimer(delay) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(5, { delay });
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  } else {
    scheduleDelayedHydrating(onTimer(delay), lView, tNode);
  }
}
function \u0275\u0275deferOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on hover${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on hover${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnHover() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on hover");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(4, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on interaction${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on interaction${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnInteraction() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on interaction");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(3, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275deferOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `on viewport${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(0, lView, tNode))
    return;
  renderPlaceholder(lView, tNode);
  if (true) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewportWrapper,
      () => triggerDeferBlock(0, lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
}
function \u0275\u0275deferPrefetchOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on viewport${walkUpTimes === -1 ? "" : "(<target>)"}`);
  }
  if (!shouldAttachTrigger(1, lView, tNode))
    return;
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewportWrapper,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferHydrateOnViewport() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  if (ngDevMode) {
    trackTriggerForDebugging(lView[TVIEW], tNode, "hydrate on viewport");
  }
  if (!shouldAttachTrigger(2, lView, tNode))
    return;
  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);
  hydrateTriggers.set(2, null);
  if (false) {
    triggerDeferBlock(2, lView, tNode);
  }
}
function \u0275\u0275attribute(name, value, sanitizer, namespace) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, "attr." + name, bindingIndex);
  }
  return \u0275\u0275attribute;
}
function \u0275\u0275componentInstance() {
  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];
  ngDevMode && assertDefined(instance, "Expected component instance to be defined");
  return instance;
}
function valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {
  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {
    return 1;
  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {
    return -1;
  }
  return 0;
}
function recordDuplicateKeys(keyToIdx, key, idx) {
  const idxSoFar = keyToIdx.get(key);
  if (idxSoFar !== void 0) {
    idxSoFar.add(idx);
  } else {
    keyToIdx.set(key, /* @__PURE__ */ new Set([idx]));
  }
}
function reconcile(liveCollection, newCollection, trackByFn) {
  let detachedItems = void 0;
  let liveKeysInTheFuture = void 0;
  let liveStartIdx = 0;
  let liveEndIdx = liveCollection.length - 1;
  const duplicateKeys = ngDevMode ? /* @__PURE__ */ new Map() : void 0;
  if (Array.isArray(newCollection)) {
    let newEndIdx = newCollection.length - 1;
    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {
      const liveStartValue = liveCollection.at(liveStartIdx);
      const newStartValue = newCollection[liveStartIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newStartValue);
        }
        liveStartIdx++;
        continue;
      }
      const liveEndValue = liveCollection.at(liveEndIdx);
      const newEndValue = newCollection[newEndIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);
      }
      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);
      if (isEndMatching !== 0) {
        if (isEndMatching < 0) {
          liveCollection.updateValue(liveEndIdx, newEndValue);
        }
        liveEndIdx--;
        newEndIdx--;
        continue;
      }
      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);
      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);
      const newStartKey = trackByFn(liveStartIdx, newStartValue);
      if (Object.is(newStartKey, liveEndKey)) {
        const newEndKey = trackByFn(newEndIdx, newEndValue);
        if (Object.is(newEndKey, liveStartKey)) {
          liveCollection.swap(liveStartIdx, liveEndIdx);
          liveCollection.updateValue(liveEndIdx, newEndValue);
          newEndIdx--;
          liveEndIdx--;
        } else {
          liveCollection.move(liveEndIdx, liveStartIdx);
        }
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        continue;
      }
      detachedItems ??= new UniqueValueMultiKeyMap();
      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        liveEndIdx++;
      } else if (!liveKeysInTheFuture.has(newStartKey)) {
        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);
        liveCollection.attach(liveStartIdx, newItem);
        liveStartIdx++;
        liveEndIdx++;
      } else {
        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));
        liveEndIdx--;
      }
    }
    while (liveStartIdx <= newEndIdx) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);
      liveStartIdx++;
    }
  } else if (newCollection != null) {
    const newCollectionIterator = newCollection[Symbol.iterator]();
    let newIterationResult = newCollectionIterator.next();
    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {
      const liveValue = liveCollection.at(liveStartIdx);
      const newValue = newIterationResult.value;
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newValue);
        }
        liveStartIdx++;
        newIterationResult = newCollectionIterator.next();
      } else {
        detachedItems ??= new UniqueValueMultiKeyMap();
        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
        const newKey = trackByFn(liveStartIdx, newValue);
        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {
          liveCollection.updateValue(liveStartIdx, newValue);
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else if (!liveKeysInTheFuture.has(newKey)) {
          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else {
          const liveKey = trackByFn(liveStartIdx, liveValue);
          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));
          liveEndIdx--;
        }
      }
    }
    while (!newIterationResult.done) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);
      newIterationResult = newCollectionIterator.next();
    }
  }
  while (liveStartIdx <= liveEndIdx) {
    liveCollection.destroy(liveCollection.detach(liveEndIdx--));
  }
  detachedItems?.forEach((item) => {
    liveCollection.destroy(item);
  });
  if (ngDevMode) {
    let duplicatedKeysMsg = [];
    for (const [key, idxSet] of duplicateKeys) {
      if (idxSet.size > 1) {
        const idx = [...idxSet].sort((a, b) => a - b);
        for (let i = 1; i < idx.length; i++) {
          duplicatedKeysMsg.push(`key "${stringifyForError(key)}" at index "${idx[i - 1]}" and "${idx[i]}"`);
        }
      }
    }
    if (duplicatedKeysMsg.length > 0) {
      const message = formatRuntimeError(-955, "The provided track expression resulted in duplicated keys for a given collection. Adjust the tracking expression such that it uniquely identifies all the items in the collection. Duplicated keys were: \n" + duplicatedKeysMsg.join(", \n") + ".");
      console.warn(message);
    }
  }
}
function attachPreviouslyDetached(prevCollection, detachedItems, index, key) {
  if (detachedItems !== void 0 && detachedItems.has(key)) {
    prevCollection.attach(index, detachedItems.get(key));
    detachedItems.delete(key);
    return true;
  }
  return false;
}
function createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {
  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {
    const newItem = liveCollection.create(index, value);
    liveCollection.attach(index, newItem);
  } else {
    liveCollection.updateValue(index, value);
  }
}
function initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {
  const keys = /* @__PURE__ */ new Set();
  for (let i = start; i <= end; i++) {
    keys.add(trackByFn(i, liveCollection.at(i)));
  }
  return keys;
}
function \u0275\u0275conditionalCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  performanceMarkFeature("NgControlFlow");
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 256, localRefsIndex, localRefExtractor);
  return \u0275\u0275conditionalBranchCreate;
}
function \u0275\u0275conditionalBranchCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  performanceMarkFeature("NgControlFlow");
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 512, localRefsIndex, localRefExtractor);
  return \u0275\u0275conditionalBranchCreate;
}
function \u0275\u0275conditional(matchingTemplateIndex, contextValue) {
  performanceMarkFeature("NgControlFlow");
  const hostLView = getLView();
  const bindingIndex = nextBindingIndex();
  const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;
  const prevContainer = prevMatchingTemplateIndex !== -1 ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex) : void 0;
  const viewInContainerIdx = 0;
  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (prevContainer !== void 0) {
        removeLViewFromLContainer(prevContainer, viewInContainerIdx);
      }
      if (matchingTemplateIndex !== -1) {
        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;
        const nextContainer = getLContainer(hostLView, nextLContainerIndex);
        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);
        const dehydratedView = findAndReconcileMatchingDehydratedViews(nextContainer, templateTNode, hostLView);
        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {
          dehydratedView
        });
        addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  } else if (prevContainer !== void 0) {
    const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);
    if (lView !== void 0) {
      lView[CONTEXT] = contextValue;
    }
  }
}
function \u0275\u0275repeaterTrackByIndex(index) {
  return index;
}
function \u0275\u0275repeaterTrackByIdentity(_, value) {
  return value;
}
function \u0275\u0275repeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {
  performanceMarkFeature("NgControlFlow");
  ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);
  const lView = getLView();
  const tView = getTView();
  const hasEmptyBlock = emptyTemplateFn !== void 0;
  const hostLView = getLView();
  const boundTrackBy = trackByUsesComponentInstance ? (
    // We only want to bind when necessary, because it produces a
    // new function. For pure functions it's not necessary.
    trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])
  ) : trackByFn;
  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);
  hostLView[HEADER_OFFSET + index] = metadata;
  declareNoDirectiveHostTemplate(
    lView,
    tView,
    index + 1,
    templateFn,
    decls,
    vars,
    tagName,
    getConstant(tView.consts, attrsIndex),
    256
    /* TNodeFlags.isControlFlowStart */
  );
  if (hasEmptyBlock) {
    ngDevMode && assertDefined(emptyDecls, "Missing number of declarations for the empty repeater block.");
    ngDevMode && assertDefined(emptyVars, "Missing number of bindings for the empty repeater block.");
    declareNoDirectiveHostTemplate(
      lView,
      tView,
      index + 2,
      emptyTemplateFn,
      emptyDecls,
      emptyVars,
      emptyTagName,
      getConstant(tView.consts, emptyAttrsIndex),
      512
      /* TNodeFlags.isInControlFlow */
    );
  }
}
function isViewExpensiveToRecreate(lView) {
  return lView.length - HEADER_OFFSET > 2;
}
function \u0275\u0275repeater(collection) {
  const prevConsumer = setActiveConsumer(null);
  const metadataSlotIdx = getSelectedIndex();
  try {
    const hostLView = getLView();
    const hostTView = hostLView[TVIEW];
    const metadata = hostLView[metadataSlotIdx];
    const containerIndex = metadataSlotIdx + 1;
    const lContainer = getLContainer(hostLView, containerIndex);
    if (metadata.liveCollection === void 0) {
      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);
      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);
    } else {
      metadata.liveCollection.reset();
    }
    const liveCollection = metadata.liveCollection;
    reconcile(liveCollection, collection, metadata.trackByFn);
    if (ngDevMode && metadata.trackByFn === \u0275\u0275repeaterTrackByIdentity && liveCollection.operationsCounter?.wasReCreated(liveCollection.length) && isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {
      const message = formatRuntimeError(-956, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. Please review the "track expression" and make sure that it uniquely identifies items in a collection.`);
      console.warn(message);
    }
    liveCollection.updateIndexes();
    if (metadata.hasEmptyBlock) {
      const bindingIndex = nextBindingIndex();
      const isCollectionEmpty = liveCollection.length === 0;
      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {
        const emptyTemplateIndex = metadataSlotIdx + 2;
        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);
        if (isCollectionEmpty) {
          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);
          const dehydratedView = findAndReconcileMatchingDehydratedViews(lContainerForEmpty, emptyTemplateTNode, hostLView);
          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, void 0, { dehydratedView });
          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));
        } else {
          if (hostTView.firstUpdatePass) {
            removeDehydratedViews(lContainerForEmpty);
          }
          removeLViewFromLContainer(lContainerForEmpty, 0);
        }
      }
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function getLContainer(lView, index) {
  const lContainer = lView[index];
  ngDevMode && assertLContainer(lContainer);
  return lContainer;
}
function detachExistingView(lContainer, index) {
  const existingLView = detachView(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingLViewFromLContainer(lContainer, index) {
  const existingLView = getLViewFromLContainer(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingTNode(tView, index) {
  const tNode = getTNode(tView, index);
  ngDevMode && assertTNode(tNode);
  return tNode;
}
function \u0275\u0275property(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275property;
}
function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  setAllInputsForProperty(tNode, tView, lView, isClassBased ? "class" : "style", value);
}
function \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  ngDevMode && assertTNodeCreationIndex(lView, index);
  const tView = lView[TVIEW];
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? directiveHostFirstCreatePass(adjustedIndex, lView, 2, name, findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  elementLikeStartShared(tNode, lView, index, name, _locateOrCreateElementNode);
  if (isDirectiveHost(tNode)) {
    const tView2 = lView[TVIEW];
    createDirectivesInstances(tView2, lView, tNode);
    executeContentQueries(tView2, tNode, lView);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  if (ngDevMode && lView[TVIEW].firstCreatePass) {
    validateElementIsKnown(lView, tNode);
  }
  return \u0275\u0275elementStart;
}
function \u0275\u0275elementEnd() {
  const tView = getTView();
  const initialTNode = getCurrentTNode();
  ngDevMode && assertDefined(initialTNode, "No parent node to close.");
  const currentTNode = elementLikeEndShared(initialTNode);
  ngDevMode && assertTNodeType(
    currentTNode,
    3
    /* TNodeType.AnyRNode */
  );
  if (tView.firstCreatePass) {
    directiveHostEndFirstCreatePass(tView, currentTNode);
  }
  if (isSkipHydrationRootTNode(currentTNode)) {
    leaveSkipHydrationBlock();
  }
  decreaseElementDepthCount();
  if (currentTNode.classesWithoutHost != null && hasClassInput(currentTNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, currentTNode, getLView(), currentTNode.classesWithoutHost, true);
  }
  if (currentTNode.stylesWithoutHost != null && hasStyleInput(currentTNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, currentTNode, getLView(), currentTNode.stylesWithoutHost, false);
  }
  return \u0275\u0275elementEnd;
}
function \u0275\u0275element(index, name, attrsIndex, localRefsIndex) {
  \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex);
  \u0275\u0275elementEnd();
  return \u0275\u0275element;
}
function \u0275\u0275domElementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  ngDevMode && assertTNodeCreationIndex(lView, index);
  const tView = lView[TVIEW];
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? domOnlyFirstCreatePass(adjustedIndex, tView, 2, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  elementLikeStartShared(tNode, lView, index, name, _locateOrCreateElementNode);
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  if (ngDevMode && lView[TVIEW].firstCreatePass) {
    validateElementIsKnown(lView, tNode);
  }
  return \u0275\u0275domElementStart;
}
function \u0275\u0275domElementEnd() {
  const initialTNode = getCurrentTNode();
  ngDevMode && assertDefined(initialTNode, "No parent node to close.");
  const currentTNode = elementLikeEndShared(initialTNode);
  ngDevMode && assertTNodeType(
    currentTNode,
    3
    /* TNodeType.AnyRNode */
  );
  if (isSkipHydrationRootTNode(currentTNode)) {
    leaveSkipHydrationBlock();
  }
  decreaseElementDepthCount();
  return \u0275\u0275domElementEnd;
}
function \u0275\u0275domElement(index, name, attrsIndex, localRefsIndex) {
  \u0275\u0275domElementStart(index, name, attrsIndex, localRefsIndex);
  \u0275\u0275domElementEnd();
  return \u0275\u0275domElement;
}
function locateOrCreateElementNodeImpl(tView, lView, tNode, name, index) {
  const isNodeCreationMode = !canHydrateNode(lView, tNode);
  lastNodeWasCreated(isNodeCreationMode);
  if (isNodeCreationMode) {
    return createElementNode(lView[RENDERER], name, getNamespace());
  }
  const hydrationInfo = lView[HYDRATION];
  const native = locateNextRNode(hydrationInfo, tView, lView, tNode);
  ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);
  ngDevMode && markRNodeAsClaimedByHydration(native);
  if (getSerializedContainerViews(hydrationInfo, index)) {
    ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);
    setSegmentHead(hydrationInfo, index, native.nextSibling);
  }
  if (hydrationInfo && (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {
    if (isComponentHost(tNode)) {
      enterSkipHydrationBlock(tNode);
      clearElementContents(native);
      ngDevMode && markRNodeAsSkippedByHydration(native);
    } else if (ngDevMode) {
      throw invalidSkipHydrationHost(native);
    }
  }
  return native;
}
function enableLocateOrCreateElementNodeImpl() {
  _locateOrCreateElementNode = locateOrCreateElementNodeImpl;
}
function \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  ngDevMode && assertTNodeCreationIndex(lView, index);
  const tView = lView[TVIEW];
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? directiveHostFirstCreatePass(adjustedIndex, lView, 8, "ng-container", findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  elementLikeStartShared(tNode, lView, index, "ng-container", _locateOrCreateElementContainerNode);
  if (isDirectiveHost(tNode)) {
    const tView2 = lView[TVIEW];
    createDirectivesInstances(tView2, lView, tNode);
    executeContentQueries(tView2, tNode, lView);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementContainerStart;
}
function \u0275\u0275elementContainerEnd() {
  const tView = getTView();
  const initialTNode = getCurrentTNode();
  ngDevMode && assertDefined(initialTNode, "No parent node to close.");
  const currentTNode = elementLikeEndShared(initialTNode);
  if (tView.firstCreatePass) {
    directiveHostEndFirstCreatePass(tView, currentTNode);
  }
  ngDevMode && assertTNodeType(
    currentTNode,
    8
    /* TNodeType.ElementContainer */
  );
  return \u0275\u0275elementContainerEnd;
}
function \u0275\u0275elementContainer(index, attrsIndex, localRefsIndex) {
  \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex);
  \u0275\u0275elementContainerEnd();
  return \u0275\u0275elementContainer;
}
function \u0275\u0275domElementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  ngDevMode && assertTNodeCreationIndex(lView, index);
  const tView = lView[TVIEW];
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? domOnlyFirstCreatePass(adjustedIndex, tView, 8, "ng-container", attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  elementLikeStartShared(tNode, lView, index, "ng-container", _locateOrCreateElementContainerNode);
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275domElementContainerStart;
}
function \u0275\u0275domElementContainerEnd() {
  const initialTNode = getCurrentTNode();
  ngDevMode && assertDefined(initialTNode, "No parent node to close.");
  const currentTNode = elementLikeEndShared(initialTNode);
  ngDevMode && assertTNodeType(
    currentTNode,
    8
    /* TNodeType.ElementContainer */
  );
  return \u0275\u0275elementContainerEnd;
}
function \u0275\u0275domElementContainer(index, attrsIndex, localRefsIndex) {
  \u0275\u0275domElementContainerStart(index, attrsIndex, localRefsIndex);
  \u0275\u0275domElementContainerEnd();
  return \u0275\u0275domElementContainer;
}
function locateOrCreateElementContainerNode(tView, lView, tNode, commentText, index) {
  let comment;
  const isNodeCreationMode = !canHydrateNode(lView, tNode);
  lastNodeWasCreated(isNodeCreationMode);
  if (isNodeCreationMode) {
    return createCommentNode(lView[RENDERER], ngDevMode ? commentText : "");
  }
  const hydrationInfo = lView[HYDRATION];
  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);
  ngDevMode && validateNodeExists(currentRNode, lView, tNode);
  const ngContainerSize = getNgContainerSize(hydrationInfo, index);
  ngDevMode && assertNumber(ngContainerSize, "Unexpected state: hydrating an <ng-container>, but no hydration info is available.");
  setSegmentHead(hydrationInfo, index, currentRNode);
  comment = siblingAfter(ngContainerSize, currentRNode);
  if (ngDevMode) {
    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);
    markRNodeAsClaimedByHydration(comment);
  }
  return comment;
}
function enableLocateOrCreateElementContainerNodeImpl() {
  _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;
}
function \u0275\u0275getCurrentView() {
  return getLView();
}
function \u0275\u0275domProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    setDomProperty(tNode, lView, propName, value, lView[RENDERER], sanitizer);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275domProperty;
}
function \u0275\u0275syntheticHostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    setDomProperty(tNode, lView, propName, value, renderer, sanitizer);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275syntheticHostProperty;
}
function plural(val) {
  const i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, "").length;
  if (i === 1 && v === 0)
    return 1;
  return 5;
}
function registerLocaleData(data, localeId, extraData) {
  if (typeof localeId !== "string") {
    extraData = localeId;
    localeId = data[LocaleDataIndex.LocaleId];
  }
  localeId = localeId.toLowerCase().replace(/_/g, "-");
  LOCALE_DATA[localeId] = data;
  if (extraData) {
    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
  }
}
function findLocaleData(locale) {
  const normalizedLocale = normalizeLocale(locale);
  let match = getLocaleData(normalizedLocale);
  if (match) {
    return match;
  }
  const parentLocale = normalizedLocale.split("-")[0];
  match = getLocaleData(parentLocale);
  if (match) {
    return match;
  }
  if (parentLocale === "en") {
    return localeEn;
  }
  throw new RuntimeError(701, ngDevMode && `Missing locale data for the locale "${locale}".`);
}
function getLocaleCurrencyCode(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.CurrencyCode] || null;
}
function getLocalePluralCase(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }
  return LOCALE_DATA[normalizedLocale];
}
function unregisterAllLocaleData() {
  LOCALE_DATA = {};
}
function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, "-");
}
function getPluralCase(value, locale) {
  const plural2 = getLocalePluralCase(locale)(parseInt(value, 10));
  const result = pluralMapping[plural2];
  return result !== void 0 ? result : "other";
}
function setLocaleId(localeId) {
  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);
  if (typeof localeId === "string") {
    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, "-");
  }
}
function getLocaleId() {
  return LOCALE_ID$1;
}
function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }
  changeMaskCounter++;
}
function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const tI18n = tView.data[index];
    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  }
  changeMask = 0;
  changeMaskCounter = 0;
}
function createNodeWithoutHydration(lView, textOrName, nodeType) {
  const renderer = lView[RENDERER];
  switch (nodeType) {
    case Node.COMMENT_NODE:
      return createCommentNode(renderer, textOrName);
    case Node.TEXT_NODE:
      return createTextNode(renderer, textOrName);
    case Node.ELEMENT_NODE:
      return createElementNode(renderer, textOrName, null);
  }
}
function locateOrCreateNodeImpl(lView, index, textOrName, nodeType) {
  const hydrationInfo = lView[HYDRATION];
  const noOffsetIndex = index - HEADER_OFFSET;
  const isNodeCreationMode = !isI18nHydrationSupportEnabled() || !hydrationInfo || isInSkipHydrationBlock() || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);
  lastNodeWasCreated(isNodeCreationMode);
  if (isNodeCreationMode) {
    return createNodeWithoutHydration(lView, textOrName, nodeType);
  }
  const native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);
  ngDevMode && assertDefined(native, "expected native element");
  ngDevMode && assertEqual(native.nodeType, nodeType, "expected matching nodeType");
  ngDevMode && nodeType === Node.ELEMENT_NODE && assertEqual(native.tagName.toLowerCase(), textOrName.toLowerCase(), "expecting matching tagName");
  ngDevMode && markRNodeAsClaimedByHydration(native);
  return native;
}
function enableLocateOrCreateI18nNodeImpl() {
  _locateOrCreateNode = locateOrCreateNodeImpl;
}
function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  const renderer = lView[RENDERER];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text2 = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    let rNode = lView[index];
    let lastNodeWasCreated2 = false;
    if (rNode === null) {
      rNode = lView[index] = _locateOrCreateNode(lView, index, text2, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);
      lastNodeWasCreated2 = wasLastNodeCreated();
    }
    if (appendNow && parentRNode !== null && lastNodeWasCreated2) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  const renderer = lView[RENDERER];
  let rootIdx = null;
  let rootRNode;
  for (let i = 0; i < mutableOpCodes.length; i++) {
    const opCode = mutableOpCodes[i];
    if (typeof opCode == "string") {
      const textNodeIndex = mutableOpCodes[++i];
      if (lView[textNodeIndex] === null) {
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);
      }
    } else if (typeof opCode == "number") {
      switch (opCode & 1) {
        case 0:
          const parentIdx = getParentFromIcuCreateOpCode(opCode);
          if (rootIdx === null) {
            rootIdx = parentIdx;
            rootRNode = renderer.parentNode(anchorRNode);
          }
          let insertInFrontOf;
          let parentRNode;
          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          }
          if (parentRNode !== null) {
            ngDevMode && assertDomNode(parentRNode);
            const refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, "Missing ref");
            const child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            const tIcu = getTIcu(tView, refIdx);
            if (tIcu !== null && typeof tIcu === "object") {
              ngDevMode && assertTIcu(tIcu);
              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }
          break;
        case 1:
          const elementNodeIndex = opCode >>> 1;
          const attrName = mutableOpCodes[++i];
          const attrValue = mutableOpCodes[++i];
          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;
        default:
          if (ngDevMode) {
            throw new RuntimeError(700, `Unable to determine the type of mutate operation for "${opCode}"`);
          }
      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          const commentValue = mutableOpCodes[++i];
          const commentNodeIndex = mutableOpCodes[++i];
          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, "string", `Expected "${commentValue}" to be a comment node value`);
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);
            attachPatchData(commentRNode, lView);
          }
          break;
        case ELEMENT_MARKER:
          const tagName = mutableOpCodes[++i];
          const elementNodeIndex = mutableOpCodes[++i];
          if (lView[elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, "string", `Expected "${tagName}" to be an element node tag name`);
            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
            const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);
            attachPatchData(elementRNode, lView);
          }
          break;
        default:
          ngDevMode && throwError2(`Unable to determine the type of mutate operation for "${opCode}"`);
      }
    }
  }
}
function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask2) {
  for (let i = 0; i < updateOpCodes.length; i++) {
    const checkBit = updateOpCodes[i];
    const skipCodes = updateOpCodes[++i];
    if (checkBit & changeMask2) {
      let value = "";
      for (let j = i + 1; j <= i + skipCodes; j++) {
        const opCode = updateOpCodes[j];
        if (typeof opCode == "string") {
          value += opCode;
        } else if (typeof opCode == "number") {
          if (opCode < 0) {
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            const nodeIndex = opCode >>> 2;
            switch (opCode & 3) {
              case 1:
                const propName = updateOpCodes[++j];
                const sanitizeFn = updateOpCodes[++j];
                const tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, "Experting TNode or string");
                if (typeof tNodeOrTagName === "string") {
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  setPropertyAndInputs(tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn);
                }
                break;
              case 0:
                const rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;
              case 2:
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;
              case 3:
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      const opCode = updateOpCodes[i + 1];
      if (opCode > 0 && (opCode & 3) === 3) {
        const nodeIndex = opCode >>> 2;
        const tIcu = getTIcu(tView, nodeIndex);
        const currentIndex = lView[tIcu.currentCaseLViewIndex];
        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }
    i += skipCodes;
  }
}
function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
  if (activeCaseIndex !== null) {
    let mask = changeMask;
    if (activeCaseIndex < 0) {
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
      mask = -1;
    }
    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
function applyIcuSwitchCase(tView, tIcu, lView, value) {
  const caseIndex = getCaseIndex(tIcu, value);
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
    if (caseIndex !== null) {
      const anchorRNode = lView[tIcu.anchorIdx];
      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);
    }
  }
}
function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== null) {
    const removeCodes = tIcu.remove[activeCaseIndex];
    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];
      if (nodeOrIcuIndex > 0) {
        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
function getCaseIndex(icuExpression, bindingValue) {
  let index = icuExpression.cases.indexOf(bindingValue);
  if (index === -1) {
    switch (icuExpression.type) {
      case 1: {
        const resolvedCase = getPluralCase(bindingValue, getLocaleId());
        index = icuExpression.cases.indexOf(resolvedCase);
        if (index === -1 && resolvedCase !== "other") {
          index = icuExpression.cases.indexOf("other");
        }
        break;
      }
      case 0: {
        index = icuExpression.cases.indexOf("other");
        break;
      }
    }
  }
  return index === -1 ? null : index;
}
function i18nCreateOpCodesToString(opcodes) {
  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text2 = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push(`lView[${index}] = document.${isComment ? "createComment" : "createText"}(${JSON.stringify(text2)});`);
    if (appendNow) {
      lines.push(`parent.appendChild(lView[${index}]);`);
    }
  }
  return lines;
}
function i18nUpdateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(value) {
    const ref = value >>> 2;
    const opCode = value & 3;
    switch (opCode) {
      case 0:
        return `(lView[${ref}] as Text).textContent = $$$`;
      case 1:
        const attrName = parser.consumeString();
        const sanitizationFn = parser.consumeFunction();
        const value2 = sanitizationFn ? `(${sanitizationFn})($$$)` : "$$$";
        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value2})`;
      case 2:
        return `icuSwitchCase(${ref}, $$$)`;
      case 3:
        return `icuUpdateCase(${ref})`;
    }
    throw new Error("unexpected OpCode");
  }
  while (parser.hasMore()) {
    let mask = parser.consumeNumber();
    let size = parser.consumeNumber();
    const end = parser.i + size;
    const statements = [];
    let statement = "";
    while (parser.i < end) {
      let value = parser.consumeNumberOrString();
      if (typeof value === "string") {
        statement += value;
      } else if (value < 0) {
        statement += "${lView[i" + value + "]}";
      } else {
        const opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace("$$$", "`" + statement + "`") + ";");
        statement = "";
      }
    }
    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(" ")} }`);
  }
  return lines;
}
function icuCreateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(opCode) {
    const parent = getParentFromIcuCreateOpCode(opCode);
    const ref = getRefFromIcuCreateOpCode(opCode);
    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0:
        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
      case 1:
        return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
    }
    throw new Error("Unexpected OpCode: " + getInstructionFromIcuCreateOpCode(opCode));
  }
  let lastRef = -1;
  while (parser.hasMore()) {
    let value = parser.consumeNumberStringOrMarker();
    if (value === ICU_MARKER) {
      const text2 = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createComment("${text2}")`);
    } else if (value === ELEMENT_MARKER) {
      const text2 = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createElement("${text2}")`);
    } else if (typeof value === "string") {
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
    } else if (typeof value === "number") {
      const line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error("Unexpected value");
    }
  }
  return lines;
}
function i18nRemoveOpCodesToString(opcodes) {
  const removeCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < removeCodes.length; i++) {
    const nodeOrIcuIndex = removeCodes[i];
    if (nodeOrIcuIndex > 0) {
      lines.push(`remove(lView[${nodeOrIcuIndex}])`);
    } else {
      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
    }
  }
  return lines;
}
function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, " ");
}
function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, "debug", { get: debugGetter, enumerable: false });
  } else {
    throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");
  }
}
function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  const rootTNode = getCurrentParentTNode();
  const createOpCodes = [];
  const updateOpCodes = [];
  const existingTNodeStack = [[]];
  const astStack = [[]];
  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  message = getTranslationForTemplate(message, subTemplateIndex);
  const msgParts = replaceNgsp(message).split(PH_REGEXP);
  for (let i = 0; i < msgParts.length; i++) {
    let value = msgParts[i];
    if ((i & 1) === 0) {
      const parts = i18nParseTextIntoPartsAndICU(value);
      for (let j = 0; j < parts.length; j++) {
        let part = parts[j];
        if ((j & 1) === 0) {
          const text2 = part;
          ngDevMode && assertString(text2, "Parsed ICU part should be string");
          if (text2 !== "") {
            i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text2);
          }
        } else {
          const icuExpression = part;
          if (typeof icuExpression !== "object") {
            throw new Error(`Unable to parse ICU expression in "${message}" message.`);
          }
          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : "", true);
          const icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, "Index must be in absolute LView offset");
          icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      const isClosing = value.charCodeAt(0) === 47;
      const type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(
        type,
        42,
        35
        /* CharCode.HASH */
      );
      const index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));
      if (isClosing) {
        existingTNodeStack.shift();
        astStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index2);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
        const placeholderNode = {
          kind: 2,
          index: index2,
          children: [],
          type: type === 35 ? 0 : 1
        };
        astStack[0].push(placeholderNode);
        astStack.unshift(placeholderNode.children);
      }
    }
  }
  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes,
    ast: astStack[0],
    parentTNodeIndex
  };
}
function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text2, isICU) {
  const i18nNodeIdx = allocExpando(tView, lView, 1, null);
  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  let parentTNode = getCurrentParentTNode();
  if (rootTNode === parentTNode) {
    parentTNode = null;
  }
  if (parentTNode === null) {
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }
  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }
  createOpCodes.push(opCode, text2 === null ? "" : text2);
  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 : 1, text2 === null ? ngDevMode ? "{{?}}" : "" : text2, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  const tNodeIdx = tNode.index;
  setCurrentTNode(
    tNode,
    false
    /* Text nodes are self closing */
  );
  if (parentTNode !== null && rootTNode !== parentTNode) {
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }
  return tNode;
}
function i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text2) {
  const hasBinding = text2.match(BINDING_REGEXP);
  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text2, false);
  const index = tNode.index;
  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text2, index, null, 0, null);
  }
  ast.push({ kind: 0, index });
}
function i18nAttributesFirstPass(tView, index, values) {
  const previousElement = getCurrentTNode();
  const previousElementIndex = previousElement.index;
  const updateOpCodes = [];
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  if (tView.firstCreatePass && tView.data[index] === null) {
    for (let i = 0; i < values.length; i += 2) {
      const attrName = values[i];
      const message = values[i + 1];
      if (message !== "") {
        if (ICU_REGEXP.test(message)) {
          throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
        }
        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }
    tView.data[index] = updateOpCodes;
  }
}
function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, "Index must be in absolute LView offset");
  const maskIndex = updateOpCodes.length;
  const sizeIndex = maskIndex + 1;
  updateOpCodes.push(null, null);
  const startIndex = maskIndex + 2;
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  const textParts = str.split(BINDING_REGEXP);
  let mask = 0;
  for (let j = 0; j < textParts.length; j++) {
    const textValue = textParts[j];
    if (j & 1) {
      const bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== "") {
      updateOpCodes.push(textValue);
    }
  }
  updateOpCodes.push(destinationNode << 2 | (attrName ? 1 : 0));
  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }
  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
function countBindings(opCodes) {
  let count = 0;
  for (let i = 0; i < opCodes.length; i++) {
    const opCode = opCodes[i];
    if (typeof opCode === "number" && opCode < 0) {
      count++;
    }
  }
  return count;
}
function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}
function removeInnerTemplateTranslation(message) {
  let match;
  let res = "";
  let index = 0;
  let inTemplate = false;
  let tagMatched;
  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match.index + match[0].length);
      tagMatched = match[1];
      inTemplate = true;
    } else {
      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
        index = match.index;
        inTemplate = false;
      }
    }
  }
  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
  res += message.slice(index);
  return res;
}
function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    return removeInnerTemplateTranslation(message);
  } else {
    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
    const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
function icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, "ICU expression must be defined");
  let bindingMask = 0;
  const tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  const values = icuExpression.values;
  const cases = [];
  for (let i = 0; i < values.length; i++) {
    const valueArr = values[i];
    const nestedIcus = [];
    for (let j = 0; j < valueArr.length; j++) {
      const value = valueArr[j];
      if (typeof value !== "string") {
        const icuIndex = nestedIcus.push(value) - 1;
        valueArr[j] = `<!--\uFFFD${icuIndex}\uFFFD-->`;
      }
    }
    const caseAst = [];
    cases.push(caseAst);
    bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(""), nestedIcus) | bindingMask;
  }
  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
  ast.push({
    kind: 3,
    index: anchorIdx,
    cases,
    currentCaseLViewIndex: tIcu.currentCaseLViewIndex
  });
}
function parseICUBlock(pattern) {
  const cases = [];
  const values = [];
  let icuType = 1;
  let mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str, binding, type) {
    if (type === "select") {
      icuType = 0;
    } else {
      icuType = 1;
    }
    mainBinding = parseInt(binding.slice(1), 10);
    return "";
  });
  const parts = i18nParseTextIntoPartsAndICU(pattern);
  for (let pos = 0; pos < parts.length; ) {
    let key = parts[pos++].trim();
    if (icuType === 1) {
      key = key.replace(/\s*(?:=)?(\w+)\s*/, "$1");
    }
    if (key.length) {
      cases.push(key);
    }
    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
    if (cases.length > values.length) {
      values.push(blocks);
    }
  }
  return { type: icuType, mainBinding, cases, values };
}
function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }
  let prevPos = 0;
  const braceStack = [];
  const results = [];
  const braces = /[{}]/g;
  braces.lastIndex = 0;
  let match;
  while (match = braces.exec(pattern)) {
    const pos = match.index;
    if (match[0] == "}") {
      braceStack.pop();
      if (braceStack.length == 0) {
        const block = pattern.substring(prevPos, pos);
        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }
        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        const substring2 = pattern.substring(prevPos, pos);
        results.push(substring2);
        prevPos = pos + 1;
      }
      braceStack.push("{");
    }
  }
  const substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
function parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  const create = [];
  const remove2 = [];
  const update = [];
  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove2, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }
  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove2);
  tIcu.update.push(update);
  const inertBodyHelper2 = getInertBodyHelper(getDocument());
  const inertBodyElement = inertBodyHelper2.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, "Unable to generate inert body element");
  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
  if (inertRootNode) {
    return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove2, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}
function walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, parentNode, parentIdx, nestedIcus, depth) {
  let bindingMask = 0;
  let currentNode = parentNode.firstChild;
  while (currentNode) {
    const newIndex = allocExpando(tView, lView, 1, null);
    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        const element2 = currentNode;
        const tagName = element2.tagName.toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          const elAttrs = element2.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
            const attr = elAttrs.item(i);
            const lowerAttrName = attr.name.toLowerCase();
            const hasBinding2 = !!attr.value.match(BINDING_REGEXP);
            if (hasBinding2) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see ${XSS_SECURITY_URL})`);
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          }
          const elementNode = {
            kind: 1,
            index: newIndex,
            children: []
          };
          ast.push(elementNode);
          bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove2, newIndex, depth);
        }
        break;
      case Node.TEXT_NODE:
        const value = currentNode.textContent || "";
        const hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? "" : value, parentIdx, newIndex);
        addRemoveNode(remove2, newIndex, depth);
        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }
        ast.push({
          kind: 0,
          index: newIndex
        });
        break;
      case Node.COMMENT_NODE:
        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || "");
        if (isNestedIcu) {
          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          const icuExpression = nestedIcus[nestedIcuIndex];
          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : "", parentIdx, newIndex);
          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove2, newIndex, depth);
        }
        break;
    }
    currentNode = currentNode.nextSibling;
  }
  return bindingMask;
}
function addRemoveNode(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(index);
  }
}
function addRemoveNestedIcu(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(~index);
    remove2.push(index);
  }
}
function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(
    toMaskBit(icuExpression.mainBinding),
    2,
    -1 - icuExpression.mainBinding,
    index << 2 | 2
    /* I18nUpdateOpCode.IcuSwitch */
  );
}
function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(
    bindingMask,
    1,
    index << 2 | 3
    /* I18nUpdateOpCode.IcuUpdate */
  );
}
function addCreateNodeAndAppend(create, marker, text2, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }
  create.push(text2, createAtIdx, icuCreateOpCode(0, appendToParentIdx, createAtIdx));
}
function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1 | 1, attr.name, attr.value);
}
function i18nPostprocess(message, replacements = {}) {
  let result = message;
  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    const matches = {};
    const templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
      const content = phs || tmpl;
      const placeholders = matches[content] || [];
      if (!placeholders.length) {
        content.split("|").forEach((placeholder2) => {
          const match = placeholder2.match(PP_TEMPLATE_ID_REGEXP);
          const templateId2 = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
          const isCloseTemplateTag2 = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder2);
          placeholders.push([templateId2, isCloseTemplateTag2, placeholder2]);
        });
        matches[content] = placeholders;
      }
      if (!placeholders.length) {
        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
      }
      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      let idx = 0;
      for (let i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      }
      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      }
      placeholders.splice(idx, 1);
      return placeholder;
    });
  }
  if (!Object.keys(replacements).length) {
    return result;
  }
  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {
    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;
  });
  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {
    return replacements.hasOwnProperty(key) ? replacements[key] : match;
  });
  result = result.replace(PP_ICUS_REGEXP, (match, key) => {
    if (replacements.hasOwnProperty(key)) {
      const list = replacements[key];
      if (!list.length) {
        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);
      }
      return list.shift();
    }
    return match;
  });
  return result;
}
function \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex = -1) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const message = getConstant(tView.consts, messageIndex);
  const parentTNode = getCurrentParentTNode();
  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }
  if (tView.type === 2) {
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    componentLView[FLAGS] |= 32;
  } else {
    lView[FLAGS] |= 32;
  }
  const tI18n = tView.data[adjustedIndex];
  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
  const insertInFrontOf = parentTNode && parentTNode.type & 8 ? lView[parentTNode.index] : null;
  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
function \u0275\u0275i18nEnd() {
  setInI18nBlock(false);
}
function \u0275\u0275i18n(index, messageIndex, subTemplateIndex) {
  \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex);
  \u0275\u0275i18nEnd();
}
function \u0275\u0275i18nAttributes(index, attrsIndex) {
  const tView = getTView();
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
function \u0275\u0275i18nExp(value) {
  const lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return \u0275\u0275i18nExp;
}
function \u0275\u0275i18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
function \u0275\u0275i18nPostprocess(message, replacements = {}) {
  return i18nPostprocess(message, replacements);
}
function \u0275\u0275listener(eventName, listenerFn, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);
  return \u0275\u0275listener;
}
function \u0275\u0275syntheticHostListener(eventName, listenerFn) {
  const tNode = getCurrentTNode();
  const lView = getLView();
  const tView = getTView();
  const currentDef = getCurrentDirectiveDef(tView.data);
  const renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);
  return \u0275\u0275syntheticHostListener;
}
function \u0275\u0275domListener(eventName, listenerFn, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  if (tNode.type & 3 || eventTargetResolver) {
    listenToDomEvent(tNode, tView, lView, eventTargetResolver, lView[RENDERER], eventName, listenerFn, wrapListener(tNode, lView, listenerFn));
  }
  return \u0275\u0275domListener;
}
function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  let processOutputs = true;
  let wrappedListener = null;
  if (tNode.type & 3 || eventTargetResolver) {
    wrappedListener ??= wrapListener(tNode, lView, listenerFn);
    const hasCoalescedDomEvent = listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, listenerFn, wrappedListener);
    if (hasCoalescedDomEvent) {
      processOutputs = false;
    }
  }
  if (processOutputs) {
    const outputConfig = tNode.outputs?.[eventName];
    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];
    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {
      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {
        const index = hostDirectiveOutputConfig[i];
        const lookupName = hostDirectiveOutputConfig[i + 1];
        wrappedListener ??= wrapListener(tNode, lView, listenerFn);
        listenToOutput(tNode, lView, index, lookupName, eventName, wrappedListener);
      }
    }
    if (outputConfig && outputConfig.length) {
      for (const index of outputConfig) {
        wrappedListener ??= wrapListener(tNode, lView, listenerFn);
        listenToOutput(tNode, lView, index, eventName, eventName, wrappedListener);
      }
    }
  }
}
function \u0275\u0275nextContext(level = 1) {
  return nextContextImpl(level);
}
function matchingProjectionSlotIndex(tNode, projectionSlots) {
  let wildcardNgContentIndex = null;
  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
  for (let i = 0; i < projectionSlots.length; i++) {
    const slotValue = projectionSlots[i];
    if (slotValue === "*") {
      wildcardNgContentIndex = i;
      continue;
    }
    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(
      tNode,
      slotValue,
      /* isProjectionMode */
      true
    ) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i;
    }
  }
  return wildcardNgContentIndex;
}
function \u0275\u0275projectionDef(projectionSlots) {
  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
  if (!componentNode.projection) {
    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    const tails = projectionHeads.slice();
    let componentChild = componentNode.child;
    while (componentChild !== null) {
      if (componentChild.type !== 128) {
        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
        if (slotIndex !== null) {
          if (tails[slotIndex]) {
            tails[slotIndex].projectionNext = componentChild;
          } else {
            projectionHeads[slotIndex] = componentChild;
          }
          tails[slotIndex] = componentChild;
        }
      }
      componentChild = componentChild.next;
    }
  }
}
function \u0275\u0275projection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {
  const lView = getLView();
  const tView = getTView();
  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;
  if (fallbackIndex !== null) {
    declareNoDirectiveHostTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);
  }
  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16, null, attrs || null);
  if (tProjectionNode.projection === null) {
    tProjectionNode.projection = selectorIndex;
  }
  setCurrentTNodeAsNotParent();
  const hydrationInfo = lView[HYDRATION];
  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock();
  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];
  const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;
  if (isEmpty && fallbackIndex !== null) {
    insertFallbackContent(lView, tView, fallbackIndex);
  } else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {
    applyProjection(tView, lView, tProjectionNode);
  }
}
function insertFallbackContent(lView, tView, fallbackIndex) {
  const adjustedIndex = HEADER_OFFSET + fallbackIndex;
  const fallbackTNode = tView.data[adjustedIndex];
  const fallbackLContainer = lView[adjustedIndex];
  ngDevMode && assertTNode(fallbackTNode);
  ngDevMode && assertLContainer(fallbackLContainer);
  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);
  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, void 0, {
    dehydratedView
  });
  addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));
}
function \u0275\u0275contentQuery(directiveIndex, predicate, flags, read) {
  createContentQuery(directiveIndex, predicate, flags, read);
}
function \u0275\u0275viewQuery(predicate, flags, read) {
  createViewQuery(predicate, flags, read);
}
function \u0275\u0275queryRefresh(queryList) {
  const lView = getLView();
  const tView = getTView();
  const queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  const tQuery = getTQuery(tView, queryIndex);
  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2) === 2)) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      const result = getQueryResults(lView, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }
    return true;
  }
  return false;
}
function \u0275\u0275loadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}
function \u0275\u0275contentQuerySignal(directiveIndex, target, predicate, flags, read) {
  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));
}
function \u0275\u0275viewQuerySignal(target, predicate, flags, read) {
  bindQueryToSignal(target, createViewQuery(predicate, flags, read));
}
function \u0275\u0275queryAdvance(indexOffset = 1) {
  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);
}
function \u0275\u0275reference(index) {
  const contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(
    prev,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return prev << 17 | next << 2;
}
function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange >> 17 & 32767;
}
function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 2) == 2;
}
function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    previous,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~4294836224 | previous << 17;
}
function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 2;
}
function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 131068) >> 2;
}
function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~131068 | //
  next << 2;
}
function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 1) === 1;
}
function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 1;
}
function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding2, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  let tmplHead = getTStylingRangePrev(tBindings);
  let tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  let isKeyDuplicateOfStatic = false;
  let tStylingKey;
  if (Array.isArray(tStylingKeyWithStatic)) {
    const staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1];
    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }
  if (isHostBinding2) {
    const hasTemplateBindings = tmplTail !== 0;
    if (hasTemplateBindings) {
      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead);
      if (previousNode !== 0) {
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      }
      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0);
      if (tmplHead !== 0) {
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      }
      tmplHead = index;
    }
  } else {
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, "Adding template bindings after hostBindings is not allowed.");
    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }
    tmplTail = index;
  }
  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }
  markDuplicates(tData, tStylingKey, index, true);
  markDuplicates(tData, tStylingKey, index, false);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);
  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
  if (residual != null && typeof tStylingKey == "string" && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
function markDuplicates(tData, tStylingKey, index, isPrevDir) {
  const tStylingAtIndex = tData[index + 1];
  const isMap = tStylingKey === null;
  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  let foundDuplicate = false;
  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    const tStylingValueAtCursor = tData[cursor];
    const tStyleRangeAtCursor = tData[cursor + 1];
    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }
    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }
  if (foundDuplicate) {
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, "Expected that 'tStylingKey' has been unwrapped");
  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === "string") {
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0;
  }
  return false;
}
function getLastParsedKey(text2) {
  return text2.substring(parserState.key, parserState.keyEnd);
}
function getLastParsedValue(text2) {
  return text2.substring(parserState.value, parserState.valueEnd);
}
function parseClassName(text2) {
  resetParserState(text2);
  return parseClassNameNext(text2, consumeWhitespace(text2, 0, parserState.textEnd));
}
function parseClassNameNext(text2, index) {
  const end = parserState.textEnd;
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeClassToken(text2, parserState.key = index, end);
  return consumeWhitespace(text2, index, end);
}
function parseStyle(text2) {
  resetParserState(text2);
  return parseStyleNext(text2, consumeWhitespace(text2, 0, parserState.textEnd));
}
function parseStyleNext(text2, startIndex) {
  const end = parserState.textEnd;
  let index = parserState.key = consumeWhitespace(text2, startIndex, end);
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeStyleKey(text2, index, end);
  index = consumeSeparator(
    text2,
    index,
    end,
    58
    /* CharCode.COLON */
  );
  index = parserState.value = consumeWhitespace(text2, index, end);
  index = parserState.valueEnd = consumeStyleValue(text2, index, end);
  return consumeSeparator(
    text2,
    index,
    end,
    59
    /* CharCode.SEMI_COLON */
  );
}
function resetParserState(text2) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text2.length;
}
function consumeWhitespace(text2, startIndex, endIndex) {
  while (startIndex < endIndex && text2.charCodeAt(startIndex) <= 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeClassToken(text2, startIndex, endIndex) {
  while (startIndex < endIndex && text2.charCodeAt(startIndex) > 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeStyleKey(text2, startIndex, endIndex) {
  let ch;
  while (startIndex < endIndex && ((ch = text2.charCodeAt(startIndex)) === 45 || ch === 95 || (ch & -33) >= 65 && (ch & -33) <= 90 || ch >= 48 && ch <= 57)) {
    startIndex++;
  }
  return startIndex;
}
function consumeSeparator(text2, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text2, startIndex, endIndex);
  if (startIndex < endIndex) {
    if (ngDevMode && text2.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text2, String.fromCharCode(separator), startIndex);
    }
    startIndex++;
  }
  return startIndex;
}
function consumeStyleValue(text2, startIndex, endIndex) {
  let ch1 = -1;
  let ch2 = -1;
  let ch3 = -1;
  let i = startIndex;
  let lastChIndex = i;
  while (i < endIndex) {
    const ch = text2.charCodeAt(i++);
    if (ch === 59) {
      return lastChIndex;
    } else if (ch === 34 || ch === 39) {
      lastChIndex = i = consumeQuotedText(text2, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85 && ch2 === 82 && ch1 === 76 && ch === 40) {
      lastChIndex = i = consumeQuotedText(text2, 41, i, endIndex);
    } else if (ch > 32) {
      lastChIndex = i;
    }
    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33;
  }
  return lastChIndex;
}
function consumeQuotedText(text2, quoteCharCode, startIndex, endIndex) {
  let ch1 = -1;
  let index = startIndex;
  while (index < endIndex) {
    const ch = text2.charCodeAt(index++);
    if (ch == quoteCharCode && ch1 !== 92) {
      return index;
    }
    if (ch == 92 && ch1 === 92) {
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }
  throw ngDevMode ? malformedStyleError(text2, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}
function malformedStyleError(text2, expecting, index) {
  ngDevMode && assertEqual(typeof text2 === "string", true, "String expected here");
  throw throwError2(`Malformed style at location ${index} in string '` + text2.substring(0, index) + "[>>" + text2.substring(index, index + 1) + "<<]" + text2.slice(index + 1) + `'. Expecting '${expecting}'.`);
}
function \u0275\u0275styleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return \u0275\u0275styleProp;
}
function \u0275\u0275classProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return \u0275\u0275classProp;
}
function \u0275\u0275styleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
function styleStringParser(keyValueArray, text2) {
  for (let i = parseStyle(text2); i >= 0; i = parseStyleNext(text2, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text2), getLastParsedValue(text2));
  }
}
function \u0275\u0275classMap(classes) {
  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);
}
function classStringParser(keyValueArray, text2) {
  for (let i = parseClassName(text2); i >= 0; i = parseClassNameNext(text2, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text2), true);
  }
}
function checkStylingProperty(prop, value, suffix, isClassBased) {
  const lView = getLView();
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
function checkStylingMap(keyValueArraySet2, stringParser, value, isClassBased) {
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }
  const lView = getLView();
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        const tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, "Styling linked list shadow input should be marked as 'false'");
      }
      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(";"), true, "Expecting static portion to end with ';'");
      if (staticPrefix !== null) {
        value = concatStringsWithSpace(staticPrefix, value ? value : "");
      }
      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet2, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
function isInHostBindings(tView, bindingIndex) {
  return bindingIndex >= tView.expandoStartIndex;
}
function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  const tData = tView.data;
  if (tData[bindingIndex + 1] === null) {
    const tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, "TNode expected");
    const isHostBindings = isInHostBindings(tView, bindingIndex);
    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      tStylingKey = false;
    }
    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  const hostDirectiveDef = getCurrentDirectiveDef(tData);
  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
  if (hostDirectiveDef === null) {
    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
    if (isFirstStylingInstructionInTemplate) {
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
      residual = null;
    }
  } else {
    const directiveStylingLast = tNode.directiveStylingLast;
    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
      if (residual === null) {
        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
        if (templateStylingKey !== void 0 && Array.isArray(templateStylingKey)) {
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1], isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }
  if (residual !== void 0) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }
  return stylingKey;
}
function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  if (getTStylingRangeNext(bindings) === 0) {
    return void 0;
  }
  return tData[getTStylingRangePrev(bindings)];
}
function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, "Expecting to have at least one template styling binding.");
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
function collectResidual(tData, tNode, isClassBased) {
  let residual = void 0;
  const directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, "By the time this function gets called at least one hostBindings-node styling instruction must have executed.");
  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    const attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }
  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  let currentDirective = null;
  const directiveEnd = tNode.directiveEnd;
  let directiveStylingLast = tNode.directiveStylingLast;
  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }
  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, "expected to be defined");
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef)
      break;
    directiveStylingLast++;
  }
  if (hostDirectiveDef !== null) {
    tNode.directiveStylingLast = directiveStylingLast;
  }
  return stylingKey;
}
function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  const desiredMarker = isClassBased ? 1 : 2;
  let currentMarker = -1;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const item = attrs[i];
      if (typeof item === "number") {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === void 0 ? [] : ["", stylingKey];
          }
          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }
  return stylingKey === void 0 ? null : stylingKey;
}
function toStylingKeyValueArray(keyValueArraySet2, stringParser, value) {
  if (value == null || value === "")
    return EMPTY_ARRAY;
  const styleKeyValueArray = [];
  const unwrappedValue = unwrapSafeValue(value);
  if (Array.isArray(unwrappedValue)) {
    for (let i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet2(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === "object") {
    for (const key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet2(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === "string") {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError2("Unsupported styling type: " + typeof unwrappedValue + " (" + unwrappedValue + ")");
  }
  return styleKeyValueArray;
}
function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
function classKeyValueArraySet(keyValueArray, key, value) {
  const stringKey = String(key);
  if (stringKey !== "" && !stringKey.includes(" ")) {
    keyValueArraySet(keyValueArray, stringKey, value);
  }
}
function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    oldKeyValueArray = EMPTY_ARRAY;
  }
  let oldIndex = 0;
  let newIndex = 0;
  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, "Are we stuck in infinite loop?");
    ngDevMode && assertLessThan(newIndex, 999, "Are we stuck in infinite loop?");
    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : void 0;
    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : void 0;
    let setKey = null;
    let setValue = void 0;
    if (oldKey === newKey) {
      oldIndex += 2;
      newIndex += 2;
      if (oldValue !== newValue) {
        setKey = newKey;
        setValue = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      oldIndex += 2;
      setKey = oldKey;
    } else {
      ngDevMode && assertDefined(newKey, "Expecting to have a valid key");
      newIndex += 2;
      setKey = newKey;
      setValue = newValue;
    }
    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
    }
    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3)) {
    return;
  }
  const tData = tView.data;
  const tRange = tData[bindingIndex + 1];
  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : void 0;
  if (!isStylingValuePresent(higherPriorityValue)) {
    if (!isStylingValuePresent(value)) {
      if (getTStylingRangePrevDuplicate(tRange)) {
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }
    const rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  const isPrevDirection = tNode === null;
  let value = void 0;
  while (index > 0) {
    const rawKey = tData[index];
    const containsStatics = Array.isArray(rawKey);
    const key = containsStatics ? rawKey[1] : rawKey;
    const isStylingMap = key === null;
    let valueAtLViewIndex = lView[index + 1];
    if (valueAtLViewIndex === NO_CHANGE) {
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : void 0;
    }
    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : void 0;
    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }
    if (isStylingValuePresent(currentValue)) {
      value = currentValue;
      if (isPrevDirection) {
        return value;
      }
    }
    const tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }
  if (tNode !== null) {
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null) {
      value = keyValueArrayGet(residual, prop);
    }
  }
  return value;
}
function isStylingValuePresent(value) {
  return value !== void 0;
}
function normalizeSuffix(value, suffix) {
  if (value == null || value === "") ;
  else if (typeof suffix === "string") {
    value = value + suffix;
  } else if (typeof value === "object") {
    value = stringify(unwrapSafeValue(value));
  }
  return value;
}
function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 8 : 16)) !== 0;
}
function \u0275\u0275text(index, value = "") {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertTNodeCreationIndex(lView, index);
  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1, value, null) : tView.data[adjustedIndex];
  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);
  lView[adjustedIndex] = textNative;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, textNative, tNode);
  }
  setCurrentTNode(tNode, false);
}
function locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {
  const isNodeCreationMode = !canHydrateNode(lView, tNode);
  lastNodeWasCreated(isNodeCreationMode);
  if (isNodeCreationMode) {
    return createTextNode(lView[RENDERER], value);
  }
  const hydrationInfo = lView[HYDRATION];
  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);
  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);
  ngDevMode && markRNodeAsClaimedByHydration(textNative);
  return textNative;
}
function enableLocateOrCreateTextNodeImpl() {
  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;
}
function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, "should have at least 3 values");
  let isBindingUpdated = false;
  let bindingIndex = getBindingIndex();
  for (let i = 1; i < values.length; i += 2) {
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }
  setBindingIndex(bindingIndex);
  if (!isBindingUpdated) {
    return NO_CHANGE;
  }
  let content = values[0];
  for (let i = 1; i < values.length; i += 2) {
    content += renderStringify(values[i]) + (i + 1 !== values.length ? values[i + 1] : "");
  }
  return content;
}
function interpolation1(lView, prefix, v0, suffix = "") {
  const different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
function interpolation2(lView, prefix, v0, i0, v1, suffix = "") {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix = "") {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix = "") {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = "") {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
}
function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = "") {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = "") {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = "") {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
function \u0275\u0275textInterpolate(v0) {
  \u0275\u0275textInterpolate1("", v0);
  return \u0275\u0275textInterpolate;
}
function \u0275\u0275textInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolated = interpolation1(lView, prefix, v0, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate1;
}
function \u0275\u0275textInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate2;
}
function \u0275\u0275textInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate3;
}
function \u0275\u0275textInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate4;
}
function \u0275\u0275textInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate5;
}
function \u0275\u0275textInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate6;
}
function \u0275\u0275textInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate7;
}
function \u0275\u0275textInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate8;
}
function \u0275\u0275textInterpolateV(values) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolateV;
}
function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, "Value should be a string");
  ngDevMode && assertNotSame(value, NO_CHANGE, "value should not be NO_CHANGE");
  ngDevMode && assertIndexInRange(lView, index);
  const element2 = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element2, "native element should exist");
  updateTextNode(lView[RENDERER], element2, value);
}
function \u0275\u0275twoWayProperty(propName, value, sanitizer) {
  if (isWritableSignal(value)) {
    value = value();
  }
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275twoWayProperty;
}
function \u0275\u0275twoWayBindingSet(target, value) {
  const canWrite = isWritableSignal(target);
  canWrite && target.set(value);
  return canWrite;
}
function \u0275\u0275twoWayListener(eventName, listenerFn) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);
  return \u0275\u0275twoWayListener;
}
function \u0275\u0275declareLet(index) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = getOrCreateTNode(tView, adjustedIndex, 128, null, null);
  setCurrentTNode(tNode, false);
  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);
  return \u0275\u0275declareLet;
}
function \u0275\u0275storeLet(value) {
  performanceMarkFeature("NgLet");
  const tView = getTView();
  const lView = getLView();
  const index = getSelectedIndex();
  store(tView, lView, index, value);
  return value;
}
function \u0275\u0275readContextLet(index) {
  const contextLView = getContextLView();
  const value = load(contextLView, HEADER_OFFSET + index);
  if (value === UNINITIALIZED_LET) {
    throw new RuntimeError(314, ngDevMode && "Attempting to access a @let declaration whose value is not available yet");
  }
  return value;
}
function \u0275\u0275attachSourceLocations(templatePath, locations) {
  const tView = getTView();
  const lView = getLView();
  const renderer = lView[RENDERER];
  const attributeName = "data-ng-source-location";
  for (const [index, offset, line, column] of locations) {
    const tNode = getTNode(tView, index + HEADER_OFFSET);
    ngDevMode && assertTNodeType(
      tNode,
      2
      /* TNodeType.Element */
    );
    const node = getNativeByIndex(index + HEADER_OFFSET, lView);
    if (!node.hasAttribute(attributeName)) {
      const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;
      renderer.setAttribute(node, attributeName, attributeValue);
    }
  }
}
function \u0275\u0275interpolate(v0) {
  return bindingUpdated(getLView(), nextBindingIndex(), v0) ? renderStringify(v0) : NO_CHANGE;
}
function \u0275\u0275interpolate1(prefix, v0, suffix = "") {
  return interpolation1(getLView(), prefix, v0, suffix);
}
function \u0275\u0275interpolate2(prefix, v0, i0, v1, suffix = "") {
  return interpolation2(getLView(), prefix, v0, i0, v1, suffix);
}
function \u0275\u0275interpolate3(prefix, v0, i0, v1, i1, v2, suffix = "") {
  return interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);
}
function \u0275\u0275interpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix = "") {
  return interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
}
function \u0275\u0275interpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = "") {
  return interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
}
function \u0275\u0275interpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = "") {
  return interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
}
function \u0275\u0275interpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = "") {
  return interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
}
function \u0275\u0275interpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = "") {
  return interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
}
function \u0275\u0275interpolateV(values) {
  return interpolationV(getLView(), values);
}
function providersResolver(def, providers, viewProviders) {
  const tView = getTView();
  if (tView.firstCreatePass) {
    const isComponent2 = isComponentDef(def);
    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent2, true);
    resolveProvider(providers, tView.data, tView.blueprint, isComponent2, false);
  }
}
function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider) {
  provider = resolveForwardRef(provider);
  if (Array.isArray(provider)) {
    for (let i = 0; i < provider.length; i++) {
      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider);
    }
  } else {
    const tView = getTView();
    const lView = getLView();
    const tNode = getCurrentTNode();
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    const providerFactory = providerToFactory(provider);
    if (ngDevMode) {
      const injector = new NodeInjector(tNode, lView);
      runInInjectorProfilerContext(injector, token, () => {
        emitProviderConfiguredEvent(provider, isViewProvider);
      });
    }
    const beginIndex = tNode.providerIndexes & 1048575;
    const endIndex = tNode.directiveStart;
    const cptViewProvidersCount = tNode.providerIndexes >> 20;
    if (isTypeProvider(provider) || !provider.multi) {
      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, \u0275\u0275directiveInject, ngDevMode ? providerName(provider) : null);
      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];
      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent2, providerFactory, provider);
        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
        }
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent2);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }
      if (!isViewProvider && isComponent2 && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  const providerIsTypeProvider = isTypeProvider(provider);
  const providerIsClassProvider = isClassProvider(provider);
  if (providerIsTypeProvider || providerIsClassProvider) {
    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
    const prototype = classToken.prototype;
    const ngOnDestroy = prototype.ngOnDestroy;
    if (ngOnDestroy) {
      const hooks = tView.destroyHooks || (tView.destroyHooks = []);
      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, "indexInFactory when registering multi factory destroy hook");
        const existingCallbacksIndex = hooks.indexOf(contextIndex);
        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
function multiFactoryAdd(multiFactory2, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory2.componentProviders++;
  }
  return multiFactory2.multi.push(factory) - 1;
}
function indexOf(item, arr, begin, end) {
  for (let i = begin; i < end; i++) {
    if (arr[i] === item)
      return i;
  }
  return -1;
}
function multiProvidersFactoryResolver(_, flags, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
function multiViewProvidersFactoryResolver(_, _flags, _tData, lView, tNode) {
  const factories = this.multi;
  let result;
  if (this.providerFactory) {
    const componentCount = this.providerFactory.componentProviders;
    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
    result = multiProviders.slice(0, componentCount);
    multiResolve(factories, result);
    for (let i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = [];
    multiResolve(factories, result);
  }
  return result;
}
function multiResolve(factories, result) {
  for (let i = 0; i < factories.length; i++) {
    const factory = factories[i];
    result.push(factory());
  }
  return result;
}
function multiFactory(factoryFn, index, isViewProvider, isComponent2, f, provider) {
  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, \u0275\u0275directiveInject, ngDevMode ? providerName(provider) : null);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent2 && !isViewProvider);
  return factory;
}
function providerName(provider) {
  if (Array.isArray(provider)) {
    return null;
  }
  if (isTypeProvider(provider)) {
    return provider.name;
  } else if (isClassProvider(provider)) {
    if (provider.provide instanceof InjectionToken) {
      return `('${provider.provide.toString()}':${provider.useClass.name})`;
    }
    return provider.useClass.name;
  } else if (provider.provide instanceof InjectionToken) {
    return provider.provide.toString();
  } else if (typeof provider.provide === "string") {
    return provider.provide;
  } else {
    return null;
  }
}
function \u0275\u0275ProvidersFeature(providers, viewProviders = []) {
  return (definition) => {
    definition.providersResolver = (def, processProvidersFn) => {
      return providersResolver(
        def,
        //
        processProvidersFn ? processProvidersFn(providers) : providers,
        //
        viewProviders
      );
    };
  };
}
function \u0275\u0275ExternalStylesFeature(styleUrls) {
  return (definition) => {
    if (styleUrls.length < 1) {
      return;
    }
    definition.getExternalStyles = (encapsulationId) => {
      const urls = styleUrls.map((value) => value + "?ngcomp" + (encapsulationId ? "=" + encodeURIComponent(encapsulationId) : "") + "&e=" + definition.encapsulation);
      return urls;
    };
  };
}
function \u0275\u0275setComponentScope(type, directives, pipes) {
  const def = type.\u0275cmp;
  def.directiveDefs = extractDefListOrFactory(directives, extractDirectiveDef);
  def.pipeDefs = extractDefListOrFactory(pipes, getPipeDef);
}
function \u0275\u0275setNgModuleScope(type, scope) {
  return noSideEffects(() => {
    const ngModuleDef = getNgModuleDefOrThrow(type);
    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);
    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);
    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);
    if (scope.bootstrap) {
      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);
    }
    depsTracker.registerNgModule(type, scope);
  });
}
function convertToTypeArray(values) {
  if (typeof values === "function") {
    return values;
  }
  const flattenValues = flatten(values);
  if (flattenValues.some(isForwardRef)) {
    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);
  } else {
    return flattenValues.map(maybeUnwrapModuleWithProviders);
  }
}
function maybeUnwrapModuleWithProviders(value) {
  return isModuleWithProviders(value) ? value.ngModule : value;
}
function \u0275\u0275pureFunction0(slotOffset, pureFn, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
function \u0275\u0275pureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
function \u0275\u0275pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
function \u0275\u0275pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
function \u0275\u0275pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
function \u0275\u0275pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
function \u0275\u0275pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
function \u0275\u0275pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
function \u0275\u0275pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
function \u0275\u0275pureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  const lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? void 0 : lastReturnValue;
}
function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  let bindingIndex = bindingRoot + slotOffset;
  let different = false;
  for (let i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }
  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
function \u0275\u0275pipe(index, pipeName) {
  const tView = getTView();
  let pipeDef;
  const adjustedIndex = index + HEADER_OFFSET;
  if (tView.firstCreatePass) {
    pipeDef = getPipeDef2(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;
    if (pipeDef.onDestroy) {
      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }
  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  let previousInjectorProfilerContext;
  if (ngDevMode) {
    previousInjectorProfilerContext = setInjectorProfilerContext({
      injector: new NodeInjector(getCurrentTNode(), getLView()),
      token: pipeDef.type
    });
  }
  const previousInjectImplementation = setInjectImplementation(\u0275\u0275directiveInject);
  try {
    const previousIncludeViewProviders = setIncludeViewProviders(false);
    const pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    setInjectImplementation(previousInjectImplementation);
    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);
  }
}
function getPipeDef2(name, registry) {
  if (registry) {
    if (ngDevMode) {
      const pipes = registry.filter((pipe3) => pipe3.name === name);
      if (pipes.length > 1) {
        console.warn(formatRuntimeError(313, getMultipleMatchingPipesMessage(name)));
      }
    }
    for (let i = registry.length - 1; i >= 0; i--) {
      const pipeDef = registry[i];
      if (name === pipeDef.name) {
        return pipeDef;
      }
    }
  }
  if (ngDevMode) {
    throw new RuntimeError(-302, getPipeNotFoundErrorMessage(name));
  }
  return;
}
function getMultipleMatchingPipesMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `check ${hostIsStandalone ? "'@Component.imports' of this component" : "the imports of this module"}`;
  const errorMessage = `Multiple pipes match the name \`${name}\`${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function getPipeNotFoundErrorMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `Verify that it is ${hostIsStandalone ? "included in the '@Component.imports' of this component" : "declared or imported in this module"}`;
  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function \u0275\u0275pipeBind1(index, offset, v1) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
}
function \u0275\u0275pipeBind2(index, slotOffset, v1, v2) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
}
function \u0275\u0275pipeBind3(index, slotOffset, v1, v2, v3) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
}
function \u0275\u0275pipeBind4(index, slotOffset, v1, v2, v3, v4) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);
}
function \u0275\u0275pipeBindV(index, slotOffset, values) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
}
function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
function \u0275\u0275templateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
function \u0275\u0275getComponentDepsFactory(type, rawImports) {
  return () => {
    try {
      return depsTracker.getComponentDependencies(type, rawImports).dependencies;
    } catch (e) {
      console.error(`Computing dependencies in local compilation mode for the component "${type.name}" failed with the exception:`, e);
      throw e;
    }
  };
}
function \u0275setClassDebugInfo(type, debugInfo) {
  const def = getComponentDef(type);
  if (def !== null) {
    def.debugInfo = debugInfo;
  }
}
function \u0275\u0275getReplaceMetadataURL(id, timestamp, base) {
  const url = `./@ng/component?c=${id}&t=${encodeURIComponent(timestamp)}`;
  return new URL(url, base).href;
}
function \u0275\u0275replaceMetadata(type, applyMetadata, namespaces, locals, importMeta = null, id = null) {
  ngDevMode && assertComponentDef(type);
  const currentDef = getComponentDef(type);
  applyMetadata.apply(null, [type, namespaces, ...locals]);
  const { newDef, oldDef } = mergeWithExistingDefinition(currentDef, getComponentDef(type));
  type[NG_COMP_DEF] = newDef;
  if (oldDef.tView) {
    const trackedViews = getTrackedLViews().values();
    for (const root of trackedViews) {
      if (isRootView(root) && root[PARENT] === null) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, root);
      }
    }
  }
}
function mergeWithExistingDefinition(currentDef, newDef) {
  const clone = __spreadValues({}, currentDef);
  const replacement = Object.assign(currentDef, newDef, {
    // We need to keep the existing directive and pipe defs, because they can get patched on
    // by a call to `setComponentScope` from a module file. That call won't make it into the
    // HMR replacement function, because it lives in an entirely different file.
    directiveDefs: clone.directiveDefs,
    pipeDefs: clone.pipeDefs,
    // Preserve the old `setInput` function, because it has some state.
    // This is fine, because the component instance is preserved as well.
    setInput: clone.setInput,
    // Externally this is redundant since we redeclare the definition using the original type.
    // Internally we may receive a definition with an alternate, but identical, type so we have
    // to ensure that the original one is preserved.
    type: clone.type
  });
  ngDevMode && assertEqual(replacement, currentDef, "Expected definition to be merged in place");
  return { newDef: replacement, oldDef: clone };
}
function recreateMatchingLViews(importMeta, id, newDef, oldDef, rootLView) {
  ngDevMode && assertDefined(oldDef.tView, "Expected a component definition that has been instantiated at least once");
  const tView = rootLView[TVIEW];
  if (tView === oldDef.tView) {
    ngDevMode && assertComponentDef(oldDef.type);
    recreateLView(importMeta, id, newDef, oldDef, rootLView);
    return;
  }
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    const current = rootLView[i];
    if (isLContainer(current)) {
      if (isLView(current[HOST])) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);
      }
      for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {
        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);
      }
    } else if (isLView(current)) {
      recreateMatchingLViews(importMeta, id, newDef, oldDef, current);
    }
  }
}
function clearRendererCache(factory, def) {
  factory.componentReplaced?.(def.id);
}
function recreateLView(importMeta, id, newDef, oldDef, lView) {
  const instance = lView[CONTEXT];
  let host = lView[HOST];
  const parentLView = lView[PARENT];
  ngDevMode && assertLView(parentLView);
  const tNode = lView[T_HOST];
  ngDevMode && assertTNodeType(
    tNode,
    2
    /* TNodeType.Element */
  );
  ngDevMode && assertNotEqual(newDef, oldDef, "Expected different component definition");
  const zone = lView[INJECTOR].get(NgZone, null);
  const recreate = () => {
    if (oldDef.encapsulation === ViewEncapsulation.ShadowDom) {
      const newHost = host.cloneNode(false);
      host.replaceWith(newHost);
      host = newHost;
    }
    const newTView = getOrCreateComponentTView(newDef);
    const newLView = createLView(
      parentLView,
      newTView,
      instance,
      getInitialLViewFlagsFromDef(newDef),
      host,
      tNode,
      null,
      null,
      // The renderer will be created a bit further down once the old one is destroyed.
      null,
      null,
      null
    );
    replaceLViewInTree(parentLView, lView, newLView, tNode.index);
    destroyLView(lView[TVIEW], lView);
    const rendererFactory = lView[ENVIRONMENT].rendererFactory;
    clearRendererCache(rendererFactory, oldDef);
    newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);
    removeViewFromDOM(lView[TVIEW], lView);
    resetProjectionState(tNode);
    renderView(newTView, newLView, instance);
    refreshView(newTView, newLView, newTView.template, instance);
  };
  if (zone === null) {
    executeWithInvalidateFallback(importMeta, id, recreate);
  } else {
    zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));
  }
}
function executeWithInvalidateFallback(importMeta, id, callback) {
  try {
    callback();
  } catch (e) {
    const error = e;
    if (id !== null && error.message) {
      const toLog = error.message + (error.stack ? "\n" + error.stack : "");
      importMeta?.hot?.send?.("angular:invalidate", { id, message: toLog, error: true });
    }
    throw e;
  }
}
function replaceLViewInTree(parentLView, oldLView, newLView, index) {
  for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {
    const current = parentLView[i];
    if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {
      current[NEXT] = newLView;
      break;
    }
  }
  if (parentLView[CHILD_HEAD] === oldLView) {
    parentLView[CHILD_HEAD] = newLView;
  }
  if (parentLView[CHILD_TAIL] === oldLView) {
    parentLView[CHILD_TAIL] = newLView;
  }
  newLView[NEXT] = oldLView[NEXT];
  oldLView[NEXT] = null;
  parentLView[index] = newLView;
}
function resetProjectionState(tNode) {
  if (tNode.projection !== null) {
    for (const current of tNode.projection) {
      if (isTNodeShape(current)) {
        current.projectionNext = null;
        current.flags &= ~2;
      }
    }
    tNode.projection = null;
  }
}
function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set.");
      return;
    }
    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set.");
      return;
    }
  }
  jitOptions = options;
}
function getJitOptions() {
  return jitOptions;
}
function resetJitOptions() {
  jitOptions = null;
}
function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({ moduleType, ngModule });
}
function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;
    try {
      for (let i = moduleQueue.length - 1; i >= 0; i--) {
        const { moduleType, ngModule } = moduleQueue[i];
        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }
  return !!resolveForwardRef(declaration);
}
function compileNgModule(moduleType, ngModule = {}) {
  compileNgModuleDefs(moduleType, ngModule);
  if (ngModule.id !== void 0) {
    registerNgModuleType(moduleType, ngModule.id);
  }
  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
  ngDevMode && assertDefined(moduleType, "Required value moduleType");
  ngDevMode && assertDefined(ngModule, "Required value ngModule");
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  let ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: () => {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
        }
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/\u0275mod.js`, {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        });
        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }
      return ngModuleDef;
    }
  });
  let ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/\u0275fac.js`, {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  let ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: () => {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        const meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [
            (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),
            (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)
          ]
        };
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/\u0275inj.js`, meta);
      }
      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function generateStandaloneInDeclarationsError(type, location2) {
  const prefix = `Unexpected "${stringifyForError(type)}" found in the "declarations" array of the`;
  const suffix = `"${stringifyForError(type)}" is marked as standalone and can't be declared in any NgModule - did you intend to import it instead (by adding it to the "imports" array)?`;
  return `${prefix} ${location2}, ${suffix}`;
}
function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType))
    return;
  if (isStandalone(moduleType))
    return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  let ngModuleDef;
  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);
    if (!ngModuleDef) {
      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  } else {
    ngModuleDef = getNgModuleDefOrThrow(moduleType);
  }
  const errors = [];
  const declarations = maybeUnwrapFn(ngModuleDef.declarations);
  const imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach((modOrStandaloneCmpt) => {
    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);
    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);
  });
  const exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));
  const combinedDeclarations = [
    ...declarations.map(resolveForwardRef),
    ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)
  ];
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
  const ngModule = getAnnotation(moduleType, "NgModule");
  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((mod) => {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
  }
  if (errors.length) {
    throw new Error(errors.join("\n"));
  }
  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);
    if (!def) {
      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
    }
  }
  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    const def = getDirectiveDef(type);
    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
    }
  }
  function verifyNotStandalone(type, moduleType2) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);
    if (def?.standalone) {
      const location2 = `"${stringifyForError(moduleType2)}" NgModule`;
      errors.push(generateStandaloneInDeclarationsError(type, location2));
    }
  }
  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    const kind = getComponentDef(type) && "component" || getDirectiveDef(type) && "directive" || getPipeDef(type) && "pipe";
    if (kind) {
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
      }
    }
  }
  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        const modules2 = [existingModule, moduleType].map(stringifyForError).sort();
        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules2[0]} and ${modules2[1]}! Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules2[0]} and ${modules2[1]}. You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules2[0]} and ${modules2[1]}.`);
      }
    } else {
      ownerNgModule.set(type, moduleType);
    }
  }
  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (!existingModule && !isStandalone(type)) {
      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
    }
  }
  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);
    if (!getComponentDef(type)) {
      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
    }
    if (isStandalone(type)) {
      errors.push(`The \`${stringifyForError(type)}\` class is a standalone component, which can not be used in the \`@NgModule.bootstrap\` array. Use the \`bootstrapApplication\` function for bootstrap instead.`);
    }
  }
  function verifySemanticsOfNgModuleImport(type, importingModule2) {
    type = resolveForwardRef(type);
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null && !directiveDef.standalone) {
      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
    const pipeDef = getPipeDef(type);
    if (pipeDef !== null && !pipeDef.standalone) {
      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
  }
}
function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}
function getAnnotation(type, name) {
  let annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;
  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }
  function readAnnotation(decorator) {
    if (!annotation) {
      const proto = Object.getPrototypeOf(decorator);
      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        const proto2 = Object.getPrototypeOf(decorator.type);
        if (proto2.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
function resetCompiledComponents() {
  ownerNgModule = /* @__PURE__ */ new WeakMap();
  verifiedNgModule = /* @__PURE__ */ new WeakMap();
  moduleQueue.length = 0;
  GENERATED_COMP_IDS.clear();
}
function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  const ngModuleDef = getNgModuleDef(type);
  if (ngModuleDef === null) {
    return [type];
  }
  return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type2) => {
    const ngModuleDef2 = getNgModuleDef(type2);
    if (ngModuleDef2) {
      verifySemanticsOfNgModuleDef(type2, false);
      return computeCombinedExports(type2);
    } else {
      return type2;
    }
  }));
}
function setScopeOnDeclaredComponents(moduleType, ngModule) {
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  const transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach((declaration) => {
    declaration = resolveForwardRef(declaration);
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      const component = declaration;
      const componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      declaration.ngSelectorScope = moduleType;
    }
  });
}
function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter((def) => !!def);
  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe3) => getPipeDef(pipe3));
  componentDef.schemas = transitiveScopes.schemas;
  componentDef.tView = null;
}
function transitiveScopesFor(type) {
  if (isNgModule(type)) {
    const scope = depsTracker.getNgModuleScope(type);
    const def = getNgModuleDefOrThrow(type);
    return __spreadValues({
      schemas: def.schemas || null
    }, scope);
  } else if (isStandalone(type)) {
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set([type]),
          pipes: /* @__PURE__ */ new Set()
        }
      };
    }
    const pipeDef = getPipeDef(type);
    if (pipeDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set([type])
        }
      };
    }
  }
  throw new Error(`${type.name} does not have a module def (\u0275mod property)`);
}
function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }
  return value;
}
function compileComponent(type, metadata) {
  (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
  let ngComponentDef = null;
  maybeQueueResolutionOfComponentResources(type, metadata);
  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: () => {
      if (ngComponentDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "component",
          type
        });
        if (componentNeedsResolution(metadata)) {
          const error = [`Component '${type.name}' is not resolved:`];
          if (metadata.templateUrl) {
            error.push(` - templateUrl: ${metadata.templateUrl}`);
          }
          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
          }
          if (metadata.styleUrl) {
            error.push(` - styleUrl: ${metadata.styleUrl}`);
          }
          error.push(`Did you run and wait for 'resolveComponentResources()'?`);
          throw new Error(error.join("\n"));
        }
        const options = getJitOptions();
        let preserveWhitespaces = metadata.preserveWhitespaces;
        if (preserveWhitespaces === void 0) {
          if (options !== null && options.preserveWhitespaces !== void 0) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }
        let encapsulation = metadata.encapsulation;
        if (encapsulation === void 0) {
          if (options !== null && options.defaultEncapsulation !== void 0) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation.Emulated;
          }
        }
        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
        const baseMeta = directiveMetadata(type, metadata);
        const meta = __spreadProps(__spreadValues({}, baseMeta), {
          typeSourceSpan: compiler.createParseSourceSpan("Component", type.name, templateUrl),
          template: metadata.template || "",
          preserveWhitespaces,
          styles: typeof metadata.styles === "string" ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          // JIT components are always compiled against an empty set of `declarations`. Instead, the
          // `directiveDefs` and `pipeDefs` are updated at a later point:
          //  * for NgModule-based components, they're set when the NgModule which declares the
          //    component resolves in the module scoping queue
          //  * for standalone components, they're set just below, after `compileComponent`.
          declarations: [],
          changeDetection: metadata.changeDetection,
          encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null,
          // We can't inspect whether any of the dependencies are actually directives, because they
          // get patched on after compilation. That's why in JIT mode we consider that any
          // dependency might be a directive dependency.
          hasDirectiveDependencies: !baseMeta.isStandalone || metadata.imports != null && metadata.imports.length > 0
        });
        compilationDepth++;
        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }
          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
          if (meta.isStandalone) {
            const imports = flatten(metadata.imports || EMPTY_ARRAY);
            const { directiveDefs, pipeDefs } = getStandaloneDefFunctions(type, imports);
            ngComponentDef.directiveDefs = directiveDefs;
            ngComponentDef.pipeDefs = pipeDefs;
            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);
          }
        } finally {
          compilationDepth--;
        }
        if (compilationDepth === 0) {
          flushModuleScopingQueueAsMuchAsPossible();
        }
        if (hasSelectorScope(type)) {
          const scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
        if (metadata.schemas) {
          if (meta.isStandalone) {
            ngComponentDef.schemas = metadata.schemas;
          } else {
            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);
          }
        } else if (meta.isStandalone) {
          ngComponentDef.schemas = [];
        }
      }
      return ngComponentDef;
    },
    set: (def) => {
      ngComponentDef = def;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getStandaloneDefFunctions(type, imports) {
  const directiveDefs = () => {
    if (ngDevMode) {
      for (const rawDep of imports) {
        verifyStandaloneImport(rawDep, type);
      }
    }
    if (!isComponent(type)) {
      return [];
    }
    const scope = depsTracker.getStandaloneComponentScope(type, imports);
    return [...scope.compilation.directives].map((p) => getComponentDef(p) || getDirectiveDef(p)).filter((d) => d !== null);
  };
  const pipeDefs = () => {
    if (ngDevMode) {
      for (const rawDep of imports) {
        verifyStandaloneImport(rawDep, type);
      }
    }
    if (!isComponent(type)) {
      return [];
    }
    const scope = depsTracker.getStandaloneComponentScope(type, imports);
    return [...scope.compilation.pipes].map((p) => getPipeDef(p)).filter((d) => d !== null);
  };
  return {
    directiveDefs,
    pipeDefs
  };
}
function hasSelectorScope(component) {
  return component.ngSelectorScope !== void 0;
}
function compileDirective(type, directive) {
  let ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: () => {
      if (ngDirectiveDef === null) {
        const meta = getDirectiveMetadata(type, directive || {});
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }
      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getDirectiveMetadata(type, metadata) {
  const name = type && type.name;
  const sourceMapUrl = `ng:///${name}/\u0275dir.js`;
  const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
  const facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan("Directive", name, sourceMapUrl);
  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }
  return { metadata: facade, sourceMapUrl };
}
function addDirectiveFactoryDef(type, metadata) {
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const meta = getDirectiveMetadata(type, metadata);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/\u0275fac.js`, {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
function directiveMetadata(type, metadata) {
  const reflect = getReflect();
  const propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type,
    selector: metadata.selector !== void 0 ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, "ngOnChanges") },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),
    isStandalone: metadata.standalone === void 0 ? true : !!metadata.standalone,
    isSignal: !!metadata.signals,
    hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === "function" ? { directive } : directive) || null
  };
}
function addDirectiveDefToUndecoratedParents(type) {
  const objPrototype = Object.prototype;
  let parent = Object.getPrototypeOf(type.prototype).constructor;
  while (parent && parent !== objPrototype) {
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }
    parent = Object.getPrototypeOf(parent);
  }
}
function convertToR3QueryPredicate(selector) {
  return typeof selector === "string" ? splitByComma(selector) : resolveForwardRef(selector);
}
function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,
    isSignal: !!ann.isSignal
  };
}
function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  const queriesMeta = [];
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      const annotations = propMetadata[field];
      annotations.forEach((ann) => {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error(`Can't construct a query for the property "${field}" of "${stringifyForError(type)}" since the query selector wasn't defined.`);
          }
          if (annotations.some(isInputAnnotation)) {
            throw new Error(`Cannot combine @Input decorators with query decorators`);
          }
          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  }
  return queriesMeta;
}
function extractExportAs(exportAs) {
  return exportAs === void 0 ? null : splitByComma(exportAs);
}
function isContentQuery(value) {
  const name = value.ngMetadataName;
  return name === "ContentChild" || name === "ContentChildren";
}
function isViewQuery(value) {
  const name = value.ngMetadataName;
  return name === "ViewChild" || name === "ViewChildren";
}
function isInputAnnotation(value) {
  return value.ngMetadataName === "Input";
}
function splitByComma(value) {
  return value.split(",").map((piece) => piece.trim());
}
function shouldAddAbstractDirective(type) {
  const reflect = getReflect();
  if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {
    return true;
  }
  const propMetadata = reflect.propMetadata(type);
  for (const field in propMetadata) {
    const annotations = propMetadata[field];
    for (let i = 0; i < annotations.length; i++) {
      const current = annotations[i];
      const metadataName = current.ngMetadataName;
      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === "Output" || metadataName === "HostBinding" || metadataName === "HostListener") {
        return true;
      }
    }
  }
  return false;
}
function compilePipe(type, meta) {
  let ngPipeDef = null;
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/\u0275fac.js`, {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: () => {
      if (ngPipeDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/\u0275pipe.js`, metadata);
      }
      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getPipeMetadata(type, meta) {
  return {
    type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== void 0 ? meta.pure : true,
    isStandalone: meta.standalone === void 0 ? true : !!meta.standalone
  };
}
function internalProvideZoneChangeDetection({ ngZoneFactory, ignoreChangesOutsideZone, scheduleInRootZone }) {
  ngZoneFactory ??= () => new NgZone(__spreadProps(__spreadValues({}, getNgZoneOptions()), { scheduleInRootZone }));
  return [
    { provide: NgZone, useFactory: ngZoneFactory },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const ngZoneChangeDetectionScheduler = inject2(NgZoneChangeDetectionScheduler, {
          optional: true
        });
        if ((typeof ngDevMode === "undefined" || ngDevMode) && ngZoneChangeDetectionScheduler === null) {
          throw new RuntimeError(402, `A required Injectable was not found in the dependency injection tree. If you are bootstrapping an NgModule, make sure that the \`BrowserModule\` is imported.`);
        }
        return () => ngZoneChangeDetectionScheduler.initialize();
      }
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const service = inject2(ZoneStablePendingTask);
        return () => {
          service.initialize();
        };
      }
    },
    // Always disable scheduler whenever explicitly disabled, even if another place called
    // `provideZoneChangeDetection` without the 'ignore' option.
    ignoreChangesOutsideZone === true ? { provide: ZONELESS_SCHEDULER_DISABLED, useValue: true } : [],
    {
      provide: SCHEDULE_IN_ROOT_ZONE,
      useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT
    },
    {
      provide: INTERNAL_APPLICATION_ERROR_HANDLER,
      useFactory: () => {
        const zone = inject2(NgZone);
        const injector = inject2(EnvironmentInjector);
        let userErrorHandler;
        return (e) => {
          zone.runOutsideAngular(() => {
            if (injector.destroyed && !userErrorHandler) {
              setTimeout(() => {
                throw e;
              });
            } else {
              userErrorHandler ??= injector.get(ErrorHandler);
              userErrorHandler.handleError(e);
            }
          });
        };
      }
    }
  ];
}
function provideZoneChangeDetection(options) {
  const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;
  const scheduleInRootZone = options?.scheduleInRootZone;
  const zoneProviders = internalProvideZoneChangeDetection({
    ngZoneFactory: () => {
      const ngZoneOptions = getNgZoneOptions(options);
      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;
      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {
        performanceMarkFeature("NgZone_CoalesceEvent");
      }
      return new NgZone(ngZoneOptions);
    },
    ignoreChangesOutsideZone,
    scheduleInRootZone
  });
  return makeEnvironmentProviders([
    { provide: PROVIDED_NG_ZONE, useValue: true },
    { provide: ZONELESS_ENABLED, useValue: false },
    zoneProviders
  ]);
}
function getNgZoneOptions(options) {
  return {
    enableLongStackTrace: typeof ngDevMode === "undefined" ? false : !!ngDevMode,
    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,
    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false
  };
}
function trackMicrotaskNotificationForDebugging() {
  consecutiveMicrotaskNotifications++;
  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {
    const stack = new Error().stack;
    if (stack) {
      stackFromLastFewNotifications.push(stack);
    }
  }
  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {
    throw new RuntimeError(103, "Angular could not stabilize because there were endless change notifications within the browser event loop. The stack from the last several notifications: \n" + stackFromLastFewNotifications.join("\n"));
  }
}
function provideZonelessChangeDetection() {
  performanceMarkFeature("NgZoneless");
  if ((typeof ngDevMode === "undefined" || ngDevMode) && typeof Zone !== "undefined" && Zone) {
    const message = formatRuntimeError(914, `The application is using zoneless change detection, but is still loading Zone.js. Consider removing Zone.js to get the full benefits of zoneless. In applications using the Angular CLI, Zone.js is typically included in the "polyfills" section of the angular.json file.`);
    console.warn(message);
  }
  return makeEnvironmentProviders([
    { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },
    { provide: NgZone, useClass: NoopNgZone },
    { provide: ZONELESS_ENABLED, useValue: true },
    { provide: SCHEDULE_IN_ROOT_ZONE, useValue: false },
    typeof ngDevMode === "undefined" || ngDevMode ? [{ provide: PROVIDED_ZONELESS, useValue: true }] : []
  ]);
}
function getGlobalLocale() {
  if (false) {
    return goog.LOCALE;
  } else {
    return typeof $localize !== "undefined" && $localize.locale || DEFAULT_LOCALE_ID;
  }
}
function asNativeElements(debugEls) {
  return debugEls.map((el) => el.nativeElement);
}
function copyDomProperties(element2, properties) {
  if (element2) {
    let obj = Object.getPrototypeOf(element2);
    const NodePrototype = Node.prototype;
    while (obj !== null && obj !== NodePrototype) {
      const descriptors = Object.getOwnPropertyDescriptors(obj);
      for (let key in descriptors) {
        if (!key.startsWith("__") && !key.startsWith("on")) {
          const value = element2[key];
          if (isPrimitiveValue(value)) {
            properties[key] = value;
          }
        }
      }
      obj = Object.getPrototypeOf(obj);
    }
  }
}
function isPrimitiveValue(value) {
  return typeof value === "string" || typeof value === "boolean" || typeof value === "number" || value === null;
}
function _queryAll(parentElement, predicate, matches, elementsOnly) {
  const context2 = getLContext(parentElement.nativeNode);
  const lView = context2 ? context2.lView : null;
  if (lView !== null) {
    const parentTNode = lView[TVIEW].data[context2.nodeIndex];
    _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);
  } else {
    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
  }
}
function _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  const nativeNode = getNativeByTNodeOrNull(tNode, lView);
  if (tNode.type & (3 | 8)) {
    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
    if (isComponentHost(tNode)) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      if (componentView && componentView[TVIEW].firstChild) {
        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
      }
    } else {
      if (tNode.child) {
        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
      }
      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
    }
    const nodeOrContainer = lView[tNode.index];
    if (isLContainer(nodeOrContainer)) {
      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.type & 4) {
    const lContainer = lView[tNode.index];
    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);
    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);
  } else if (tNode.type & 16) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const head = componentHost.projection[tNode.projection];
    if (Array.isArray(head)) {
      for (let nativeNode2 of head) {
        _addQueryMatch(nativeNode2, predicate, matches, elementsOnly, rootNativeNode);
      }
    } else if (head) {
      const nextLView = componentView[PARENT];
      const nextTNode = nextLView[TVIEW].data[head.index];
      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.child) {
    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
  }
  if (rootNativeNode !== nativeNode) {
    const nextTNode = tNode.flags & 2 ? tNode.projectionNext : tNode.next;
    if (nextTNode) {
      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
function _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const childView = lContainer[i];
    const firstChild = childView[TVIEW].firstChild;
    if (firstChild) {
      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
function _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
  if (rootNativeNode !== nativeNode) {
    const debugNode = getDebugNode(nativeNode);
    if (!debugNode) {
      return;
    }
    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    }
  }
}
function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
  const nodes = parentNode.childNodes;
  const length = nodes.length;
  for (let i = 0; i < length; i++) {
    const node = nodes[i];
    const debugNode = getDebugNode(node);
    if (debugNode) {
      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      }
      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
    }
  }
}
function collectPropertyBindings(properties, tNode, lView, tData) {
  let bindingIndexes = tNode.propertyBindings;
  if (bindingIndexes !== null) {
    for (let i = 0; i < bindingIndexes.length; i++) {
      const bindingIndex = bindingIndexes[i];
      const propMetadata = tData[bindingIndex];
      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
      const propertyName = metadataParts[0];
      if (metadataParts.length > 1) {
        let value = metadataParts[1];
        for (let j = 1; j < metadataParts.length - 1; j++) {
          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
        }
        properties[propertyName] = value;
      } else {
        properties[propertyName] = lView[bindingIndex];
      }
    }
  }
}
function getDebugNode(nativeNode) {
  if (nativeNode instanceof Node) {
    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);
    }
    return nativeNode[NG_DEBUG_PROPERTY];
  }
  return null;
}
var ANNOTATIONS, PARAMETERS, PROP_METADATA, Inject, Optional, Self, SkipSelf, Host, angularCoreDiEnv, Type, ES5_DELEGATE_CTOR, ES2015_INHERITED_CLASS, ES2015_INHERITED_CLASS_WITH_CTOR, ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR, ReflectionCapabilities, SimpleChange, \u0275\u0275NgOnChangesFeature, SIMPLE_CHANGES_STORE, profilerCallbacks, NOOP_PROFILER_REMOVAL2, profiler, NO_PARENT_INJECTOR, NodeInjectorFactory, includeViewProviders, BLOOM_SIZE, BLOOM_MASK, BLOOM_BUCKET_BITS, nextNgElementId, NOT_FOUND2, injectionPath, NodeInjector, Attribute2, _reflect, USE_VALUE2, Injectable, ElementRef, QueryList, SKIP_HYDRATION_ATTR_NAME, SKIP_HYDRATION_ATTR_NAME_LOWER_CASE, ChangeDetectionStrategy, TRACKED_LVIEWS, uniqueIdCounter, LContext, MONKEY_PATCH_KEY_NAME, Framework, AcxChangeDetectionStrategy, AcxViewEncapsulation, DOCUMENT2, APP_ID, DEFAULT_APP_ID, PLATFORM_INITIALIZER, PLATFORM_ID, PACKAGE_ROOT_URL, ANIMATION_MODULE_TYPE, CSP_NONCE, IMAGE_CONFIG_DEFAULTS, IMAGE_CONFIG, TransferState, REFERENCE_NODE_HOST, REFERENCE_NODE_BODY, NODE_NAVIGATION_STEP_FIRST_CHILD, NODE_NAVIGATION_STEP_NEXT_SIBLING, ELEMENT_CONTAINERS, TEMPLATES, CONTAINERS, MULTIPLIER, NUM_ROOT_NODES, TEMPLATE_ID, NODES, DISCONNECTED_NODES, I18N_DATA, DEFER_BLOCK_ID, DEFER_BLOCK_STATE$1, DEFER_PARENT_BLOCK_ID, DEFER_HYDRATE_TRIGGERS, IS_HYDRATION_DOM_REUSE_ENABLED, PRESERVE_HOST_CONTENT_DEFAULT, PRESERVE_HOST_CONTENT, IS_I18N_HYDRATION_ENABLED, IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT, IS_INCREMENTAL_HYDRATION_ENABLED, JSACTION_BLOCK_ELEMENT_MAP, eventListenerOptions, hoverTriggers, interactionTriggers, viewportTriggers, interactionEventNames, hoverEventNames, intersectionObserver, observedViewportElements, DeferEventEntry, DEFER_BLOCK_SSR_ID_ATTRIBUTE, sharedStashFunction, sharedMapFunction, removeListeners, JSACTION_EVENT_CONTRACT, stashEventListeners, isStashEventListenerImplEnabled, _stashEventListenerImpl, DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry, TRANSFER_STATE_TOKEN_ID, NGH_DATA_KEY, TRANSFER_STATE_DEFER_BLOCKS_INFO, NGH_DEFER_BLOCKS_KEY, NGH_ATTR_NAME, SSR_CONTENT_INTEGRITY_MARKER, _retrieveHydrationInfoImpl, HydrationStatus, HYDRATION_INFO_KEY, _retrieveDeferBlockDataImpl, ViewEncapsulation, policy$1, policy, SafeValueImpl, SafeHtmlImpl, SafeStyleImpl, SafeScriptImpl, SafeUrlImpl, SafeResourceUrlImpl, DOMParserHelper, InertDocumentHelper, SAFE_URL_PATTERN, VOID_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS, OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, VALID_ELEMENTS, URI_ATTRS, HTML_ATTRS, ARIA_ATTRS, VALID_ATTRS, SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS, SanitizingHtmlSerializer, SURROGATE_PAIR_REGEXP, NON_ALPHANUMERIC_REGEXP, inertBodyHelper, SecurityContext, COMMENT_DISALLOWED, COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED, NG_REFLECT_ATTRS_FLAG_DEFAULT, NG_REFLECT_ATTRS_FLAG, CAMEL_CASE_REGEXP, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, shouldThrowErrorOnUnknownElement, shouldThrowErrorOnUnknownProperty, KNOWN_CONTROL_FLOW_DIRECTIVES, INTERPOLATION_DELIMITER, VALUE_STRING_LENGTH_LIMIT, NG_TEMPLATE_SELECTOR, NO_CHANGE, InputFlags, RendererStyleFlags2, _icuContainerIterate, _getInsertInFrontOfRNodeWithI18n, _processI18nInsertBefore, _applyRootElementTransformImpl, USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT, UseExhaustiveCheckNoChanges, freeConsumers, REACTIVE_LVIEW_CONSUMER_NODE, TEMPORARY_CONSUMER_NODE, MAXIMUM_REFRESH_RERUNS$1, ViewRef, TemplateRef, AT_THIS_LOCATION, internalAttrs, REF_EXTRACTOR_REGEXP, _isI18nHydrationSupportEnabled, _prepareI18nBlockForHydrationImpl, _claimDehydratedIcuCaseImpl, _findMatchingDehydratedViewImpl, _findAndReconcileMatchingDehydratedViewsImpl, ComponentRef$1, ComponentFactory$1, _NullComponentFactoryResolver, ComponentFactoryResolver$1, RendererFactory2, Renderer2, Sanitizer, DepsTracker, depsTracker, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ChainedInjector, BINDING, INPUT_BINDING_METADATA, OUTPUT_BINDING_METADATA, ComponentFactoryResolver2, ComponentFactory2, ComponentRef2, ViewContainerRef, VE_ViewContainerRef, R3ViewContainerRef, _locateOrCreateAnchorNode, _populateDehydratedViewsInLContainer, LQuery_, LQueries_, TQueryMetadata_, TQueries_, TQuery_, componentResourceResolutionQueue, componentDefPendingResolution, modules, checkForDuplicateNgModules, markedFeatures, NgModuleRef$1, NgModuleFactory$1, createNgModuleRef, NgModuleRef2, NgModuleFactory2, EnvironmentNgModuleRefAdapter, StandaloneService, GENERATED_COMP_IDS, COPY_DIRECTIVE_FIELDS, COPY_COMPONENT_FIELDS, _locateOrCreateContainerAnchor, DeferDependenciesLoadingState, MINIMUM_SLOT, LOADING_AFTER_SLOT, DeferBlockState, DeferBlockInternalState, NEXT_DEFER_BLOCK_STATE, DEFER_BLOCK_STATE, STATE_IS_FROZEN_UNTIL, LOADING_AFTER_CLEANUP_FN, TRIGGER_CLEANUP_FNS, PREFETCH_TRIGGER_CLEANUP_FNS, SSR_UNIQUE_ID, SSR_BLOCK_STATE, ON_COMPLETE_FNS, HYDRATE_TRIGGER_CLEANUP_FNS, DeferBlockBehavior, TracingAction, TracingService, SCHEDULE_IN_ROOT_ZONE_DEFAULT, EventEmitter_, EventEmitter, AsyncStackTaggingZoneSpec, isAngularZoneProperty, angularZoneInstanceIdProperty, ngZoneInstanceId, NgZone, EMPTY_PAYLOAD, NoopNgZone, AfterRenderManager, AFTER_RENDER_PHASES, AfterRenderImpl, AfterRenderSequence, _requestIdleCallback, _cancelIdleCallback, IdleScheduler, TimerScheduler, CachedInjectorService, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DEFER_BLOCK_CONFIG, applyDeferBlockStateWithSchedulingImpl, ASYNC_COMPONENT_METADATA_FN, Console, DIDebugData, frameworkDIDebugData, signalDebugMap, counter$1, changeDetectionRuns, changeDetectionSyncRuns, counter, eventsStack, chromeDevToolsInjectorProfiler, devToolsProfiler, GLOBAL_PUBLISH_EXPANDO_KEY, globalUtilsFunctions, _published, TESTABILITY, TESTABILITY_GETTER, Testability, TestabilityRegistry, _testabilityGetter, APP_INITIALIZER, ApplicationInitStatus, APP_BOOTSTRAP_LISTENER, NgProbeToken, MAXIMUM_REFRESH_RERUNS, ApplicationRef, LiveCollection, UniqueValueMultiKeyMap, RepeaterContext, RepeaterMetadata, OperationsCounter, LiveCollectionLContainerImpl, _locateOrCreateElementNode, _locateOrCreateElementContainerNode, u, localeEn, LOCALE_DATA, LocaleDataIndex, pluralMapping, DEFAULT_LOCALE_ID, USD_CURRENCY_CODE, ELEMENT_MARKER, ICU_MARKER, I18nCreateOpCode, LOCALE_ID$1, changeMask, changeMaskCounter, _locateOrCreateNode, OpCodeParser, BINDING_REGEXP, ICU_REGEXP, NESTED_ICU, ICU_BLOCK_REGEXP, MARKER, SUBTEMPLATE_REGEXP, PH_REGEXP, NGSP_UNICODE_REGEXP, ROOT_TEMPLATE_ID, PP_MULTI_VALUE_PLACEHOLDERS_REGEXP, PP_PLACEHOLDERS_REGEXP, PP_ICU_VARS_REGEXP, PP_ICU_PLACEHOLDERS_REGEXP, PP_ICUS_REGEXP, PP_CLOSE_TEMPLATE_REGEXP, PP_TEMPLATE_ID_REGEXP, parserState, _locateOrCreateTextNode, UNINITIALIZED_LET, angularCoreEnv, jitOptions, moduleQueue, flushingModuleQueue, ownerNgModule, verifiedNgModule, compilationDepth, LIFECYCLE_HOOKS, Directive, Component, Pipe, Input, Output, HostBinding, HostListener, NgModule, ModuleWithComponentFactories, Compiler, COMPILER_OPTIONS, CompilerFactory, NgZoneChangeDetectionScheduler, PROVIDED_NG_ZONE, ZoneStablePendingTask, CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT, consecutiveMicrotaskNotifications, stackFromLastFewNotifications, ChangeDetectionSchedulerImpl, LOCALE_ID, DEFAULT_CURRENCY_CODE, TRANSLATIONS, TRANSLATIONS_FORMAT, MissingTranslationStrategy, DebugEventListener, DebugNode, DebugElement, NG_DEBUG_PROPERTY;
var init_debug_node = __esm({
  "node_modules/@angular/core/fesm2022/debug_node.mjs"() {
    "use strict";
    init_root_effect_scheduler();
    init_signal();
    init_esm();
    init_signals();
    init_operators();
    init_attribute();
    ANNOTATIONS = "__annotations__";
    PARAMETERS = "__parameters__";
    PROP_METADATA = "__prop__metadata__";
    Inject = attachInjectFlag(
      // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
      makeParamDecorator("Inject", (token) => ({ token })),
      -1
      /* DecoratorFlags.Inject */
    );
    Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
    // tslint:disable-next-line: no-toplevel-property-access
    attachInjectFlag(
      makeParamDecorator("Optional"),
      8
      /* InternalInjectFlags.Optional */
    );
    Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
    // tslint:disable-next-line: no-toplevel-property-access
    attachInjectFlag(
      makeParamDecorator("Self"),
      2
      /* InternalInjectFlags.Self */
    );
    SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
    // tslint:disable-next-line: no-toplevel-property-access
    attachInjectFlag(
      makeParamDecorator("SkipSelf"),
      4
      /* InternalInjectFlags.SkipSelf */
    );
    Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
    // tslint:disable-next-line: no-toplevel-property-access
    attachInjectFlag(
      makeParamDecorator("Host"),
      1
      /* InternalInjectFlags.Host */
    );
    angularCoreDiEnv = {
      "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
      "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
      "\u0275\u0275inject": \u0275\u0275inject,
      "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
      "resolveForwardRef": resolveForwardRef
    };
    Type = Function;
    ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
    ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
    ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
    ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
    ReflectionCapabilities = class {
      _reflect;
      constructor(reflect) {
        this._reflect = reflect || _global["Reflect"];
      }
      factory(t) {
        return (...args) => new t(...args);
      }
      /** @internal */
      _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
        let result;
        if (typeof paramTypes === "undefined") {
          result = newArray(paramAnnotations.length);
        } else {
          result = newArray(paramTypes.length);
        }
        for (let i = 0; i < result.length; i++) {
          if (typeof paramTypes === "undefined") {
            result[i] = [];
          } else if (paramTypes[i] && paramTypes[i] != Object) {
            result[i] = [paramTypes[i]];
          } else {
            result[i] = [];
          }
          if (paramAnnotations && paramAnnotations[i] != null) {
            result[i] = result[i].concat(paramAnnotations[i]);
          }
        }
        return result;
      }
      _ownParameters(type, parentCtor) {
        const typeStr = type.toString();
        if (isDelegateCtor(typeStr)) {
          return null;
        }
        if (type.parameters && type.parameters !== parentCtor.parameters) {
          return type.parameters;
        }
        const tsickleCtorParams = type.ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
          const ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
          const paramTypes2 = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
          const paramAnnotations2 = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
          return this._zipTypesAndAnnotations(paramTypes2, paramAnnotations2);
        }
        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
        const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata("design:paramtypes", type);
        if (paramTypes || paramAnnotations) {
          return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        return newArray(type.length);
      }
      parameters(type) {
        if (!isType(type)) {
          return [];
        }
        const parentCtor = getParentCtor(type);
        let parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
          parameters = this.parameters(parentCtor);
        }
        return parameters || [];
      }
      _ownAnnotations(typeOrFunc, parentCtor) {
        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
          let annotations = typeOrFunc.annotations;
          if (typeof annotations === "function" && annotations.annotations) {
            annotations = annotations.annotations;
          }
          return annotations;
        }
        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
          return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
        }
        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
          return typeOrFunc[ANNOTATIONS];
        }
        return null;
      }
      annotations(typeOrFunc) {
        if (!isType(typeOrFunc)) {
          return [];
        }
        const parentCtor = getParentCtor(typeOrFunc);
        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
      }
      _ownPropMetadata(typeOrFunc, parentCtor) {
        if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
          let propMetadata = typeOrFunc.propMetadata;
          if (typeof propMetadata === "function" && propMetadata.propMetadata) {
            propMetadata = propMetadata.propMetadata;
          }
          return propMetadata;
        }
        if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
          const propDecorators = typeOrFunc.propDecorators;
          const propMetadata = {};
          Object.keys(propDecorators).forEach((prop) => {
            propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
          });
          return propMetadata;
        }
        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
          return typeOrFunc[PROP_METADATA];
        }
        return null;
      }
      propMetadata(typeOrFunc) {
        if (!isType(typeOrFunc)) {
          return {};
        }
        const parentCtor = getParentCtor(typeOrFunc);
        const propMetadata = {};
        if (parentCtor !== Object) {
          const parentPropMetadata = this.propMetadata(parentCtor);
          Object.keys(parentPropMetadata).forEach((propName) => {
            propMetadata[propName] = parentPropMetadata[propName];
          });
        }
        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
          Object.keys(ownPropMetadata).forEach((propName) => {
            const decorators = [];
            if (propMetadata.hasOwnProperty(propName)) {
              decorators.push(...propMetadata[propName]);
            }
            decorators.push(...ownPropMetadata[propName]);
            propMetadata[propName] = decorators;
          });
        }
        return propMetadata;
      }
      ownPropMetadata(typeOrFunc) {
        if (!isType(typeOrFunc)) {
          return {};
        }
        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
      }
      hasLifecycleHook(type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
      }
    };
    SimpleChange = class {
      previousValue;
      currentValue;
      firstChange;
      constructor(previousValue, currentValue, firstChange) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
      }
      /**
       * Check whether the new value is the first value assigned.
       */
      isFirstChange() {
        return this.firstChange;
      }
    };
    \u0275\u0275NgOnChangesFeature = /* @__PURE__ */ (() => {
      const \u0275\u0275NgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;
      \u0275\u0275NgOnChangesFeatureImpl.ngInherit = true;
      return \u0275\u0275NgOnChangesFeatureImpl;
    })();
    SIMPLE_CHANGES_STORE = "__ngSimpleChanges__";
    profilerCallbacks = [];
    NOOP_PROFILER_REMOVAL2 = () => {
    };
    profiler = function(event, instance = null, eventFn) {
      for (let i = 0; i < profilerCallbacks.length; i++) {
        const profilerCallback = profilerCallbacks[i];
        profilerCallback(event, instance, eventFn);
      }
    };
    NO_PARENT_INJECTOR = -1;
    NodeInjectorFactory = class {
      factory;
      name;
      /**
       * The inject implementation to be activated when using the factory.
       */
      injectImpl;
      /**
       * Marker set to true during factory invocation to see if we get into recursive loop.
       * Recursive loop causes an error to be displayed.
       */
      resolving = false;
      /**
       * Marks that the token can see other Tokens declared in `viewProviders` on the same node.
       */
      canSeeViewProviders;
      /**
       * An array of factories to use in case of `multi` provider.
       */
      multi;
      /**
       * Number of `multi`-providers which belong to the component.
       *
       * This is needed because when multiple components and directives declare the `multi` provider
       * they have to be concatenated in the correct order.
       *
       * Example:
       *
       * If we have a component and directive active an a single element as declared here
       * ```ts
       * component:
       *   providers: [ {provide: String, useValue: 'component', multi: true} ],
       *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],
       *
       * directive:
       *   providers: [ {provide: String, useValue: 'directive', multi: true} ],
       * ```
       *
       * Then the expected results are:
       *
       * ```ts
       * providers: ['component', 'directive']
       * viewProviders: ['component', 'componentView', 'directive']
       * ```
       *
       * The way to think about it is that the `viewProviders` have been inserted after the component
       * but before the directives, which is why we need to know how many `multi`s have been declared by
       * the component.
       */
      componentProviders;
      /**
       * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.
       * See `providerFactory`.
       */
      index;
      /**
       * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is
       * possible for `viewProviders` to shadow the `providers`. For this reason we store the
       * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.
       *
       * Example:
       *
       * Given:
       * ```ts
       * providers: [ {provide: String, useValue: 'all', multi: true} ],
       * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],
       * ```
       *
       * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case
       * of view injection. We further have to make sure that the shared instances (in our case
       * `all`) are the exact same instance in both the content as well as the view injection. (We
       * have to make sure that we don't double instantiate.) For this reason the `viewProviders`
       * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the
       * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =
       * ['all', 'viewOnly']`).
       */
      providerFactory;
      constructor(factory, isViewProvider, injectImplementation, name) {
        this.factory = factory;
        this.name = name;
        ngDevMode && assertDefined(factory, "Factory not specified");
        ngDevMode && assertEqual(typeof factory, "function", "Expected factory function.");
        this.canSeeViewProviders = isViewProvider;
        this.injectImpl = injectImplementation;
      }
    };
    includeViewProviders = true;
    BLOOM_SIZE = 256;
    BLOOM_MASK = BLOOM_SIZE - 1;
    BLOOM_BUCKET_BITS = 5;
    nextNgElementId = 0;
    NOT_FOUND2 = {};
    injectionPath = [];
    NodeInjector = class {
      _tNode;
      _lView;
      constructor(_tNode, _lView) {
        this._tNode = _tNode;
        this._lView = _lView;
      }
      get(token, notFoundValue, flags) {
        return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);
      }
    };
    Attribute2 = makeParamDecorator("Attribute", (attributeName) => ({
      attributeName,
      __NG_ELEMENT_ID__: () => \u0275\u0275injectAttribute(attributeName)
    }));
    _reflect = null;
    USE_VALUE2 = getClosureSafeProperty({
      provide: String,
      useValue: getClosureSafeProperty
    });
    Injectable = makeDecorator("Injectable", void 0, void 0, void 0, (type, meta) => compileInjectable(type, meta));
    ElementRef = class {
      /**
       * <div class="docs-alert docs-alert-important">
       *   <header>Use with caution</header>
       *   <p>
       *    Use this API as the last resort when direct access to DOM is needed. Use templating and
       *    data-binding provided by Angular instead. If used, it is recommended in combination with
       *    {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls DomSanitizer}
       *    for maxiumum security;
       *   </p>
       * </div>
       */
      nativeElement;
      constructor(nativeElement) {
        this.nativeElement = nativeElement;
      }
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectElementRef;
    };
    QueryList = class {
      _emitDistinctChangesOnly;
      dirty = true;
      _onDirty = void 0;
      _results = [];
      _changesDetected = false;
      _changes = void 0;
      length = 0;
      first = void 0;
      last = void 0;
      /**
       * Returns `Observable` of `QueryList` notifying the subscriber of changes.
       */
      get changes() {
        return this._changes ??= new Subject();
      }
      /**
       * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
       *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
       *     the same result)
       */
      constructor(_emitDistinctChangesOnly = false) {
        this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
      }
      /**
       * Returns the QueryList entry at `index`.
       */
      get(index) {
        return this._results[index];
      }
      /**
       * See
       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
       */
      map(fn2) {
        return this._results.map(fn2);
      }
      filter(fn2) {
        return this._results.filter(fn2);
      }
      /**
       * See
       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
       */
      find(fn2) {
        return this._results.find(fn2);
      }
      /**
       * See
       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
       */
      reduce(fn2, init) {
        return this._results.reduce(fn2, init);
      }
      /**
       * See
       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
       */
      forEach(fn2) {
        this._results.forEach(fn2);
      }
      /**
       * See
       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
       */
      some(fn2) {
        return this._results.some(fn2);
      }
      /**
       * Returns a copy of the internal results list as an Array.
       */
      toArray() {
        return this._results.slice();
      }
      toString() {
        return this._results.toString();
      }
      /**
       * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
       * on change detection, it will not notify of changes to the queries, unless a new change
       * occurs.
       *
       * @param resultsTree The query results to store
       * @param identityAccessor Optional function for extracting stable object identity from a value
       *    in the array. This function is executed for each element of the query result list while
       *    comparing current query list with the new one (provided as a first argument of the `reset`
       *    function) to detect if the lists are different. If the function is not provided, elements
       *    are compared as is (without any pre-processing).
       */
      reset(resultsTree, identityAccessor) {
        this.dirty = false;
        const newResultFlat = flatten(resultsTree);
        if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {
          this._results = newResultFlat;
          this.length = newResultFlat.length;
          this.last = newResultFlat[this.length - 1];
          this.first = newResultFlat[0];
        }
      }
      /**
       * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
       */
      notifyOnChanges() {
        if (this._changes !== void 0 && (this._changesDetected || !this._emitDistinctChangesOnly))
          this._changes.next(this);
      }
      /** @internal */
      onDirty(cb) {
        this._onDirty = cb;
      }
      /** internal */
      setDirty() {
        this.dirty = true;
        this._onDirty?.();
      }
      /** internal */
      destroy() {
        if (this._changes !== void 0) {
          this._changes.complete();
          this._changes.unsubscribe();
        }
      }
      [Symbol.iterator] = /* @__PURE__ */ (() => symbolIterator)();
    };
    SKIP_HYDRATION_ATTR_NAME = "ngSkipHydration";
    SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = "ngskiphydration";
    (function(ChangeDetectionStrategy3) {
      ChangeDetectionStrategy3[ChangeDetectionStrategy3["OnPush"] = 0] = "OnPush";
      ChangeDetectionStrategy3[ChangeDetectionStrategy3["Default"] = 1] = "Default";
    })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
    TRACKED_LVIEWS = /* @__PURE__ */ new Map();
    uniqueIdCounter = 0;
    LContext = class {
      lViewId;
      nodeIndex;
      native;
      /**
       * The instance of the Component node.
       */
      component;
      /**
       * The list of active directives that exist on this element.
       */
      directives;
      /**
       * The map of local references (local reference name => element or directive instance) that
       * exist on this element.
       */
      localRefs;
      /** Component's parent view data. */
      get lView() {
        return getLViewById(this.lViewId);
      }
      constructor(lViewId, nodeIndex, native) {
        this.lViewId = lViewId;
        this.nodeIndex = nodeIndex;
        this.native = native;
      }
    };
    MONKEY_PATCH_KEY_NAME = "__ngContext__";
    (function(Framework2) {
      Framework2["Angular"] = "angular";
      Framework2["ACX"] = "acx";
      Framework2["Wiz"] = "wiz";
    })(Framework || (Framework = {}));
    (function(AcxChangeDetectionStrategy2) {
      AcxChangeDetectionStrategy2[AcxChangeDetectionStrategy2["Default"] = 0] = "Default";
      AcxChangeDetectionStrategy2[AcxChangeDetectionStrategy2["OnPush"] = 1] = "OnPush";
    })(AcxChangeDetectionStrategy || (AcxChangeDetectionStrategy = {}));
    (function(AcxViewEncapsulation2) {
      AcxViewEncapsulation2[AcxViewEncapsulation2["Emulated"] = 0] = "Emulated";
      AcxViewEncapsulation2[AcxViewEncapsulation2["None"] = 1] = "None";
    })(AcxViewEncapsulation || (AcxViewEncapsulation = {}));
    DOCUMENT2 = void 0;
    APP_ID = new InjectionToken(ngDevMode ? "AppId" : "", {
      providedIn: "root",
      factory: () => DEFAULT_APP_ID
    });
    DEFAULT_APP_ID = "ng";
    PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? "Platform Initializer" : "");
    PLATFORM_ID = new InjectionToken(ngDevMode ? "Platform ID" : "", {
      providedIn: "platform",
      factory: () => "unknown"
      // set a default platform name, when none set explicitly
    });
    PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? "Application Packages Root URL" : "");
    ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? "AnimationModuleType" : "");
    CSP_NONCE = new InjectionToken(ngDevMode ? "CSP nonce" : "", {
      providedIn: "root",
      factory: () => {
        return getDocument().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce") || null;
      }
    });
    IMAGE_CONFIG_DEFAULTS = {
      breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
      placeholderResolution: 30,
      disableImageSizeWarning: false,
      disableImageLazyLoadWarning: false
    };
    IMAGE_CONFIG = new InjectionToken(ngDevMode ? "ImageConfig" : "", {
      providedIn: "root",
      factory: () => IMAGE_CONFIG_DEFAULTS
    });
    TransferState = class _TransferState {
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _TransferState,
          providedIn: "root",
          factory: initTransferState
        })
      );
      /** @internal */
      store = {};
      onSerializeCallbacks = {};
      /**
       * Get the value corresponding to a key. Return `defaultValue` if key is not found.
       */
      get(key, defaultValue) {
        return this.store[key] !== void 0 ? this.store[key] : defaultValue;
      }
      /**
       * Set the value corresponding to a key.
       */
      set(key, value) {
        this.store[key] = value;
      }
      /**
       * Remove a key from the store.
       */
      remove(key) {
        delete this.store[key];
      }
      /**
       * Test whether a key exists in the store.
       */
      hasKey(key) {
        return this.store.hasOwnProperty(key);
      }
      /**
       * Indicates whether the state is empty.
       */
      get isEmpty() {
        return Object.keys(this.store).length === 0;
      }
      /**
       * Register a callback to provide the value for a key when `toJson` is called.
       */
      onSerialize(key, callback) {
        this.onSerializeCallbacks[key] = callback;
      }
      /**
       * Serialize the current state of the store to JSON.
       */
      toJson() {
        for (const key in this.onSerializeCallbacks) {
          if (this.onSerializeCallbacks.hasOwnProperty(key)) {
            try {
              this.store[key] = this.onSerializeCallbacks[key]();
            } catch (e) {
              console.warn("Exception in onSerialize callback: ", e);
            }
          }
        }
        return JSON.stringify(this.store).replace(/</g, "\\u003C");
      }
    };
    REFERENCE_NODE_HOST = "h";
    REFERENCE_NODE_BODY = "b";
    NODE_NAVIGATION_STEP_FIRST_CHILD = "f";
    NODE_NAVIGATION_STEP_NEXT_SIBLING = "n";
    ELEMENT_CONTAINERS = "e";
    TEMPLATES = "t";
    CONTAINERS = "c";
    MULTIPLIER = "x";
    NUM_ROOT_NODES = "r";
    TEMPLATE_ID = "i";
    NODES = "n";
    DISCONNECTED_NODES = "d";
    I18N_DATA = "l";
    DEFER_BLOCK_ID = "di";
    DEFER_BLOCK_STATE$1 = "s";
    DEFER_PARENT_BLOCK_ID = "p";
    DEFER_HYDRATE_TRIGGERS = "t";
    IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_HYDRATION_DOM_REUSE_ENABLED" : "");
    PRESERVE_HOST_CONTENT_DEFAULT = false;
    PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "PRESERVE_HOST_CONTENT" : "", {
      providedIn: "root",
      factory: () => PRESERVE_HOST_CONTENT_DEFAULT
    });
    IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_I18N_HYDRATION_ENABLED" : "");
    IS_EVENT_REPLAY_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_EVENT_REPLAY_ENABLED" : "");
    EVENT_REPLAY_ENABLED_DEFAULT = false;
    IS_INCREMENTAL_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_INCREMENTAL_HYDRATION_ENABLED" : "");
    JSACTION_BLOCK_ELEMENT_MAP = new InjectionToken(ngDevMode ? "JSACTION_BLOCK_ELEMENT_MAP" : "", {
      providedIn: "root",
      factory: () => /* @__PURE__ */ new Map()
    });
    eventListenerOptions = {
      passive: true,
      capture: true
    };
    hoverTriggers = /* @__PURE__ */ new WeakMap();
    interactionTriggers = /* @__PURE__ */ new WeakMap();
    viewportTriggers = /* @__PURE__ */ new WeakMap();
    interactionEventNames = ["click", "keydown"];
    hoverEventNames = ["mouseenter", "mouseover", "focusin"];
    intersectionObserver = null;
    observedViewportElements = 0;
    DeferEventEntry = class {
      callbacks = /* @__PURE__ */ new Set();
      listener = () => {
        for (const callback of this.callbacks) {
          callback();
        }
      };
    };
    DEFER_BLOCK_SSR_ID_ATTRIBUTE = "ngb";
    sharedStashFunction = (rEl, eventType, listenerFn) => {
      const el = rEl;
      const eventListenerMap = el.__jsaction_fns ?? /* @__PURE__ */ new Map();
      const eventListeners = eventListenerMap.get(eventType) ?? [];
      eventListeners.push(listenerFn);
      eventListenerMap.set(eventType, eventListeners);
      el.__jsaction_fns = eventListenerMap;
    };
    sharedMapFunction = (rEl, jsActionMap) => {
      const el = rEl;
      let blockName = el.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE) ?? "";
      const blockSet = jsActionMap.get(blockName) ?? /* @__PURE__ */ new Set();
      if (!blockSet.has(el)) {
        blockSet.add(el);
      }
      jsActionMap.set(blockName, blockSet);
    };
    removeListeners = (el) => {
      el.removeAttribute(Attribute.JSACTION);
      el.removeAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);
      el.__jsaction_fns = void 0;
    };
    JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? "EVENT_CONTRACT_DETAILS" : "", {
      providedIn: "root",
      factory: () => ({})
    });
    stashEventListeners = /* @__PURE__ */ new Map();
    isStashEventListenerImplEnabled = false;
    _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {
    };
    DEHYDRATED_BLOCK_REGISTRY = new InjectionToken(ngDevMode ? "DEHYDRATED_BLOCK_REGISTRY" : "");
    DehydratedBlockRegistry = class _DehydratedBlockRegistry {
      registry = /* @__PURE__ */ new Map();
      cleanupFns = /* @__PURE__ */ new Map();
      jsActionMap = inject2(JSACTION_BLOCK_ELEMENT_MAP);
      contract = inject2(JSACTION_EVENT_CONTRACT);
      add(blockId, info) {
        this.registry.set(blockId, info);
        if (this.awaitingCallbacks.has(blockId)) {
          const awaitingCallbacks = this.awaitingCallbacks.get(blockId);
          for (const cb of awaitingCallbacks) {
            cb();
          }
        }
      }
      get(blockId) {
        return this.registry.get(blockId) ?? null;
      }
      has(blockId) {
        return this.registry.has(blockId);
      }
      cleanup(hydratedBlocks) {
        removeListenersFromBlocks(hydratedBlocks, this.jsActionMap);
        for (let blockId of hydratedBlocks) {
          this.registry.delete(blockId);
          this.jsActionMap.delete(blockId);
          this.invokeTriggerCleanupFns(blockId);
          this.hydrating.delete(blockId);
          this.awaitingCallbacks.delete(blockId);
        }
        if (this.size === 0) {
          this.contract.instance?.cleanUp();
        }
      }
      get size() {
        return this.registry.size;
      }
      // we have to leave the lowest block Id in the registry
      // unless that block has no children
      addCleanupFn(blockId, fn2) {
        let cleanupFunctions = [];
        if (this.cleanupFns.has(blockId)) {
          cleanupFunctions = this.cleanupFns.get(blockId);
        }
        cleanupFunctions.push(fn2);
        this.cleanupFns.set(blockId, cleanupFunctions);
      }
      invokeTriggerCleanupFns(blockId) {
        const fns = this.cleanupFns.get(blockId) ?? [];
        for (let fn2 of fns) {
          fn2();
        }
        this.cleanupFns.delete(blockId);
      }
      // Blocks that are being hydrated.
      hydrating = /* @__PURE__ */ new Map();
      // Blocks that are awaiting a defer instruction finish.
      awaitingCallbacks = /* @__PURE__ */ new Map();
      awaitParentBlock(topmostParentBlock, callback) {
        const parentBlockAwaitCallbacks = this.awaitingCallbacks.get(topmostParentBlock) ?? [];
        parentBlockAwaitCallbacks.push(callback);
        this.awaitingCallbacks.set(topmostParentBlock, parentBlockAwaitCallbacks);
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _DehydratedBlockRegistry,
          providedIn: null,
          factory: () => new _DehydratedBlockRegistry()
        })
      );
    };
    TRANSFER_STATE_TOKEN_ID = "__nghData__";
    NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);
    TRANSFER_STATE_DEFER_BLOCKS_INFO = "__nghDeferData__";
    NGH_DEFER_BLOCKS_KEY = makeStateKey(TRANSFER_STATE_DEFER_BLOCKS_INFO);
    NGH_ATTR_NAME = "ngh";
    SSR_CONTENT_INTEGRITY_MARKER = "nghm";
    _retrieveHydrationInfoImpl = () => null;
    (function(HydrationStatus2) {
      HydrationStatus2["Hydrated"] = "hydrated";
      HydrationStatus2["Skipped"] = "skipped";
      HydrationStatus2["Mismatched"] = "mismatched";
    })(HydrationStatus || (HydrationStatus = {}));
    HYDRATION_INFO_KEY = "__ngDebugHydrationInfo__";
    _retrieveDeferBlockDataImpl = () => {
      return {};
    };
    (function(ViewEncapsulation4) {
      ViewEncapsulation4[ViewEncapsulation4["Emulated"] = 0] = "Emulated";
      ViewEncapsulation4[ViewEncapsulation4["None"] = 2] = "None";
      ViewEncapsulation4[ViewEncapsulation4["ShadowDom"] = 3] = "ShadowDom";
    })(ViewEncapsulation || (ViewEncapsulation = {}));
    SafeValueImpl = class {
      changingThisBreaksApplicationSecurity;
      constructor(changingThisBreaksApplicationSecurity) {
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
      }
      toString() {
        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${XSS_SECURITY_URL})`;
      }
    };
    SafeHtmlImpl = class extends SafeValueImpl {
      getTypeName() {
        return "HTML";
      }
    };
    SafeStyleImpl = class extends SafeValueImpl {
      getTypeName() {
        return "Style";
      }
    };
    SafeScriptImpl = class extends SafeValueImpl {
      getTypeName() {
        return "Script";
      }
    };
    SafeUrlImpl = class extends SafeValueImpl {
      getTypeName() {
        return "URL";
      }
    };
    SafeResourceUrlImpl = class extends SafeValueImpl {
      getTypeName() {
        return "ResourceURL";
      }
    };
    DOMParserHelper = class {
      inertDocumentHelper;
      constructor(inertDocumentHelper) {
        this.inertDocumentHelper = inertDocumentHelper;
      }
      getInertBodyElement(html) {
        html = "<body><remove></remove>" + html;
        try {
          const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), "text/html").body;
          if (body === null) {
            return this.inertDocumentHelper.getInertBodyElement(html);
          }
          body.firstChild?.remove();
          return body;
        } catch {
          return null;
        }
      }
    };
    InertDocumentHelper = class {
      defaultDoc;
      inertDocument;
      constructor(defaultDoc) {
        this.defaultDoc = defaultDoc;
        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument("sanitization-inert");
      }
      getInertBodyElement(html) {
        const templateEl = this.inertDocument.createElement("template");
        templateEl.innerHTML = trustedHTMLFromString(html);
        return templateEl;
      }
    };
    SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
    VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
    OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
    OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
    OPTIONAL_END_TAG_ELEMENTS = merge2(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
    BLOCK_ELEMENTS = merge2(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
    INLINE_ELEMENTS = merge2(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
    VALID_ELEMENTS = merge2(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
    URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
    HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width");
    ARIA_ATTRS = tagSet("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext");
    VALID_ATTRS = merge2(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);
    SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet("script,style,template");
    SanitizingHtmlSerializer = class {
      // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
      // because characters were re-encoded.
      sanitizedSomething = false;
      buf = [];
      sanitizeChildren(el) {
        let current = el.firstChild;
        let traverseContent = true;
        let parentNodes = [];
        while (current) {
          if (current.nodeType === Node.ELEMENT_NODE) {
            traverseContent = this.startElement(current);
          } else if (current.nodeType === Node.TEXT_NODE) {
            this.chars(current.nodeValue);
          } else {
            this.sanitizedSomething = true;
          }
          if (traverseContent && current.firstChild) {
            parentNodes.push(current);
            current = getFirstChild(current);
            continue;
          }
          while (current) {
            if (current.nodeType === Node.ELEMENT_NODE) {
              this.endElement(current);
            }
            let next = getNextSibling(current);
            if (next) {
              current = next;
              break;
            }
            current = parentNodes.pop();
          }
        }
        return this.buf.join("");
      }
      /**
       * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
       * be traversed. Element content must always be traversed (even if the element itself is not
       * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
       *
       * @param element The element to sanitize.
       * @return True if the element's contents should be traversed.
       */
      startElement(element2) {
        const tagName = getNodeName(element2).toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
          this.sanitizedSomething = true;
          return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
        }
        this.buf.push("<");
        this.buf.push(tagName);
        const elAttrs = element2.attributes;
        for (let i = 0; i < elAttrs.length; i++) {
          const elAttr = elAttrs.item(i);
          const attrName = elAttr.name;
          const lower = attrName.toLowerCase();
          if (!VALID_ATTRS.hasOwnProperty(lower)) {
            this.sanitizedSomething = true;
            continue;
          }
          let value = elAttr.value;
          if (URI_ATTRS[lower])
            value = _sanitizeUrl(value);
          this.buf.push(" ", attrName, '="', encodeEntities(value), '"');
        }
        this.buf.push(">");
        return true;
      }
      endElement(current) {
        const tagName = getNodeName(current).toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
          this.buf.push("</");
          this.buf.push(tagName);
          this.buf.push(">");
        }
      }
      chars(chars) {
        this.buf.push(encodeEntities(chars));
      }
    };
    SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    (function(SecurityContext3) {
      SecurityContext3[SecurityContext3["NONE"] = 0] = "NONE";
      SecurityContext3[SecurityContext3["HTML"] = 1] = "HTML";
      SecurityContext3[SecurityContext3["STYLE"] = 2] = "STYLE";
      SecurityContext3[SecurityContext3["SCRIPT"] = 3] = "SCRIPT";
      SecurityContext3[SecurityContext3["URL"] = 4] = "URL";
      SecurityContext3[SecurityContext3["RESOURCE_URL"] = 5] = "RESOURCE_URL";
    })(SecurityContext || (SecurityContext = {}));
    COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
    COMMENT_DELIMITER = /(<|>)/g;
    COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
    NG_REFLECT_ATTRS_FLAG_DEFAULT = false;
    NG_REFLECT_ATTRS_FLAG = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "NG_REFLECT_FLAG" : "", {
      providedIn: "root",
      factory: () => NG_REFLECT_ATTRS_FLAG_DEFAULT
    });
    CAMEL_CASE_REGEXP = /([A-Z])/g;
    CUSTOM_ELEMENTS_SCHEMA = {
      name: "custom-elements"
    };
    NO_ERRORS_SCHEMA = {
      name: "no-errors-schema"
    };
    shouldThrowErrorOnUnknownElement = false;
    shouldThrowErrorOnUnknownProperty = false;
    KNOWN_CONTROL_FLOW_DIRECTIVES = /* @__PURE__ */ new Map([
      ["ngIf", "NgIf"],
      ["ngFor", "NgFor"],
      ["ngSwitchCase", "NgSwitchCase"],
      ["ngSwitchDefault", "NgSwitchDefault"]
    ]);
    INTERPOLATION_DELIMITER = `\uFFFD`;
    VALUE_STRING_LENGTH_LIMIT = 200;
    NG_TEMPLATE_SELECTOR = "ng-template";
    NO_CHANGE = typeof ngDevMode === "undefined" || ngDevMode ? { __brand__: "NO_CHANGE" } : {};
    (function(InputFlags3) {
      InputFlags3[InputFlags3["None"] = 0] = "None";
      InputFlags3[InputFlags3["SignalBased"] = 1] = "SignalBased";
      InputFlags3[InputFlags3["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
    })(InputFlags || (InputFlags = {}));
    (function(RendererStyleFlags22) {
      RendererStyleFlags22[RendererStyleFlags22["Important"] = 1] = "Important";
      RendererStyleFlags22[RendererStyleFlags22["DashCase"] = 2] = "DashCase";
    })(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
    _applyRootElementTransformImpl = () => null;
    USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT = false;
    UseExhaustiveCheckNoChanges = new InjectionToken(ngDevMode ? "exhaustive checkNoChanges" : "");
    freeConsumers = [];
    REACTIVE_LVIEW_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
      consumerIsAlwaysLive: true,
      kind: "template",
      consumerMarkedDirty: (node) => {
        markAncestorsForTraversal(node.lView);
      },
      consumerOnSignalRead() {
        this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
      }
    });
    TEMPORARY_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
      consumerIsAlwaysLive: true,
      kind: "template",
      consumerMarkedDirty: (node) => {
        let parent = getLViewParent(node.lView);
        while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {
          parent = getLViewParent(parent);
        }
        if (!parent) {
          return;
        }
        markViewForRefresh(parent);
      },
      consumerOnSignalRead() {
        this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
      }
    });
    MAXIMUM_REFRESH_RERUNS$1 = 100;
    ViewRef = class {
      _lView;
      _cdRefInjectingView;
      _appRef = null;
      _attachedToViewContainer = false;
      exhaustive;
      get rootNodes() {
        const lView = this._lView;
        const tView = lView[TVIEW];
        return collectNativeNodes(tView, lView, tView.firstChild, []);
      }
      constructor(_lView, _cdRefInjectingView) {
        this._lView = _lView;
        this._cdRefInjectingView = _cdRefInjectingView;
      }
      get context() {
        return this._lView[CONTEXT];
      }
      /**
       * @deprecated Replacing the full context object is not supported. Modify the context
       *   directly, or consider using a `Proxy` if you need to replace the full object.
       * // TODO(devversion): Remove this.
       */
      set context(value) {
        if (ngDevMode) {
          console.warn("Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.");
        }
        this._lView[CONTEXT] = value;
      }
      get destroyed() {
        return isDestroyed(this._lView);
      }
      destroy() {
        if (this._appRef) {
          this._appRef.detachView(this);
        } else if (this._attachedToViewContainer) {
          const parent = this._lView[PARENT];
          if (isLContainer(parent)) {
            const viewRefs = parent[VIEW_REFS];
            const index = viewRefs ? viewRefs.indexOf(this) : -1;
            if (index > -1) {
              ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, "An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.");
              detachView(parent, index);
              removeFromArray(viewRefs, index);
            }
          }
          this._attachedToViewContainer = false;
        }
        destroyLView(this._lView[TVIEW], this._lView);
      }
      onDestroy(callback) {
        storeLViewOnDestroy(this._lView, callback);
      }
      /**
       * Marks a view and all of its ancestors dirty.
       *
       * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is
       * checked when it needs to be re-rendered but the two normal triggers haven't marked it
       * dirty (i.e. inputs haven't changed and events haven't fired in the view).
       *
       * <!-- TODO: Add a link to a chapter on OnPush components -->
       *
       * @usageNotes
       * ### Example
       *
       * ```ts
       * @Component({
       *   selector: 'app-root',
       *   template: `Number of ticks: {{numberOfTicks}}`
       *   changeDetection: ChangeDetectionStrategy.OnPush,
       * })
       * class AppComponent {
       *   numberOfTicks = 0;
       *
       *   constructor(private ref: ChangeDetectorRef) {
       *     setInterval(() => {
       *       this.numberOfTicks++;
       *       // the following is required, otherwise the view will not be updated
       *       this.ref.markForCheck();
       *     }, 1000);
       *   }
       * }
       * ```
       */
      markForCheck() {
        markViewDirty(
          this._cdRefInjectingView || this._lView,
          4
          /* NotificationSource.MarkForCheck */
        );
      }
      /**
       * Detaches the view from the change detection tree.
       *
       * Detached views will not be checked during change detection runs until they are
       * re-attached, even if they are dirty. `detach` can be used in combination with
       * {@link ChangeDetectorRef#detectChanges} to implement local change
       * detection checks.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example defines a component with a large list of readonly data.
       * Imagine the data changes constantly, many times per second. For performance reasons,
       * we want to check and update the list every five seconds. We can do that by detaching
       * the component's change detector and doing a local check every five seconds.
       *
       * ```ts
       * class DataProvider {
       *   // in a real application the returned data will be different every time
       *   get data() {
       *     return [1,2,3,4,5];
       *   }
       * }
       *
       * @Component({
       *   selector: 'giant-list',
       *   template: `
       *     @for(d of dataProvider.data; track $index) {
       *        <li>Data {{d}}</li>
       *     }
       *   `,
       * })
       * class GiantList {
       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
       *     ref.detach();
       *     setInterval(() => {
       *       this.ref.detectChanges();
       *     }, 5000);
       *   }
       * }
       *
       * @Component({
       *   selector: 'app',
       *   providers: [DataProvider],
       *   template: `
       *     <giant-list><giant-list>
       *   `,
       * })
       * class App {
       * }
       * ```
       */
      detach() {
        this._lView[FLAGS] &= ~128;
      }
      /**
       * Re-attaches a view to the change detection tree.
       *
       * This can be used to re-attach views that were previously detached from the tree
       * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example creates a component displaying `live` data. The component will detach
       * its change detector from the main change detector tree when the component's live property
       * is set to false.
       *
       * ```ts
       * class DataProvider {
       *   data = 1;
       *
       *   constructor() {
       *     setInterval(() => {
       *       this.data = this.data * 2;
       *     }, 500);
       *   }
       * }
       *
       * @Component({
       *   selector: 'live-data',
       *   inputs: ['live'],
       *   template: 'Data: {{dataProvider.data}}'
       * })
       * class LiveData {
       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
       *
       *   set live(value) {
       *     if (value) {
       *       this.ref.reattach();
       *     } else {
       *       this.ref.detach();
       *     }
       *   }
       * }
       *
       * @Component({
       *   selector: 'app-root',
       *   providers: [DataProvider],
       *   template: `
       *     Live Update: <input type="checkbox" [(ngModel)]="live">
       *     <live-data [live]="live"><live-data>
       *   `,
       * })
       * class AppComponent {
       *   live = true;
       * }
       * ```
       */
      reattach() {
        updateAncestorTraversalFlagsOnAttach(this._lView);
        this._lView[FLAGS] |= 128;
      }
      /**
       * Checks the view and its children.
       *
       * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement
       * local change detection checks.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example defines a component with a large list of readonly data.
       * Imagine, the data changes constantly, many times per second. For performance reasons,
       * we want to check and update the list every five seconds.
       *
       * We can do that by detaching the component's change detector and doing a local change detection
       * check every five seconds.
       *
       * See {@link ChangeDetectorRef#detach} for more information.
       */
      detectChanges() {
        this._lView[FLAGS] |= 1024;
        detectChangesInternal(this._lView);
      }
      /**
       * Checks the change detector and its children, and throws if any changes are detected.
       *
       * This is used in development mode to verify that running change detection doesn't
       * introduce other changes.
       */
      checkNoChanges() {
        if (!ngDevMode)
          return;
        try {
          this.exhaustive ??= this._lView[INJECTOR].get(UseExhaustiveCheckNoChanges, USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT);
        } catch {
          this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;
        }
        checkNoChangesInternal(this._lView, this.exhaustive);
      }
      attachToViewContainerRef() {
        if (this._appRef) {
          throw new RuntimeError(902, ngDevMode && "This view is already attached directly to the ApplicationRef!");
        }
        this._attachedToViewContainer = true;
      }
      detachFromAppRef() {
        this._appRef = null;
        const isRoot = isRootView(this._lView);
        const declarationContainer = this._lView[DECLARATION_LCONTAINER];
        if (declarationContainer !== null && !isRoot) {
          detachMovedView(declarationContainer, this._lView);
        }
        detachViewFromDOM(this._lView[TVIEW], this._lView);
      }
      attachToAppRef(appRef) {
        if (this._attachedToViewContainer) {
          throw new RuntimeError(902, ngDevMode && "This view is already attached to a ViewContainer!");
        }
        this._appRef = appRef;
        const isRoot = isRootView(this._lView);
        const declarationContainer = this._lView[DECLARATION_LCONTAINER];
        if (declarationContainer !== null && !isRoot) {
          trackMovedView(declarationContainer, this._lView);
        }
        updateAncestorTraversalFlagsOnAttach(this._lView);
      }
    };
    TemplateRef = class {
      _declarationLView;
      _declarationTContainer;
      /**
       * The anchor element in the parent view for this embedded view.
       *
       * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded
       * views created from this `TemplateRef` inherit from the contexts of this location.
       *
       * Typically new embedded views are attached to the view container of this location, but in
       * advanced use-cases, the view can be attached to a different container while keeping the
       * data-binding and injection context from the original location.
       *
       */
      elementRef;
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectTemplateRef;
      /** @internal */
      constructor(_declarationLView, _declarationTContainer, elementRef) {
        this._declarationLView = _declarationLView;
        this._declarationTContainer = _declarationTContainer;
        this.elementRef = elementRef;
      }
      /**
       * Returns an `ssrId` associated with a TView, which was used to
       * create this instance of the `TemplateRef`.
       *
       * @internal
       */
      get ssrId() {
        return this._declarationTContainer.tView?.ssrId || null;
      }
      /**
       * Instantiates an unattached embedded view based on this template.
       * @param context The data-binding context of the embedded view, as declared
       * in the `<ng-template>` usage.
       * @param injector Injector to be used within the embedded view.
       * @returns The new embedded view object.
       */
      createEmbeddedView(context2, injector) {
        return this.createEmbeddedViewImpl(context2, injector);
      }
      /**
       * Implementation of the `createEmbeddedView` function.
       *
       * This implementation is internal and allows framework code
       * to invoke it with extra parameters (e.g. for hydration) without
       * affecting public API.
       *
       * @internal
       */
      createEmbeddedViewImpl(context2, injector, dehydratedView) {
        const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context2, { embeddedViewInjector: injector, dehydratedView });
        return new ViewRef(embeddedLView);
      }
    };
    AT_THIS_LOCATION = "<-- AT THIS LOCATION";
    internalAttrs = /* @__PURE__ */ new Set(["ngh", "ng-version", "ng-server-context"]);
    REF_EXTRACTOR_REGEXP = /* @__PURE__ */ new RegExp(`^(\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);
    _isI18nHydrationSupportEnabled = false;
    _prepareI18nBlockForHydrationImpl = () => {
    };
    _claimDehydratedIcuCaseImpl = () => {
    };
    _findMatchingDehydratedViewImpl = () => null;
    _findAndReconcileMatchingDehydratedViewsImpl = () => null;
    ComponentRef$1 = class ComponentRef {
    };
    ComponentFactory$1 = class ComponentFactory {
    };
    _NullComponentFactoryResolver = class {
      resolveComponentFactory(component) {
        throw new RuntimeError(917, typeof ngDevMode !== "undefined" && ngDevMode && `No component factory found for ${stringify(component)}.`);
      }
    };
    ComponentFactoryResolver$1 = class ComponentFactoryResolver {
      static NULL = new _NullComponentFactoryResolver();
    };
    RendererFactory2 = class {
    };
    Renderer2 = class {
      /**
       * If null or undefined, the view engine won't call it.
       * This is used as a performance optimization for production mode.
       */
      destroyNode = null;
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = () => injectRenderer2();
    };
    Sanitizer = class _Sanitizer {
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _Sanitizer,
          providedIn: "root",
          factory: () => null
        })
      );
    };
    DepsTracker = class {
      ownerNgModule = /* @__PURE__ */ new Map();
      ngModulesWithSomeUnresolvedDecls = /* @__PURE__ */ new Set();
      ngModulesScopeCache = /* @__PURE__ */ new Map();
      standaloneComponentsScopeCache = /* @__PURE__ */ new Map();
      /**
       * Attempts to resolve ng module's forward ref declarations as much as possible and add them to
       * the `ownerNgModule` map. This method normally should be called after the initial parsing when
       * all the forward refs are resolved (e.g., when trying to render a component)
       */
      resolveNgModulesDecls() {
        if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {
          return;
        }
        for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {
          const def = getNgModuleDef(moduleType);
          if (def?.declarations) {
            for (const decl of maybeUnwrapFn(def.declarations)) {
              if (isComponent(decl)) {
                this.ownerNgModule.set(decl, moduleType);
              }
            }
          }
        }
        this.ngModulesWithSomeUnresolvedDecls.clear();
      }
      /** @override */
      getComponentDependencies(type, rawImports) {
        this.resolveNgModulesDecls();
        const def = getComponentDef(type);
        if (def === null) {
          throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);
        }
        if (def.standalone) {
          const scope = this.getStandaloneComponentScope(type, rawImports);
          if (scope.compilation.isPoisoned) {
            return { dependencies: [] };
          }
          return {
            dependencies: [
              ...scope.compilation.directives,
              ...scope.compilation.pipes,
              ...scope.compilation.ngModules
            ]
          };
        } else {
          if (!this.ownerNgModule.has(type)) {
            return { dependencies: [] };
          }
          const scope = this.getNgModuleScope(this.ownerNgModule.get(type));
          if (scope.compilation.isPoisoned) {
            return { dependencies: [] };
          }
          return {
            dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]
          };
        }
      }
      /**
       * @override
       * This implementation does not make use of param scopeInfo since it assumes the scope info is
       * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}
       */
      registerNgModule(type, scopeInfo) {
        if (!isNgModule(type)) {
          throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);
        }
        this.ngModulesWithSomeUnresolvedDecls.add(type);
      }
      /** @override */
      clearScopeCacheFor(type) {
        this.ngModulesScopeCache.delete(type);
        this.standaloneComponentsScopeCache.delete(type);
      }
      /** @override */
      getNgModuleScope(type) {
        if (this.ngModulesScopeCache.has(type)) {
          return this.ngModulesScopeCache.get(type);
        }
        const scope = this.computeNgModuleScope(type);
        this.ngModulesScopeCache.set(type, scope);
        return scope;
      }
      /** Compute NgModule scope afresh. */
      computeNgModuleScope(type) {
        const def = getNgModuleDefOrThrow(type);
        const scope = {
          exported: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() },
          compilation: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() }
        };
        for (const imported of maybeUnwrapFn(def.imports)) {
          if (isNgModule(imported)) {
            const importedScope = this.getNgModuleScope(imported);
            addSet(importedScope.exported.directives, scope.compilation.directives);
            addSet(importedScope.exported.pipes, scope.compilation.pipes);
          } else if (isStandalone(imported)) {
            if (isDirective(imported) || isComponent(imported)) {
              scope.compilation.directives.add(imported);
            } else if (isPipe(imported)) {
              scope.compilation.pipes.add(imported);
            } else {
              throw new RuntimeError(980, "The standalone imported type is neither a component nor a directive nor a pipe");
            }
          } else {
            scope.compilation.isPoisoned = true;
            break;
          }
        }
        if (!scope.compilation.isPoisoned) {
          for (const decl of maybeUnwrapFn(def.declarations)) {
            if (isNgModule(decl) || isStandalone(decl)) {
              scope.compilation.isPoisoned = true;
              break;
            }
            if (isPipe(decl)) {
              scope.compilation.pipes.add(decl);
            } else {
              scope.compilation.directives.add(decl);
            }
          }
        }
        for (const exported of maybeUnwrapFn(def.exports)) {
          if (isNgModule(exported)) {
            const exportedScope = this.getNgModuleScope(exported);
            addSet(exportedScope.exported.directives, scope.exported.directives);
            addSet(exportedScope.exported.pipes, scope.exported.pipes);
            addSet(exportedScope.exported.directives, scope.compilation.directives);
            addSet(exportedScope.exported.pipes, scope.compilation.pipes);
          } else if (isPipe(exported)) {
            scope.exported.pipes.add(exported);
          } else {
            scope.exported.directives.add(exported);
          }
        }
        return scope;
      }
      /** @override */
      getStandaloneComponentScope(type, rawImports) {
        if (this.standaloneComponentsScopeCache.has(type)) {
          return this.standaloneComponentsScopeCache.get(type);
        }
        const ans = this.computeStandaloneComponentScope(type, rawImports);
        this.standaloneComponentsScopeCache.set(type, ans);
        return ans;
      }
      computeStandaloneComponentScope(type, rawImports) {
        const ans = {
          compilation: {
            // Standalone components are always able to self-reference.
            directives: /* @__PURE__ */ new Set([type]),
            pipes: /* @__PURE__ */ new Set(),
            ngModules: /* @__PURE__ */ new Set()
          }
        };
        for (const rawImport of flatten(rawImports ?? [])) {
          const imported = resolveForwardRef(rawImport);
          try {
            verifyStandaloneImport(imported, type);
          } catch (e) {
            ans.compilation.isPoisoned = true;
            return ans;
          }
          if (isNgModule(imported)) {
            ans.compilation.ngModules.add(imported);
            const importedScope = this.getNgModuleScope(imported);
            if (importedScope.exported.isPoisoned) {
              ans.compilation.isPoisoned = true;
              return ans;
            }
            addSet(importedScope.exported.directives, ans.compilation.directives);
            addSet(importedScope.exported.pipes, ans.compilation.pipes);
          } else if (isPipe(imported)) {
            ans.compilation.pipes.add(imported);
          } else if (isDirective(imported) || isComponent(imported)) {
            ans.compilation.directives.add(imported);
          } else {
            ans.compilation.isPoisoned = true;
            return ans;
          }
        }
        return ans;
      }
      /** @override */
      isOrphanComponent(cmp) {
        const def = getComponentDef(cmp);
        if (!def || def.standalone) {
          return false;
        }
        this.resolveNgModulesDecls();
        return !this.ownerNgModule.has(cmp);
      }
    };
    depsTracker = new DepsTracker();
    NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
    ChainedInjector = class {
      injector;
      parentInjector;
      constructor(injector, parentInjector) {
        this.injector = injector;
        this.parentInjector = parentInjector;
      }
      get(token, notFoundValue, options) {
        const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, options);
        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
          return value;
        }
        return this.parentInjector.get(token, notFoundValue, options);
      }
    };
    BINDING = /* @__PURE__ */ Symbol("BINDING");
    INPUT_BINDING_METADATA = { kind: "input", requiredVars: 1 };
    OUTPUT_BINDING_METADATA = { kind: "output", requiredVars: 0 };
    ComponentFactoryResolver2 = class extends ComponentFactoryResolver$1 {
      ngModule;
      /**
       * @param ngModule The NgModuleRef to which all resolved factories are bound.
       */
      constructor(ngModule) {
        super();
        this.ngModule = ngModule;
      }
      resolveComponentFactory(component) {
        ngDevMode && assertComponentType(component);
        const componentDef = getComponentDef(component);
        return new ComponentFactory2(componentDef, this.ngModule);
      }
    };
    ComponentFactory2 = class extends ComponentFactory$1 {
      componentDef;
      ngModule;
      selector;
      componentType;
      ngContentSelectors;
      isBoundToModule;
      cachedInputs = null;
      cachedOutputs = null;
      get inputs() {
        this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);
        return this.cachedInputs;
      }
      get outputs() {
        this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);
        return this.cachedOutputs;
      }
      /**
       * @param componentDef The component definition.
       * @param ngModule The NgModuleRef to which the factory is bound.
       */
      constructor(componentDef, ngModule) {
        super();
        this.componentDef = componentDef;
        this.ngModule = ngModule;
        this.componentType = componentDef.type;
        this.selector = stringifyCSSSelectorList(componentDef.selectors);
        this.ngContentSelectors = componentDef.ngContentSelectors ?? [];
        this.isBoundToModule = !!ngModule;
      }
      create(injector, projectableNodes, rootSelectorOrNode, environmentInjector, directives, componentBindings) {
        profiler(
          22
          /* ProfilerEvent.DynamicComponentStart */
        );
        const prevConsumer = setActiveConsumer(null);
        try {
          const cmpDef = this.componentDef;
          ngDevMode && verifyNotAnOrphanComponent(cmpDef);
          const rootTView = createRootTView(rootSelectorOrNode, cmpDef, componentBindings, directives);
          const rootViewInjector = createRootViewInjector(cmpDef, environmentInjector || this.ngModule, injector);
          const environment = createRootLViewEnvironment(rootViewInjector);
          const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);
          const hostElement = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, cmpDef.encapsulation, rootViewInjector) : createHostElement(cmpDef, hostRenderer);
          const hasInputBindings = componentBindings?.some(isInputBinding) || directives?.some((d) => typeof d !== "function" && d.bindings.some(isInputBinding));
          const rootLView = createLView(null, rootTView, null, 512 | getInitialLViewFlagsFromDef(cmpDef), null, null, environment, hostRenderer, rootViewInjector, null, retrieveHydrationInfo(
            hostElement,
            rootViewInjector,
            true
            /* isRootView */
          ));
          rootLView[HEADER_OFFSET] = hostElement;
          enterView(rootLView);
          let componentView = null;
          try {
            const hostTNode = directiveHostFirstCreatePass(HEADER_OFFSET, rootLView, 2, "#host", () => rootTView.directiveRegistry, true, 0);
            if (hostElement) {
              setupStaticAttributes(hostRenderer, hostElement, hostTNode);
              attachPatchData(hostElement, rootLView);
            }
            createDirectivesInstances(rootTView, rootLView, hostTNode);
            executeContentQueries(rootTView, hostTNode, rootLView);
            directiveHostEndFirstCreatePass(rootTView, hostTNode);
            if (projectableNodes !== void 0) {
              projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);
            }
            componentView = getComponentLViewByIndex(hostTNode.index, rootLView);
            rootLView[CONTEXT] = componentView[CONTEXT];
            renderView(rootTView, rootLView, null);
          } catch (e) {
            if (componentView !== null) {
              unregisterLView(componentView);
            }
            unregisterLView(rootLView);
            throw e;
          } finally {
            profiler(
              23
              /* ProfilerEvent.DynamicComponentEnd */
            );
            leaveView();
          }
          return new ComponentRef2(this.componentType, rootLView, !!hasInputBindings);
        } finally {
          setActiveConsumer(prevConsumer);
        }
      }
    };
    ComponentRef2 = class extends ComponentRef$1 {
      _rootLView;
      _hasInputBindings;
      instance;
      hostView;
      changeDetectorRef;
      componentType;
      location;
      previousInputValues = null;
      _tNode;
      constructor(componentType, _rootLView, _hasInputBindings) {
        super();
        this._rootLView = _rootLView;
        this._hasInputBindings = _hasInputBindings;
        this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET);
        this.location = createElementRef(this._tNode, _rootLView);
        this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT];
        this.hostView = this.changeDetectorRef = new ViewRef(
          _rootLView,
          void 0
          /* _cdRefInjectingView */
        );
        this.componentType = componentType;
      }
      setInput(name, value) {
        if (this._hasInputBindings && ngDevMode) {
          throw new RuntimeError(317, "Cannot call `setInput` on a component that is using the `inputBinding` or `twoWayBinding` functions.");
        }
        const tNode = this._tNode;
        this.previousInputValues ??= /* @__PURE__ */ new Map();
        if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {
          return;
        }
        const lView = this._rootLView;
        const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);
        this.previousInputValues.set(name, value);
        const childComponentLView = getComponentLViewByIndex(tNode.index, lView);
        markViewDirty(
          childComponentLView,
          1
          /* NotificationSource.SetInput */
        );
        if (ngDevMode && !hasSetInput) {
          const cmpNameForError = stringifyForError(this.componentType);
          let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;
          message += `Make sure that the '${name}' property is declared as an input using the @Input() decorator or the input() function.`;
          reportUnknownPropertyError(message);
        }
      }
      get injector() {
        return new NodeInjector(this._tNode, this._rootLView);
      }
      destroy() {
        this.hostView.destroy();
      }
      onDestroy(callback) {
        this.hostView.onDestroy(callback);
      }
    };
    ViewContainerRef = class {
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectViewContainerRef;
    };
    VE_ViewContainerRef = ViewContainerRef;
    R3ViewContainerRef = class ViewContainerRef2 extends VE_ViewContainerRef {
      _lContainer;
      _hostTNode;
      _hostLView;
      constructor(_lContainer, _hostTNode, _hostLView) {
        super();
        this._lContainer = _lContainer;
        this._hostTNode = _hostTNode;
        this._hostLView = _hostLView;
      }
      get element() {
        return createElementRef(this._hostTNode, this._hostLView);
      }
      get injector() {
        return new NodeInjector(this._hostTNode, this._hostLView);
      }
      /** @deprecated No replacement */
      get parentInjector() {
        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
        if (hasParentInjector(parentLocation)) {
          const parentView = getParentInjectorView(parentLocation, this._hostLView);
          const injectorIndex = getParentInjectorIndex(parentLocation);
          ngDevMode && assertNodeInjector(parentView, injectorIndex);
          const parentTNode = parentView[TVIEW].data[
            injectorIndex + 8
            /* NodeInjectorOffset.TNODE */
          ];
          return new NodeInjector(parentTNode, parentView);
        } else {
          return new NodeInjector(null, this._hostLView);
        }
      }
      clear() {
        while (this.length > 0) {
          this.remove(this.length - 1);
        }
      }
      get(index) {
        const viewRefs = getViewRefs(this._lContainer);
        return viewRefs !== null && viewRefs[index] || null;
      }
      get length() {
        return this._lContainer.length - CONTAINER_HEADER_OFFSET;
      }
      createEmbeddedView(templateRef, context2, indexOrOptions) {
        let index;
        let injector;
        if (typeof indexOrOptions === "number") {
          index = indexOrOptions;
        } else if (indexOrOptions != null) {
          index = indexOrOptions.index;
          injector = indexOrOptions.injector;
        }
        const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);
        const viewRef = templateRef.createEmbeddedViewImpl(context2 || {}, injector, dehydratedView);
        this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
        return viewRef;
      }
      createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector, directives, bindings) {
        const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
        let index;
        if (isComponentFactory) {
          if (ngDevMode) {
            assertEqual(typeof indexOrOptions !== "object", true, "It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)");
          }
          index = indexOrOptions;
        } else {
          if (ngDevMode) {
            assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator.`);
            assertEqual(typeof indexOrOptions !== "number", true, "It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead.");
          }
          const options = indexOrOptions || {};
          if (ngDevMode && options.environmentInjector && options.ngModuleRef) {
            throwError2(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);
          }
          index = options.index;
          injector = options.injector;
          projectableNodes = options.projectableNodes;
          environmentInjector = options.environmentInjector || options.ngModuleRef;
          directives = options.directives;
          bindings = options.bindings;
        }
        const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory2(getComponentDef(componentFactoryOrType));
        const contextInjector = injector || this.parentInjector;
        if (!environmentInjector && componentFactory.ngModule == null) {
          const _injector = isComponentFactory ? contextInjector : this.parentInjector;
          const result = _injector.get(EnvironmentInjector, null);
          if (result) {
            environmentInjector = result;
          }
        }
        const componentDef = getComponentDef(componentFactory.componentType ?? {});
        const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);
        const rNode = dehydratedView?.firstChild ?? null;
        const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector, directives, bindings);
        this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
        return componentRef;
      }
      insert(viewRef, index) {
        return this.insertImpl(viewRef, index, true);
      }
      insertImpl(viewRef, index, addToDOM) {
        const lView = viewRef._lView;
        if (ngDevMode && viewRef.destroyed) {
          throw new Error("Cannot insert a destroyed View in a ViewContainer!");
        }
        if (viewAttachedToContainer(lView)) {
          const prevIdx = this.indexOf(viewRef);
          if (prevIdx !== -1) {
            this.detach(prevIdx);
          } else {
            const prevLContainer = lView[PARENT];
            ngDevMode && assertEqual(isLContainer(prevLContainer), true, "An attached view should have its PARENT point to a container.");
            const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
            prevVCRef.detach(prevVCRef.indexOf(viewRef));
          }
        }
        const adjustedIdx = this._adjustIndex(index);
        const lContainer = this._lContainer;
        addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);
        viewRef.attachToViewContainerRef();
        addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
        return viewRef;
      }
      move(viewRef, newIndex) {
        if (ngDevMode && viewRef.destroyed) {
          throw new Error("Cannot move a destroyed View in a ViewContainer!");
        }
        return this.insert(viewRef, newIndex);
      }
      indexOf(viewRef) {
        const viewRefsArr = getViewRefs(this._lContainer);
        return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
      }
      remove(index) {
        const adjustedIdx = this._adjustIndex(index, -1);
        const detachedView = detachView(this._lContainer, adjustedIdx);
        if (detachedView) {
          removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
          destroyLView(detachedView[TVIEW], detachedView);
        }
      }
      detach(index) {
        const adjustedIdx = this._adjustIndex(index, -1);
        const view = detachView(this._lContainer, adjustedIdx);
        const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
        return wasDetached ? new ViewRef(view) : null;
      }
      _adjustIndex(index, shift = 0) {
        if (index == null) {
          return this.length + shift;
        }
        if (ngDevMode) {
          assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
          assertLessThan(index, this.length + 1 + shift, "index");
        }
        return index;
      }
    };
    _locateOrCreateAnchorNode = createAnchorNode;
    _populateDehydratedViewsInLContainer = () => false;
    LQuery_ = class _LQuery_ {
      queryList;
      matches = null;
      constructor(queryList) {
        this.queryList = queryList;
      }
      clone() {
        return new _LQuery_(this.queryList);
      }
      setDirty() {
        this.queryList.setDirty();
      }
    };
    LQueries_ = class _LQueries_ {
      queries;
      constructor(queries = []) {
        this.queries = queries;
      }
      createEmbeddedView(tView) {
        const tQueries = tView.queries;
        if (tQueries !== null) {
          const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
          const viewLQueries = [];
          for (let i = 0; i < noOfInheritedQueries; i++) {
            const tQuery = tQueries.getByIndex(i);
            const parentLQuery = this.queries[tQuery.indexInDeclarationView];
            viewLQueries.push(parentLQuery.clone());
          }
          return new _LQueries_(viewLQueries);
        }
        return null;
      }
      insertView(tView) {
        this.dirtyQueriesWithMatches(tView);
      }
      detachView(tView) {
        this.dirtyQueriesWithMatches(tView);
      }
      finishViewCreation(tView) {
        this.dirtyQueriesWithMatches(tView);
      }
      dirtyQueriesWithMatches(tView) {
        for (let i = 0; i < this.queries.length; i++) {
          if (getTQuery(tView, i).matches !== null) {
            this.queries[i].setDirty();
          }
        }
      }
    };
    TQueryMetadata_ = class {
      flags;
      read;
      predicate;
      constructor(predicate, flags, read = null) {
        this.flags = flags;
        this.read = read;
        if (typeof predicate === "string") {
          this.predicate = splitQueryMultiSelectors(predicate);
        } else {
          this.predicate = predicate;
        }
      }
    };
    TQueries_ = class _TQueries_ {
      queries;
      constructor(queries = []) {
        this.queries = queries;
      }
      elementStart(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
        for (let i = 0; i < this.queries.length; i++) {
          this.queries[i].elementStart(tView, tNode);
        }
      }
      elementEnd(tNode) {
        for (let i = 0; i < this.queries.length; i++) {
          this.queries[i].elementEnd(tNode);
        }
      }
      embeddedTView(tNode) {
        let queriesForTemplateRef = null;
        for (let i = 0; i < this.length; i++) {
          const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
          const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
          if (tqueryClone) {
            tqueryClone.indexInDeclarationView = i;
            if (queriesForTemplateRef !== null) {
              queriesForTemplateRef.push(tqueryClone);
            } else {
              queriesForTemplateRef = [tqueryClone];
            }
          }
        }
        return queriesForTemplateRef !== null ? new _TQueries_(queriesForTemplateRef) : null;
      }
      template(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
        for (let i = 0; i < this.queries.length; i++) {
          this.queries[i].template(tView, tNode);
        }
      }
      getByIndex(index) {
        ngDevMode && assertIndexInRange(this.queries, index);
        return this.queries[index];
      }
      get length() {
        return this.queries.length;
      }
      track(tquery) {
        this.queries.push(tquery);
      }
    };
    TQuery_ = class _TQuery_ {
      metadata;
      matches = null;
      indexInDeclarationView = -1;
      crossesNgTemplate = false;
      /**
       * A node index on which a query was declared (-1 for view queries and ones inherited from the
       * declaration template). We use this index (alongside with _appliesToNextNode flag) to know
       * when to apply content queries to elements in a template.
       */
      _declarationNodeIndex;
      /**
       * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
       * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
       * elements in a template.
       */
      _appliesToNextNode = true;
      constructor(metadata, nodeIndex = -1) {
        this.metadata = metadata;
        this._declarationNodeIndex = nodeIndex;
      }
      elementStart(tView, tNode) {
        if (this.isApplyingToNode(tNode)) {
          this.matchTNode(tView, tNode);
        }
      }
      elementEnd(tNode) {
        if (this._declarationNodeIndex === tNode.index) {
          this._appliesToNextNode = false;
        }
      }
      template(tView, tNode) {
        this.elementStart(tView, tNode);
      }
      embeddedTView(tNode, childQueryIndex) {
        if (this.isApplyingToNode(tNode)) {
          this.crossesNgTemplate = true;
          this.addMatch(-tNode.index, childQueryIndex);
          return new _TQuery_(this.metadata);
        }
        return null;
      }
      isApplyingToNode(tNode) {
        if (this._appliesToNextNode && (this.metadata.flags & 1) !== 1) {
          const declarationNodeIdx = this._declarationNodeIndex;
          let parent = tNode.parent;
          while (parent !== null && parent.type & 8 && parent.index !== declarationNodeIdx) {
            parent = parent.parent;
          }
          return declarationNodeIdx === (parent !== null ? parent.index : -1);
        }
        return this._appliesToNextNode;
      }
      matchTNode(tView, tNode) {
        const predicate = this.metadata.predicate;
        if (Array.isArray(predicate)) {
          for (let i = 0; i < predicate.length; i++) {
            const name = predicate[i];
            this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
            this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
          }
        } else {
          if (predicate === TemplateRef) {
            if (tNode.type & 4) {
              this.matchTNodeWithReadOption(tView, tNode, -1);
            }
          } else {
            this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
          }
        }
      }
      matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
        if (nodeMatchIdx !== null) {
          const read = this.metadata.read;
          if (read !== null) {
            if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4) {
              this.addMatch(tNode.index, -2);
            } else {
              const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
              if (directiveOrProviderIdx !== null) {
                this.addMatch(tNode.index, directiveOrProviderIdx);
              }
            }
          } else {
            this.addMatch(tNode.index, nodeMatchIdx);
          }
        }
      }
      addMatch(tNodeIdx, matchIdx) {
        if (this.matches === null) {
          this.matches = [tNodeIdx, matchIdx];
        } else {
          this.matches.push(tNodeIdx, matchIdx);
        }
      }
    };
    componentResourceResolutionQueue = /* @__PURE__ */ new Map();
    componentDefPendingResolution = /* @__PURE__ */ new Set();
    modules = /* @__PURE__ */ new Map();
    checkForDuplicateNgModules = true;
    markedFeatures = /* @__PURE__ */ new Set();
    NgModuleRef$1 = class NgModuleRef {
    };
    NgModuleFactory$1 = class NgModuleFactory {
    };
    createNgModuleRef = createNgModule;
    NgModuleRef2 = class extends NgModuleRef$1 {
      ngModuleType;
      _parent;
      // tslint:disable-next-line:require-internal-with-underscore
      _bootstrapComponents = [];
      _r3Injector;
      instance;
      destroyCbs = [];
      // When bootstrapping a module we have a dependency graph that looks like this:
      // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
      // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
      // circular dependency which will result in a runtime error, because the injector doesn't
      // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
      // and providing it, rather than letting the injector resolve it.
      componentFactoryResolver = new ComponentFactoryResolver2(this);
      constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {
        super();
        this.ngModuleType = ngModuleType;
        this._parent = _parent;
        const ngModuleDef = getNgModuleDef(ngModuleType);
        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
        this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
        this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
          { provide: NgModuleRef$1, useValue: this },
          {
            provide: ComponentFactoryResolver$1,
            useValue: this.componentFactoryResolver
          },
          ...additionalProviders
        ], stringify(ngModuleType), /* @__PURE__ */ new Set(["environment"]));
        if (runInjectorInitializers) {
          this.resolveInjectorInitializers();
        }
      }
      resolveInjectorInitializers() {
        this._r3Injector.resolveInjectorInitializers();
        this.instance = this._r3Injector.get(this.ngModuleType);
      }
      get injector() {
        return this._r3Injector;
      }
      destroy() {
        ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
        const injector = this._r3Injector;
        !injector.destroyed && injector.destroy();
        this.destroyCbs.forEach((fn2) => fn2());
        this.destroyCbs = null;
      }
      onDestroy(callback) {
        ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
        this.destroyCbs.push(callback);
      }
    };
    NgModuleFactory2 = class extends NgModuleFactory$1 {
      moduleType;
      constructor(moduleType) {
        super();
        this.moduleType = moduleType;
      }
      create(parentInjector) {
        return new NgModuleRef2(this.moduleType, parentInjector, []);
      }
    };
    EnvironmentNgModuleRefAdapter = class extends NgModuleRef$1 {
      injector;
      componentFactoryResolver = new ComponentFactoryResolver2(this);
      instance = null;
      constructor(config2) {
        super();
        const injector = new R3Injector([
          ...config2.providers,
          { provide: NgModuleRef$1, useValue: this },
          { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver }
        ], config2.parent || getNullInjector(), config2.debugName, /* @__PURE__ */ new Set(["environment"]));
        this.injector = injector;
        if (config2.runEnvironmentInitializers) {
          injector.resolveInjectorInitializers();
        }
      }
      destroy() {
        this.injector.destroy();
      }
      onDestroy(callback) {
        this.injector.onDestroy(callback);
      }
    };
    StandaloneService = class _StandaloneService {
      _injector;
      cachedInjectors = /* @__PURE__ */ new Map();
      constructor(_injector) {
        this._injector = _injector;
      }
      getOrCreateStandaloneInjector(componentDef) {
        if (!componentDef.standalone) {
          return null;
        }
        if (!this.cachedInjectors.has(componentDef)) {
          const providers = internalImportProvidersFrom(false, componentDef.type);
          const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;
          this.cachedInjectors.set(componentDef, standaloneInjector);
        }
        return this.cachedInjectors.get(componentDef);
      }
      ngOnDestroy() {
        try {
          for (const injector of this.cachedInjectors.values()) {
            if (injector !== null) {
              injector.destroy();
            }
          }
        } finally {
          this.cachedInjectors.clear();
        }
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _StandaloneService,
          providedIn: "environment",
          factory: () => new _StandaloneService(\u0275\u0275inject(EnvironmentInjector))
        })
      );
    };
    GENERATED_COMP_IDS = /* @__PURE__ */ new Map();
    COPY_DIRECTIVE_FIELDS = [
      // The child class should use the providers of its parent.
      "providersResolver"
      // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
      // as inputs, outputs, and host binding functions.
    ];
    COPY_COMPONENT_FIELDS = [
      // The child class should use the template function of its parent, including all template
      // semantics.
      "template",
      "decls",
      "consts",
      "vars",
      "onPush",
      "ngContentSelectors",
      // The child class should use the CSS styles of its parent, including all styling semantics.
      "styles",
      "encapsulation",
      // The child class should be checked by the runtime in the same way as its parent.
      "schemas"
    ];
    _locateOrCreateContainerAnchor = createContainerAnchorImpl;
    (function(DeferDependenciesLoadingState2) {
      DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["NOT_STARTED"] = 0] = "NOT_STARTED";
      DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["IN_PROGRESS"] = 1] = "IN_PROGRESS";
      DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["COMPLETE"] = 2] = "COMPLETE";
      DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["FAILED"] = 3] = "FAILED";
    })(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
    MINIMUM_SLOT = 0;
    LOADING_AFTER_SLOT = 1;
    (function(DeferBlockState2) {
      DeferBlockState2[DeferBlockState2["Placeholder"] = 0] = "Placeholder";
      DeferBlockState2[DeferBlockState2["Loading"] = 1] = "Loading";
      DeferBlockState2[DeferBlockState2["Complete"] = 2] = "Complete";
      DeferBlockState2[DeferBlockState2["Error"] = 3] = "Error";
    })(DeferBlockState || (DeferBlockState = {}));
    (function(DeferBlockInternalState2) {
      DeferBlockInternalState2[DeferBlockInternalState2["Initial"] = -1] = "Initial";
    })(DeferBlockInternalState || (DeferBlockInternalState = {}));
    NEXT_DEFER_BLOCK_STATE = 0;
    DEFER_BLOCK_STATE = 1;
    STATE_IS_FROZEN_UNTIL = 2;
    LOADING_AFTER_CLEANUP_FN = 3;
    TRIGGER_CLEANUP_FNS = 4;
    PREFETCH_TRIGGER_CLEANUP_FNS = 5;
    SSR_UNIQUE_ID = 6;
    SSR_BLOCK_STATE = 7;
    ON_COMPLETE_FNS = 8;
    HYDRATE_TRIGGER_CLEANUP_FNS = 9;
    (function(DeferBlockBehavior2) {
      DeferBlockBehavior2[DeferBlockBehavior2["Manual"] = 0] = "Manual";
      DeferBlockBehavior2[DeferBlockBehavior2["Playthrough"] = 1] = "Playthrough";
    })(DeferBlockBehavior || (DeferBlockBehavior = {}));
    (function(TracingAction2) {
      TracingAction2[TracingAction2["CHANGE_DETECTION"] = 0] = "CHANGE_DETECTION";
      TracingAction2[TracingAction2["AFTER_NEXT_RENDER"] = 1] = "AFTER_NEXT_RENDER";
    })(TracingAction || (TracingAction = {}));
    TracingService = new InjectionToken(ngDevMode ? "TracingService" : "");
    SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;
    EventEmitter_ = class extends Subject {
      // tslint:disable-next-line:require-internal-with-underscore
      __isAsync;
      destroyRef = void 0;
      pendingTasks = void 0;
      constructor(isAsync = false) {
        super();
        this.__isAsync = isAsync;
        if (isInInjectionContext()) {
          this.destroyRef = inject2(DestroyRef, { optional: true }) ?? void 0;
          this.pendingTasks = inject2(PendingTasksInternal, { optional: true }) ?? void 0;
        }
      }
      emit(value) {
        const prevConsumer = setActiveConsumer(null);
        try {
          super.next(value);
        } finally {
          setActiveConsumer(prevConsumer);
        }
      }
      subscribe(observerOrNext, error, complete) {
        let nextFn = observerOrNext;
        let errorFn = error || (() => null);
        let completeFn = complete;
        if (observerOrNext && typeof observerOrNext === "object") {
          const observer = observerOrNext;
          nextFn = observer.next?.bind(observer);
          errorFn = observer.error?.bind(observer);
          completeFn = observer.complete?.bind(observer);
        }
        if (this.__isAsync) {
          errorFn = this.wrapInTimeout(errorFn);
          if (nextFn) {
            nextFn = this.wrapInTimeout(nextFn);
          }
          if (completeFn) {
            completeFn = this.wrapInTimeout(completeFn);
          }
        }
        const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });
        if (observerOrNext instanceof Subscription) {
          observerOrNext.add(sink);
        }
        return sink;
      }
      wrapInTimeout(fn2) {
        return (value) => {
          const taskId = this.pendingTasks?.add();
          setTimeout(() => {
            try {
              fn2(value);
            } finally {
              if (taskId !== void 0) {
                this.pendingTasks?.remove(taskId);
              }
            }
          });
        };
      }
    };
    EventEmitter = EventEmitter_;
    AsyncStackTaggingZoneSpec = class {
      createTask;
      constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {
        this.name = "asyncStackTagging for " + namePrefix;
        this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);
      }
      // ZoneSpec implementation below.
      name;
      onScheduleTask(delegate, _current, target, task) {
        task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);
        return delegate.scheduleTask(target, task);
      }
      onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {
        let ret;
        if (task.consoleTask) {
          ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));
        } else {
          ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);
        }
        return ret;
      }
    };
    isAngularZoneProperty = "isAngularZone";
    angularZoneInstanceIdProperty = isAngularZoneProperty + "_ID";
    ngZoneInstanceId = 0;
    NgZone = class _NgZone {
      hasPendingMacrotasks = false;
      hasPendingMicrotasks = false;
      /**
       * Whether there are no outstanding microtasks or macrotasks.
       */
      isStable = true;
      /**
       * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
       */
      onUnstable = new EventEmitter(false);
      /**
       * Notifies when there is no more microtasks enqueued in the current VM Turn.
       * This is a hint for Angular to do change detection, which may enqueue more microtasks.
       * For this reason this event can fire multiple times per VM Turn.
       */
      onMicrotaskEmpty = new EventEmitter(false);
      /**
       * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
       * implies we are about to relinquish VM turn.
       * This event gets called just once.
       */
      onStable = new EventEmitter(false);
      /**
       * Notifies that an error has been delivered.
       */
      onError = new EventEmitter(false);
      constructor(options) {
        const { enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false, scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT } = options;
        if (typeof Zone == "undefined") {
          throw new RuntimeError(908, ngDevMode && `In this configuration Angular requires Zone.js`);
        }
        Zone.assertZonePatched();
        const self = this;
        self._nesting = 0;
        self._outer = self._inner = Zone.current;
        if (ngDevMode) {
          self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec("Angular"));
        }
        if (Zone["TaskTrackingZoneSpec"]) {
          self._inner = self._inner.fork(new Zone["TaskTrackingZoneSpec"]());
        }
        if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
          self._inner = self._inner.fork(Zone["longStackTraceZoneSpec"]);
        }
        self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
        self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
        self.callbackScheduled = false;
        self.scheduleInRootZone = scheduleInRootZone;
        forkInnerZoneWithAngularBehavior(self);
      }
      /**
        This method checks whether the method call happens within an Angular Zone instance.
      */
      static isInAngularZone() {
        return typeof Zone !== "undefined" && Zone.current.get(isAngularZoneProperty) === true;
      }
      /**
        Assures that the method is called within the Angular Zone, otherwise throws an error.
      */
      static assertInAngularZone() {
        if (!_NgZone.isInAngularZone()) {
          throw new RuntimeError(909, ngDevMode && "Expected to be in Angular Zone, but it is not!");
        }
      }
      /**
        Assures that the method is called outside of the Angular Zone, otherwise throws an error.
      */
      static assertNotInAngularZone() {
        if (_NgZone.isInAngularZone()) {
          throw new RuntimeError(909, ngDevMode && "Expected to not be in Angular Zone, but it is!");
        }
      }
      /**
       * Executes the `fn` function synchronously within the Angular zone and returns value returned by
       * the function.
       *
       * Running functions via `run` allows you to reenter Angular zone from a task that was executed
       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * within the Angular zone.
       *
       * If a synchronous error happens it will be rethrown and not reported via `onError`.
       */
      run(fn2, applyThis, applyArgs) {
        return this._inner.run(fn2, applyThis, applyArgs);
      }
      /**
       * Executes the `fn` function synchronously within the Angular zone as a task and returns value
       * returned by the function.
       *
       * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed
       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * within the Angular zone.
       *
       * If a synchronous error happens it will be rethrown and not reported via `onError`.
       */
      runTask(fn2, applyThis, applyArgs, name) {
        const zone = this._inner;
        const task = zone.scheduleEventTask("NgZoneEvent: " + name, fn2, EMPTY_PAYLOAD, noop2, noop2);
        try {
          return zone.runTask(task, applyThis, applyArgs);
        } finally {
          zone.cancelTask(task);
        }
      }
      /**
       * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
       * rethrown.
       */
      runGuarded(fn2, applyThis, applyArgs) {
        return this._inner.runGuarded(fn2, applyThis, applyArgs);
      }
      /**
       * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
       * the function.
       *
       * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
       * work that
       * doesn't trigger Angular change-detection or is subject to Angular's error handling.
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * outside of the Angular zone.
       *
       * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
       */
      runOutsideAngular(fn2) {
        return this._outer.run(fn2);
      }
    };
    EMPTY_PAYLOAD = {};
    NoopNgZone = class {
      hasPendingMicrotasks = false;
      hasPendingMacrotasks = false;
      isStable = true;
      onUnstable = new EventEmitter();
      onMicrotaskEmpty = new EventEmitter();
      onStable = new EventEmitter();
      onError = new EventEmitter();
      run(fn2, applyThis, applyArgs) {
        return fn2.apply(applyThis, applyArgs);
      }
      runGuarded(fn2, applyThis, applyArgs) {
        return fn2.apply(applyThis, applyArgs);
      }
      runOutsideAngular(fn2) {
        return fn2();
      }
      runTask(fn2, applyThis, applyArgs, name) {
        return fn2.apply(applyThis, applyArgs);
      }
    };
    AfterRenderManager = class _AfterRenderManager {
      impl = null;
      execute() {
        this.impl?.execute();
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _AfterRenderManager,
          providedIn: "root",
          factory: () => new _AfterRenderManager()
        })
      );
    };
    AFTER_RENDER_PHASES = /* @__PURE__ */ (() => [
      0,
      1,
      2,
      3
    ])();
    AfterRenderImpl = class _AfterRenderImpl {
      ngZone = inject2(NgZone);
      scheduler = inject2(ChangeDetectionScheduler);
      errorHandler = inject2(ErrorHandler, { optional: true });
      /** Current set of active sequences. */
      sequences = /* @__PURE__ */ new Set();
      /** Tracks registrations made during the current set of executions. */
      deferredRegistrations = /* @__PURE__ */ new Set();
      /** Whether the `AfterRenderManager` is currently executing hooks. */
      executing = false;
      constructor() {
        inject2(TracingService, { optional: true });
      }
      /**
       * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more
       * might be scheduled.
       */
      execute() {
        const hasSequencesToExecute = this.sequences.size > 0;
        if (hasSequencesToExecute) {
          profiler(
            16
            /* ProfilerEvent.AfterRenderHooksStart */
          );
        }
        this.executing = true;
        for (const phase of AFTER_RENDER_PHASES) {
          for (const sequence of this.sequences) {
            if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {
              continue;
            }
            try {
              sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => this.maybeTrace(() => {
                const hookFn = sequence.hooks[phase];
                const value = hookFn(sequence.pipelinedValue);
                return value;
              }, sequence.snapshot));
            } catch (err) {
              sequence.erroredOrDestroyed = true;
              this.errorHandler?.handleError(err);
            }
          }
        }
        this.executing = false;
        for (const sequence of this.sequences) {
          sequence.afterRun();
          if (sequence.once) {
            this.sequences.delete(sequence);
            sequence.destroy();
          }
        }
        for (const sequence of this.deferredRegistrations) {
          this.sequences.add(sequence);
        }
        if (this.deferredRegistrations.size > 0) {
          this.scheduler.notify(
            7
            /* NotificationSource.RenderHook */
          );
        }
        this.deferredRegistrations.clear();
        if (hasSequencesToExecute) {
          profiler(
            17
            /* ProfilerEvent.AfterRenderHooksEnd */
          );
        }
      }
      register(sequence) {
        const { view } = sequence;
        if (view !== void 0) {
          (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);
          markAncestorsForTraversal(view);
          view[FLAGS] |= 8192;
        } else if (!this.executing) {
          this.addSequence(sequence);
        } else {
          this.deferredRegistrations.add(sequence);
        }
      }
      addSequence(sequence) {
        this.sequences.add(sequence);
        this.scheduler.notify(
          7
          /* NotificationSource.RenderHook */
        );
      }
      unregister(sequence) {
        if (this.executing && this.sequences.has(sequence)) {
          sequence.erroredOrDestroyed = true;
          sequence.pipelinedValue = void 0;
          sequence.once = true;
        } else {
          this.sequences.delete(sequence);
          this.deferredRegistrations.delete(sequence);
        }
      }
      maybeTrace(fn2, snapshot) {
        return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn2) : fn2();
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _AfterRenderImpl,
          providedIn: "root",
          factory: () => new _AfterRenderImpl()
        })
      );
    };
    AfterRenderSequence = class {
      impl;
      hooks;
      view;
      once;
      snapshot;
      /**
       * Whether this sequence errored or was destroyed during this execution, and hooks should no
       * longer run for it.
       */
      erroredOrDestroyed = false;
      /**
       * The value returned by the last hook execution (if any), ready to be pipelined into the next
       * one.
       */
      pipelinedValue = void 0;
      unregisterOnDestroy;
      constructor(impl, hooks, view, once, destroyRef, snapshot = null) {
        this.impl = impl;
        this.hooks = hooks;
        this.view = view;
        this.once = once;
        this.snapshot = snapshot;
        this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());
      }
      afterRun() {
        this.erroredOrDestroyed = false;
        this.pipelinedValue = void 0;
        this.snapshot?.dispose();
        this.snapshot = null;
      }
      destroy() {
        this.impl.unregister(this);
        this.unregisterOnDestroy?.();
        const scheduled2 = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];
        if (scheduled2) {
          this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled2.filter((s) => s !== this);
        }
      }
    };
    _requestIdleCallback = () => typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
    _cancelIdleCallback = () => typeof requestIdleCallback !== "undefined" ? cancelIdleCallback : clearTimeout;
    IdleScheduler = class _IdleScheduler {
      // Indicates whether current callbacks are being invoked.
      executingCallbacks = false;
      // Currently scheduled idle callback id.
      idleId = null;
      // Set of callbacks to be invoked next.
      current = /* @__PURE__ */ new Set();
      // Set of callbacks collected while invoking current set of callbacks.
      // Those callbacks are scheduled for the next idle period.
      deferred = /* @__PURE__ */ new Set();
      ngZone = inject2(NgZone);
      requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);
      cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);
      add(callback) {
        const target = this.executingCallbacks ? this.deferred : this.current;
        target.add(callback);
        if (this.idleId === null) {
          this.scheduleIdleCallback();
        }
      }
      remove(callback) {
        const { current, deferred } = this;
        current.delete(callback);
        deferred.delete(callback);
        if (current.size === 0 && deferred.size === 0) {
          this.cancelIdleCallback();
        }
      }
      scheduleIdleCallback() {
        const callback = () => {
          this.cancelIdleCallback();
          this.executingCallbacks = true;
          for (const callback2 of this.current) {
            callback2();
          }
          this.current.clear();
          this.executingCallbacks = false;
          if (this.deferred.size > 0) {
            for (const callback2 of this.deferred) {
              this.current.add(callback2);
            }
            this.deferred.clear();
            this.scheduleIdleCallback();
          }
        };
        this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));
      }
      cancelIdleCallback() {
        if (this.idleId !== null) {
          this.cancelIdleCallbackFn(this.idleId);
          this.idleId = null;
        }
      }
      ngOnDestroy() {
        this.cancelIdleCallback();
        this.current.clear();
        this.deferred.clear();
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _IdleScheduler,
          providedIn: "root",
          factory: () => new _IdleScheduler()
        })
      );
    };
    TimerScheduler = class _TimerScheduler {
      // Indicates whether current callbacks are being invoked.
      executingCallbacks = false;
      // Currently scheduled `setTimeout` id.
      timeoutId = null;
      // When currently scheduled timer would fire.
      invokeTimerAt = null;
      // List of callbacks to be invoked.
      // For each callback we also store a timestamp on when the callback
      // should be invoked. We store timestamps and callback functions
      // in a flat array to avoid creating new objects for each entry.
      // [timestamp1, callback1, timestamp2, callback2, ...]
      current = [];
      // List of callbacks collected while invoking current set of callbacks.
      // Those callbacks are added to the "current" queue at the end of
      // the current callback invocation. The shape of this list is the same
      // as the shape of the `current` list.
      deferred = [];
      add(delay, callback, ngZone) {
        const target = this.executingCallbacks ? this.deferred : this.current;
        this.addToQueue(target, Date.now() + delay, callback);
        this.scheduleTimer(ngZone);
      }
      remove(callback) {
        const { current, deferred } = this;
        const callbackIndex = this.removeFromQueue(current, callback);
        if (callbackIndex === -1) {
          this.removeFromQueue(deferred, callback);
        }
        if (current.length === 0 && deferred.length === 0) {
          this.clearTimeout();
        }
      }
      addToQueue(target, invokeAt, callback) {
        let insertAtIndex = target.length;
        for (let i = 0; i < target.length; i += 2) {
          const invokeQueuedCallbackAt = target[i];
          if (invokeQueuedCallbackAt > invokeAt) {
            insertAtIndex = i;
            break;
          }
        }
        arrayInsert2(target, insertAtIndex, invokeAt, callback);
      }
      removeFromQueue(target, callback) {
        let index = -1;
        for (let i = 0; i < target.length; i += 2) {
          const queuedCallback = target[i + 1];
          if (queuedCallback === callback) {
            index = i;
            break;
          }
        }
        if (index > -1) {
          arraySplice(target, index, 2);
        }
        return index;
      }
      scheduleTimer(ngZone) {
        const callback = () => {
          this.clearTimeout();
          this.executingCallbacks = true;
          const current = [...this.current];
          const now = Date.now();
          for (let i = 0; i < current.length; i += 2) {
            const invokeAt = current[i];
            const callback2 = current[i + 1];
            if (invokeAt <= now) {
              callback2();
            } else {
              break;
            }
          }
          let lastCallbackIndex = -1;
          for (let i = 0; i < this.current.length; i += 2) {
            const invokeAt = this.current[i];
            if (invokeAt <= now) {
              lastCallbackIndex = i + 1;
            } else {
              break;
            }
          }
          if (lastCallbackIndex >= 0) {
            arraySplice(this.current, 0, lastCallbackIndex + 1);
          }
          this.executingCallbacks = false;
          if (this.deferred.length > 0) {
            for (let i = 0; i < this.deferred.length; i += 2) {
              const invokeAt = this.deferred[i];
              const callback2 = this.deferred[i + 1];
              this.addToQueue(this.current, invokeAt, callback2);
            }
            this.deferred.length = 0;
          }
          this.scheduleTimer(ngZone);
        };
        const FRAME_DURATION_MS = 16;
        if (this.current.length > 0) {
          const now = Date.now();
          const invokeAt = this.current[0];
          if (this.timeoutId === null || // Reschedule a timer in case a queue contains an item with
          // an earlier timestamp and the delta is more than an average
          // frame duration.
          this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {
            this.clearTimeout();
            const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);
            this.invokeTimerAt = invokeAt;
            this.timeoutId = ngZone.runOutsideAngular(() => {
              return setTimeout(() => ngZone.run(callback), timeout);
            });
          }
        }
      }
      clearTimeout() {
        if (this.timeoutId !== null) {
          clearTimeout(this.timeoutId);
          this.timeoutId = null;
        }
      }
      ngOnDestroy() {
        this.clearTimeout();
        this.current.length = 0;
        this.deferred.length = 0;
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _TimerScheduler,
          providedIn: "root",
          factory: () => new _TimerScheduler()
        })
      );
    };
    CachedInjectorService = class _CachedInjectorService {
      cachedInjectors = /* @__PURE__ */ new Map();
      getOrCreateInjector(key, parentInjector, providers, debugName) {
        if (!this.cachedInjectors.has(key)) {
          const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;
          this.cachedInjectors.set(key, injector);
        }
        return this.cachedInjectors.get(key);
      }
      ngOnDestroy() {
        try {
          for (const injector of this.cachedInjectors.values()) {
            if (injector !== null) {
              injector.destroy();
            }
          }
        } finally {
          this.cachedInjectors.clear();
        }
      }
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _CachedInjectorService,
          providedIn: "environment",
          factory: () => new _CachedInjectorService()
        })
      );
    };
    DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = /* @__PURE__ */ new InjectionToken("DEFER_BLOCK_DEPENDENCY_INTERCEPTOR");
    DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? "DEFER_BLOCK_CONFIG" : "");
    applyDeferBlockStateWithSchedulingImpl = null;
    ASYNC_COMPONENT_METADATA_FN = "__ngAsyncComponentMetadataFn__";
    Console = class _Console {
      log(message) {
        console.log(message);
      }
      // Note: for reporting errors use `DOM.logError()` as it is platform specific
      warn(message) {
        console.warn(message);
      }
      static \u0275fac = function Console_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _Console)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Console, factory: _Console.\u0275fac, providedIn: "platform" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
        type: Injectable,
        args: [{ providedIn: "platform" }]
      }], null, null);
    })();
    DIDebugData = class {
      resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
      resolverToProviders = /* @__PURE__ */ new WeakMap();
      resolverToEffects = /* @__PURE__ */ new WeakMap();
      standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
      reset() {
        this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
        this.resolverToProviders = /* @__PURE__ */ new WeakMap();
        this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
      }
    };
    frameworkDIDebugData = new DIDebugData();
    signalDebugMap = /* @__PURE__ */ new WeakMap();
    counter$1 = 0;
    changeDetectionRuns = 0;
    changeDetectionSyncRuns = 0;
    counter = 0;
    eventsStack = [];
    chromeDevToolsInjectorProfiler = (event) => {
      const eventType = event.type;
      if (eventType === 4) {
        measureStart(
          100
          /* ProfilerDIEvent.InjectorToCreateInstanceEvent */
        );
      } else if (eventType === 1) {
        const token = event.context.token;
        measureEnd(100, getProviderTokenMeasureName(token), "tertiary-dark");
      }
    };
    devToolsProfiler = (event, instance, eventFn) => {
      switch (event) {
        case 8:
        case 10:
        case 12:
        case 14:
        case 16:
        case 18:
        case 20:
        case 22:
        case 0:
        case 4:
        case 2:
        case 24:
        case 6: {
          measureStart(event);
          break;
        }
        case 9: {
          measureEnd(8, "Bootstrap application", "primary-dark");
          break;
        }
        case 11: {
          measureEnd(10, "Bootstrap component", "primary-dark");
          break;
        }
        case 13: {
          changeDetectionSyncRuns = 0;
          measureEnd(12, "Change detection " + changeDetectionRuns++, "primary-dark");
          break;
        }
        case 15: {
          measureEnd(14, "Synchronization " + changeDetectionSyncRuns++, "primary");
          break;
        }
        case 17: {
          measureEnd(16, "After render hooks", "primary");
          break;
        }
        case 19: {
          const typeName = getComponentMeasureName(instance);
          measureEnd(18, typeName, "primary-light");
          break;
        }
        case 21: {
          measureEnd(20, "Defer block", "primary-dark");
          break;
        }
        case 23: {
          measureEnd(22, "Dynamic component creation", "primary-dark");
          break;
        }
        case 3: {
          measureEnd(2, stringifyForError(eventFn) + " (update)", "secondary-dark");
          break;
        }
        case 1: {
          measureEnd(0, stringifyForError(eventFn) + " (create)", "secondary");
          break;
        }
        case 25: {
          measureEnd(24, "HostBindings", "secondary-dark");
          break;
        }
        case 5: {
          const typeName = getComponentMeasureName(instance);
          measureEnd(4, `${typeName}:${stringifyForError(eventFn)}`, "tertiary");
          break;
        }
        case 7: {
          measureEnd(6, stringifyForError(eventFn), "tertiary-light");
          break;
        }
        default: {
          throw new Error("Unexpected profiling event type: " + event);
        }
      }
    };
    GLOBAL_PUBLISH_EXPANDO_KEY = "ng";
    globalUtilsFunctions = {
      /**
       * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon
       * in application's code. The contract of those functions might be changed in any release and/or a
       * function can be removed completely.
       */
      "\u0275getDependenciesFromInjectable": getDependenciesFromInjectable,
      "\u0275getInjectorProviders": getInjectorProviders,
      "\u0275getInjectorResolutionPath": getInjectorResolutionPath,
      "\u0275getInjectorMetadata": getInjectorMetadata,
      "\u0275setProfiler": setProfiler,
      "\u0275getSignalGraph": getSignalGraph,
      "\u0275getDeferBlocks": getDeferBlocks,
      "getDirectiveMetadata": getDirectiveMetadata$1,
      "getComponent": getComponent,
      "getContext": getContext,
      "getListeners": getListeners,
      "getOwningComponent": getOwningComponent,
      "getHostElement": getHostElement,
      "getInjector": getInjector,
      "getRootComponents": getRootComponents,
      "getDirectives": getDirectives,
      "applyChanges": applyChanges,
      "isSignal": isSignal,
      "enableProfiling": enableProfiling
    };
    _published = false;
    TESTABILITY = new InjectionToken("");
    TESTABILITY_GETTER = new InjectionToken("");
    Testability = class _Testability {
      _ngZone;
      registry;
      _isZoneStable = true;
      _callbacks = [];
      _taskTrackingZone = null;
      _destroyRef;
      constructor(_ngZone, registry, testabilityGetter) {
        this._ngZone = _ngZone;
        this.registry = registry;
        if (isInInjectionContext()) {
          this._destroyRef = inject2(DestroyRef, { optional: true }) ?? void 0;
        }
        if (!_testabilityGetter) {
          setTestabilityGetter(testabilityGetter);
          testabilityGetter.addToWindow(registry);
        }
        this._watchAngularEvents();
        _ngZone.run(() => {
          this._taskTrackingZone = typeof Zone == "undefined" ? null : Zone.current.get("TaskTrackingZone");
        });
      }
      _watchAngularEvents() {
        const onUnstableSubscription = this._ngZone.onUnstable.subscribe({
          next: () => {
            this._isZoneStable = false;
          }
        });
        const onStableSubscription = this._ngZone.runOutsideAngular(() => this._ngZone.onStable.subscribe({
          next: () => {
            NgZone.assertNotInAngularZone();
            queueMicrotask(() => {
              this._isZoneStable = true;
              this._runCallbacksIfReady();
            });
          }
        }));
        this._destroyRef?.onDestroy(() => {
          onUnstableSubscription.unsubscribe();
          onStableSubscription.unsubscribe();
        });
      }
      /**
       * Whether an associated application is stable
       */
      isStable() {
        return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;
      }
      _runCallbacksIfReady() {
        if (this.isStable()) {
          queueMicrotask(() => {
            while (this._callbacks.length !== 0) {
              let cb = this._callbacks.pop();
              clearTimeout(cb.timeoutId);
              cb.doneCb();
            }
          });
        } else {
          let pending = this.getPendingTasks();
          this._callbacks = this._callbacks.filter((cb) => {
            if (cb.updateCb && cb.updateCb(pending)) {
              clearTimeout(cb.timeoutId);
              return false;
            }
            return true;
          });
        }
      }
      getPendingTasks() {
        if (!this._taskTrackingZone) {
          return [];
        }
        return this._taskTrackingZone.macroTasks.map((t) => {
          return {
            source: t.source,
            // From TaskTrackingZone:
            // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
            creationLocation: t.creationLocation,
            data: t.data
          };
        });
      }
      addCallback(cb, timeout, updateCb) {
        let timeoutId = -1;
        if (timeout && timeout > 0) {
          timeoutId = setTimeout(() => {
            this._callbacks = this._callbacks.filter((cb2) => cb2.timeoutId !== timeoutId);
            cb();
          }, timeout);
        }
        this._callbacks.push({ doneCb: cb, timeoutId, updateCb });
      }
      /**
       * Wait for the application to be stable with a timeout. If the timeout is reached before that
       * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
       *
       * @param doneCb The callback to invoke when Angular is stable or the timeout expires
       *    whichever comes first.
       * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
       *    specified, whenStable() will wait forever.
       * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
       *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
       *    and no further updates will be issued.
       */
      whenStable(doneCb, timeout, updateCb) {
        if (updateCb && !this._taskTrackingZone) {
          throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
        }
        this.addCallback(doneCb, timeout, updateCb);
        this._runCallbacksIfReady();
      }
      /**
       * Registers an application with a testability hook so that it can be tracked.
       * @param token token of application, root element
       *
       * @internal
       */
      registerApplication(token) {
        this.registry.registerApplication(token, this);
      }
      /**
       * Unregisters an application.
       * @param token token of application, root element
       *
       * @internal
       */
      unregisterApplication(token) {
        this.registry.unregisterApplication(token);
      }
      /**
       * Find providers by name
       * @param using The root element to search from
       * @param provider The name of binding variable
       * @param exactMatch Whether using exactMatch
       */
      findProviders(using, provider, exactMatch) {
        return [];
      }
      static \u0275fac = function Testability_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _Testability)(\u0275\u0275inject(NgZone), \u0275\u0275inject(TestabilityRegistry), \u0275\u0275inject(TESTABILITY_GETTER));
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Testability, factory: _Testability.\u0275fac });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
        type: Injectable
      }], () => [{ type: NgZone }, { type: TestabilityRegistry }, { type: void 0, decorators: [{
        type: Inject,
        args: [TESTABILITY_GETTER]
      }] }], null);
    })();
    TestabilityRegistry = class _TestabilityRegistry {
      /** @internal */
      _applications = /* @__PURE__ */ new Map();
      /**
       * Registers an application with a testability hook so that it can be tracked
       * @param token token of application, root element
       * @param testability Testability hook
       */
      registerApplication(token, testability) {
        this._applications.set(token, testability);
      }
      /**
       * Unregisters an application.
       * @param token token of application, root element
       */
      unregisterApplication(token) {
        this._applications.delete(token);
      }
      /**
       * Unregisters all applications
       */
      unregisterAllApplications() {
        this._applications.clear();
      }
      /**
       * Get a testability hook associated with the application
       * @param elem root element
       */
      getTestability(elem) {
        return this._applications.get(elem) || null;
      }
      /**
       * Get all registered testabilities
       */
      getAllTestabilities() {
        return Array.from(this._applications.values());
      }
      /**
       * Get all registered applications(root elements)
       */
      getAllRootElements() {
        return Array.from(this._applications.keys());
      }
      /**
       * Find testability of a node in the Tree
       * @param elem node
       * @param findInAncestors whether finding testability in ancestors if testability was not found in
       * current node
       */
      findTestabilityInTree(elem, findInAncestors = true) {
        return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;
      }
      static \u0275fac = function TestabilityRegistry_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _TestabilityRegistry)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TestabilityRegistry, factory: _TestabilityRegistry.\u0275fac, providedIn: "platform" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
        type: Injectable,
        args: [{ providedIn: "platform" }]
      }], null, null);
    })();
    APP_INITIALIZER = new InjectionToken(ngDevMode ? "Application Initializer" : "");
    ApplicationInitStatus = class _ApplicationInitStatus {
      // Using non null assertion, these fields are defined below
      // within the `new Promise` callback (synchronously).
      resolve;
      reject;
      initialized = false;
      done = false;
      donePromise = new Promise((res, rej) => {
        this.resolve = res;
        this.reject = rej;
      });
      appInits = inject2(APP_INITIALIZER, { optional: true }) ?? [];
      injector = inject2(Injector);
      constructor() {
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !Array.isArray(this.appInits)) {
          throw new RuntimeError(-209, `Unexpected type of the \`APP_INITIALIZER\` token value (expected an array, but got ${typeof this.appInits}). Please check that the \`APP_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
        }
      }
      /** @internal */
      runInitializers() {
        if (this.initialized) {
          return;
        }
        const asyncInitPromises = [];
        for (const appInits of this.appInits) {
          const initResult = runInInjectionContext(this.injector, appInits);
          if (isPromise2(initResult)) {
            asyncInitPromises.push(initResult);
          } else if (isSubscribable(initResult)) {
            const observableAsPromise = new Promise((resolve, reject) => {
              initResult.subscribe({ complete: resolve, error: reject });
            });
            asyncInitPromises.push(observableAsPromise);
          }
        }
        const complete = () => {
          this.done = true;
          this.resolve();
        };
        Promise.all(asyncInitPromises).then(() => {
          complete();
        }).catch((e) => {
          this.reject(e);
        });
        if (asyncInitPromises.length === 0) {
          complete();
        }
        this.initialized = true;
      }
      static \u0275fac = function ApplicationInitStatus_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ApplicationInitStatus)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationInitStatus, factory: _ApplicationInitStatus.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], () => [], null);
    })();
    APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? "appBootstrapListener" : "");
    NgProbeToken = class {
      name;
      token;
      constructor(name, token) {
        this.name = name;
        this.token = token;
      }
    };
    MAXIMUM_REFRESH_RERUNS = 10;
    ApplicationRef = class _ApplicationRef {
      /** @internal */
      _runningTick = false;
      _destroyed = false;
      _destroyListeners = [];
      /** @internal */
      _views = [];
      internalErrorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
      afterRenderManager = inject2(AfterRenderManager);
      zonelessEnabled = inject2(ZONELESS_ENABLED);
      rootEffectScheduler = inject2(EffectScheduler);
      /**
       * Current dirty state of the application across a number of dimensions (views, afterRender hooks,
       * etc).
       *
       * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.
       *
       * @internal
       */
      dirtyFlags = 0;
      /**
       * Most recent snapshot from the `TracingService`, if any.
       *
       * This snapshot attempts to capture the context when `tick()` was first
       * scheduled. It then runs wrapped in this context.
       *
       * @internal
       */
      tracingSnapshot = null;
      // Needed for ComponentFixture temporarily during migration of autoDetect behavior
      // Eventually the hostView of the fixture should just attach to ApplicationRef.
      allTestViews = /* @__PURE__ */ new Set();
      autoDetectTestViews = /* @__PURE__ */ new Set();
      includeAllTestViews = false;
      /** @internal */
      afterTick = new Subject();
      /** @internal */
      get allViews() {
        return [
          ...(this.includeAllTestViews ? this.allTestViews : this.autoDetectTestViews).keys(),
          ...this._views
        ];
      }
      /**
       * Indicates whether this instance was destroyed.
       */
      get destroyed() {
        return this._destroyed;
      }
      /**
       * Get a list of component types registered to this application.
       * This list is populated even before the component is created.
       */
      componentTypes = [];
      /**
       * Get a list of components registered to this application.
       */
      components = [];
      internalPendingTask = inject2(PendingTasksInternal);
      /**
       * Returns an Observable that indicates when the application is stable or unstable.
       */
      get isStable() {
        return this.internalPendingTask.hasPendingTasksObservable.pipe(map((pending) => !pending));
      }
      constructor() {
        inject2(TracingService, { optional: true });
      }
      /**
       * @returns A promise that resolves when the application becomes stable
       */
      whenStable() {
        let subscription;
        return new Promise((resolve) => {
          subscription = this.isStable.subscribe({
            next: (stable) => {
              if (stable) {
                resolve();
              }
            }
          });
        }).finally(() => {
          subscription.unsubscribe();
        });
      }
      _injector = inject2(EnvironmentInjector);
      _rendererFactory = null;
      /**
       * The `EnvironmentInjector` used to create this application.
       */
      get injector() {
        return this._injector;
      }
      /**
       * Bootstrap a component onto the element identified by its selector or, optionally, to a
       * specified element.
       *
       * @usageNotes
       * ### Bootstrap process
       *
       * When bootstrapping a component, Angular mounts it onto a target DOM element
       * and kicks off automatic change detection. The target DOM element can be
       * provided using the `rootSelectorOrNode` argument.
       *
       * If the target DOM element is not provided, Angular tries to find one on a page
       * using the `selector` of the component that is being bootstrapped
       * (first matched element is used).
       *
       * ### Example
       *
       * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
       * but it requires us to know the component while writing the application code.
       *
       * Imagine a situation where we have to wait for an API call to decide about the component to
       * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
       * dynamically bootstrap a component.
       *
       * {@example core/ts/platform/platform.ts region='componentSelector'}
       *
       * Optionally, a component can be mounted onto a DOM element that does not match the
       * selector of the bootstrapped component.
       *
       * In the following example, we are providing a CSS selector to match the target element.
       *
       * {@example core/ts/platform/platform.ts region='cssSelector'}
       *
       * While in this example, we are providing reference to a DOM node.
       *
       * {@example core/ts/platform/platform.ts region='domNode'}
       */
      bootstrap(componentOrFactory, rootSelectorOrNode) {
        return this.bootstrapImpl(componentOrFactory, rootSelectorOrNode);
      }
      bootstrapImpl(componentOrFactory, rootSelectorOrNode, injector = Injector.NULL) {
        const ngZone = this._injector.get(NgZone);
        return ngZone.run(() => {
          profiler(
            10
            /* ProfilerEvent.BootstrapComponentStart */
          );
          (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
          const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;
          const initStatus = this._injector.get(ApplicationInitStatus);
          if (!initStatus.done) {
            let errorMessage = "";
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              const standalone = !isComponentFactory && isStandalone(componentOrFactory);
              errorMessage = "Cannot bootstrap as there are still asynchronous initializers running." + (standalone ? "" : " Bootstrap components in the `ngDoBootstrap` method of the root module.");
            }
            throw new RuntimeError(405, errorMessage);
          }
          let componentFactory;
          if (isComponentFactory) {
            componentFactory = componentOrFactory;
          } else {
            const resolver = this._injector.get(ComponentFactoryResolver$1);
            componentFactory = resolver.resolveComponentFactory(componentOrFactory);
          }
          this.componentTypes.push(componentFactory.componentType);
          const ngModule = isBoundToModule(componentFactory) ? void 0 : this._injector.get(NgModuleRef$1);
          const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
          const compRef = componentFactory.create(injector, [], selectorOrNode, ngModule);
          const nativeElement = compRef.location.nativeElement;
          const testability = compRef.injector.get(TESTABILITY, null);
          testability?.registerApplication(nativeElement);
          compRef.onDestroy(() => {
            this.detachView(compRef.hostView);
            remove(this.components, compRef);
            testability?.unregisterApplication(nativeElement);
          });
          this._loadComponent(compRef);
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            const _console = this._injector.get(Console);
            _console.log(`Angular is running in development mode.`);
          }
          profiler(11, compRef);
          return compRef;
        });
      }
      /**
       * Invoke this method to explicitly process change detection and its side-effects.
       *
       * In development mode, `tick()` also performs a second change detection cycle to ensure that no
       * further changes are detected. If additional changes are picked up during this second cycle,
       * bindings in the app have side-effects that cannot be resolved in a single change detection
       * pass.
       * In this case, Angular throws an error, since an Angular application can only have one change
       * detection pass during which all change detection must complete.
       */
      tick() {
        if (!this.zonelessEnabled) {
          this.dirtyFlags |= 1;
        }
        this._tick();
      }
      /** @internal */
      _tick() {
        profiler(
          12
          /* ProfilerEvent.ChangeDetectionStart */
        );
        if (this.tracingSnapshot !== null) {
          this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);
        } else {
          this.tickImpl();
        }
      }
      tickImpl = () => {
        (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
        if (this._runningTick) {
          throw new RuntimeError(101, ngDevMode && "ApplicationRef.tick is called recursively");
        }
        const prevConsumer = setActiveConsumer(null);
        try {
          this._runningTick = true;
          this.synchronize();
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            for (let view of this.allViews) {
              view.checkNoChanges();
            }
          }
        } finally {
          this._runningTick = false;
          this.tracingSnapshot?.dispose();
          this.tracingSnapshot = null;
          setActiveConsumer(prevConsumer);
          this.afterTick.next();
          profiler(
            13
            /* ProfilerEvent.ChangeDetectionEnd */
          );
        }
      };
      /**
       * Performs the core work of synchronizing the application state with the UI, resolving any
       * pending dirtiness (potentially in a loop).
       */
      synchronize() {
        if (this._rendererFactory === null && !this._injector.destroyed) {
          this._rendererFactory = this._injector.get(RendererFactory2, null, { optional: true });
        }
        let runs = 0;
        while (this.dirtyFlags !== 0 && runs++ < MAXIMUM_REFRESH_RERUNS) {
          profiler(
            14
            /* ProfilerEvent.ChangeDetectionSyncStart */
          );
          this.synchronizeOnce();
          profiler(
            15
            /* ProfilerEvent.ChangeDetectionSyncEnd */
          );
        }
        if ((typeof ngDevMode === "undefined" || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {
          throw new RuntimeError(103, ngDevMode && "Infinite change detection while refreshing application views. Ensure views are not calling `markForCheck` on every template execution or that afterRender hooks always mark views for check.");
        }
      }
      /**
       * Perform a single synchronization pass.
       */
      synchronizeOnce() {
        if (this.dirtyFlags & 16) {
          this.dirtyFlags &= ~16;
          this.rootEffectScheduler.flush();
        }
        let ranDetectChanges = false;
        if (this.dirtyFlags & 7) {
          const useGlobalCheck = Boolean(
            this.dirtyFlags & 1
            /* ApplicationRefDirtyFlags.ViewTreeGlobal */
          );
          this.dirtyFlags &= ~7;
          this.dirtyFlags |= 8;
          for (let { _lView } of this.allViews) {
            if (!useGlobalCheck && !requiresRefreshOrTraversal(_lView)) {
              continue;
            }
            const mode = useGlobalCheck && !this.zonelessEnabled ? (
              // Global mode includes `CheckAlways` views.
              0
            ) : (
              // Only refresh views with the `RefreshView` flag or views is a changed signal
              1
            );
            detectChangesInternal(_lView, mode);
            ranDetectChanges = true;
          }
          this.dirtyFlags &= ~4;
          this.syncDirtyFlagsWithViews();
          if (this.dirtyFlags & (7 | 16)) {
            return;
          }
        }
        if (!ranDetectChanges) {
          this._rendererFactory?.begin?.();
          this._rendererFactory?.end?.();
        }
        if (this.dirtyFlags & 8) {
          this.dirtyFlags &= ~8;
          this.afterRenderManager.execute();
        }
        this.syncDirtyFlagsWithViews();
      }
      /**
       * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`
       * accordingly, with two potential behaviors:
       *
       * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.
       *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the
       *    view was marked as needing updating.
       *
       *    TODO(alxhub): figure out if this behavior is still needed for edge cases.
       *
       * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This
       *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't
       *    reachable through traversal from our roots (e.g. it's detached from the CD tree).
       */
      syncDirtyFlagsWithViews() {
        if (this.allViews.some(({ _lView }) => requiresRefreshOrTraversal(_lView))) {
          this.dirtyFlags |= 2;
          return;
        } else {
          this.dirtyFlags &= ~7;
        }
      }
      /**
       * Attaches a view so that it will be dirty checked.
       * The view will be automatically detached when it is destroyed.
       * This will throw if the view is already attached to a ViewContainer.
       */
      attachView(viewRef) {
        (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
        const view = viewRef;
        this._views.push(view);
        view.attachToAppRef(this);
      }
      /**
       * Detaches a view from dirty checking again.
       */
      detachView(viewRef) {
        (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
        const view = viewRef;
        remove(this._views, view);
        view.detachFromAppRef();
      }
      _loadComponent(componentRef) {
        this.attachView(componentRef.hostView);
        try {
          this.tick();
        } catch (e) {
          this.internalErrorHandler(e);
        }
        this.components.push(componentRef);
        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);
        if (ngDevMode && !Array.isArray(listeners)) {
          throw new RuntimeError(-209, `Unexpected type of the \`APP_BOOTSTRAP_LISTENER\` token value (expected an array, but got ${typeof listeners}). Please check that the \`APP_BOOTSTRAP_LISTENER\` token is configured as a \`multi: true\` provider.`);
        }
        listeners.forEach((listener2) => listener2(componentRef));
      }
      /** @internal */
      ngOnDestroy() {
        if (this._destroyed)
          return;
        try {
          this._destroyListeners.forEach((listener2) => listener2());
          this._views.slice().forEach((view) => view.destroy());
        } finally {
          this._destroyed = true;
          this._views = [];
          this._destroyListeners = [];
        }
      }
      /**
       * Registers a listener to be called when an instance is destroyed.
       *
       * @param callback A callback function to add as a listener.
       * @returns A function which unregisters a listener.
       */
      onDestroy(callback) {
        (typeof ngDevMode === "undefined" || ngDevMode) && warnIfDestroyed(this._destroyed);
        this._destroyListeners.push(callback);
        return () => remove(this._destroyListeners, callback);
      }
      /**
       * Destroys an Angular application represented by this `ApplicationRef`. Calling this function
       * will destroy the associated environment injectors as well as all the bootstrapped components
       * with their views.
       */
      destroy() {
        if (this._destroyed) {
          throw new RuntimeError(406, ngDevMode && "This instance of the `ApplicationRef` has already been destroyed.");
        }
        const injector = this._injector;
        if (injector.destroy && !injector.destroyed) {
          injector.destroy();
        }
      }
      /**
       * Returns the number of attached views.
       */
      get viewCount() {
        return this._views.length;
      }
      static \u0275fac = function ApplicationRef_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ApplicationRef)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationRef, factory: _ApplicationRef.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], () => [], null);
    })();
    LiveCollection = class {
      destroy(item) {
      }
      updateValue(index, value) {
      }
      // operations below could be implemented on top of the operations defined so far, but having
      // them explicitly allow clear expression of intent and potentially more performant
      // implementations
      swap(index1, index2) {
        const startIdx = Math.min(index1, index2);
        const endIdx = Math.max(index1, index2);
        const endItem = this.detach(endIdx);
        if (endIdx - startIdx > 1) {
          const startItem = this.detach(startIdx);
          this.attach(startIdx, endItem);
          this.attach(endIdx, startItem);
        } else {
          this.attach(startIdx, endItem);
        }
      }
      move(prevIndex, newIdx) {
        this.attach(newIdx, this.detach(prevIndex));
      }
    };
    UniqueValueMultiKeyMap = class {
      // A map from a key to the first value corresponding to this key.
      kvMap = /* @__PURE__ */ new Map();
      // A map that acts as a linked list of values - each value maps to the next value in this "linked
      // list" (this only works if values are unique). Allocated lazily to avoid memory consumption when
      // there are no duplicated values.
      _vMap = void 0;
      has(key) {
        return this.kvMap.has(key);
      }
      delete(key) {
        if (!this.has(key))
          return false;
        const value = this.kvMap.get(key);
        if (this._vMap !== void 0 && this._vMap.has(value)) {
          this.kvMap.set(key, this._vMap.get(value));
          this._vMap.delete(value);
        } else {
          this.kvMap.delete(key);
        }
        return true;
      }
      get(key) {
        return this.kvMap.get(key);
      }
      set(key, value) {
        if (this.kvMap.has(key)) {
          let prevValue = this.kvMap.get(key);
          if (ngDevMode && prevValue === value) {
            throw new Error(`Detected a duplicated value ${value} for the key ${key}`);
          }
          if (this._vMap === void 0) {
            this._vMap = /* @__PURE__ */ new Map();
          }
          const vMap = this._vMap;
          while (vMap.has(prevValue)) {
            prevValue = vMap.get(prevValue);
          }
          vMap.set(prevValue, value);
        } else {
          this.kvMap.set(key, value);
        }
      }
      forEach(cb) {
        for (let [key, value] of this.kvMap) {
          cb(value, key);
          if (this._vMap !== void 0) {
            const vMap = this._vMap;
            while (vMap.has(value)) {
              value = vMap.get(value);
              cb(value, key);
            }
          }
        }
      }
    };
    RepeaterContext = class {
      lContainer;
      $implicit;
      $index;
      constructor(lContainer, $implicit, $index) {
        this.lContainer = lContainer;
        this.$implicit = $implicit;
        this.$index = $index;
      }
      get $count() {
        return this.lContainer.length - CONTAINER_HEADER_OFFSET;
      }
    };
    RepeaterMetadata = class {
      hasEmptyBlock;
      trackByFn;
      liveCollection;
      constructor(hasEmptyBlock, trackByFn, liveCollection) {
        this.hasEmptyBlock = hasEmptyBlock;
        this.trackByFn = trackByFn;
        this.liveCollection = liveCollection;
      }
    };
    OperationsCounter = class {
      created = 0;
      destroyed = 0;
      reset() {
        this.created = 0;
        this.destroyed = 0;
      }
      recordCreate() {
        this.created++;
      }
      recordDestroy() {
        this.destroyed++;
      }
      /**
       * A method indicating if the entire collection was re-created as part of the reconciliation pass.
       * Used to warn developers about the usage of a tracking function that might result in excessive
       * amount of view creation / destroy operations.
       *
       * @returns boolean value indicating if a live collection was re-created
       */
      wasReCreated(collectionLen) {
        return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;
      }
    };
    LiveCollectionLContainerImpl = class extends LiveCollection {
      lContainer;
      hostLView;
      templateTNode;
      operationsCounter = ngDevMode ? new OperationsCounter() : void 0;
      /**
        Property indicating if indexes in the repeater context need to be updated following the live
        collection changes. Index updates are necessary if and only if views are inserted / removed in
        the middle of LContainer. Adds and removals at the end don't require index updates.
      */
      needsIndexUpdate = false;
      constructor(lContainer, hostLView, templateTNode) {
        super();
        this.lContainer = lContainer;
        this.hostLView = hostLView;
        this.templateTNode = templateTNode;
      }
      get length() {
        return this.lContainer.length - CONTAINER_HEADER_OFFSET;
      }
      at(index) {
        return this.getLView(index)[CONTEXT].$implicit;
      }
      attach(index, lView) {
        const dehydratedView = lView[HYDRATION];
        this.needsIndexUpdate ||= index !== this.length;
        addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));
      }
      detach(index) {
        this.needsIndexUpdate ||= index !== this.length - 1;
        return detachExistingView(this.lContainer, index);
      }
      create(index, value) {
        const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);
        const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), { dehydratedView });
        this.operationsCounter?.recordCreate();
        return embeddedLView;
      }
      destroy(lView) {
        destroyLView(lView[TVIEW], lView);
        this.operationsCounter?.recordDestroy();
      }
      updateValue(index, value) {
        this.getLView(index)[CONTEXT].$implicit = value;
      }
      reset() {
        this.needsIndexUpdate = false;
        this.operationsCounter?.reset();
      }
      updateIndexes() {
        if (this.needsIndexUpdate) {
          for (let i = 0; i < this.length; i++) {
            this.getLView(i)[CONTEXT].$index = i;
          }
        }
      }
      getLView(index) {
        return getExistingLViewFromLContainer(this.lContainer, index);
      }
    };
    _locateOrCreateElementNode = (tView, lView, tNode, name, index) => {
      lastNodeWasCreated(true);
      return createElementNode(lView[RENDERER], name, getNamespace());
    };
    _locateOrCreateElementContainerNode = (tView, lView, tNode, commentText, index) => {
      lastNodeWasCreated(true);
      return createCommentNode(lView[RENDERER], ngDevMode ? commentText : "");
    };
    u = void 0;
    localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "\xD7", "\u2030", "\u221E", "NaN", ":"], ["#,##0.###", "#,##0%", "\xA4#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
    LOCALE_DATA = {};
    (function(LocaleDataIndex2) {
      LocaleDataIndex2[LocaleDataIndex2["LocaleId"] = 0] = "LocaleId";
      LocaleDataIndex2[LocaleDataIndex2["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
      LocaleDataIndex2[LocaleDataIndex2["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
      LocaleDataIndex2[LocaleDataIndex2["DaysFormat"] = 3] = "DaysFormat";
      LocaleDataIndex2[LocaleDataIndex2["DaysStandalone"] = 4] = "DaysStandalone";
      LocaleDataIndex2[LocaleDataIndex2["MonthsFormat"] = 5] = "MonthsFormat";
      LocaleDataIndex2[LocaleDataIndex2["MonthsStandalone"] = 6] = "MonthsStandalone";
      LocaleDataIndex2[LocaleDataIndex2["Eras"] = 7] = "Eras";
      LocaleDataIndex2[LocaleDataIndex2["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
      LocaleDataIndex2[LocaleDataIndex2["WeekendRange"] = 9] = "WeekendRange";
      LocaleDataIndex2[LocaleDataIndex2["DateFormat"] = 10] = "DateFormat";
      LocaleDataIndex2[LocaleDataIndex2["TimeFormat"] = 11] = "TimeFormat";
      LocaleDataIndex2[LocaleDataIndex2["DateTimeFormat"] = 12] = "DateTimeFormat";
      LocaleDataIndex2[LocaleDataIndex2["NumberSymbols"] = 13] = "NumberSymbols";
      LocaleDataIndex2[LocaleDataIndex2["NumberFormats"] = 14] = "NumberFormats";
      LocaleDataIndex2[LocaleDataIndex2["CurrencyCode"] = 15] = "CurrencyCode";
      LocaleDataIndex2[LocaleDataIndex2["CurrencySymbol"] = 16] = "CurrencySymbol";
      LocaleDataIndex2[LocaleDataIndex2["CurrencyName"] = 17] = "CurrencyName";
      LocaleDataIndex2[LocaleDataIndex2["Currencies"] = 18] = "Currencies";
      LocaleDataIndex2[LocaleDataIndex2["Directionality"] = 19] = "Directionality";
      LocaleDataIndex2[LocaleDataIndex2["PluralCase"] = 20] = "PluralCase";
      LocaleDataIndex2[LocaleDataIndex2["ExtraData"] = 21] = "ExtraData";
    })(LocaleDataIndex || (LocaleDataIndex = {}));
    pluralMapping = ["zero", "one", "two", "few", "many"];
    DEFAULT_LOCALE_ID = "en-US";
    USD_CURRENCY_CODE = "USD";
    ELEMENT_MARKER = {
      marker: "element"
    };
    ICU_MARKER = {
      marker: "ICU"
    };
    (function(I18nCreateOpCode2) {
      I18nCreateOpCode2[I18nCreateOpCode2["SHIFT"] = 2] = "SHIFT";
      I18nCreateOpCode2[I18nCreateOpCode2["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
      I18nCreateOpCode2[I18nCreateOpCode2["COMMENT"] = 2] = "COMMENT";
    })(I18nCreateOpCode || (I18nCreateOpCode = {}));
    LOCALE_ID$1 = DEFAULT_LOCALE_ID;
    changeMask = 0;
    changeMaskCounter = 0;
    _locateOrCreateNode = (lView, index, textOrName, nodeType) => {
      lastNodeWasCreated(true);
      return createNodeWithoutHydration(lView, textOrName, nodeType);
    };
    OpCodeParser = class {
      i = 0;
      codes;
      constructor(codes) {
        this.codes = codes;
      }
      hasMore() {
        return this.i < this.codes.length;
      }
      consumeNumber() {
        let value = this.codes[this.i++];
        assertNumber(value, "expecting number in OpCode");
        return value;
      }
      consumeString() {
        let value = this.codes[this.i++];
        assertString(value, "expecting string in OpCode");
        return value;
      }
      consumeFunction() {
        let value = this.codes[this.i++];
        if (value === null || typeof value === "function") {
          return value;
        }
        throw new Error("expecting function in OpCode");
      }
      consumeNumberOrString() {
        let value = this.codes[this.i++];
        if (typeof value === "string") {
          return value;
        }
        assertNumber(value, "expecting number or string in OpCode");
        return value;
      }
      consumeNumberStringOrMarker() {
        let value = this.codes[this.i++];
        if (typeof value === "string" || typeof value === "number" || value == ICU_MARKER || value == ELEMENT_MARKER) {
          return value;
        }
        assertNumber(value, "expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode");
        return value;
      }
    };
    BINDING_REGEXP = /�(\d+):?\d*�/gi;
    ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
    NESTED_ICU = /�(\d+)�/;
    ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
    MARKER = `\uFFFD`;
    SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
    PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
    NGSP_UNICODE_REGEXP = /\uE500/g;
    ROOT_TEMPLATE_ID = 0;
    PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
    PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
    PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
    PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
    PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
    PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
    PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
    parserState = {
      textEnd: 0,
      key: 0,
      keyEnd: 0,
      value: 0,
      valueEnd: 0
    };
    _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {
      lastNodeWasCreated(true);
      return createTextNode(lView[RENDERER], value);
    };
    UNINITIALIZED_LET = {};
    angularCoreEnv = /* @__PURE__ */ (() => ({
      "\u0275\u0275attribute": \u0275\u0275attribute,
      "\u0275\u0275defineComponent": \u0275\u0275defineComponent,
      "\u0275\u0275defineDirective": \u0275\u0275defineDirective,
      "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
      "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
      "\u0275\u0275defineNgModule": \u0275\u0275defineNgModule,
      "\u0275\u0275definePipe": \u0275\u0275definePipe,
      "\u0275\u0275directiveInject": \u0275\u0275directiveInject,
      "\u0275\u0275getInheritedFactory": \u0275\u0275getInheritedFactory,
      "\u0275\u0275inject": \u0275\u0275inject,
      "\u0275\u0275injectAttribute": \u0275\u0275injectAttribute,
      "\u0275\u0275invalidFactory": \u0275\u0275invalidFactory,
      "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
      "\u0275\u0275templateRefExtractor": \u0275\u0275templateRefExtractor,
      "\u0275\u0275resetView": \u0275\u0275resetView,
      "\u0275\u0275HostDirectivesFeature": \u0275\u0275HostDirectivesFeature,
      "\u0275\u0275NgOnChangesFeature": \u0275\u0275NgOnChangesFeature,
      "\u0275\u0275ProvidersFeature": \u0275\u0275ProvidersFeature,
      "\u0275\u0275CopyDefinitionFeature": \u0275\u0275CopyDefinitionFeature,
      "\u0275\u0275InheritDefinitionFeature": \u0275\u0275InheritDefinitionFeature,
      "\u0275\u0275ExternalStylesFeature": \u0275\u0275ExternalStylesFeature,
      "\u0275\u0275nextContext": \u0275\u0275nextContext,
      "\u0275\u0275namespaceHTML": \u0275\u0275namespaceHTML,
      "\u0275\u0275namespaceMathML": \u0275\u0275namespaceMathML,
      "\u0275\u0275namespaceSVG": \u0275\u0275namespaceSVG,
      "\u0275\u0275enableBindings": \u0275\u0275enableBindings,
      "\u0275\u0275disableBindings": \u0275\u0275disableBindings,
      "\u0275\u0275elementStart": \u0275\u0275elementStart,
      "\u0275\u0275elementEnd": \u0275\u0275elementEnd,
      "\u0275\u0275element": \u0275\u0275element,
      "\u0275\u0275elementContainerStart": \u0275\u0275elementContainerStart,
      "\u0275\u0275elementContainerEnd": \u0275\u0275elementContainerEnd,
      "\u0275\u0275domElement": \u0275\u0275domElement,
      "\u0275\u0275domElementStart": \u0275\u0275domElementStart,
      "\u0275\u0275domElementEnd": \u0275\u0275domElementEnd,
      "\u0275\u0275domElementContainer": \u0275\u0275domElementContainer,
      "\u0275\u0275domElementContainerStart": \u0275\u0275domElementContainerStart,
      "\u0275\u0275domElementContainerEnd": \u0275\u0275domElementContainerEnd,
      "\u0275\u0275domTemplate": \u0275\u0275domTemplate,
      "\u0275\u0275domListener": \u0275\u0275domListener,
      "\u0275\u0275elementContainer": \u0275\u0275elementContainer,
      "\u0275\u0275pureFunction0": \u0275\u0275pureFunction0,
      "\u0275\u0275pureFunction1": \u0275\u0275pureFunction1,
      "\u0275\u0275pureFunction2": \u0275\u0275pureFunction2,
      "\u0275\u0275pureFunction3": \u0275\u0275pureFunction3,
      "\u0275\u0275pureFunction4": \u0275\u0275pureFunction4,
      "\u0275\u0275pureFunction5": \u0275\u0275pureFunction5,
      "\u0275\u0275pureFunction6": \u0275\u0275pureFunction6,
      "\u0275\u0275pureFunction7": \u0275\u0275pureFunction7,
      "\u0275\u0275pureFunction8": \u0275\u0275pureFunction8,
      "\u0275\u0275pureFunctionV": \u0275\u0275pureFunctionV,
      "\u0275\u0275getCurrentView": \u0275\u0275getCurrentView,
      "\u0275\u0275restoreView": \u0275\u0275restoreView,
      "\u0275\u0275listener": \u0275\u0275listener,
      "\u0275\u0275projection": \u0275\u0275projection,
      "\u0275\u0275syntheticHostProperty": \u0275\u0275syntheticHostProperty,
      "\u0275\u0275syntheticHostListener": \u0275\u0275syntheticHostListener,
      "\u0275\u0275pipeBind1": \u0275\u0275pipeBind1,
      "\u0275\u0275pipeBind2": \u0275\u0275pipeBind2,
      "\u0275\u0275pipeBind3": \u0275\u0275pipeBind3,
      "\u0275\u0275pipeBind4": \u0275\u0275pipeBind4,
      "\u0275\u0275pipeBindV": \u0275\u0275pipeBindV,
      "\u0275\u0275projectionDef": \u0275\u0275projectionDef,
      "\u0275\u0275domProperty": \u0275\u0275domProperty,
      "\u0275\u0275property": \u0275\u0275property,
      "\u0275\u0275pipe": \u0275\u0275pipe,
      "\u0275\u0275queryRefresh": \u0275\u0275queryRefresh,
      "\u0275\u0275queryAdvance": \u0275\u0275queryAdvance,
      "\u0275\u0275viewQuery": \u0275\u0275viewQuery,
      "\u0275\u0275viewQuerySignal": \u0275\u0275viewQuerySignal,
      "\u0275\u0275loadQuery": \u0275\u0275loadQuery,
      "\u0275\u0275contentQuery": \u0275\u0275contentQuery,
      "\u0275\u0275contentQuerySignal": \u0275\u0275contentQuerySignal,
      "\u0275\u0275reference": \u0275\u0275reference,
      "\u0275\u0275classMap": \u0275\u0275classMap,
      "\u0275\u0275styleMap": \u0275\u0275styleMap,
      "\u0275\u0275styleProp": \u0275\u0275styleProp,
      "\u0275\u0275classProp": \u0275\u0275classProp,
      "\u0275\u0275advance": \u0275\u0275advance,
      "\u0275\u0275template": \u0275\u0275template,
      "\u0275\u0275conditional": \u0275\u0275conditional,
      "\u0275\u0275conditionalCreate": \u0275\u0275conditionalCreate,
      "\u0275\u0275conditionalBranchCreate": \u0275\u0275conditionalBranchCreate,
      "\u0275\u0275defer": \u0275\u0275defer,
      "\u0275\u0275deferWhen": \u0275\u0275deferWhen,
      "\u0275\u0275deferOnIdle": \u0275\u0275deferOnIdle,
      "\u0275\u0275deferOnImmediate": \u0275\u0275deferOnImmediate,
      "\u0275\u0275deferOnTimer": \u0275\u0275deferOnTimer,
      "\u0275\u0275deferOnHover": \u0275\u0275deferOnHover,
      "\u0275\u0275deferOnInteraction": \u0275\u0275deferOnInteraction,
      "\u0275\u0275deferOnViewport": \u0275\u0275deferOnViewport,
      "\u0275\u0275deferPrefetchWhen": \u0275\u0275deferPrefetchWhen,
      "\u0275\u0275deferPrefetchOnIdle": \u0275\u0275deferPrefetchOnIdle,
      "\u0275\u0275deferPrefetchOnImmediate": \u0275\u0275deferPrefetchOnImmediate,
      "\u0275\u0275deferPrefetchOnTimer": \u0275\u0275deferPrefetchOnTimer,
      "\u0275\u0275deferPrefetchOnHover": \u0275\u0275deferPrefetchOnHover,
      "\u0275\u0275deferPrefetchOnInteraction": \u0275\u0275deferPrefetchOnInteraction,
      "\u0275\u0275deferPrefetchOnViewport": \u0275\u0275deferPrefetchOnViewport,
      "\u0275\u0275deferHydrateWhen": \u0275\u0275deferHydrateWhen,
      "\u0275\u0275deferHydrateNever": \u0275\u0275deferHydrateNever,
      "\u0275\u0275deferHydrateOnIdle": \u0275\u0275deferHydrateOnIdle,
      "\u0275\u0275deferHydrateOnImmediate": \u0275\u0275deferHydrateOnImmediate,
      "\u0275\u0275deferHydrateOnTimer": \u0275\u0275deferHydrateOnTimer,
      "\u0275\u0275deferHydrateOnHover": \u0275\u0275deferHydrateOnHover,
      "\u0275\u0275deferHydrateOnInteraction": \u0275\u0275deferHydrateOnInteraction,
      "\u0275\u0275deferHydrateOnViewport": \u0275\u0275deferHydrateOnViewport,
      "\u0275\u0275deferEnableTimerScheduling": \u0275\u0275deferEnableTimerScheduling,
      "\u0275\u0275repeater": \u0275\u0275repeater,
      "\u0275\u0275repeaterCreate": \u0275\u0275repeaterCreate,
      "\u0275\u0275repeaterTrackByIndex": \u0275\u0275repeaterTrackByIndex,
      "\u0275\u0275repeaterTrackByIdentity": \u0275\u0275repeaterTrackByIdentity,
      "\u0275\u0275componentInstance": \u0275\u0275componentInstance,
      "\u0275\u0275text": \u0275\u0275text,
      "\u0275\u0275textInterpolate": \u0275\u0275textInterpolate,
      "\u0275\u0275textInterpolate1": \u0275\u0275textInterpolate1,
      "\u0275\u0275textInterpolate2": \u0275\u0275textInterpolate2,
      "\u0275\u0275textInterpolate3": \u0275\u0275textInterpolate3,
      "\u0275\u0275textInterpolate4": \u0275\u0275textInterpolate4,
      "\u0275\u0275textInterpolate5": \u0275\u0275textInterpolate5,
      "\u0275\u0275textInterpolate6": \u0275\u0275textInterpolate6,
      "\u0275\u0275textInterpolate7": \u0275\u0275textInterpolate7,
      "\u0275\u0275textInterpolate8": \u0275\u0275textInterpolate8,
      "\u0275\u0275textInterpolateV": \u0275\u0275textInterpolateV,
      "\u0275\u0275i18n": \u0275\u0275i18n,
      "\u0275\u0275i18nAttributes": \u0275\u0275i18nAttributes,
      "\u0275\u0275i18nExp": \u0275\u0275i18nExp,
      "\u0275\u0275i18nStart": \u0275\u0275i18nStart,
      "\u0275\u0275i18nEnd": \u0275\u0275i18nEnd,
      "\u0275\u0275i18nApply": \u0275\u0275i18nApply,
      "\u0275\u0275i18nPostprocess": \u0275\u0275i18nPostprocess,
      "\u0275\u0275resolveWindow": \u0275\u0275resolveWindow,
      "\u0275\u0275resolveDocument": \u0275\u0275resolveDocument,
      "\u0275\u0275resolveBody": \u0275\u0275resolveBody,
      "\u0275\u0275setComponentScope": \u0275\u0275setComponentScope,
      "\u0275\u0275setNgModuleScope": \u0275\u0275setNgModuleScope,
      "\u0275\u0275registerNgModuleType": registerNgModuleType,
      "\u0275\u0275getComponentDepsFactory": \u0275\u0275getComponentDepsFactory,
      "\u0275setClassDebugInfo": \u0275setClassDebugInfo,
      "\u0275\u0275declareLet": \u0275\u0275declareLet,
      "\u0275\u0275storeLet": \u0275\u0275storeLet,
      "\u0275\u0275readContextLet": \u0275\u0275readContextLet,
      "\u0275\u0275attachSourceLocations": \u0275\u0275attachSourceLocations,
      "\u0275\u0275interpolate": \u0275\u0275interpolate,
      "\u0275\u0275interpolate1": \u0275\u0275interpolate1,
      "\u0275\u0275interpolate2": \u0275\u0275interpolate2,
      "\u0275\u0275interpolate3": \u0275\u0275interpolate3,
      "\u0275\u0275interpolate4": \u0275\u0275interpolate4,
      "\u0275\u0275interpolate5": \u0275\u0275interpolate5,
      "\u0275\u0275interpolate6": \u0275\u0275interpolate6,
      "\u0275\u0275interpolate7": \u0275\u0275interpolate7,
      "\u0275\u0275interpolate8": \u0275\u0275interpolate8,
      "\u0275\u0275interpolateV": \u0275\u0275interpolateV,
      "\u0275\u0275sanitizeHtml": \u0275\u0275sanitizeHtml,
      "\u0275\u0275sanitizeStyle": \u0275\u0275sanitizeStyle,
      "\u0275\u0275sanitizeResourceUrl": \u0275\u0275sanitizeResourceUrl,
      "\u0275\u0275sanitizeScript": \u0275\u0275sanitizeScript,
      "\u0275\u0275sanitizeUrl": \u0275\u0275sanitizeUrl,
      "\u0275\u0275sanitizeUrlOrResourceUrl": \u0275\u0275sanitizeUrlOrResourceUrl,
      "\u0275\u0275trustConstantHtml": \u0275\u0275trustConstantHtml,
      "\u0275\u0275trustConstantResourceUrl": \u0275\u0275trustConstantResourceUrl,
      "\u0275\u0275validateIframeAttribute": \u0275\u0275validateIframeAttribute,
      "forwardRef": forwardRef,
      "resolveForwardRef": resolveForwardRef,
      "\u0275\u0275twoWayProperty": \u0275\u0275twoWayProperty,
      "\u0275\u0275twoWayBindingSet": \u0275\u0275twoWayBindingSet,
      "\u0275\u0275twoWayListener": \u0275\u0275twoWayListener,
      "\u0275\u0275replaceMetadata": \u0275\u0275replaceMetadata,
      "\u0275\u0275getReplaceMetadataURL": \u0275\u0275getReplaceMetadataURL
    }))();
    jitOptions = null;
    moduleQueue = [];
    flushingModuleQueue = false;
    ownerNgModule = /* @__PURE__ */ new WeakMap();
    verifiedNgModule = /* @__PURE__ */ new WeakMap();
    compilationDepth = 0;
    LIFECYCLE_HOOKS = [
      "ngOnChanges",
      "ngOnInit",
      "ngOnDestroy",
      "ngDoCheck",
      "ngAfterViewInit",
      "ngAfterViewChecked",
      "ngAfterContentInit",
      "ngAfterContentChecked"
    ];
    Directive = makeDecorator("Directive", (dir = {}) => dir, void 0, void 0, (type, meta) => compileDirective(type, meta));
    Component = makeDecorator("Component", (c = {}) => __spreadValues({ changeDetection: ChangeDetectionStrategy.Default }, c), Directive, void 0, (type, meta) => compileComponent(type, meta));
    Pipe = makeDecorator("Pipe", (p) => __spreadValues({ pure: true }, p), void 0, void 0, (type, meta) => compilePipe(type, meta));
    Input = makePropDecorator("Input", (arg) => {
      if (!arg) {
        return {};
      }
      return typeof arg === "string" ? { alias: arg } : arg;
    });
    Output = makePropDecorator("Output", (alias) => ({ alias }));
    HostBinding = makePropDecorator("HostBinding", (hostPropertyName) => ({ hostPropertyName }));
    HostListener = makePropDecorator("HostListener", (eventName, args) => ({ eventName, args }));
    NgModule = makeDecorator(
      "NgModule",
      (ngModule) => ngModule,
      void 0,
      void 0,
      /**
       * Decorator that marks the following class as an NgModule, and supplies
       * configuration metadata for it.
       *
       * * The `declarations` option configures the compiler
       * with information about what belongs to the NgModule.
       * * The `providers` options configures the NgModule's injector to provide
       * dependencies the NgModule members.
       * * The `imports` and `exports` options bring in members from other modules, and make
       * this module's members available to others.
       */
      (type, meta) => compileNgModule(type, meta)
    );
    ModuleWithComponentFactories = class {
      ngModuleFactory;
      componentFactories;
      constructor(ngModuleFactory, componentFactories) {
        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
      }
    };
    Compiler = class _Compiler {
      /**
       * Compiles the given NgModule and all of its components. All templates of the components
       * have to be inlined.
       */
      compileModuleSync(moduleType) {
        return new NgModuleFactory2(moduleType);
      }
      /**
       * Compiles the given NgModule and all of its components
       */
      compileModuleAsync(moduleType) {
        return Promise.resolve(this.compileModuleSync(moduleType));
      }
      /**
       * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsSync(moduleType) {
        const ngModuleFactory = this.compileModuleSync(moduleType);
        const moduleDef = getNgModuleDef(moduleType);
        const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
          const componentDef = getComponentDef(declaration);
          componentDef && factories.push(new ComponentFactory2(componentDef));
          return factories;
        }, []);
        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      }
      /**
       * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsAsync(moduleType) {
        return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
      }
      /**
       * Clears all caches.
       */
      clearCache() {
      }
      /**
       * Clears the cache for the given component/ngModule.
       */
      clearCacheFor(type) {
      }
      /**
       * Returns the id for a given NgModule, if one is defined and known to the compiler.
       */
      getModuleId(moduleType) {
        return void 0;
      }
      static \u0275fac = function Compiler_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _Compiler)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Compiler, factory: _Compiler.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], null, null);
    })();
    COMPILER_OPTIONS = new InjectionToken(ngDevMode ? "compilerOptions" : "");
    CompilerFactory = class {
    };
    NgZoneChangeDetectionScheduler = class _NgZoneChangeDetectionScheduler {
      zone = inject2(NgZone);
      changeDetectionScheduler = inject2(ChangeDetectionScheduler);
      applicationRef = inject2(ApplicationRef);
      applicationErrorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
      _onMicrotaskEmptySubscription;
      initialize() {
        if (this._onMicrotaskEmptySubscription) {
          return;
        }
        this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
          next: () => {
            if (this.changeDetectionScheduler.runningTick) {
              return;
            }
            this.zone.run(() => {
              try {
                this.applicationRef.dirtyFlags |= 1;
                this.applicationRef._tick();
              } catch (e) {
                this.applicationErrorHandler(e);
              }
            });
          }
        });
      }
      ngOnDestroy() {
        this._onMicrotaskEmptySubscription?.unsubscribe();
      }
      static \u0275fac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _NgZoneChangeDetectionScheduler)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _NgZoneChangeDetectionScheduler, factory: _NgZoneChangeDetectionScheduler.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], null, null);
    })();
    PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "provideZoneChangeDetection token" : "", { factory: () => false });
    ZoneStablePendingTask = class _ZoneStablePendingTask {
      subscription = new Subscription();
      initialized = false;
      zone = inject2(NgZone);
      pendingTasks = inject2(PendingTasksInternal);
      initialize() {
        if (this.initialized) {
          return;
        }
        this.initialized = true;
        let task = null;
        if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
          task = this.pendingTasks.add();
        }
        this.zone.runOutsideAngular(() => {
          this.subscription.add(this.zone.onStable.subscribe(() => {
            NgZone.assertNotInAngularZone();
            queueMicrotask(() => {
              if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
                this.pendingTasks.remove(task);
                task = null;
              }
            });
          }));
        });
        this.subscription.add(this.zone.onUnstable.subscribe(() => {
          NgZone.assertInAngularZone();
          task ??= this.pendingTasks.add();
        }));
      }
      ngOnDestroy() {
        this.subscription.unsubscribe();
      }
      static \u0275fac = function ZoneStablePendingTask_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ZoneStablePendingTask)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ZoneStablePendingTask, factory: _ZoneStablePendingTask.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], null, null);
    })();
    CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;
    consecutiveMicrotaskNotifications = 0;
    stackFromLastFewNotifications = [];
    ChangeDetectionSchedulerImpl = class _ChangeDetectionSchedulerImpl {
      applicationErrorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
      appRef = inject2(ApplicationRef);
      taskService = inject2(PendingTasksInternal);
      ngZone = inject2(NgZone);
      zonelessEnabled = inject2(ZONELESS_ENABLED);
      tracing = inject2(TracingService, { optional: true });
      disableScheduling = inject2(ZONELESS_SCHEDULER_DISABLED, { optional: true }) ?? false;
      zoneIsDefined = typeof Zone !== "undefined" && !!Zone.root.run;
      schedulerTickApplyArgs = [{ data: { "__scheduler_tick__": true } }];
      subscriptions = new Subscription();
      angularZoneId = this.zoneIsDefined ? this.ngZone._inner?.get(angularZoneInstanceIdProperty) : null;
      scheduleInRootZone = !this.zonelessEnabled && this.zoneIsDefined && (inject2(SCHEDULE_IN_ROOT_ZONE, { optional: true }) ?? false);
      cancelScheduledCallback = null;
      useMicrotaskScheduler = false;
      runningTick = false;
      pendingRenderTaskId = null;
      constructor() {
        this.subscriptions.add(this.appRef.afterTick.subscribe(() => {
          if (!this.runningTick) {
            this.cleanup();
          }
        }));
        this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {
          if (!this.runningTick) {
            this.cleanup();
          }
        }));
        this.disableScheduling ||= !this.zonelessEnabled && // NoopNgZone without enabling zoneless means no scheduling whatsoever
        (this.ngZone instanceof NoopNgZone || // The same goes for the lack of Zone without enabling zoneless scheduling
        !this.zoneIsDefined);
      }
      notify(source) {
        if (!this.zonelessEnabled && source === 5) {
          return;
        }
        let force = false;
        switch (source) {
          case 0: {
            this.appRef.dirtyFlags |= 2;
            break;
          }
          case 3:
          case 2:
          case 4:
          case 5:
          case 1: {
            this.appRef.dirtyFlags |= 4;
            break;
          }
          case 6: {
            this.appRef.dirtyFlags |= 2;
            force = true;
            break;
          }
          case 12: {
            this.appRef.dirtyFlags |= 16;
            force = true;
            break;
          }
          case 13: {
            this.appRef.dirtyFlags |= 2;
            force = true;
            break;
          }
          case 11: {
            force = true;
            break;
          }
          case 9:
          case 8:
          case 7:
          case 10:
          default: {
            this.appRef.dirtyFlags |= 8;
          }
        }
        this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;
        if (!this.shouldScheduleTick(force)) {
          return;
        }
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          if (this.useMicrotaskScheduler) {
            trackMicrotaskNotificationForDebugging();
          } else {
            consecutiveMicrotaskNotifications = 0;
            stackFromLastFewNotifications.length = 0;
          }
        }
        const scheduleCallback = this.useMicrotaskScheduler ? scheduleCallbackWithMicrotask : scheduleCallbackWithRafRace;
        this.pendingRenderTaskId = this.taskService.add();
        if (this.scheduleInRootZone) {
          this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));
        } else {
          this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));
        }
      }
      shouldScheduleTick(force) {
        if (this.disableScheduling && !force || this.appRef.destroyed) {
          return false;
        }
        if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {
          return false;
        }
        if (!this.zonelessEnabled && this.zoneIsDefined && Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {
          return false;
        }
        return true;
      }
      /**
       * Calls ApplicationRef._tick inside the `NgZone`.
       *
       * Calling `tick` directly runs change detection and cancels any change detection that had been
       * scheduled previously.
       *
       * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to
       *     render hooks when `false`.
       */
      tick() {
        if (this.runningTick || this.appRef.destroyed) {
          return;
        }
        if (this.appRef.dirtyFlags === 0) {
          this.cleanup();
          return;
        }
        if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7) {
          this.appRef.dirtyFlags |= 1;
        }
        const task = this.taskService.add();
        try {
          this.ngZone.run(() => {
            this.runningTick = true;
            this.appRef._tick();
          }, void 0, this.schedulerTickApplyArgs);
        } catch (e) {
          this.taskService.remove(task);
          this.applicationErrorHandler(e);
        } finally {
          this.cleanup();
        }
        this.useMicrotaskScheduler = true;
        scheduleCallbackWithMicrotask(() => {
          this.useMicrotaskScheduler = false;
          this.taskService.remove(task);
        });
      }
      ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.cleanup();
      }
      cleanup() {
        this.runningTick = false;
        this.cancelScheduledCallback?.();
        this.cancelScheduledCallback = null;
        if (this.pendingRenderTaskId !== null) {
          const taskId = this.pendingRenderTaskId;
          this.pendingRenderTaskId = null;
          this.taskService.remove(taskId);
        }
      }
      static \u0275fac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ChangeDetectionSchedulerImpl)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ChangeDetectionSchedulerImpl, factory: _ChangeDetectionSchedulerImpl.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], () => [], null);
    })();
    LOCALE_ID = new InjectionToken(ngDevMode ? "LocaleId" : "", {
      providedIn: "root",
      factory: () => inject2(LOCALE_ID, { optional: true, skipSelf: true }) || getGlobalLocale()
    });
    DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? "DefaultCurrencyCode" : "", {
      providedIn: "root",
      factory: () => USD_CURRENCY_CODE
    });
    TRANSLATIONS = new InjectionToken(ngDevMode ? "Translations" : "");
    TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? "TranslationsFormat" : "");
    (function(MissingTranslationStrategy3) {
      MissingTranslationStrategy3[MissingTranslationStrategy3["Error"] = 0] = "Error";
      MissingTranslationStrategy3[MissingTranslationStrategy3["Warning"] = 1] = "Warning";
      MissingTranslationStrategy3[MissingTranslationStrategy3["Ignore"] = 2] = "Ignore";
    })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
    DebugEventListener = class {
      name;
      callback;
      constructor(name, callback) {
        this.name = name;
        this.callback = callback;
      }
    };
    DebugNode = class {
      /**
       * The underlying DOM node.
       */
      nativeNode;
      constructor(nativeNode) {
        this.nativeNode = nativeNode;
      }
      /**
       * The `DebugElement` parent. Will be `null` if this is the root element.
       */
      get parent() {
        const parent = this.nativeNode.parentNode;
        return parent ? new DebugElement(parent) : null;
      }
      /**
       * The host dependency injector. For example, the root element's component instance injector.
       */
      get injector() {
        return getInjector(this.nativeNode);
      }
      /**
       * The element's own component instance, if it has one.
       */
      get componentInstance() {
        const nativeElement = this.nativeNode;
        return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));
      }
      /**
       * An object that provides parent context for this element. Often an ancestor component instance
       * that governs this element.
       *
       * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`
       * property is the value of the row instance value. For example, the `hero` in `*ngFor="let hero
       * of heroes"`.
       */
      get context() {
        return getComponent(this.nativeNode) || getContext(this.nativeNode);
      }
      /**
       * The callbacks attached to the component's @Output properties and/or the element's event
       * properties.
       */
      get listeners() {
        return getListeners(this.nativeNode).filter((listener2) => listener2.type === "dom");
      }
      /**
       * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local
       * variable name.
       */
      get references() {
        return getLocalRefs(this.nativeNode);
      }
      /**
       * This component's injector lookup tokens. Includes the component itself plus the tokens that the
       * component lists in its providers metadata.
       */
      get providerTokens() {
        return getInjectionTokens(this.nativeNode);
      }
    };
    DebugElement = class extends DebugNode {
      constructor(nativeNode) {
        ngDevMode && assertDomNode(nativeNode);
        super(nativeNode);
      }
      /**
       * The underlying DOM element at the root of the component.
       */
      get nativeElement() {
        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
      }
      /**
       * The element tag name, if it is an element.
       */
      get name() {
        const context2 = getLContext(this.nativeNode);
        const lView = context2 ? context2.lView : null;
        if (lView !== null) {
          const tData = lView[TVIEW].data;
          const tNode = tData[context2.nodeIndex];
          return tNode.value;
        } else {
          return this.nativeNode.nodeName;
        }
      }
      /**
       *  Gets a map of property names to property values for an element.
       *
       *  This map includes:
       *  - Regular property bindings (e.g. `[id]="id"`)
       *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
       *  - Interpolated property bindings (e.g. `id="{{ value }}")
       *
       *  It does not include:
       *  - input property bindings (e.g. `[myCustomInput]="value"`)
       *  - attribute bindings (e.g. `[attr.role]="menu"`)
       */
      get properties() {
        const context2 = getLContext(this.nativeNode);
        const lView = context2 ? context2.lView : null;
        if (lView === null) {
          return {};
        }
        const tData = lView[TVIEW].data;
        const tNode = tData[context2.nodeIndex];
        const properties = {};
        copyDomProperties(this.nativeElement, properties);
        collectPropertyBindings(properties, tNode, lView, tData);
        return properties;
      }
      /**
       *  A map of attribute names to attribute values for an element.
       */
      // TODO: replace null by undefined in the return type
      get attributes() {
        const attributes = {};
        const element2 = this.nativeElement;
        if (!element2) {
          return attributes;
        }
        const context2 = getLContext(element2);
        const lView = context2 ? context2.lView : null;
        if (lView === null) {
          return {};
        }
        const tNodeAttrs = lView[TVIEW].data[context2.nodeIndex].attrs;
        const lowercaseTNodeAttrs = [];
        if (tNodeAttrs) {
          let i = 0;
          while (i < tNodeAttrs.length) {
            const attrName = tNodeAttrs[i];
            if (typeof attrName !== "string")
              break;
            const attrValue = tNodeAttrs[i + 1];
            attributes[attrName] = attrValue;
            lowercaseTNodeAttrs.push(attrName.toLowerCase());
            i += 2;
          }
        }
        for (const attr of element2.attributes) {
          if (!lowercaseTNodeAttrs.includes(attr.name)) {
            attributes[attr.name] = attr.value;
          }
        }
        return attributes;
      }
      /**
       * The inline styles of the DOM element.
       */
      // TODO: replace null by undefined in the return type
      get styles() {
        const element2 = this.nativeElement;
        return element2?.style ?? {};
      }
      /**
       * A map containing the class names on the element as keys.
       *
       * This map is derived from the `className` property of the DOM element.
       *
       * Note: The values of this object will always be `true`. The class key will not appear in the KV
       * object if it does not exist on the element.
       *
       * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
       */
      get classes() {
        const result = {};
        const element2 = this.nativeElement;
        const className = element2.className;
        const classes = typeof className !== "string" ? className.baseVal.split(" ") : className.split(" ");
        classes.forEach((value) => result[value] = true);
        return result;
      }
      /**
       * The `childNodes` of the DOM element as a `DebugNode` array.
       *
       * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)
       */
      get childNodes() {
        const childNodes = this.nativeNode.childNodes;
        const children = [];
        for (let i = 0; i < childNodes.length; i++) {
          const element2 = childNodes[i];
          children.push(getDebugNode(element2));
        }
        return children;
      }
      /**
       * The immediate `DebugElement` children. Walk the tree by descending through `children`.
       */
      get children() {
        const nativeElement = this.nativeElement;
        if (!nativeElement)
          return [];
        const childNodes = nativeElement.children;
        const children = [];
        for (let i = 0; i < childNodes.length; i++) {
          const element2 = childNodes[i];
          children.push(getDebugNode(element2));
        }
        return children;
      }
      /**
       * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.
       */
      query(predicate) {
        const results = this.queryAll(predicate);
        return results[0] || null;
      }
      /**
       * @returns All `DebugElement` matches for the predicate at any depth in the subtree.
       */
      queryAll(predicate) {
        const matches = [];
        _queryAll(this, predicate, matches, true);
        return matches;
      }
      /**
       * @returns All `DebugNode` matches for the predicate at any depth in the subtree.
       */
      queryAllNodes(predicate) {
        const matches = [];
        _queryAll(this, predicate, matches, false);
        return matches;
      }
      /**
       * Triggers the event by its name if there is a corresponding listener in the element's
       * `listeners` collection.
       *
       * If the event lacks a listener or there's some other problem, consider
       * calling `nativeElement.dispatchEvent(eventObject)`.
       *
       * @param eventName The name of the event to trigger
       * @param eventObj The _event object_ expected by the handler
       *
       * @see [Testing components scenarios](guide/testing/components-scenarios#trigger-event-handler)
       */
      triggerEventHandler(eventName, eventObj) {
        const node = this.nativeNode;
        const invokedListeners = [];
        this.listeners.forEach((listener2) => {
          if (listener2.name === eventName) {
            const callback = listener2.callback;
            callback.call(node, eventObj);
            invokedListeners.push(callback);
          }
        });
        if (typeof node.eventListeners === "function") {
          node.eventListeners(eventName).forEach((listener2) => {
            if (listener2.toString().indexOf("__ngUnwrap__") !== -1) {
              const unwrappedListener = listener2("__ngUnwrap__");
              return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
            }
          });
        }
      }
    };
    NG_DEBUG_PROPERTY = "__ng_debug__";
  }
});

// node_modules/@angular/core/fesm2022/resource.mjs
function getOutputDestroyRef(ref) {
  return ref.destroyRef;
}
function untracked2(nonReactiveReadsFn) {
  return untracked(nonReactiveReadsFn);
}
function computed(computation, options) {
  const getter = createComputed(computation, options?.equal);
  if (ngDevMode) {
    getter.toString = () => `[Computed: ${getter()}]`;
    getter[SIGNAL].debugName = options?.debugName;
  }
  return getter;
}
function effect(effectFn, options) {
  ngDevMode && assertNotInReactiveContext(effect, "Call `effect` outside of a reactive context. For example, schedule the effect inside the component constructor.");
  if (ngDevMode && !options?.injector) {
    assertInInjectionContext(effect);
  }
  if (ngDevMode && options?.allowSignalWrites !== void 0) {
    console.warn(`The 'allowSignalWrites' flag is deprecated and no longer impacts effect() (writes are always allowed)`);
  }
  const injector = options?.injector ?? inject2(Injector);
  let destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
  let node;
  const viewContext = injector.get(ViewContext, null, { optional: true });
  const notifier = injector.get(ChangeDetectionScheduler);
  if (viewContext !== null) {
    node = createViewEffect(viewContext.view, notifier, effectFn);
    if (destroyRef instanceof NodeInjectorDestroyRef && destroyRef._lView === viewContext.view) {
      destroyRef = null;
    }
  } else {
    node = createRootEffect(effectFn, injector.get(EffectScheduler), notifier);
  }
  node.injector = injector;
  if (destroyRef !== null) {
    node.onDestroyFn = destroyRef.onDestroy(() => node.destroy());
  }
  const effectRef = new EffectRefImpl(node);
  if (ngDevMode) {
    node.debugName = options?.debugName ?? "";
    const prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });
    try {
      emitEffectCreatedEvent(effectRef);
    } finally {
      setInjectorProfilerContext(prevInjectorProfilerContext);
    }
  }
  return effectRef;
}
function createViewEffect(view, notifier, fn2) {
  const node = Object.create(VIEW_EFFECT_NODE);
  node.view = view;
  node.zone = typeof Zone !== "undefined" ? Zone.current : null;
  node.notifier = notifier;
  node.fn = fn2;
  view[EFFECTS] ??= /* @__PURE__ */ new Set();
  view[EFFECTS].add(node);
  node.consumerMarkedDirty(node);
  return node;
}
function createRootEffect(fn2, scheduler, notifier) {
  const node = Object.create(ROOT_EFFECT_NODE);
  node.fn = fn2;
  node.scheduler = scheduler;
  node.notifier = notifier;
  node.zone = typeof Zone !== "undefined" ? Zone.current : null;
  node.scheduler.add(node);
  node.notifier.notify(
    12
    /* NotificationSource.RootEffect */
  );
  return node;
}
function linkedSignal(optionsOrComputation, options) {
  if (typeof optionsOrComputation === "function") {
    const getter = createLinkedSignal(optionsOrComputation, identityFn, options?.equal);
    return upgradeLinkedSignalGetter(getter);
  } else {
    const getter = createLinkedSignal(optionsOrComputation.source, optionsOrComputation.computation, optionsOrComputation.equal);
    return upgradeLinkedSignalGetter(getter);
  }
}
function upgradeLinkedSignalGetter(getter) {
  if (ngDevMode) {
    getter.toString = () => `[LinkedSignal: ${getter()}]`;
  }
  const node = getter[SIGNAL];
  const upgradedGetter = getter;
  upgradedGetter.set = (newValue) => linkedSignalSetFn(node, newValue);
  upgradedGetter.update = (updateFn) => linkedSignalUpdateFn(node, updateFn);
  upgradedGetter.asReadonly = signalAsReadonlyFn.bind(getter);
  return upgradedGetter;
}
function resource(options) {
  if (ngDevMode && !options?.injector) {
    assertInInjectionContext(resource);
  }
  const oldNameForParams = options.request;
  const params = options.params ?? oldNameForParams ?? (() => null);
  return new ResourceImpl(params, getLoader(options), options.defaultValue, options.equal ? wrapEqualityFn(options.equal) : void 0, options.injector ?? inject2(Injector), RESOURCE_VALUE_THROWS_ERRORS_DEFAULT);
}
function setResourceValueThrowsErrors(value) {
  RESOURCE_VALUE_THROWS_ERRORS_DEFAULT = value;
}
function wrapEqualityFn(equal) {
  return (a, b) => a === void 0 || b === void 0 ? a === b : equal(a, b);
}
function getLoader(options) {
  if (isStreamingResourceOptions(options)) {
    return options.stream;
  }
  return (params) => __async(null, null, function* () {
    try {
      return signal({ value: yield options.loader(params) });
    } catch (err) {
      return signal({ error: encapsulateResourceError(err) });
    }
  });
}
function isStreamingResourceOptions(options) {
  return !!options.stream;
}
function projectStatusOfState(state) {
  switch (state.status) {
    case "loading":
      return state.extRequest.reload === 0 ? "loading" : "reloading";
    case "resolved":
      return isResolved(state.stream()) ? "resolved" : "error";
    default:
      return state.status;
  }
}
function isResolved(state) {
  return state.error === void 0;
}
function encapsulateResourceError(error) {
  if (error instanceof Error) {
    return error;
  }
  return new ResourceWrappedError(error);
}
var OutputEmitterRef, EffectRefImpl, BASE_EFFECT_NODE, ROOT_EFFECT_NODE, VIEW_EFFECT_NODE, identityFn, RESOURCE_VALUE_THROWS_ERRORS_DEFAULT, BaseWritableResource, ResourceImpl, ResourceValueError, ResourceWrappedError;
var init_resource = __esm({
  "node_modules/@angular/core/fesm2022/resource.mjs"() {
    "use strict";
    init_root_effect_scheduler();
    init_signal();
    init_untracked();
    OutputEmitterRef = class {
      destroyed = false;
      listeners = null;
      errorHandler = inject2(ErrorHandler, { optional: true });
      /** @internal */
      destroyRef = inject2(DestroyRef);
      constructor() {
        this.destroyRef.onDestroy(() => {
          this.destroyed = true;
          this.listeners = null;
        });
      }
      subscribe(callback) {
        if (this.destroyed) {
          throw new RuntimeError(953, ngDevMode && "Unexpected subscription to destroyed `OutputRef`. The owning directive/component is destroyed.");
        }
        (this.listeners ??= []).push(callback);
        return {
          unsubscribe: () => {
            const idx = this.listeners?.indexOf(callback);
            if (idx !== void 0 && idx !== -1) {
              this.listeners?.splice(idx, 1);
            }
          }
        };
      }
      /** Emits a new value to the output. */
      emit(value) {
        if (this.destroyed) {
          console.warn(formatRuntimeError(953, ngDevMode && "Unexpected emit for destroyed `OutputRef`. The owning directive/component is destroyed."));
          return;
        }
        if (this.listeners === null) {
          return;
        }
        const previousConsumer = setActiveConsumer(null);
        try {
          for (const listenerFn of this.listeners) {
            try {
              listenerFn(value);
            } catch (err) {
              this.errorHandler?.handleError(err);
            }
          }
        } finally {
          setActiveConsumer(previousConsumer);
        }
      }
    };
    EffectRefImpl = class {
      [SIGNAL];
      constructor(node) {
        this[SIGNAL] = node;
      }
      destroy() {
        this[SIGNAL].destroy();
      }
    };
    BASE_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, REACTIVE_NODE), {
      consumerIsAlwaysLive: true,
      consumerAllowSignalWrites: true,
      dirty: true,
      hasRun: false,
      cleanupFns: void 0,
      zone: null,
      kind: "effect",
      onDestroyFn: noop2,
      run() {
        this.dirty = false;
        if (ngDevMode && isInNotificationPhase()) {
          throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);
        }
        if (this.hasRun && !consumerPollProducersForChange(this)) {
          return;
        }
        this.hasRun = true;
        const registerCleanupFn = (cleanupFn) => (this.cleanupFns ??= []).push(cleanupFn);
        const prevNode = consumerBeforeComputation(this);
        const prevRefreshingViews = setIsRefreshingViews(false);
        try {
          this.maybeCleanup();
          this.fn(registerCleanupFn);
        } finally {
          setIsRefreshingViews(prevRefreshingViews);
          consumerAfterComputation(this, prevNode);
        }
      },
      maybeCleanup() {
        if (!this.cleanupFns?.length) {
          return;
        }
        const prevConsumer = setActiveConsumer(null);
        try {
          while (this.cleanupFns.length) {
            this.cleanupFns.pop()();
          }
        } finally {
          this.cleanupFns = [];
          setActiveConsumer(prevConsumer);
        }
      }
    }))();
    ROOT_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, BASE_EFFECT_NODE), {
      consumerMarkedDirty() {
        this.scheduler.schedule(this);
        this.notifier.notify(
          12
          /* NotificationSource.RootEffect */
        );
      },
      destroy() {
        consumerDestroy(this);
        this.onDestroyFn();
        this.maybeCleanup();
        this.scheduler.remove(this);
      }
    }))();
    VIEW_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, BASE_EFFECT_NODE), {
      consumerMarkedDirty() {
        this.view[FLAGS] |= 8192;
        markAncestorsForTraversal(this.view);
        this.notifier.notify(
          13
          /* NotificationSource.ViewEffect */
        );
      },
      destroy() {
        consumerDestroy(this);
        this.onDestroyFn();
        this.maybeCleanup();
        this.view[EFFECTS]?.delete(this);
      }
    }))();
    identityFn = (v) => v;
    RESOURCE_VALUE_THROWS_ERRORS_DEFAULT = true;
    BaseWritableResource = class {
      value;
      constructor(value) {
        this.value = value;
        this.value.set = this.set.bind(this);
        this.value.update = this.update.bind(this);
        this.value.asReadonly = signalAsReadonlyFn;
      }
      isError = computed(() => this.status() === "error");
      update(updateFn) {
        this.set(updateFn(untracked2(this.value)));
      }
      isLoading = computed(() => this.status() === "loading" || this.status() === "reloading");
      // Use a computed here to avoid triggering reactive consumers if the value changes while staying
      // either defined or undefined.
      isValueDefined = computed(() => {
        if (this.isError()) {
          return false;
        }
        return this.value() !== void 0;
      });
      hasValue() {
        return this.isValueDefined();
      }
      asReadonly() {
        return this;
      }
    };
    ResourceImpl = class extends BaseWritableResource {
      loaderFn;
      equal;
      pendingTasks;
      /**
       * The current state of the resource. Status, value, and error are derived from this.
       */
      state;
      /**
       * Combines the current request with a reload counter which allows the resource to be reloaded on
       * imperative command.
       */
      extRequest;
      effectRef;
      pendingController;
      resolvePendingTask = void 0;
      destroyed = false;
      unregisterOnDestroy;
      constructor(request, loaderFn, defaultValue, equal, injector, throwErrorsFromValue = RESOURCE_VALUE_THROWS_ERRORS_DEFAULT) {
        super(
          // Feed a computed signal for the value to `BaseWritableResource`, which will upgrade it to a
          // `WritableSignal` that delegates to `ResourceImpl.set`.
          computed(() => {
            const streamValue = this.state().stream?.();
            if (!streamValue) {
              return defaultValue;
            }
            if (this.state().status === "loading" && this.error()) {
              return defaultValue;
            }
            if (!isResolved(streamValue)) {
              if (throwErrorsFromValue) {
                throw new ResourceValueError(this.error());
              } else {
                return defaultValue;
              }
            }
            return streamValue.value;
          }, { equal })
        );
        this.loaderFn = loaderFn;
        this.equal = equal;
        this.extRequest = linkedSignal({
          source: request,
          computation: (request2) => ({ request: request2, reload: 0 })
        });
        this.state = linkedSignal({
          // Whenever the request changes,
          source: this.extRequest,
          // Compute the state of the resource given a change in status.
          computation: (extRequest, previous) => {
            const status = extRequest.request === void 0 ? "idle" : "loading";
            if (!previous) {
              return {
                extRequest,
                status,
                previousStatus: "idle",
                stream: void 0
              };
            } else {
              return {
                extRequest,
                status,
                previousStatus: projectStatusOfState(previous.value),
                // If the request hasn't changed, keep the previous stream.
                stream: previous.value.extRequest.request === extRequest.request ? previous.value.stream : void 0
              };
            }
          }
        });
        this.effectRef = effect(this.loadEffect.bind(this), {
          injector,
          manualCleanup: true
        });
        this.pendingTasks = injector.get(PendingTasks);
        this.unregisterOnDestroy = injector.get(DestroyRef).onDestroy(() => this.destroy());
      }
      status = computed(() => projectStatusOfState(this.state()));
      error = computed(() => {
        const stream = this.state().stream?.();
        return stream && !isResolved(stream) ? stream.error : void 0;
      });
      /**
       * Called either directly via `WritableResource.set` or via `.value.set()`.
       */
      set(value) {
        if (this.destroyed) {
          return;
        }
        const error = untracked2(this.error);
        const state = untracked2(this.state);
        if (!error) {
          const current = untracked2(this.value);
          if (state.status === "local" && (this.equal ? this.equal(current, value) : current === value)) {
            return;
          }
        }
        this.state.set({
          extRequest: state.extRequest,
          status: "local",
          previousStatus: "local",
          stream: signal({ value })
        });
        this.abortInProgressLoad();
      }
      reload() {
        const { status } = untracked2(this.state);
        if (status === "idle" || status === "loading") {
          return false;
        }
        this.extRequest.update(({ request, reload }) => ({ request, reload: reload + 1 }));
        return true;
      }
      destroy() {
        this.destroyed = true;
        this.unregisterOnDestroy();
        this.effectRef.destroy();
        this.abortInProgressLoad();
        this.state.set({
          extRequest: { request: void 0, reload: 0 },
          status: "idle",
          previousStatus: "idle",
          stream: void 0
        });
      }
      loadEffect() {
        return __async(this, null, function* () {
          const extRequest = this.extRequest();
          const { status: currentStatus, previousStatus } = untracked2(this.state);
          if (extRequest.request === void 0) {
            return;
          } else if (currentStatus !== "loading") {
            return;
          }
          this.abortInProgressLoad();
          let resolvePendingTask = this.resolvePendingTask = this.pendingTasks.add();
          const { signal: abortSignal } = this.pendingController = new AbortController();
          try {
            const stream = yield untracked2(() => {
              return this.loaderFn({
                params: extRequest.request,
                // TODO(alxhub): cleanup after g3 removal of `request` alias.
                request: extRequest.request,
                abortSignal,
                previous: {
                  status: previousStatus
                }
              });
            });
            if (abortSignal.aborted || untracked2(this.extRequest) !== extRequest) {
              return;
            }
            this.state.set({
              extRequest,
              status: "resolved",
              previousStatus: "resolved",
              stream
            });
          } catch (err) {
            if (abortSignal.aborted || untracked2(this.extRequest) !== extRequest) {
              return;
            }
            this.state.set({
              extRequest,
              status: "resolved",
              previousStatus: "error",
              stream: signal({ error: encapsulateResourceError(err) })
            });
          } finally {
            resolvePendingTask?.();
            resolvePendingTask = void 0;
          }
        });
      }
      abortInProgressLoad() {
        untracked2(() => this.pendingController?.abort());
        this.pendingController = void 0;
        this.resolvePendingTask?.();
        this.resolvePendingTask = void 0;
      }
    };
    ResourceValueError = class extends Error {
      constructor(error) {
        super(ngDevMode ? `Resource is currently in an error state (see Error.cause for details): ${error.message}` : error.message, { cause: error });
      }
    };
    ResourceWrappedError = class extends Error {
      constructor(error) {
        super(ngDevMode ? `Resource returned an error that's not an Error instance: ${String(error)}. Check this error's .cause for the actual error.` : String(error), { cause: error });
      }
    };
  }
});

// node_modules/@angular/core/fesm2022/primitives/event-dispatch.mjs
function get(element2) {
  return element2[Property.JSACTION];
}
function set(element2, actionMap) {
  element2[Property.JSACTION] = actionMap;
}
function getParsed(text2) {
  return parseCache[text2];
}
function setParsed(text2, parsed) {
  parseCache[text2] = parsed;
}
function getBrowserEventType(eventType) {
  if (eventType === EventType.MOUSEENTER) {
    return EventType.MOUSEOVER;
  } else if (eventType === EventType.MOUSELEAVE) {
    return EventType.MOUSEOUT;
  } else if (eventType === EventType.POINTERENTER) {
    return EventType.POINTEROVER;
  } else if (eventType === EventType.POINTERLEAVE) {
    return EventType.POINTEROUT;
  }
  return eventType;
}
function addEventListener(element2, eventType, handler, passive) {
  let capture = false;
  if (isCaptureEventType(eventType)) {
    capture = true;
  }
  const options = typeof passive === "boolean" ? { capture, passive } : capture;
  element2.addEventListener(eventType, handler, options);
  return { eventType, handler, capture, passive };
}
function removeEventListener(element2, info) {
  if (element2.removeEventListener) {
    const options = typeof info.passive === "boolean" ? { capture: info.capture } : info.capture;
    element2.removeEventListener(info.eventType, info.handler, options);
  } else if (element2.detachEvent) {
    element2.detachEvent(`on${info.eventType}`, info.handler);
  }
}
function preventDefault(e) {
  e.preventDefault ? e.preventDefault() : e.returnValue = false;
}
function isMiddleClick(e) {
  return (
    // `which` is an old DOM API.
    e.which === 2 || // `which` is an old DOM API.
    e.which == null && // `button` is an old DOM API.
    e.button === 4
  );
}
function isModifiedClickEvent(e) {
  return (
    // `metaKey` is an old DOM API.
    isMac && e.metaKey || // `ctrlKey` is an old DOM API.
    !isMac && e.ctrlKey || isMiddleClick(e) || // `shiftKey` is an old DOM API.
    e.shiftKey
  );
}
function isMouseSpecialEvent(e, type, element2) {
  const related = e.relatedTarget;
  return (e.type === EventType.MOUSEOVER && type === EventType.MOUSEENTER || e.type === EventType.MOUSEOUT && type === EventType.MOUSELEAVE || e.type === EventType.POINTEROVER && type === EventType.POINTERENTER || e.type === EventType.POINTEROUT && type === EventType.POINTERLEAVE) && (!related || related !== element2 && !element2.contains(related));
}
function createMouseSpecialEvent(e, target) {
  const copy = {};
  for (const property2 in e) {
    if (property2 === "srcElement" || property2 === "target") {
      continue;
    }
    const key = property2;
    const value = e[key];
    if (typeof value === "function") {
      continue;
    }
    copy[key] = value;
  }
  if (e.type === EventType.MOUSEOVER) {
    copy["type"] = EventType.MOUSEENTER;
  } else if (e.type === EventType.MOUSEOUT) {
    copy["type"] = EventType.MOUSELEAVE;
  } else if (e.type === EventType.POINTEROVER) {
    copy["type"] = EventType.POINTERENTER;
  } else {
    copy["type"] = EventType.POINTERLEAVE;
  }
  copy["target"] = copy["srcElement"] = target;
  copy["bubbles"] = false;
  copy["_originalEvent"] = e;
  return copy;
}
function getEventType(eventInfo) {
  return eventInfo.eventType;
}
function setEventType(eventInfo, eventType) {
  eventInfo.eventType = eventType;
}
function getEvent(eventInfo) {
  return eventInfo.event;
}
function setEvent(eventInfo, event) {
  eventInfo.event = event;
}
function getTargetElement(eventInfo) {
  return eventInfo.targetElement;
}
function setTargetElement(eventInfo, targetElement) {
  eventInfo.targetElement = targetElement;
}
function getContainer(eventInfo) {
  return eventInfo.eic;
}
function setContainer(eventInfo, container) {
  eventInfo.eic = container;
}
function getTimestamp(eventInfo) {
  return eventInfo.timeStamp;
}
function setTimestamp(eventInfo, timestamp) {
  eventInfo.timeStamp = timestamp;
}
function getAction(eventInfo) {
  return eventInfo.eia;
}
function setAction(eventInfo, actionName, actionElement) {
  eventInfo.eia = [actionName, actionElement];
}
function unsetAction(eventInfo) {
  eventInfo.eia = void 0;
}
function getActionElement(actionInfo) {
  return actionInfo[1];
}
function getIsReplay(eventInfo) {
  return eventInfo.eirp;
}
function setIsReplay(eventInfo, replay) {
  eventInfo.eirp = replay;
}
function getResolved(eventInfo) {
  return eventInfo.eir;
}
function setResolved(eventInfo, resolved2) {
  eventInfo.eir = resolved2;
}
function cloneEventInfo(eventInfo) {
  return {
    eventType: eventInfo.eventType,
    event: eventInfo.event,
    targetElement: eventInfo.targetElement,
    eic: eventInfo.eic,
    eia: eventInfo.eia,
    timeStamp: eventInfo.timeStamp,
    eirp: eventInfo.eirp,
    eiack: eventInfo.eiack,
    eir: eventInfo.eir
  };
}
function createEventInfoFromParameters(eventType, event, targetElement, container, timestamp, action, isReplay, a11yClickKey) {
  return {
    eventType,
    event,
    targetElement,
    eic: container,
    timeStamp: timestamp,
    eia: action,
    eirp: isReplay,
    eiack: a11yClickKey
  };
}
function shouldPreventDefaultBeforeDispatching(actionElement, eventInfoWrapper) {
  return actionElement.tagName === "A" && (eventInfoWrapper.getEventType() === EventType.CLICK || eventInfoWrapper.getEventType() === EventType.CLICKMOD);
}
function prepareEventForBubbling(eventInfoWrapper) {
  const event = eventInfoWrapper.getEvent();
  const originalStopPropagation = eventInfoWrapper.getEvent().stopPropagation.bind(event);
  const stopPropagation = () => {
    event[PROPAGATION_STOPPED_SYMBOL] = true;
    originalStopPropagation();
  };
  patchEventInstance(event, "stopPropagation", stopPropagation);
  patchEventInstance(event, "stopImmediatePropagation", stopPropagation);
}
function propagationStopped(eventInfoWrapper) {
  const event = eventInfoWrapper.getEvent();
  return !!event[PROPAGATION_STOPPED_SYMBOL];
}
function prepareEventForReplay(eventInfoWrapper) {
  const event = eventInfoWrapper.getEvent();
  const target = eventInfoWrapper.getTargetElement();
  const originalPreventDefault = event.preventDefault.bind(event);
  patchEventInstance(event, "target", target);
  patchEventInstance(event, "eventPhase", EventPhase.REPLAY);
  patchEventInstance(event, "preventDefault", () => {
    originalPreventDefault();
    throw new Error(PREVENT_DEFAULT_ERROR_MESSAGE + (ngDevMode ? PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS : ""));
  });
  patchEventInstance(event, "composedPath", () => {
    throw new Error(COMPOSED_PATH_ERROR_MESSAGE + (ngDevMode ? COMPOSED_PATH_ERROR_MESSAGE_DETAILS : ""));
  });
}
function prepareEventForDispatch(eventInfoWrapper) {
  const event = eventInfoWrapper.getEvent();
  const currentTarget = eventInfoWrapper.getAction()?.element;
  if (currentTarget) {
    patchEventInstance(event, "currentTarget", currentTarget, {
      // `currentTarget` is going to get reassigned every dispatch.
      configurable: true
    });
  }
}
function patchEventInstance(event, property2, value, { configurable = false } = {}) {
  Object.defineProperty(event, property2, { value, configurable });
}
function registerDispatcher$1(eventContract, dispatcher) {
  eventContract.ecrd((eventInfo) => {
    dispatcher.dispatch(eventInfo);
  }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);
}
function getQueuedEventInfos(earlyJsactionData) {
  return earlyJsactionData?.q ?? [];
}
function removeAllEventListeners(earlyJsactionData) {
  if (!earlyJsactionData) {
    return;
  }
  removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);
  removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);
}
function removeEventListeners(container, eventTypes, earlyEventHandler, capture) {
  for (let i = 0; i < eventTypes.length; i++) {
    container.removeEventListener(
      eventTypes[i],
      earlyEventHandler,
      /* useCapture */
      capture
    );
  }
}
function getAppScopedQueuedEventInfos(appId, dataContainer = window) {
  return getQueuedEventInfos(dataContainer._ejsas?.[appId]);
}
function clearAppScopedEarlyEventContract(appId, dataContainer = window) {
  if (!dataContainer._ejsas) {
    return;
  }
  dataContainer._ejsas[appId] = void 0;
}
var Property, parseCache, EventType, MOUSE_SPECIAL_EVENT_TYPES, BUBBLE_EVENT_TYPES, CAPTURE_EVENT_TYPES, isCaptureEventType, EARLY_EVENT_TYPES, isEarlyEventType, isMac, isIos, EventContractContainer, Char, EventInfoWrapper, EMPTY_ACTION_MAP, REGEXP_SEMICOLON, DEFAULT_EVENT_TYPE, ActionResolver, Restriction, Dispatcher, PROPAGATION_STOPPED_SYMBOL, EventPhase, PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS, PREVENT_DEFAULT_ERROR_MESSAGE, COMPOSED_PATH_ERROR_MESSAGE_DETAILS, COMPOSED_PATH_ERROR_MESSAGE, EventDispatcher, MOUSE_SPECIAL_SUPPORT, EventContract;
var init_event_dispatch = __esm({
  "node_modules/@angular/core/fesm2022/primitives/event-dispatch.mjs"() {
    "use strict";
    init_attribute();
    Property = {
      /**
       * The parsed value of the jsaction attribute is stored in this
       * property on the DOM node. The parsed value is an Object. The
       * property names of the object are the events; the values are the
       * names of the actions. This property is attached even on nodes
       * that don't have a jsaction attribute as an optimization, because
       * property lookup is faster than attribute access.
       */
      JSACTION: "__jsaction",
      /**
       * The owner property references an a logical owner for a DOM node. JSAction
       * will follow this reference instead of parentNode when traversing the DOM
       * to find jsaction attributes. This allows overlaying a logical structure
       * over a document where the DOM structure can't reflect that structure.
       */
      OWNER: "__owner"
    };
    parseCache = {};
    EventType = {
      /**
       * Mouse middle click, introduced in Chrome 55 and not yet supported on
       * other browsers.
       */
      AUXCLICK: "auxclick",
      /**
       * The change event fired by browsers when the `value` attribute of input,
       * select, and textarea elements are changed.
       */
      CHANGE: "change",
      /**
       * The click event. In addEvent() refers to all click events, in the
       * jsaction attribute it refers to the unmodified click and Enter/Space
       * keypress events.  In the latter case, a jsaction click will be triggered,
       * for accessibility reasons.  See clickmod and clickonly, below.
       */
      CLICK: "click",
      /**
       * Specifies the jsaction for a modified click event (i.e. a mouse
       * click with the modifier key Cmd/Ctrl pressed). This event isn't
       * separately enabled in addEvent(), because in the DOM, it's just a
       * click event.
       */
      CLICKMOD: "clickmod",
      /**
       * Specifies the jsaction for a click-only event.  Click-only doesn't take
       * into account the case where an element with focus receives an Enter/Space
       * keypress.  This event isn't separately enabled in addEvent().
       */
      CLICKONLY: "clickonly",
      /**
       * The dblclick event.
       */
      DBLCLICK: "dblclick",
      /**
       * Focus doesn't bubble, but you can use it in addEvent() and
       * jsaction anyway. EventContract does the right thing under the
       * hood.
       */
      FOCUS: "focus",
      /**
       * This event only exists in IE. For addEvent() and jsaction, use
       * focus instead; EventContract does the right thing even though
       * focus doesn't bubble.
       */
      FOCUSIN: "focusin",
      /**
       * Analog to focus.
       */
      BLUR: "blur",
      /**
       * Analog to focusin.
       */
      FOCUSOUT: "focusout",
      /**
       * Submit doesn't bubble, so it cannot be used with event
       * contract. However, the browser helpfully fires a click event on
       * the submit button of a form (even if the form is not submitted by
       * a click on the submit button). So you should handle click on the
       * submit button instead.
       */
      SUBMIT: "submit",
      /**
       * The keydown event. In addEvent() and non-click jsaction it represents the
       * regular DOM keydown event. It represents click actions in non-Gecko
       * browsers.
       */
      KEYDOWN: "keydown",
      /**
       * The keypress event. In addEvent() and non-click jsaction it represents the
       * regular DOM keypress event. It represents click actions in Gecko browsers.
       */
      KEYPRESS: "keypress",
      /**
       * The keyup event. In addEvent() and non-click jsaction it represents the
       * regular DOM keyup event. It represents click actions in non-Gecko
       * browsers.
       */
      KEYUP: "keyup",
      /**
       * The mouseup event. Can either be used directly or used implicitly to
       * capture mouseup events. In addEvent(), it represents a regular DOM
       * mouseup event.
       */
      MOUSEUP: "mouseup",
      /**
       * The mousedown event. Can either be used directly or used implicitly to
       * capture mouseenter events. In addEvent(), it represents a regular DOM
       * mouseover event.
       */
      MOUSEDOWN: "mousedown",
      /**
       * The mouseover event. Can either be used directly or used implicitly to
       * capture mouseenter events. In addEvent(), it represents a regular DOM
       * mouseover event.
       */
      MOUSEOVER: "mouseover",
      /**
       * The mouseout event. Can either be used directly or used implicitly to
       * capture mouseover events. In addEvent(), it represents a regular DOM
       * mouseout event.
       */
      MOUSEOUT: "mouseout",
      /**
       * The mouseenter event. Does not bubble and fires individually on each
       * element being entered within a DOM tree.
       */
      MOUSEENTER: "mouseenter",
      /**
       * The mouseleave event. Does not bubble and fires individually on each
       * element being entered within a DOM tree.
       */
      MOUSELEAVE: "mouseleave",
      /**
       * The mousemove event.
       */
      MOUSEMOVE: "mousemove",
      /**
       * The pointerup event. Can either be used directly or used implicitly to
       * capture pointerup events. In addEvent(), it represents a regular DOM
       * pointerup event.
       */
      POINTERUP: "pointerup",
      /**
       * The pointerdown event. Can either be used directly or used implicitly to
       * capture pointerenter events. In addEvent(), it represents a regular DOM
       * mouseover event.
       */
      POINTERDOWN: "pointerdown",
      /**
       * The pointerover event. Can either be used directly or used implicitly to
       * capture pointerenter events. In addEvent(), it represents a regular DOM
       * pointerover event.
       */
      POINTEROVER: "pointerover",
      /**
       * The pointerout event. Can either be used directly or used implicitly to
       * capture pointerover events. In addEvent(), it represents a regular DOM
       * pointerout event.
       */
      POINTEROUT: "pointerout",
      /**
       * The pointerenter event. Does not bubble and fires individually on each
       * element being entered within a DOM tree.
       */
      POINTERENTER: "pointerenter",
      /**
       * The pointerleave event. Does not bubble and fires individually on each
       * element being entered within a DOM tree.
       */
      POINTERLEAVE: "pointerleave",
      /**
       * The pointermove event.
       */
      POINTERMOVE: "pointermove",
      /**
       * The pointercancel event.
       */
      POINTERCANCEL: "pointercancel",
      /**
       * The gotpointercapture event is fired when
       * Element.setPointerCapture(pointerId) is called on a mouse input, or
       * implicitly when a touch input begins.
       */
      GOTPOINTERCAPTURE: "gotpointercapture",
      /**
       * The lostpointercapture event is fired when
       * Element.releasePointerCapture(pointerId) is called, or implicitly after a
       * touch input ends.
       */
      LOSTPOINTERCAPTURE: "lostpointercapture",
      /**
       * The error event. The error event doesn't bubble, but you can use it in
       * addEvent() and jsaction anyway. EventContract does the right thing under
       * the hood (except in IE8 which does not use error events).
       */
      ERROR: "error",
      /**
       * The load event. The load event doesn't bubble, but you can use it in
       * addEvent() and jsaction anyway. EventContract does the right thing
       * under the hood.
       */
      LOAD: "load",
      /**
       * The unload event.
       */
      UNLOAD: "unload",
      /**
       * The touchstart event. Bubbles, will only ever fire in browsers with
       * touch support.
       */
      TOUCHSTART: "touchstart",
      /**
       * The touchend event. Bubbles, will only ever fire in browsers with
       * touch support.
       */
      TOUCHEND: "touchend",
      /**
       * The touchmove event. Bubbles, will only ever fire in browsers with
       * touch support.
       */
      TOUCHMOVE: "touchmove",
      /**
       * The input event.
       */
      INPUT: "input",
      /**
       * The scroll event.
       */
      SCROLL: "scroll",
      /**
       * The toggle event. The toggle event doesn't bubble, but you can use it in
       * addEvent() and jsaction anyway. EventContract does the right thing
       * under the hood.
       */
      TOGGLE: "toggle",
      /**
       * A custom event. The actual custom event type is declared as the 'type'
       * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome
       * versions.
       *
       * This is an internal name. Users should use jsaction's fireCustomEvent to
       * fire custom events instead of relying on this type to create them.
       */
      CUSTOM: "_custom"
    };
    MOUSE_SPECIAL_EVENT_TYPES = [
      EventType.MOUSEENTER,
      EventType.MOUSELEAVE,
      "pointerenter",
      "pointerleave"
    ];
    BUBBLE_EVENT_TYPES = [
      EventType.CLICK,
      EventType.DBLCLICK,
      EventType.FOCUSIN,
      EventType.FOCUSOUT,
      EventType.KEYDOWN,
      EventType.KEYUP,
      EventType.KEYPRESS,
      EventType.MOUSEOVER,
      EventType.MOUSEOUT,
      EventType.SUBMIT,
      EventType.TOUCHSTART,
      EventType.TOUCHEND,
      EventType.TOUCHMOVE,
      "touchcancel",
      "auxclick",
      "change",
      "compositionstart",
      "compositionupdate",
      "compositionend",
      "beforeinput",
      "input",
      "select",
      "copy",
      "cut",
      "paste",
      "mousedown",
      "mouseup",
      "wheel",
      "contextmenu",
      "dragover",
      "dragenter",
      "dragleave",
      "drop",
      "dragstart",
      "dragend",
      "pointerdown",
      "pointermove",
      "pointerup",
      "pointercancel",
      "pointerover",
      "pointerout",
      "gotpointercapture",
      "lostpointercapture",
      // Video events.
      "ended",
      "loadedmetadata",
      // Page visibility events.
      "pagehide",
      "pageshow",
      "visibilitychange",
      // Content visibility events.
      "beforematch"
    ];
    CAPTURE_EVENT_TYPES = [
      EventType.FOCUS,
      EventType.BLUR,
      EventType.ERROR,
      EventType.LOAD,
      EventType.TOGGLE
    ];
    isCaptureEventType = (eventType) => CAPTURE_EVENT_TYPES.indexOf(eventType) >= 0;
    EARLY_EVENT_TYPES = BUBBLE_EVENT_TYPES.concat(CAPTURE_EVENT_TYPES);
    isEarlyEventType = (eventType) => EARLY_EVENT_TYPES.indexOf(eventType) >= 0;
    isMac = typeof navigator !== "undefined" && /Macintosh/.test(navigator.userAgent);
    isIos = typeof navigator !== "undefined" && /iPhone|iPad|iPod/.test(navigator.userAgent);
    EventContractContainer = class {
      element;
      /**
       * Array of event handlers and their corresponding event types that are
       * installed on this container.
       *
       */
      handlerInfos = [];
      /**
       * @param element The container Element.
       */
      constructor(element2) {
        this.element = element2;
      }
      /**
       * Installs the provided installer on the element owned by this container,
       * and maintains a reference to resulting handler in order to remove it
       * later if desired.
       */
      addEventListener(eventType, getHandler, passive) {
        if (isIos) {
          this.element.style.cursor = "pointer";
        }
        this.handlerInfos.push(addEventListener(this.element, eventType, getHandler(this.element), passive));
      }
      /**
       * Removes all the handlers installed on this container.
       */
      cleanUp() {
        for (let i = 0; i < this.handlerInfos.length; i++) {
          removeEventListener(this.element, this.handlerInfos[i]);
        }
        this.handlerInfos = [];
      }
    };
    Char = {
      /**
       * The separator between the namespace and the action name in the
       * jsaction attribute value.
       */
      NAMESPACE_ACTION_SEPARATOR: ".",
      /**
       * The separator between the event name and action in the jsaction
       * attribute value.
       */
      EVENT_ACTION_SEPARATOR: ":"
    };
    EventInfoWrapper = class _EventInfoWrapper {
      eventInfo;
      constructor(eventInfo) {
        this.eventInfo = eventInfo;
      }
      getEventType() {
        return getEventType(this.eventInfo);
      }
      setEventType(eventType) {
        setEventType(this.eventInfo, eventType);
      }
      getEvent() {
        return getEvent(this.eventInfo);
      }
      setEvent(event) {
        setEvent(this.eventInfo, event);
      }
      getTargetElement() {
        return getTargetElement(this.eventInfo);
      }
      setTargetElement(targetElement) {
        setTargetElement(this.eventInfo, targetElement);
      }
      getContainer() {
        return getContainer(this.eventInfo);
      }
      setContainer(container) {
        setContainer(this.eventInfo, container);
      }
      getTimestamp() {
        return getTimestamp(this.eventInfo);
      }
      setTimestamp(timestamp) {
        setTimestamp(this.eventInfo, timestamp);
      }
      getAction() {
        const action = getAction(this.eventInfo);
        if (!action)
          return void 0;
        return {
          name: action[0],
          element: action[1]
        };
      }
      setAction(action) {
        if (!action) {
          unsetAction(this.eventInfo);
          return;
        }
        setAction(this.eventInfo, action.name, action.element);
      }
      getIsReplay() {
        return getIsReplay(this.eventInfo);
      }
      setIsReplay(replay) {
        setIsReplay(this.eventInfo, replay);
      }
      getResolved() {
        return getResolved(this.eventInfo);
      }
      setResolved(resolved2) {
        setResolved(this.eventInfo, resolved2);
      }
      clone() {
        return new _EventInfoWrapper(cloneEventInfo(this.eventInfo));
      }
    };
    EMPTY_ACTION_MAP = {};
    REGEXP_SEMICOLON = /\s*;\s*/;
    DEFAULT_EVENT_TYPE = EventType.CLICK;
    ActionResolver = class {
      a11yClickSupport = false;
      clickModSupport = true;
      syntheticMouseEventSupport;
      updateEventInfoForA11yClick = void 0;
      preventDefaultForA11yClick = void 0;
      populateClickOnlyAction = void 0;
      constructor({ syntheticMouseEventSupport = false, clickModSupport = true } = {}) {
        this.syntheticMouseEventSupport = syntheticMouseEventSupport;
        this.clickModSupport = clickModSupport;
      }
      resolveEventType(eventInfo) {
        if (this.clickModSupport && getEventType(eventInfo) === EventType.CLICK && isModifiedClickEvent(getEvent(eventInfo))) {
          setEventType(eventInfo, EventType.CLICKMOD);
        } else if (this.a11yClickSupport) {
          this.updateEventInfoForA11yClick(eventInfo);
        }
      }
      resolveAction(eventInfo) {
        if (getResolved(eventInfo)) {
          return;
        }
        this.populateAction(eventInfo, getTargetElement(eventInfo));
        setResolved(eventInfo, true);
      }
      resolveParentAction(eventInfo) {
        const action = getAction(eventInfo);
        const actionElement = action && getActionElement(action);
        unsetAction(eventInfo);
        const parentNode = actionElement && this.getParentNode(actionElement);
        if (!parentNode) {
          return;
        }
        this.populateAction(eventInfo, parentNode);
      }
      /**
       * Searches for a jsaction that the DOM event maps to and creates an
       * object containing event information used for dispatching by
       * jsaction.Dispatcher. This method populates the `action` and `actionElement`
       * fields of the EventInfo object passed in by finding the first
       * jsaction attribute above the target Node of the event, and below
       * the container Node, that specifies a jsaction for the event
       * type. If no such jsaction is found, then action is undefined.
       *
       * @param eventInfo `EventInfo` to set `action` and `actionElement` if an
       *    action is found on any `Element` in the path of the `Event`.
       */
      populateAction(eventInfo, currentTarget) {
        let actionElement = currentTarget;
        while (actionElement && actionElement !== getContainer(eventInfo)) {
          if (actionElement.nodeType === Node.ELEMENT_NODE) {
            this.populateActionOnElement(actionElement, eventInfo);
          }
          if (getAction(eventInfo)) {
            break;
          }
          actionElement = this.getParentNode(actionElement);
        }
        const action = getAction(eventInfo);
        if (!action) {
          return;
        }
        if (this.a11yClickSupport) {
          this.preventDefaultForA11yClick(eventInfo);
        }
        if (this.syntheticMouseEventSupport) {
          if (getEventType(eventInfo) === EventType.MOUSEENTER || getEventType(eventInfo) === EventType.MOUSELEAVE || getEventType(eventInfo) === EventType.POINTERENTER || getEventType(eventInfo) === EventType.POINTERLEAVE) {
            if (isMouseSpecialEvent(getEvent(eventInfo), getEventType(eventInfo), getActionElement(action))) {
              const copiedEvent = createMouseSpecialEvent(getEvent(eventInfo), getActionElement(action));
              setEvent(eventInfo, copiedEvent);
              setTargetElement(eventInfo, getActionElement(action));
            } else {
              unsetAction(eventInfo);
            }
          }
        }
      }
      /**
       * Walk to the parent node, unless the node has a different owner in
       * which case we walk to the owner. Attempt to walk to host of a
       * shadow root if needed.
       */
      getParentNode(element2) {
        const owner = element2[Property.OWNER];
        if (owner) {
          return owner;
        }
        const parentNode = element2.parentNode;
        if (parentNode?.nodeName === "#document-fragment") {
          return parentNode?.host ?? null;
        }
        return parentNode;
      }
      /**
       * Accesses the jsaction map on a node and retrieves the name of the
       * action the given event is mapped to, if any. It parses the
       * attribute value and stores it in a property on the node for
       * subsequent retrieval without re-parsing and re-accessing the
       * attribute.
       *
       * @param actionElement The DOM node to retrieve the jsaction map from.
       * @param eventInfo `EventInfo` to set `action` and `actionElement` if an
       *    action is found on the `actionElement`.
       */
      populateActionOnElement(actionElement, eventInfo) {
        const actionMap = this.parseActions(actionElement);
        const actionName = actionMap[getEventType(eventInfo)];
        if (actionName !== void 0) {
          setAction(eventInfo, actionName, actionElement);
        }
        if (this.a11yClickSupport) {
          this.populateClickOnlyAction(actionElement, eventInfo, actionMap);
        }
      }
      /**
       * Parses and caches an element's jsaction element into a map.
       *
       * This is primarily for internal use.
       *
       * @param actionElement The DOM node to retrieve the jsaction map from.
       * @return Map from event to qualified name of the jsaction bound to it.
       */
      parseActions(actionElement) {
        let actionMap = get(actionElement);
        if (!actionMap) {
          const jsactionAttribute = actionElement.getAttribute(Attribute.JSACTION);
          if (!jsactionAttribute) {
            actionMap = EMPTY_ACTION_MAP;
            set(actionElement, actionMap);
          } else {
            actionMap = getParsed(jsactionAttribute);
            if (!actionMap) {
              actionMap = {};
              const values = jsactionAttribute.split(REGEXP_SEMICOLON);
              for (let idx = 0; idx < values.length; idx++) {
                const value = values[idx];
                if (!value) {
                  continue;
                }
                const colon = value.indexOf(Char.EVENT_ACTION_SEPARATOR);
                const hasColon = colon !== -1;
                const type = hasColon ? value.substr(0, colon).trim() : DEFAULT_EVENT_TYPE;
                const action = hasColon ? value.substr(colon + 1).trim() : value;
                actionMap[type] = action;
              }
              setParsed(jsactionAttribute, actionMap);
            }
            set(actionElement, actionMap);
          }
        }
        return actionMap;
      }
      addA11yClickSupport(updateEventInfoForA11yClick, preventDefaultForA11yClick, populateClickOnlyAction) {
        this.a11yClickSupport = true;
        this.updateEventInfoForA11yClick = updateEventInfoForA11yClick;
        this.preventDefaultForA11yClick = preventDefaultForA11yClick;
        this.populateClickOnlyAction = populateClickOnlyAction;
      }
    };
    (function(Restriction2) {
      Restriction2[Restriction2["I_AM_THE_JSACTION_FRAMEWORK"] = 0] = "I_AM_THE_JSACTION_FRAMEWORK";
    })(Restriction || (Restriction = {}));
    Dispatcher = class {
      dispatchDelegate;
      // The ActionResolver to use to resolve actions.
      actionResolver;
      /** The replayer function to be called when there are queued events. */
      eventReplayer;
      /** Whether the event replay is scheduled. */
      eventReplayScheduled = false;
      /** The queue of events. */
      replayEventInfoWrappers = [];
      /**
       * Options are:
       *   - `eventReplayer`: When the event contract dispatches replay events
       *      to the Dispatcher, the Dispatcher collects them and in the next tick
       *      dispatches them to the `eventReplayer`. Defaults to dispatching to `dispatchDelegate`.
       * @param dispatchDelegate A function that should handle dispatching an `EventInfoWrapper` to handlers.
       */
      constructor(dispatchDelegate, { actionResolver, eventReplayer } = {}) {
        this.dispatchDelegate = dispatchDelegate;
        this.actionResolver = actionResolver;
        this.eventReplayer = eventReplayer;
      }
      /**
       * Receives an event or the event queue from the EventContract. The event
       * queue is copied and it attempts to replay.
       * If event info is passed in it looks for an action handler that can handle
       * the given event.  If there is no handler registered queues the event and
       * checks if a loader is registered for the given namespace. If so, calls it.
       *
       * Alternatively, if in global dispatch mode, calls all registered global
       * handlers for the appropriate event type.
       *
       * The three functionalities of this call are deliberately not split into
       * three methods (and then declared as an abstract interface), because the
       * interface is used by EventContract, which lives in a different jsbinary.
       * Therefore the interface between the three is defined entirely in terms that
       * are invariant under jscompiler processing (Function and Array, as opposed
       * to a custom type with method names).
       *
       * @param eventInfo The info for the event that triggered this call or the
       *     queue of events from EventContract.
       */
      dispatch(eventInfo) {
        const eventInfoWrapper = new EventInfoWrapper(eventInfo);
        this.actionResolver?.resolveEventType(eventInfo);
        this.actionResolver?.resolveAction(eventInfo);
        const action = eventInfoWrapper.getAction();
        if (action && shouldPreventDefaultBeforeDispatching(action.element, eventInfoWrapper)) {
          preventDefault(eventInfoWrapper.getEvent());
        }
        if (this.eventReplayer && eventInfoWrapper.getIsReplay()) {
          this.scheduleEventInfoWrapperReplay(eventInfoWrapper);
          return;
        }
        this.dispatchDelegate(eventInfoWrapper);
      }
      /**
       * Schedules an `EventInfoWrapper` for replay. The replaying will happen in its own
       * stack once the current flow cedes control. This is done to mimic
       * browser event handling.
       */
      scheduleEventInfoWrapperReplay(eventInfoWrapper) {
        this.replayEventInfoWrappers.push(eventInfoWrapper);
        if (this.eventReplayScheduled) {
          return;
        }
        this.eventReplayScheduled = true;
        Promise.resolve().then(() => {
          this.eventReplayScheduled = false;
          this.eventReplayer(this.replayEventInfoWrappers);
        });
      }
    };
    PROPAGATION_STOPPED_SYMBOL = /* @__PURE__ */ Symbol.for("propagationStopped");
    EventPhase = {
      REPLAY: 101
    };
    PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS = " Because event replay occurs after browser dispatch, `preventDefault` would have no effect. You can check whether an event is being replayed by accessing the event phase: `event.eventPhase === EventPhase.REPLAY`.";
    PREVENT_DEFAULT_ERROR_MESSAGE = `\`preventDefault\` called during event replay.`;
    COMPOSED_PATH_ERROR_MESSAGE_DETAILS = " Because event replay occurs after browser dispatch, `composedPath()` will be empty. Iterate parent nodes from `event.target` or `event.currentTarget` if you need to check elements in the event path.";
    COMPOSED_PATH_ERROR_MESSAGE = `\`composedPath\` called during event replay.`;
    EventDispatcher = class {
      dispatchDelegate;
      clickModSupport;
      actionResolver;
      dispatcher;
      constructor(dispatchDelegate, clickModSupport = true) {
        this.dispatchDelegate = dispatchDelegate;
        this.clickModSupport = clickModSupport;
        this.actionResolver = new ActionResolver({ clickModSupport });
        this.dispatcher = new Dispatcher((eventInfoWrapper) => {
          this.dispatchToDelegate(eventInfoWrapper);
        }, {
          actionResolver: this.actionResolver
        });
      }
      /**
       * The entrypoint for the `EventContract` dispatch.
       */
      dispatch(eventInfo) {
        this.dispatcher.dispatch(eventInfo);
      }
      /** Internal method that does basic disaptching. */
      dispatchToDelegate(eventInfoWrapper) {
        if (eventInfoWrapper.getIsReplay()) {
          prepareEventForReplay(eventInfoWrapper);
        }
        prepareEventForBubbling(eventInfoWrapper);
        while (eventInfoWrapper.getAction()) {
          prepareEventForDispatch(eventInfoWrapper);
          if (isCaptureEventType(eventInfoWrapper.getEventType()) && eventInfoWrapper.getAction().element !== eventInfoWrapper.getTargetElement()) {
            return;
          }
          this.dispatchDelegate(eventInfoWrapper.getEvent(), eventInfoWrapper.getAction().name);
          if (propagationStopped(eventInfoWrapper)) {
            return;
          }
          this.actionResolver.resolveParentAction(eventInfoWrapper.eventInfo);
        }
      }
    };
    MOUSE_SPECIAL_SUPPORT = false;
    EventContract = class _EventContract {
      static MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;
      containerManager;
      /**
       * The DOM events which this contract covers. Used to prevent double
       * registration of event types. The value of the map is the
       * internally created DOM event handler function that handles the
       * DOM events. See addEvent().
       *
       */
      eventHandlers = {};
      browserEventTypeToExtraEventTypes = {};
      /**
       * The dispatcher function. Events are passed to this function for
       * handling once it was set using the registerDispatcher() method. This is
       * done because the function is passed from another jsbinary, so passing the
       * instance and invoking the method here would require to leave the method
       * unobfuscated.
       */
      dispatcher = null;
      /**
       * The list of suspended `EventInfo` that will be dispatched
       * as soon as the `Dispatcher` is registered.
       */
      queuedEventInfos = [];
      constructor(containerManager) {
        this.containerManager = containerManager;
      }
      handleEvent(eventType, event, container) {
        const eventInfo = createEventInfoFromParameters(
          /* eventType= */
          eventType,
          /* event= */
          event,
          /* targetElement= */
          event.target,
          /* container= */
          container,
          /* timestamp= */
          Date.now()
        );
        this.handleEventInfo(eventInfo);
      }
      /**
       * Handle an `EventInfo`.
       */
      handleEventInfo(eventInfo) {
        if (!this.dispatcher) {
          setIsReplay(eventInfo, true);
          this.queuedEventInfos?.push(eventInfo);
          return;
        }
        this.dispatcher(eventInfo);
      }
      /**
       * Enables jsaction handlers to be called for the event type given by
       * name.
       *
       * If the event is already registered, this does nothing.
       *
       * @param prefixedEventType If supplied, this event is used in
       *     the actual browser event registration instead of the name that is
       *     exposed to jsaction. Use this if you e.g. want users to be able
       *     to subscribe to jsaction="transitionEnd:foo" while the underlying
       *     event is webkitTransitionEnd in one browser and mozTransitionEnd
       *     in another.
       *
       * @param passive A boolean value that, if `true`, indicates that the event
       *     handler will never call `preventDefault()`.
       */
      addEvent(eventType, prefixedEventType, passive) {
        if (eventType in this.eventHandlers || !this.containerManager) {
          return;
        }
        if (!_EventContract.MOUSE_SPECIAL_SUPPORT && MOUSE_SPECIAL_EVENT_TYPES.indexOf(eventType) >= 0) {
          return;
        }
        const eventHandler = (eventType2, event, container) => {
          this.handleEvent(eventType2, event, container);
        };
        this.eventHandlers[eventType] = eventHandler;
        const browserEventType = getBrowserEventType(prefixedEventType || eventType);
        if (browserEventType !== eventType) {
          const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];
          eventTypes.push(eventType);
          this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;
        }
        this.containerManager.addEventListener(browserEventType, (element2) => {
          return (event) => {
            eventHandler(eventType, event, element2);
          };
        }, passive);
      }
      /**
       * Gets the queued early events and replay them using the appropriate handler
       * in the provided event contract. Once all the events are replayed, it cleans
       * up the early contract.
       */
      replayEarlyEvents(earlyJsactionData = window._ejsa) {
        if (!earlyJsactionData) {
          return;
        }
        this.replayEarlyEventInfos(earlyJsactionData.q);
        removeAllEventListeners(earlyJsactionData);
        delete window._ejsa;
      }
      /**
       * Replays all the early `EventInfo` objects, dispatching them through the normal
       * `EventContract` flow.
       */
      replayEarlyEventInfos(earlyEventInfos) {
        for (let i = 0; i < earlyEventInfos.length; i++) {
          const earlyEventInfo = earlyEventInfos[i];
          const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);
          for (let j = 0; j < eventTypes.length; j++) {
            const eventInfo = cloneEventInfo(earlyEventInfo);
            setEventType(eventInfo, eventTypes[j]);
            this.handleEventInfo(eventInfo);
          }
        }
      }
      /**
       * Returns all JSAction event types that have been registered for a given
       * browser event type.
       */
      getEventTypesForBrowserEventType(browserEventType) {
        const eventTypes = [];
        if (this.eventHandlers[browserEventType]) {
          eventTypes.push(browserEventType);
        }
        if (this.browserEventTypeToExtraEventTypes[browserEventType]) {
          eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);
        }
        return eventTypes;
      }
      /**
       * Returns the event handler function for a given event type.
       */
      handler(eventType) {
        return this.eventHandlers[eventType];
      }
      /**
       * Cleans up the event contract. This resets all of the `EventContract`'s
       * internal state. Users are responsible for not using this `EventContract`
       * after it has been cleaned up.
       */
      cleanUp() {
        this.containerManager?.cleanUp();
        this.containerManager = null;
        this.eventHandlers = {};
        this.browserEventTypeToExtraEventTypes = {};
        this.dispatcher = null;
        this.queuedEventInfos = [];
      }
      /**
       * Register a dispatcher function. Event info of each event mapped to
       * a jsaction is passed for handling to this callback. The queued
       * events are passed as well to the dispatcher for later replaying
       * once the dispatcher is registered. Clears the event queue to null.
       *
       * @param dispatcher The dispatcher function.
       * @param restriction
       */
      registerDispatcher(dispatcher, restriction) {
        this.ecrd(dispatcher, restriction);
      }
      /**
       * Unrenamed alias for registerDispatcher. Necessary for any codebases that
       * split the `EventContract` and `Dispatcher` code into different compilation
       * units.
       */
      ecrd(dispatcher, restriction) {
        this.dispatcher = dispatcher;
        if (this.queuedEventInfos?.length) {
          for (let i = 0; i < this.queuedEventInfos.length; i++) {
            this.handleEventInfo(this.queuedEventInfos[i]);
          }
          this.queuedEventInfos = null;
        }
      }
    };
  }
});

// node_modules/@angular/core/fesm2022/core.mjs
var core_exports = {};
__export(core_exports, {
  ANIMATION_MODULE_TYPE: () => ANIMATION_MODULE_TYPE,
  APP_BOOTSTRAP_LISTENER: () => APP_BOOTSTRAP_LISTENER,
  APP_ID: () => APP_ID,
  APP_INITIALIZER: () => APP_INITIALIZER,
  ApplicationInitStatus: () => ApplicationInitStatus,
  ApplicationModule: () => ApplicationModule,
  ApplicationRef: () => ApplicationRef,
  Attribute: () => Attribute2,
  COMPILER_OPTIONS: () => COMPILER_OPTIONS,
  CSP_NONCE: () => CSP_NONCE,
  CUSTOM_ELEMENTS_SCHEMA: () => CUSTOM_ELEMENTS_SCHEMA,
  ChangeDetectionStrategy: () => ChangeDetectionStrategy,
  ChangeDetectorRef: () => ChangeDetectorRef,
  Compiler: () => Compiler,
  CompilerFactory: () => CompilerFactory,
  Component: () => Component,
  ComponentFactory: () => ComponentFactory$1,
  ComponentFactoryResolver: () => ComponentFactoryResolver$1,
  ComponentRef: () => ComponentRef$1,
  ContentChild: () => ContentChild,
  ContentChildren: () => ContentChildren,
  DEFAULT_CURRENCY_CODE: () => DEFAULT_CURRENCY_CODE,
  DOCUMENT: () => DOCUMENT,
  DebugElement: () => DebugElement,
  DebugEventListener: () => DebugEventListener,
  DebugNode: () => DebugNode,
  DefaultIterableDiffer: () => DefaultIterableDiffer,
  DestroyRef: () => DestroyRef,
  Directive: () => Directive,
  ENVIRONMENT_INITIALIZER: () => ENVIRONMENT_INITIALIZER,
  ElementRef: () => ElementRef,
  EmbeddedViewRef: () => EmbeddedViewRef,
  EnvironmentInjector: () => EnvironmentInjector,
  ErrorHandler: () => ErrorHandler,
  EventEmitter: () => EventEmitter,
  HOST_TAG_NAME: () => HOST_TAG_NAME,
  Host: () => Host,
  HostAttributeToken: () => HostAttributeToken,
  HostBinding: () => HostBinding,
  HostListener: () => HostListener,
  INJECTOR: () => INJECTOR$1,
  Inject: () => Inject,
  Injectable: () => Injectable,
  InjectionToken: () => InjectionToken,
  Injector: () => Injector,
  Input: () => Input,
  IterableDiffers: () => IterableDiffers,
  KeyValueDiffers: () => KeyValueDiffers,
  LOCALE_ID: () => LOCALE_ID,
  MissingTranslationStrategy: () => MissingTranslationStrategy,
  ModuleWithComponentFactories: () => ModuleWithComponentFactories,
  NO_ERRORS_SCHEMA: () => NO_ERRORS_SCHEMA,
  NgModule: () => NgModule,
  NgModuleFactory: () => NgModuleFactory$1,
  NgModuleRef: () => NgModuleRef$1,
  NgProbeToken: () => NgProbeToken,
  NgZone: () => NgZone,
  Optional: () => Optional,
  Output: () => Output,
  OutputEmitterRef: () => OutputEmitterRef,
  PACKAGE_ROOT_URL: () => PACKAGE_ROOT_URL,
  PLATFORM_ID: () => PLATFORM_ID,
  PLATFORM_INITIALIZER: () => PLATFORM_INITIALIZER,
  PendingTasks: () => PendingTasks,
  Pipe: () => Pipe,
  PlatformRef: () => PlatformRef,
  Query: () => Query,
  QueryList: () => QueryList,
  REQUEST: () => REQUEST,
  REQUEST_CONTEXT: () => REQUEST_CONTEXT,
  RESPONSE_INIT: () => RESPONSE_INIT,
  Renderer2: () => Renderer2,
  RendererFactory2: () => RendererFactory2,
  RendererStyleFlags2: () => RendererStyleFlags2,
  Sanitizer: () => Sanitizer,
  SecurityContext: () => SecurityContext,
  Self: () => Self,
  SimpleChange: () => SimpleChange,
  SkipSelf: () => SkipSelf,
  TRANSLATIONS: () => TRANSLATIONS,
  TRANSLATIONS_FORMAT: () => TRANSLATIONS_FORMAT,
  TemplateRef: () => TemplateRef,
  Testability: () => Testability,
  TestabilityRegistry: () => TestabilityRegistry,
  TransferState: () => TransferState,
  Type: () => Type,
  VERSION: () => VERSION,
  Version: () => Version,
  ViewChild: () => ViewChild,
  ViewChildren: () => ViewChildren,
  ViewContainerRef: () => ViewContainerRef,
  ViewEncapsulation: () => ViewEncapsulation,
  ViewRef: () => ViewRef2,
  afterEveryRender: () => afterEveryRender,
  afterNextRender: () => afterNextRender,
  afterRenderEffect: () => afterRenderEffect,
  asNativeElements: () => asNativeElements,
  assertInInjectionContext: () => assertInInjectionContext,
  assertNotInReactiveContext: () => assertNotInReactiveContext,
  assertPlatform: () => assertPlatform,
  booleanAttribute: () => booleanAttribute,
  computed: () => computed,
  contentChild: () => contentChild,
  contentChildren: () => contentChildren,
  createComponent: () => createComponent,
  createEnvironmentInjector: () => createEnvironmentInjector,
  createNgModule: () => createNgModule,
  createNgModuleRef: () => createNgModuleRef,
  createPlatform: () => createPlatform,
  createPlatformFactory: () => createPlatformFactory,
  defineInjectable: () => defineInjectable,
  destroyPlatform: () => destroyPlatform,
  effect: () => effect,
  enableProdMode: () => enableProdMode,
  enableProfiling: () => enableProfiling,
  forwardRef: () => forwardRef,
  getDebugNode: () => getDebugNode,
  getModuleFactory: () => getModuleFactory,
  getNgModuleById: () => getNgModuleById,
  getPlatform: () => getPlatform,
  importProvidersFrom: () => importProvidersFrom,
  inject: () => inject2,
  input: () => input,
  inputBinding: () => inputBinding,
  isDevMode: () => isDevMode,
  isSignal: () => isSignal,
  isStandalone: () => isStandalone,
  linkedSignal: () => linkedSignal,
  makeEnvironmentProviders: () => makeEnvironmentProviders,
  makeStateKey: () => makeStateKey,
  mergeApplicationConfig: () => mergeApplicationConfig,
  model: () => model,
  numberAttribute: () => numberAttribute,
  output: () => output,
  outputBinding: () => outputBinding,
  platformCore: () => platformCore,
  provideAppInitializer: () => provideAppInitializer,
  provideBrowserGlobalErrorListeners: () => provideBrowserGlobalErrorListeners,
  provideCheckNoChangesConfig: () => provideCheckNoChangesConfig,
  provideEnvironmentInitializer: () => provideEnvironmentInitializer,
  provideNgReflectAttributes: () => provideNgReflectAttributes,
  providePlatformInitializer: () => providePlatformInitializer,
  provideZoneChangeDetection: () => provideZoneChangeDetection,
  provideZonelessChangeDetection: () => provideZonelessChangeDetection,
  reflectComponentType: () => reflectComponentType,
  resolveForwardRef: () => resolveForwardRef,
  resource: () => resource,
  runInInjectionContext: () => runInInjectionContext,
  setTestabilityGetter: () => setTestabilityGetter,
  signal: () => signal,
  twoWayBinding: () => twoWayBinding,
  untracked: () => untracked2,
  viewChild: () => viewChild,
  viewChildren: () => viewChildren,
  \u0275ALLOW_MULTIPLE_PLATFORMS: () => ALLOW_MULTIPLE_PLATFORMS,
  \u0275AcxChangeDetectionStrategy: () => AcxChangeDetectionStrategy,
  \u0275AcxViewEncapsulation: () => AcxViewEncapsulation,
  \u0275AfterRenderManager: () => AfterRenderManager,
  \u0275CLIENT_RENDER_MODE_FLAG: () => CLIENT_RENDER_MODE_FLAG,
  \u0275CONTAINER_HEADER_OFFSET: () => CONTAINER_HEADER_OFFSET,
  \u0275ChangeDetectionScheduler: () => ChangeDetectionScheduler,
  \u0275ChangeDetectionSchedulerImpl: () => ChangeDetectionSchedulerImpl,
  \u0275ComponentFactory: () => ComponentFactory$1,
  \u0275Console: () => Console,
  \u0275DEFAULT_LOCALE_ID: () => DEFAULT_LOCALE_ID,
  \u0275DEFER_BLOCK_CONFIG: () => DEFER_BLOCK_CONFIG,
  \u0275DEFER_BLOCK_DEPENDENCY_INTERCEPTOR: () => DEFER_BLOCK_DEPENDENCY_INTERCEPTOR,
  \u0275DEHYDRATED_BLOCK_REGISTRY: () => DEHYDRATED_BLOCK_REGISTRY,
  \u0275DeferBlockBehavior: () => DeferBlockBehavior,
  \u0275DeferBlockState: () => DeferBlockState,
  \u0275ENABLE_ROOT_COMPONENT_BOOTSTRAP: () => ENABLE_ROOT_COMPONENT_BOOTSTRAP,
  \u0275EffectScheduler: () => EffectScheduler,
  \u0275Framework: () => Framework,
  \u0275HydrationStatus: () => HydrationStatus,
  \u0275IMAGE_CONFIG: () => IMAGE_CONFIG,
  \u0275IMAGE_CONFIG_DEFAULTS: () => IMAGE_CONFIG_DEFAULTS,
  \u0275INJECTOR_SCOPE: () => INJECTOR_SCOPE,
  \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE: () => \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE,
  \u0275INTERNAL_APPLICATION_ERROR_HANDLER: () => INTERNAL_APPLICATION_ERROR_HANDLER,
  \u0275IS_HYDRATION_DOM_REUSE_ENABLED: () => IS_HYDRATION_DOM_REUSE_ENABLED,
  \u0275IS_INCREMENTAL_HYDRATION_ENABLED: () => IS_INCREMENTAL_HYDRATION_ENABLED,
  \u0275JSACTION_BLOCK_ELEMENT_MAP: () => JSACTION_BLOCK_ELEMENT_MAP,
  \u0275JSACTION_EVENT_CONTRACT: () => JSACTION_EVENT_CONTRACT,
  \u0275LContext: () => LContext,
  \u0275LocaleDataIndex: () => LocaleDataIndex,
  \u0275NG_COMP_DEF: () => NG_COMP_DEF,
  \u0275NG_DIR_DEF: () => NG_DIR_DEF,
  \u0275NG_ELEMENT_ID: () => NG_ELEMENT_ID,
  \u0275NG_INJ_DEF: () => NG_INJ_DEF,
  \u0275NG_MOD_DEF: () => NG_MOD_DEF,
  \u0275NG_PIPE_DEF: () => NG_PIPE_DEF,
  \u0275NG_PROV_DEF: () => NG_PROV_DEF,
  \u0275NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: () => NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,
  \u0275NO_CHANGE: () => NO_CHANGE,
  \u0275NgModuleFactory: () => NgModuleFactory2,
  \u0275NoopNgZone: () => NoopNgZone,
  \u0275PERFORMANCE_MARK_PREFIX: () => PERFORMANCE_MARK_PREFIX,
  \u0275PROVIDED_NG_ZONE: () => PROVIDED_NG_ZONE,
  \u0275PendingTasksInternal: () => PendingTasksInternal,
  \u0275R3Injector: () => R3Injector,
  \u0275ReflectionCapabilities: () => ReflectionCapabilities,
  \u0275Render3ComponentFactory: () => ComponentFactory2,
  \u0275Render3ComponentRef: () => ComponentRef2,
  \u0275Render3NgModuleRef: () => NgModuleRef2,
  \u0275ResourceImpl: () => ResourceImpl,
  \u0275RuntimeError: () => RuntimeError,
  \u0275SIGNAL: () => SIGNAL,
  \u0275SSR_CONTENT_INTEGRITY_MARKER: () => SSR_CONTENT_INTEGRITY_MARKER,
  \u0275TESTABILITY: () => TESTABILITY,
  \u0275TESTABILITY_GETTER: () => TESTABILITY_GETTER,
  \u0275TimerScheduler: () => TimerScheduler,
  \u0275TracingAction: () => TracingAction,
  \u0275TracingService: () => TracingService,
  \u0275ViewRef: () => ViewRef,
  \u0275XSS_SECURITY_URL: () => XSS_SECURITY_URL,
  \u0275ZONELESS_ENABLED: () => ZONELESS_ENABLED,
  \u0275_sanitizeHtml: () => _sanitizeHtml,
  \u0275_sanitizeUrl: () => _sanitizeUrl,
  \u0275allowSanitizationBypassAndThrow: () => allowSanitizationBypassAndThrow,
  \u0275annotateForHydration: () => annotateForHydration,
  \u0275assertType: () => \u0275assertType,
  \u0275bypassSanitizationTrustHtml: () => bypassSanitizationTrustHtml,
  \u0275bypassSanitizationTrustResourceUrl: () => bypassSanitizationTrustResourceUrl,
  \u0275bypassSanitizationTrustScript: () => bypassSanitizationTrustScript,
  \u0275bypassSanitizationTrustStyle: () => bypassSanitizationTrustStyle,
  \u0275bypassSanitizationTrustUrl: () => bypassSanitizationTrustUrl,
  \u0275clearResolutionOfComponentResourcesQueue: () => clearResolutionOfComponentResourcesQueue,
  \u0275compileComponent: () => compileComponent,
  \u0275compileDirective: () => compileDirective,
  \u0275compileNgModule: () => compileNgModule,
  \u0275compileNgModuleDefs: () => compileNgModuleDefs,
  \u0275compileNgModuleFactory: () => compileNgModuleFactory,
  \u0275compilePipe: () => compilePipe,
  \u0275convertToBitFlags: () => convertToBitFlags,
  \u0275createInjector: () => createInjector,
  \u0275createOrReusePlatformInjector: () => createOrReusePlatformInjector,
  \u0275defaultIterableDiffers: () => defaultIterableDiffers,
  \u0275defaultKeyValueDiffers: () => defaultKeyValueDiffers,
  \u0275depsTracker: () => depsTracker,
  \u0275devModeEqual: () => devModeEqual,
  \u0275disableProfiling: () => disableProfiling,
  \u0275enableProfiling: () => enableProfiling2,
  \u0275encapsulateResourceError: () => encapsulateResourceError,
  \u0275findLocaleData: () => findLocaleData,
  \u0275flushModuleScopingQueueAsMuchAsPossible: () => flushModuleScopingQueueAsMuchAsPossible,
  \u0275formatRuntimeError: () => formatRuntimeError,
  \u0275generateStandaloneInDeclarationsError: () => generateStandaloneInDeclarationsError,
  \u0275getAsyncClassMetadataFn: () => getAsyncClassMetadataFn,
  \u0275getClosestComponentName: () => getClosestComponentName,
  \u0275getComponentDef: () => getComponentDef,
  \u0275getDebugNode: () => getDebugNode,
  \u0275getDeferBlocks: () => getDeferBlocks$1,
  \u0275getDirectives: () => getDirectives,
  \u0275getDocument: () => getDocument,
  \u0275getHostElement: () => getHostElement,
  \u0275getInjectableDef: () => getInjectableDef,
  \u0275getLContext: () => getLContext,
  \u0275getLocaleCurrencyCode: () => getLocaleCurrencyCode,
  \u0275getLocalePluralCase: () => getLocalePluralCase,
  \u0275getOutputDestroyRef: () => getOutputDestroyRef,
  \u0275getSanitizationBypassType: () => getSanitizationBypassType,
  \u0275getTransferState: () => getTransferState,
  \u0275getUnknownElementStrictMode: () => \u0275getUnknownElementStrictMode,
  \u0275getUnknownPropertyStrictMode: () => \u0275getUnknownPropertyStrictMode,
  \u0275global: () => _global,
  \u0275injectChangeDetectorRef: () => injectChangeDetectorRef,
  \u0275internalCreateApplication: () => internalCreateApplication,
  \u0275internalProvideZoneChangeDetection: () => internalProvideZoneChangeDetection,
  \u0275isBoundToModule: () => isBoundToModule,
  \u0275isComponentDefPendingResolution: () => isComponentDefPendingResolution,
  \u0275isEnvironmentProviders: () => isEnvironmentProviders,
  \u0275isInjectable: () => isInjectable,
  \u0275isNgModule: () => isNgModule,
  \u0275isPromise: () => isPromise2,
  \u0275isSubscribable: () => isSubscribable,
  \u0275isViewDirty: () => isViewDirty,
  \u0275markForRefresh: () => markForRefresh,
  \u0275noSideEffects: () => noSideEffects,
  \u0275patchComponentDefWithScope: () => patchComponentDefWithScope,
  \u0275performanceMarkFeature: () => performanceMarkFeature,
  \u0275publishExternalGlobalUtil: () => publishExternalGlobalUtil,
  \u0275readHydrationInfo: () => readHydrationInfo,
  \u0275registerLocaleData: () => registerLocaleData,
  \u0275renderDeferBlockState: () => renderDeferBlockState,
  \u0275resetCompiledComponents: () => resetCompiledComponents,
  \u0275resetJitOptions: () => resetJitOptions,
  \u0275resolveComponentResources: () => resolveComponentResources,
  \u0275restoreComponentResolutionQueue: () => restoreComponentResolutionQueue,
  \u0275setAllowDuplicateNgModuleIdsForTest: () => setAllowDuplicateNgModuleIdsForTest,
  \u0275setAlternateWeakRefImpl: () => setAlternateWeakRefImpl,
  \u0275setClassDebugInfo: () => \u0275setClassDebugInfo,
  \u0275setClassMetadata: () => setClassMetadata,
  \u0275setClassMetadataAsync: () => setClassMetadataAsync,
  \u0275setCurrentInjector: () => setCurrentInjector,
  \u0275setDocument: () => setDocument,
  \u0275setInjectorProfilerContext: () => setInjectorProfilerContext,
  \u0275setLocaleId: () => setLocaleId,
  \u0275setResourceValueThrowsErrors: () => setResourceValueThrowsErrors,
  \u0275setUnknownElementStrictMode: () => \u0275setUnknownElementStrictMode,
  \u0275setUnknownPropertyStrictMode: () => \u0275setUnknownPropertyStrictMode,
  \u0275startMeasuring: () => startMeasuring,
  \u0275stopMeasuring: () => stopMeasuring,
  \u0275store: () => store,
  \u0275stringify: () => stringify,
  \u0275transitiveScopesFor: () => transitiveScopesFor,
  \u0275triggerResourceLoading: () => triggerResourceLoading,
  \u0275truncateMiddle: () => truncateMiddle,
  \u0275unregisterLocaleData: () => unregisterAllLocaleData,
  \u0275unwrapSafeValue: () => unwrapSafeValue,
  \u0275unwrapWritableSignal: () => \u0275unwrapWritableSignal,
  \u0275withDomHydration: () => withDomHydration,
  \u0275withEventReplay: () => withEventReplay,
  \u0275withI18nSupport: () => withI18nSupport,
  \u0275withIncrementalHydration: () => withIncrementalHydration,
  \u0275\u0275CopyDefinitionFeature: () => \u0275\u0275CopyDefinitionFeature,
  \u0275\u0275ExternalStylesFeature: () => \u0275\u0275ExternalStylesFeature,
  \u0275\u0275FactoryTarget: () => FactoryTarget,
  \u0275\u0275HostDirectivesFeature: () => \u0275\u0275HostDirectivesFeature,
  \u0275\u0275InheritDefinitionFeature: () => \u0275\u0275InheritDefinitionFeature,
  \u0275\u0275NgOnChangesFeature: () => \u0275\u0275NgOnChangesFeature,
  \u0275\u0275ProvidersFeature: () => \u0275\u0275ProvidersFeature,
  \u0275\u0275advance: () => \u0275\u0275advance,
  \u0275\u0275attachSourceLocations: () => \u0275\u0275attachSourceLocations,
  \u0275\u0275attribute: () => \u0275\u0275attribute,
  \u0275\u0275classMap: () => \u0275\u0275classMap,
  \u0275\u0275classProp: () => \u0275\u0275classProp,
  \u0275\u0275componentInstance: () => \u0275\u0275componentInstance,
  \u0275\u0275conditional: () => \u0275\u0275conditional,
  \u0275\u0275conditionalBranchCreate: () => \u0275\u0275conditionalBranchCreate,
  \u0275\u0275conditionalCreate: () => \u0275\u0275conditionalCreate,
  \u0275\u0275contentQuery: () => \u0275\u0275contentQuery,
  \u0275\u0275contentQuerySignal: () => \u0275\u0275contentQuerySignal,
  \u0275\u0275declareLet: () => \u0275\u0275declareLet,
  \u0275\u0275defer: () => \u0275\u0275defer,
  \u0275\u0275deferEnableTimerScheduling: () => \u0275\u0275deferEnableTimerScheduling,
  \u0275\u0275deferHydrateNever: () => \u0275\u0275deferHydrateNever,
  \u0275\u0275deferHydrateOnHover: () => \u0275\u0275deferHydrateOnHover,
  \u0275\u0275deferHydrateOnIdle: () => \u0275\u0275deferHydrateOnIdle,
  \u0275\u0275deferHydrateOnImmediate: () => \u0275\u0275deferHydrateOnImmediate,
  \u0275\u0275deferHydrateOnInteraction: () => \u0275\u0275deferHydrateOnInteraction,
  \u0275\u0275deferHydrateOnTimer: () => \u0275\u0275deferHydrateOnTimer,
  \u0275\u0275deferHydrateOnViewport: () => \u0275\u0275deferHydrateOnViewport,
  \u0275\u0275deferHydrateWhen: () => \u0275\u0275deferHydrateWhen,
  \u0275\u0275deferOnHover: () => \u0275\u0275deferOnHover,
  \u0275\u0275deferOnIdle: () => \u0275\u0275deferOnIdle,
  \u0275\u0275deferOnImmediate: () => \u0275\u0275deferOnImmediate,
  \u0275\u0275deferOnInteraction: () => \u0275\u0275deferOnInteraction,
  \u0275\u0275deferOnTimer: () => \u0275\u0275deferOnTimer,
  \u0275\u0275deferOnViewport: () => \u0275\u0275deferOnViewport,
  \u0275\u0275deferPrefetchOnHover: () => \u0275\u0275deferPrefetchOnHover,
  \u0275\u0275deferPrefetchOnIdle: () => \u0275\u0275deferPrefetchOnIdle,
  \u0275\u0275deferPrefetchOnImmediate: () => \u0275\u0275deferPrefetchOnImmediate,
  \u0275\u0275deferPrefetchOnInteraction: () => \u0275\u0275deferPrefetchOnInteraction,
  \u0275\u0275deferPrefetchOnTimer: () => \u0275\u0275deferPrefetchOnTimer,
  \u0275\u0275deferPrefetchOnViewport: () => \u0275\u0275deferPrefetchOnViewport,
  \u0275\u0275deferPrefetchWhen: () => \u0275\u0275deferPrefetchWhen,
  \u0275\u0275deferWhen: () => \u0275\u0275deferWhen,
  \u0275\u0275defineComponent: () => \u0275\u0275defineComponent,
  \u0275\u0275defineDirective: () => \u0275\u0275defineDirective,
  \u0275\u0275defineInjectable: () => \u0275\u0275defineInjectable,
  \u0275\u0275defineInjector: () => \u0275\u0275defineInjector,
  \u0275\u0275defineNgModule: () => \u0275\u0275defineNgModule,
  \u0275\u0275definePipe: () => \u0275\u0275definePipe,
  \u0275\u0275directiveInject: () => \u0275\u0275directiveInject,
  \u0275\u0275disableBindings: () => \u0275\u0275disableBindings,
  \u0275\u0275domElement: () => \u0275\u0275domElement,
  \u0275\u0275domElementContainer: () => \u0275\u0275domElementContainer,
  \u0275\u0275domElementContainerEnd: () => \u0275\u0275domElementContainerEnd,
  \u0275\u0275domElementContainerStart: () => \u0275\u0275domElementContainerStart,
  \u0275\u0275domElementEnd: () => \u0275\u0275domElementEnd,
  \u0275\u0275domElementStart: () => \u0275\u0275domElementStart,
  \u0275\u0275domListener: () => \u0275\u0275domListener,
  \u0275\u0275domProperty: () => \u0275\u0275domProperty,
  \u0275\u0275domTemplate: () => \u0275\u0275domTemplate,
  \u0275\u0275element: () => \u0275\u0275element,
  \u0275\u0275elementContainer: () => \u0275\u0275elementContainer,
  \u0275\u0275elementContainerEnd: () => \u0275\u0275elementContainerEnd,
  \u0275\u0275elementContainerStart: () => \u0275\u0275elementContainerStart,
  \u0275\u0275elementEnd: () => \u0275\u0275elementEnd,
  \u0275\u0275elementStart: () => \u0275\u0275elementStart,
  \u0275\u0275enableBindings: () => \u0275\u0275enableBindings,
  \u0275\u0275getComponentDepsFactory: () => \u0275\u0275getComponentDepsFactory,
  \u0275\u0275getCurrentView: () => \u0275\u0275getCurrentView,
  \u0275\u0275getInheritedFactory: () => \u0275\u0275getInheritedFactory,
  \u0275\u0275getReplaceMetadataURL: () => \u0275\u0275getReplaceMetadataURL,
  \u0275\u0275i18n: () => \u0275\u0275i18n,
  \u0275\u0275i18nApply: () => \u0275\u0275i18nApply,
  \u0275\u0275i18nAttributes: () => \u0275\u0275i18nAttributes,
  \u0275\u0275i18nEnd: () => \u0275\u0275i18nEnd,
  \u0275\u0275i18nExp: () => \u0275\u0275i18nExp,
  \u0275\u0275i18nPostprocess: () => \u0275\u0275i18nPostprocess,
  \u0275\u0275i18nStart: () => \u0275\u0275i18nStart,
  \u0275\u0275inject: () => \u0275\u0275inject,
  \u0275\u0275injectAttribute: () => \u0275\u0275injectAttribute,
  \u0275\u0275interpolate: () => \u0275\u0275interpolate,
  \u0275\u0275interpolate1: () => \u0275\u0275interpolate1,
  \u0275\u0275interpolate2: () => \u0275\u0275interpolate2,
  \u0275\u0275interpolate3: () => \u0275\u0275interpolate3,
  \u0275\u0275interpolate4: () => \u0275\u0275interpolate4,
  \u0275\u0275interpolate5: () => \u0275\u0275interpolate5,
  \u0275\u0275interpolate6: () => \u0275\u0275interpolate6,
  \u0275\u0275interpolate7: () => \u0275\u0275interpolate7,
  \u0275\u0275interpolate8: () => \u0275\u0275interpolate8,
  \u0275\u0275interpolateV: () => \u0275\u0275interpolateV,
  \u0275\u0275invalidFactory: () => \u0275\u0275invalidFactory,
  \u0275\u0275invalidFactoryDep: () => \u0275\u0275invalidFactoryDep,
  \u0275\u0275listener: () => \u0275\u0275listener,
  \u0275\u0275loadQuery: () => \u0275\u0275loadQuery,
  \u0275\u0275namespaceHTML: () => \u0275\u0275namespaceHTML,
  \u0275\u0275namespaceMathML: () => \u0275\u0275namespaceMathML,
  \u0275\u0275namespaceSVG: () => \u0275\u0275namespaceSVG,
  \u0275\u0275nextContext: () => \u0275\u0275nextContext,
  \u0275\u0275ngDeclareClassMetadata: () => \u0275\u0275ngDeclareClassMetadata,
  \u0275\u0275ngDeclareClassMetadataAsync: () => \u0275\u0275ngDeclareClassMetadataAsync,
  \u0275\u0275ngDeclareComponent: () => \u0275\u0275ngDeclareComponent,
  \u0275\u0275ngDeclareDirective: () => \u0275\u0275ngDeclareDirective,
  \u0275\u0275ngDeclareFactory: () => \u0275\u0275ngDeclareFactory,
  \u0275\u0275ngDeclareInjectable: () => \u0275\u0275ngDeclareInjectable,
  \u0275\u0275ngDeclareInjector: () => \u0275\u0275ngDeclareInjector,
  \u0275\u0275ngDeclareNgModule: () => \u0275\u0275ngDeclareNgModule,
  \u0275\u0275ngDeclarePipe: () => \u0275\u0275ngDeclarePipe,
  \u0275\u0275pipe: () => \u0275\u0275pipe,
  \u0275\u0275pipeBind1: () => \u0275\u0275pipeBind1,
  \u0275\u0275pipeBind2: () => \u0275\u0275pipeBind2,
  \u0275\u0275pipeBind3: () => \u0275\u0275pipeBind3,
  \u0275\u0275pipeBind4: () => \u0275\u0275pipeBind4,
  \u0275\u0275pipeBindV: () => \u0275\u0275pipeBindV,
  \u0275\u0275projection: () => \u0275\u0275projection,
  \u0275\u0275projectionDef: () => \u0275\u0275projectionDef,
  \u0275\u0275property: () => \u0275\u0275property,
  \u0275\u0275pureFunction0: () => \u0275\u0275pureFunction0,
  \u0275\u0275pureFunction1: () => \u0275\u0275pureFunction1,
  \u0275\u0275pureFunction2: () => \u0275\u0275pureFunction2,
  \u0275\u0275pureFunction3: () => \u0275\u0275pureFunction3,
  \u0275\u0275pureFunction4: () => \u0275\u0275pureFunction4,
  \u0275\u0275pureFunction5: () => \u0275\u0275pureFunction5,
  \u0275\u0275pureFunction6: () => \u0275\u0275pureFunction6,
  \u0275\u0275pureFunction7: () => \u0275\u0275pureFunction7,
  \u0275\u0275pureFunction8: () => \u0275\u0275pureFunction8,
  \u0275\u0275pureFunctionV: () => \u0275\u0275pureFunctionV,
  \u0275\u0275queryAdvance: () => \u0275\u0275queryAdvance,
  \u0275\u0275queryRefresh: () => \u0275\u0275queryRefresh,
  \u0275\u0275readContextLet: () => \u0275\u0275readContextLet,
  \u0275\u0275reference: () => \u0275\u0275reference,
  \u0275\u0275registerNgModuleType: () => registerNgModuleType,
  \u0275\u0275repeater: () => \u0275\u0275repeater,
  \u0275\u0275repeaterCreate: () => \u0275\u0275repeaterCreate,
  \u0275\u0275repeaterTrackByIdentity: () => \u0275\u0275repeaterTrackByIdentity,
  \u0275\u0275repeaterTrackByIndex: () => \u0275\u0275repeaterTrackByIndex,
  \u0275\u0275replaceMetadata: () => \u0275\u0275replaceMetadata,
  \u0275\u0275resetView: () => \u0275\u0275resetView,
  \u0275\u0275resolveBody: () => \u0275\u0275resolveBody,
  \u0275\u0275resolveDocument: () => \u0275\u0275resolveDocument,
  \u0275\u0275resolveWindow: () => \u0275\u0275resolveWindow,
  \u0275\u0275restoreView: () => \u0275\u0275restoreView,
  \u0275\u0275sanitizeHtml: () => \u0275\u0275sanitizeHtml,
  \u0275\u0275sanitizeResourceUrl: () => \u0275\u0275sanitizeResourceUrl,
  \u0275\u0275sanitizeScript: () => \u0275\u0275sanitizeScript,
  \u0275\u0275sanitizeStyle: () => \u0275\u0275sanitizeStyle,
  \u0275\u0275sanitizeUrl: () => \u0275\u0275sanitizeUrl,
  \u0275\u0275sanitizeUrlOrResourceUrl: () => \u0275\u0275sanitizeUrlOrResourceUrl,
  \u0275\u0275setComponentScope: () => \u0275\u0275setComponentScope,
  \u0275\u0275setNgModuleScope: () => \u0275\u0275setNgModuleScope,
  \u0275\u0275storeLet: () => \u0275\u0275storeLet,
  \u0275\u0275styleMap: () => \u0275\u0275styleMap,
  \u0275\u0275styleProp: () => \u0275\u0275styleProp,
  \u0275\u0275syntheticHostListener: () => \u0275\u0275syntheticHostListener,
  \u0275\u0275syntheticHostProperty: () => \u0275\u0275syntheticHostProperty,
  \u0275\u0275template: () => \u0275\u0275template,
  \u0275\u0275templateRefExtractor: () => \u0275\u0275templateRefExtractor,
  \u0275\u0275text: () => \u0275\u0275text,
  \u0275\u0275textInterpolate: () => \u0275\u0275textInterpolate,
  \u0275\u0275textInterpolate1: () => \u0275\u0275textInterpolate1,
  \u0275\u0275textInterpolate2: () => \u0275\u0275textInterpolate2,
  \u0275\u0275textInterpolate3: () => \u0275\u0275textInterpolate3,
  \u0275\u0275textInterpolate4: () => \u0275\u0275textInterpolate4,
  \u0275\u0275textInterpolate5: () => \u0275\u0275textInterpolate5,
  \u0275\u0275textInterpolate6: () => \u0275\u0275textInterpolate6,
  \u0275\u0275textInterpolate7: () => \u0275\u0275textInterpolate7,
  \u0275\u0275textInterpolate8: () => \u0275\u0275textInterpolate8,
  \u0275\u0275textInterpolateV: () => \u0275\u0275textInterpolateV,
  \u0275\u0275trustConstantHtml: () => \u0275\u0275trustConstantHtml,
  \u0275\u0275trustConstantResourceUrl: () => \u0275\u0275trustConstantResourceUrl,
  \u0275\u0275twoWayBindingSet: () => \u0275\u0275twoWayBindingSet,
  \u0275\u0275twoWayListener: () => \u0275\u0275twoWayListener,
  \u0275\u0275twoWayProperty: () => \u0275\u0275twoWayProperty,
  \u0275\u0275validateIframeAttribute: () => \u0275\u0275validateIframeAttribute,
  \u0275\u0275viewQuery: () => \u0275\u0275viewQuery,
  \u0275\u0275viewQuerySignal: () => \u0275\u0275viewQuerySignal
});
function createInputSignal(initialValue, options) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  node.value = initialValue;
  node.transformFn = options?.transform;
  function inputValueFn() {
    producerAccessed(node);
    if (node.value === REQUIRED_UNSET_VALUE) {
      let message = null;
      if (ngDevMode) {
        const name = options?.debugName ?? options?.alias;
        message = `Input${name ? ` "${name}"` : ""} is required but no value is available yet.`;
      }
      throw new RuntimeError(-950, message);
    }
    return node.value;
  }
  inputValueFn[SIGNAL] = node;
  if (ngDevMode) {
    inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;
    node.debugName = options?.debugName;
  }
  return inputValueFn;
}
function getDevModeNodeName(tNode) {
  if (tNode.type & 8) {
    return "an <ng-container>";
  } else if (tNode.type & 4) {
    return "an <ng-template>";
  } else if (tNode.type & 128) {
    return "an @let declaration";
  } else {
    return "a node";
  }
}
function output(opts) {
  ngDevMode && assertInInjectionContext(output);
  return new OutputEmitterRef();
}
function inputFunction(initialValue, opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(initialValue, opts);
}
function inputRequiredFunction(opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(REQUIRED_UNSET_VALUE, opts);
}
function viewChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultOptionalQuerySignalFn(opts);
}
function viewChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultRequiredQuerySignalFn(opts);
}
function viewChildren(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChildren);
  return createMultiResultQuerySignalFn(opts);
}
function contentChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChild);
  return createSingleResultOptionalQuerySignalFn(opts);
}
function contentChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChildren);
  return createSingleResultRequiredQuerySignalFn(opts);
}
function contentChildren(locator, opts) {
  return createMultiResultQuerySignalFn(opts);
}
function createModelSignal(initialValue, opts) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  const emitterRef = new OutputEmitterRef();
  node.value = initialValue;
  function getter() {
    producerAccessed(node);
    assertModelSet(node.value);
    return node.value;
  }
  getter[SIGNAL] = node;
  getter.asReadonly = signalAsReadonlyFn.bind(getter);
  getter.set = (newValue) => {
    if (!node.equal(node.value, newValue)) {
      signalSetFn(node, newValue);
      emitterRef.emit(newValue);
    }
  };
  getter.update = (updateFn) => {
    assertModelSet(node.value);
    getter.set(updateFn(node.value));
  };
  getter.subscribe = emitterRef.subscribe.bind(emitterRef);
  getter.destroyRef = emitterRef.destroyRef;
  if (ngDevMode) {
    getter.toString = () => `[Model Signal: ${getter()}]`;
    node.debugName = opts?.debugName;
  }
  return getter;
}
function assertModelSet(value) {
  if (value === REQUIRED_UNSET_VALUE) {
    throw new RuntimeError(952, ngDevMode && "Model is required but no value is available yet.");
  }
}
function modelFunction(initialValue, opts) {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(initialValue, opts);
}
function modelRequiredFunction(opts) {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(REQUIRED_UNSET_VALUE, opts);
}
function compileNgModuleFactory(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  const moduleFactory = new NgModuleFactory2(moduleType);
  if (false) {
    return Promise.resolve(moduleFactory);
  }
  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),
    preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces))
  });
  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }
  const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);
  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "NgModule",
    type: moduleType
  });
  const compilerInjector = Injector.create({ providers: compilerProviders });
  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
  return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
function logLazyLCPWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} is the Largest Contentful Paint (LCP) element but was given a "loading" value of "lazy", which can negatively impact application loading performance. This warning can be addressed by changing the loading value of the LCP image to "eager", or by using the NgOptimizedImage directive's prioritization utilities. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
function logOversizedImageWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} has intrinsic file dimensions much larger than its rendered size. This can negatively impact application loading performance. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
function isApplicationBootstrapConfig(config2) {
  return !config2.moduleRef;
}
function bootstrap(config2) {
  const envInjector = isApplicationBootstrapConfig(config2) ? config2.r3Injector : config2.moduleRef.injector;
  const ngZone = envInjector.get(NgZone);
  return ngZone.run(() => {
    if (isApplicationBootstrapConfig(config2)) {
      config2.r3Injector.resolveInjectorInitializers();
    } else {
      config2.moduleRef.resolveInjectorInitializers();
    }
    const exceptionHandler = envInjector.get(INTERNAL_APPLICATION_ERROR_HANDLER);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (envInjector.get(PROVIDED_ZONELESS) && envInjector.get(PROVIDED_NG_ZONE)) {
        throw new RuntimeError(408, "Invalid change detection configuration: provideZoneChangeDetection and provideZonelessChangeDetection cannot be used together.");
      }
    }
    let onErrorSubscription;
    ngZone.runOutsideAngular(() => {
      onErrorSubscription = ngZone.onError.subscribe({
        next: exceptionHandler
      });
    });
    if (isApplicationBootstrapConfig(config2)) {
      const destroyListener = () => envInjector.destroy();
      const onPlatformDestroyListeners = config2.platformInjector.get(PLATFORM_DESTROY_LISTENERS);
      onPlatformDestroyListeners.add(destroyListener);
      envInjector.onDestroy(() => {
        onErrorSubscription.unsubscribe();
        onPlatformDestroyListeners.delete(destroyListener);
      });
    } else {
      const destroyListener = () => config2.moduleRef.destroy();
      const onPlatformDestroyListeners = config2.platformInjector.get(PLATFORM_DESTROY_LISTENERS);
      onPlatformDestroyListeners.add(destroyListener);
      config2.moduleRef.onDestroy(() => {
        remove(config2.allPlatformModules, config2.moduleRef);
        onErrorSubscription.unsubscribe();
        onPlatformDestroyListeners.delete(destroyListener);
      });
    }
    return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
      const pendingTasks = envInjector.get(PendingTasksInternal);
      const taskId = pendingTasks.add();
      const initStatus = envInjector.get(ApplicationInitStatus);
      initStatus.runInitializers();
      return initStatus.donePromise.then(() => {
        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
        setLocaleId(localeId || DEFAULT_LOCALE_ID);
        const enableRootComponentBoostrap = envInjector.get(ENABLE_ROOT_COMPONENT_BOOTSTRAP, true);
        if (!enableRootComponentBoostrap) {
          if (isApplicationBootstrapConfig(config2)) {
            return envInjector.get(ApplicationRef);
          }
          config2.allPlatformModules.push(config2.moduleRef);
          return config2.moduleRef;
        }
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          const imagePerformanceService = envInjector.get(ImagePerformanceWarning);
          imagePerformanceService.start();
        }
        if (isApplicationBootstrapConfig(config2)) {
          const appRef = envInjector.get(ApplicationRef);
          if (config2.rootComponent !== void 0) {
            appRef.bootstrap(config2.rootComponent);
          }
          return appRef;
        } else {
          moduleBootstrapImpl?.(config2.moduleRef, config2.allPlatformModules);
          return config2.moduleRef;
        }
      }).finally(() => void pendingTasks.remove(taskId));
    });
  });
}
function setModuleBootstrapImpl() {
  moduleBootstrapImpl = _moduleDoBootstrap;
}
function _moduleDoBootstrap(moduleRef, allPlatformModules) {
  const appRef = moduleRef.injector.get(ApplicationRef);
  if (moduleRef._bootstrapComponents.length > 0) {
    moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));
  } else if (moduleRef.instance.ngDoBootstrap) {
    moduleRef.instance.ngDoBootstrap(appRef);
  } else {
    throw new RuntimeError(-403, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);
  }
  allPlatformModules.push(moduleRef);
}
function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
  try {
    const result = callback();
    if (isPromise2(result)) {
      return result.catch((e) => {
        ngZone.runOutsideAngular(() => errorHandler(e));
        throw e;
      });
    }
    return result;
  } catch (e) {
    ngZone.runOutsideAngular(() => errorHandler(e));
    throw e;
  }
}
function createPlatform(injector) {
  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    throw new RuntimeError(400, ngDevMode && "There can be only one platform. Destroy the previous one to create a new one.");
  }
  publishDefaultGlobalUtils();
  publishSignalConfiguration();
  _platformInjector = injector;
  const platform = injector.get(PlatformRef);
  runPlatformInitializers(injector);
  return platform;
}
function createPlatformFactory(parentPlatformFactory, name, providers = []) {
  const desc = `Platform: ${name}`;
  const marker = new InjectionToken(desc);
  return (extraProviders = []) => {
    let platform = getPlatform();
    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      const platformProviders = [
        ...providers,
        ...extraProviders,
        { provide: marker, useValue: true }
      ];
      if (parentPlatformFactory) {
        parentPlatformFactory(platformProviders);
      } else {
        createPlatform(createPlatformInjector(platformProviders, desc));
      }
    }
    return assertPlatform(marker);
  };
}
function createPlatformInjector(providers = [], name) {
  return Injector.create({
    name,
    providers: [
      { provide: INJECTOR_SCOPE, useValue: "platform" },
      { provide: PLATFORM_DESTROY_LISTENERS, useValue: /* @__PURE__ */ new Set([() => _platformInjector = null]) },
      ...providers
    ]
  });
}
function assertPlatform(requiredToken) {
  const platform = getPlatform();
  if (!platform) {
    throw new RuntimeError(401, ngDevMode && "No platform exists!");
  }
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !platform.injector.get(requiredToken, null)) {
    throw new RuntimeError(400, "A platform with a different configuration has been created. Please destroy it first.");
  }
  return platform;
}
function getPlatform() {
  return _platformInjector?.get(PlatformRef) ?? null;
}
function destroyPlatform() {
  getPlatform()?.destroy();
}
function createOrReusePlatformInjector(providers = []) {
  if (_platformInjector)
    return _platformInjector;
  publishDefaultGlobalUtils();
  const injector = createPlatformInjector(providers);
  _platformInjector = injector;
  publishSignalConfiguration();
  runPlatformInitializers(injector);
  return injector;
}
function providePlatformInitializer(initializerFn) {
  return makeEnvironmentProviders([
    {
      provide: PLATFORM_INITIALIZER,
      useValue: initializerFn,
      multi: true
    }
  ]);
}
function runPlatformInitializers(injector) {
  const inits = injector.get(PLATFORM_INITIALIZER, null);
  runInInjectionContext(injector, () => {
    inits?.forEach((init) => init());
  });
}
function exhaustiveCheckNoChangesInterval(interval) {
  return provideEnvironmentInitializer(() => {
    const applicationRef = inject2(ApplicationRef);
    const errorHandler = inject2(ErrorHandler);
    const scheduler = inject2(ChangeDetectionSchedulerImpl);
    const ngZone = inject2(NgZone);
    function scheduleCheckNoChanges() {
      ngZone.runOutsideAngular(() => {
        setTimeout(() => {
          if (applicationRef.destroyed) {
            return;
          }
          if (scheduler.pendingRenderTaskId || scheduler.runningTick) {
            scheduleCheckNoChanges();
            return;
          }
          for (const view of applicationRef.allViews) {
            try {
              checkNoChangesInternal(
                view._lView,
                true
                /** exhaustive */
              );
            } catch (e) {
              errorHandler.handleError(e);
            }
          }
          scheduleCheckNoChanges();
        }, interval);
      });
    }
    scheduleCheckNoChanges();
  });
}
function provideCheckNoChangesConfig(options) {
  return makeEnvironmentProviders(typeof ngDevMode === "undefined" || ngDevMode ? [
    {
      provide: UseExhaustiveCheckNoChanges,
      useValue: options.exhaustive
    },
    options?.interval !== void 0 ? exhaustiveCheckNoChangesInterval(options.interval) : []
  ] : []);
}
function isDevMode() {
  return typeof ngDevMode === "undefined" || !!ngDevMode;
}
function enableProdMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    _global["ngDevMode"] = false;
  }
}
function getModuleFactory(id) {
  const type = getRegisteredNgModuleType(id);
  if (!type)
    throw noModuleError(id);
  return new NgModuleFactory2(type);
}
function getNgModuleById(id) {
  const type = getRegisteredNgModuleType(id);
  if (!type)
    throw noModuleError(id);
  return type;
}
function noModuleError(id) {
  return new Error(`No module with ID ${id} loaded`);
}
function injectChangeDetectorRef(flags) {
  return createViewRef(
    getCurrentTNode(),
    getLView(),
    (flags & 16) === 16
    /* InternalInjectFlags.ForPipe */
  );
}
function createViewRef(tNode, lView, isPipe2) {
  if (isComponentHost(tNode) && !isPipe2) {
    const componentView = getComponentLViewByIndex(tNode.index, lView);
    return new ViewRef(componentView, componentView);
  } else if (tNode.type & (3 | 12 | 32 | 128)) {
    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
    return new ViewRef(hostComponentView, lView);
  }
  return null;
}
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  const previousIndex = item.previousIndex;
  if (previousIndex === null)
    return previousIndex;
  let moveOffset = 0;
  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }
  return previousIndex + addRemoveOffset + moveOffset;
}
function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
function getTypeNameForDebugging(type) {
  return type["name"] || typeof type;
}
function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
function internalCreateApplication(config2) {
  profiler(
    8
    /* ProfilerEvent.BootstrapApplicationStart */
  );
  try {
    const { rootComponent, appProviders, platformProviders } = config2;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && rootComponent !== void 0) {
      assertStandaloneComponentType(rootComponent);
    }
    const platformInjector = createOrReusePlatformInjector(platformProviders);
    const allAppProviders = [
      internalProvideZoneChangeDetection({}),
      { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },
      errorHandlerEnvironmentInitializer,
      ...appProviders || []
    ];
    const adapter = new EnvironmentNgModuleRefAdapter({
      providers: allAppProviders,
      parent: platformInjector,
      debugName: typeof ngDevMode === "undefined" || ngDevMode ? "Environment Injector" : "",
      // We skip environment initializers because we need to run them inside the NgZone, which
      // happens after we get the NgZone instance from the Injector.
      runEnvironmentInitializers: false
    });
    return bootstrap({
      r3Injector: adapter.injector,
      platformInjector,
      rootComponent
    });
  } catch (e) {
    return Promise.reject(e);
  } finally {
    profiler(
      9
      /* ProfilerEvent.BootstrapApplicationEnd */
    );
  }
}
function shouldEnableEventReplay(injector) {
  return injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT);
}
function withEventReplay() {
  const providers = [
    {
      provide: IS_EVENT_REPLAY_ENABLED,
      useFactory: () => {
        let isEnabled = true;
        if (true) {
          const appId = inject2(APP_ID);
          isEnabled = !!window._ejsas?.[appId];
        }
        if (isEnabled) {
          performanceMarkFeature("NgEventReplay");
        }
        return isEnabled;
      }
    }
  ];
  if (true) {
    providers.push({
      provide: ENVIRONMENT_INITIALIZER,
      useValue: () => {
        const appRef = inject2(ApplicationRef);
        const { injector } = appRef;
        if (!appsWithEventReplay.has(appRef)) {
          const jsActionMap = inject2(JSACTION_BLOCK_ELEMENT_MAP);
          if (shouldEnableEventReplay(injector)) {
            enableStashEventListenerImpl();
            const appId = injector.get(APP_ID);
            const clearStashFn = setStashFn(appId, (rEl, eventName, listenerFn) => {
              if (rEl.nodeType !== Node.ELEMENT_NODE)
                return;
              sharedStashFunction(rEl, eventName, listenerFn);
              sharedMapFunction(rEl, jsActionMap);
            });
            appRef.onDestroy(clearStashFn);
          }
        }
      },
      multi: true
    }, {
      provide: APP_BOOTSTRAP_LISTENER,
      useFactory: () => {
        const appRef = inject2(ApplicationRef);
        const { injector } = appRef;
        return () => {
          if (!shouldEnableEventReplay(injector) || appsWithEventReplay.has(appRef)) {
            return;
          }
          appsWithEventReplay.add(appRef);
          const appId = injector.get(APP_ID);
          appRef.onDestroy(() => {
            appsWithEventReplay.delete(appRef);
            if (true) {
              clearAppScopedEarlyEventContract(appId);
            }
          });
          appRef.whenStable().then(() => {
            if (appRef.destroyed) {
              return;
            }
            const eventContractDetails = injector.get(JSACTION_EVENT_CONTRACT);
            initEventReplay(eventContractDetails, injector);
            const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);
            jsActionMap.get(EAGER_CONTENT_LISTENERS_KEY)?.forEach(removeListeners);
            jsActionMap.delete(EAGER_CONTENT_LISTENERS_KEY);
            const eventContract = eventContractDetails.instance;
            if (isIncrementalHydrationEnabled(injector)) {
              appRef.onDestroy(() => eventContract.cleanUp());
            } else {
              eventContract.cleanUp();
            }
          });
        };
      },
      multi: true
    });
  }
  return providers;
}
function collectDomEventsInfo(tView, lView, eventTypesToReplay) {
  const domEventsInfo = /* @__PURE__ */ new Map();
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  if (!tCleanup || !lCleanup) {
    return domEventsInfo;
  }
  for (let i = 0; i < tCleanup.length; ) {
    const firstParam = tCleanup[i++];
    const secondParam = tCleanup[i++];
    if (typeof firstParam !== "string") {
      continue;
    }
    const eventType = firstParam;
    if (!isEarlyEventType(eventType)) {
      continue;
    }
    if (isCaptureEventType(eventType)) {
      eventTypesToReplay.capture.add(eventType);
    } else {
      eventTypesToReplay.regular.add(eventType);
    }
    const listenerElement = unwrapRNode(lView[secondParam]);
    i++;
    const useCaptureOrIndx = tCleanup[i++];
    const isDomEvent = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0;
    if (!isDomEvent) {
      continue;
    }
    if (!domEventsInfo.has(listenerElement)) {
      domEventsInfo.set(listenerElement, [eventType]);
    } else {
      domEventsInfo.get(listenerElement).push(eventType);
    }
  }
  return domEventsInfo;
}
function invokeRegisteredReplayListeners(injector, event, currentTarget) {
  const blockName = (currentTarget && currentTarget.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE)) ?? "";
  if (/d\d+/.test(blockName)) {
    hydrateAndInvokeBlockListeners(blockName, injector, event, currentTarget);
  } else if (event.eventPhase === EventPhase.REPLAY) {
    invokeListeners(event, currentTarget);
  }
}
function hydrateAndInvokeBlockListeners(blockName, injector, event, currentTarget) {
  blockEventQueue.push({ event, currentTarget });
  triggerHydrationFromBlockName(injector, blockName, replayQueuedBlockEvents);
}
function replayQueuedBlockEvents(hydratedBlocks) {
  const queue = [...blockEventQueue];
  const hydrated = new Set(hydratedBlocks);
  blockEventQueue = [];
  for (let { event, currentTarget } of queue) {
    const blockName = currentTarget.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);
    if (hydrated.has(blockName)) {
      invokeListeners(event, currentTarget);
    } else {
      blockEventQueue.push({ event, currentTarget });
    }
  }
}
function getSsrId(tView) {
  if (!tView.ssrId) {
    tView.ssrId = `t${tViewSsrId++}`;
  }
  return tView.ssrId;
}
function calcNumRootNodes(tView, lView, tNode) {
  const rootNodes = [];
  collectNativeNodes(tView, lView, tNode, rootNodes);
  return rootNodes.length;
}
function calcNumRootNodesInLContainer(lContainer) {
  const rootNodes = [];
  collectNativeNodesInLContainer(lContainer, rootNodes);
  return rootNodes.length;
}
function annotateComponentLViewForHydration(lView, context2, injector) {
  const hostElement = lView[HOST];
  if (hostElement && !hostElement.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
    return annotateHostElementForHydration(hostElement, lView, null, context2);
  }
  return null;
}
function annotateLContainerForHydration(lContainer, context2, injector) {
  const componentLView = unwrapLView(lContainer[HOST]);
  const componentLViewNghIndex = annotateComponentLViewForHydration(componentLView, context2);
  if (componentLViewNghIndex === null) {
    return;
  }
  const hostElement = unwrapRNode(componentLView[HOST]);
  const rootLView = lContainer[PARENT];
  const rootLViewNghIndex = annotateHostElementForHydration(hostElement, rootLView, null, context2);
  const renderer = componentLView[RENDERER];
  const finalIndex = `${componentLViewNghIndex}|${rootLViewNghIndex}`;
  renderer.setAttribute(hostElement, NGH_ATTR_NAME, finalIndex);
}
function annotateForHydration(appRef, doc) {
  const injector = appRef.injector;
  const isI18nHydrationEnabledVal = isI18nHydrationEnabled(injector);
  const isIncrementalHydrationEnabledVal = isIncrementalHydrationEnabled(injector);
  const serializedViewCollection = new SerializedViewCollection();
  const corruptedTextNodes = /* @__PURE__ */ new Map();
  const viewRefs = appRef._views;
  const shouldReplayEvents = injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT);
  const eventTypesToReplay = {
    regular: /* @__PURE__ */ new Set(),
    capture: /* @__PURE__ */ new Set()
  };
  const deferBlocks = /* @__PURE__ */ new Map();
  const appId = appRef.injector.get(APP_ID);
  for (const viewRef of viewRefs) {
    const lNode = getLNodeForHydration(viewRef);
    if (lNode !== null) {
      const context2 = {
        serializedViewCollection,
        corruptedTextNodes,
        isI18nHydrationEnabled: isI18nHydrationEnabledVal,
        isIncrementalHydrationEnabled: isIncrementalHydrationEnabledVal,
        i18nChildren: /* @__PURE__ */ new Map(),
        eventTypesToReplay,
        shouldReplayEvents,
        appId,
        deferBlocks
      };
      if (isLContainer(lNode)) {
        annotateLContainerForHydration(lNode, context2);
      } else {
        annotateComponentLViewForHydration(lNode, context2);
      }
      insertCorruptedTextNodeMarkers(corruptedTextNodes, doc);
    }
  }
  const serializedViews = serializedViewCollection.getAll();
  const transferState = injector.get(TransferState);
  transferState.set(NGH_DATA_KEY, serializedViews);
  if (deferBlocks.size > 0) {
    const blocks = {};
    for (const [id, info] of deferBlocks.entries()) {
      blocks[id] = info;
    }
    transferState.set(NGH_DEFER_BLOCKS_KEY, blocks);
  }
  return eventTypesToReplay;
}
function serializeLContainer(lContainer, tNode, lView, parentDeferBlockId, context2) {
  const views = [];
  let lastViewAsString = "";
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    let childLView = lContainer[i];
    let template2;
    let numRootNodes;
    let serializedView;
    if (isRootView(childLView)) {
      childLView = childLView[HEADER_OFFSET];
      if (isLContainer(childLView)) {
        numRootNodes = calcNumRootNodesInLContainer(childLView) + 1;
        annotateLContainerForHydration(childLView, context2);
        const componentLView = unwrapLView(childLView[HOST]);
        serializedView = {
          [TEMPLATE_ID]: componentLView[TVIEW].ssrId,
          [NUM_ROOT_NODES]: numRootNodes
        };
      }
    }
    if (!serializedView) {
      const childTView = childLView[TVIEW];
      if (childTView.type === 1) {
        template2 = childTView.ssrId;
        numRootNodes = 1;
      } else {
        template2 = getSsrId(childTView);
        numRootNodes = calcNumRootNodes(childTView, childLView, childTView.firstChild);
      }
      serializedView = {
        [TEMPLATE_ID]: template2,
        [NUM_ROOT_NODES]: numRootNodes
      };
      let isHydrateNeverBlock = false;
      if (isDeferBlock(lView[TVIEW], tNode)) {
        const lDetails = getLDeferBlockDetails(lView, tNode);
        const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);
        if (context2.isIncrementalHydrationEnabled && tDetails.hydrateTriggers !== null) {
          const deferBlockId = `d${context2.deferBlocks.size}`;
          if (tDetails.hydrateTriggers.has(
            7
            /* DeferBlockTrigger.Never */
          )) {
            isHydrateNeverBlock = true;
          }
          let rootNodes = [];
          collectNativeNodesInLContainer(lContainer, rootNodes);
          const deferBlockInfo = {
            [NUM_ROOT_NODES]: rootNodes.length,
            [DEFER_BLOCK_STATE$1]: lDetails[DEFER_BLOCK_STATE]
          };
          const serializedTriggers = serializeHydrateTriggers(tDetails.hydrateTriggers);
          if (serializedTriggers.length > 0) {
            deferBlockInfo[DEFER_HYDRATE_TRIGGERS] = serializedTriggers;
          }
          if (parentDeferBlockId !== null) {
            deferBlockInfo[DEFER_PARENT_BLOCK_ID] = parentDeferBlockId;
          }
          context2.deferBlocks.set(deferBlockId, deferBlockInfo);
          const node = unwrapRNode(lContainer);
          if (node !== void 0) {
            if (node.nodeType === Node.COMMENT_NODE) {
              annotateDeferBlockAnchorForHydration(node, deferBlockId);
            }
          } else {
            ngDevMode && validateNodeExists(node, childLView, tNode);
            ngDevMode && validateMatchingNode(node, Node.COMMENT_NODE, null, childLView, tNode, true);
            annotateDeferBlockAnchorForHydration(node, deferBlockId);
          }
          if (!isHydrateNeverBlock) {
            annotateDeferBlockRootNodesWithJsAction(tDetails, rootNodes, deferBlockId, context2);
          }
          parentDeferBlockId = deferBlockId;
          serializedView[DEFER_BLOCK_ID] = deferBlockId;
        }
        serializedView[DEFER_BLOCK_STATE$1] = lDetails[DEFER_BLOCK_STATE];
      }
      if (!isHydrateNeverBlock) {
        Object.assign(serializedView, serializeLView(lContainer[i], parentDeferBlockId, context2));
      }
    }
    const currentViewAsString = JSON.stringify(serializedView);
    if (views.length > 0 && currentViewAsString === lastViewAsString) {
      const previousView = views[views.length - 1];
      previousView[MULTIPLIER] ??= 1;
      previousView[MULTIPLIER]++;
    } else {
      lastViewAsString = currentViewAsString;
      views.push(serializedView);
    }
  }
  return views;
}
function serializeHydrateTriggers(triggerMap) {
  const serializableDeferBlockTrigger = /* @__PURE__ */ new Set([
    0,
    1,
    2,
    5
  ]);
  let triggers = [];
  for (let [trigger, details] of triggerMap) {
    if (serializableDeferBlockTrigger.has(trigger)) {
      if (details === null) {
        triggers.push(trigger);
      } else {
        triggers.push({ trigger, delay: details.delay });
      }
    }
  }
  return triggers;
}
function appendSerializedNodePath(ngh, tNode, lView, excludedParentNodes) {
  const noOffsetIndex = tNode.index - HEADER_OFFSET;
  ngh[NODES] ??= {};
  ngh[NODES][noOffsetIndex] ??= calcPathForNode(tNode, lView, excludedParentNodes);
}
function appendDisconnectedNodeIndex(ngh, tNodeOrNoOffsetIndex) {
  const noOffsetIndex = typeof tNodeOrNoOffsetIndex === "number" ? tNodeOrNoOffsetIndex : tNodeOrNoOffsetIndex.index - HEADER_OFFSET;
  ngh[DISCONNECTED_NODES] ??= [];
  if (!ngh[DISCONNECTED_NODES].includes(noOffsetIndex)) {
    ngh[DISCONNECTED_NODES].push(noOffsetIndex);
  }
}
function serializeLView(lView, parentDeferBlockId = null, context2) {
  const ngh = {};
  const tView = lView[TVIEW];
  const i18nChildren = getOrComputeI18nChildren(tView, context2);
  const nativeElementsToEventTypes = context2.shouldReplayEvents ? collectDomEventsInfo(tView, lView, context2.eventTypesToReplay) : null;
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    const tNode = tView.data[i];
    const noOffsetIndex = i - HEADER_OFFSET;
    const i18nData = trySerializeI18nBlock(lView, i, context2);
    if (i18nData) {
      ngh[I18N_DATA] ??= {};
      ngh[I18N_DATA][noOffsetIndex] = i18nData.caseQueue;
      for (const nodeNoOffsetIndex of i18nData.disconnectedNodes) {
        appendDisconnectedNodeIndex(ngh, nodeNoOffsetIndex);
      }
      for (const nodeNoOffsetIndex of i18nData.disjointNodes) {
        const tNode2 = tView.data[nodeNoOffsetIndex + HEADER_OFFSET];
        ngDevMode && assertTNode(tNode2);
        appendSerializedNodePath(ngh, tNode2, lView, i18nChildren);
      }
      continue;
    }
    if (!isTNodeShape(tNode)) {
      continue;
    }
    if (isDetachedByI18n(tNode)) {
      continue;
    }
    if (isLContainer(lView[i]) && tNode.tView) {
      ngh[TEMPLATES] ??= {};
      ngh[TEMPLATES][noOffsetIndex] = getSsrId(tNode.tView);
    }
    if (isDisconnectedNode(tNode, lView) && isContentProjectedNode(tNode)) {
      appendDisconnectedNodeIndex(ngh, tNode);
      continue;
    }
    if (Array.isArray(tNode.projection)) {
      for (const projectionHeadTNode of tNode.projection) {
        if (!projectionHeadTNode)
          continue;
        if (!Array.isArray(projectionHeadTNode)) {
          if (!isProjectionTNode(projectionHeadTNode) && !isInSkipHydrationBlock2(projectionHeadTNode)) {
            if (isDisconnectedNode(projectionHeadTNode, lView)) {
              appendDisconnectedNodeIndex(ngh, projectionHeadTNode);
            } else {
              appendSerializedNodePath(ngh, projectionHeadTNode, lView, i18nChildren);
            }
          }
        } else {
          throw unsupportedProjectionOfDomNodes(unwrapRNode(lView[i]));
        }
      }
    }
    conditionallyAnnotateNodePath(ngh, tNode, lView, i18nChildren);
    if (isLContainer(lView[i])) {
      const hostNode = lView[i][HOST];
      if (Array.isArray(hostNode)) {
        const targetNode = unwrapRNode(hostNode);
        if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
          annotateHostElementForHydration(targetNode, hostNode, parentDeferBlockId, context2);
        }
      }
      ngh[CONTAINERS] ??= {};
      ngh[CONTAINERS][noOffsetIndex] = serializeLContainer(lView[i], tNode, lView, parentDeferBlockId, context2);
    } else if (Array.isArray(lView[i]) && !isLetDeclaration(tNode)) {
      const targetNode = unwrapRNode(lView[i][HOST]);
      if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
        annotateHostElementForHydration(targetNode, lView[i], parentDeferBlockId, context2);
      }
    } else {
      if (tNode.type & 8) {
        ngh[ELEMENT_CONTAINERS] ??= {};
        ngh[ELEMENT_CONTAINERS][noOffsetIndex] = calcNumRootNodes(tView, lView, tNode.child);
      } else if (tNode.type & (16 | 128)) {
        let nextTNode = tNode.next;
        while (nextTNode !== null && nextTNode.type & (16 | 128)) {
          nextTNode = nextTNode.next;
        }
        if (nextTNode && !isInSkipHydrationBlock2(nextTNode)) {
          appendSerializedNodePath(ngh, nextTNode, lView, i18nChildren);
        }
      } else if (tNode.type & 1) {
        const rNode = unwrapRNode(lView[i]);
        processTextNodeBeforeSerialization(context2, rNode);
      }
    }
    if (nativeElementsToEventTypes && tNode.type & 2) {
      const nativeElement = unwrapRNode(lView[i]);
      if (nativeElementsToEventTypes.has(nativeElement)) {
        setJSActionAttributes(nativeElement, nativeElementsToEventTypes.get(nativeElement), parentDeferBlockId);
      }
    }
  }
  return ngh;
}
function conditionallyAnnotateNodePath(ngh, tNode, lView, excludedParentNodes) {
  if (isProjectionTNode(tNode)) {
    return;
  }
  if (tNode.projectionNext && tNode.projectionNext !== tNode.next && !isInSkipHydrationBlock2(tNode.projectionNext)) {
    appendSerializedNodePath(ngh, tNode.projectionNext, lView, excludedParentNodes);
  }
  if (tNode.prev === null && tNode.parent !== null && isDisconnectedNode(tNode.parent, lView) && !isDisconnectedNode(tNode, lView)) {
    appendSerializedNodePath(ngh, tNode, lView, excludedParentNodes);
  }
}
function componentUsesShadowDomEncapsulation(lView) {
  const instance = lView[CONTEXT];
  return instance?.constructor ? getComponentDef(instance.constructor)?.encapsulation === ViewEncapsulation.ShadowDom : false;
}
function annotateHostElementForHydration(element2, lView, parentDeferBlockId, context2) {
  const renderer = lView[RENDERER];
  if (hasI18n(lView) && !isI18nHydrationSupportEnabled() || componentUsesShadowDomEncapsulation(lView)) {
    renderer.setAttribute(element2, SKIP_HYDRATION_ATTR_NAME, "");
    return null;
  } else {
    const ngh = serializeLView(lView, parentDeferBlockId, context2);
    const index = context2.serializedViewCollection.add(ngh);
    renderer.setAttribute(element2, NGH_ATTR_NAME, index.toString());
    return index;
  }
}
function annotateDeferBlockAnchorForHydration(comment, deferBlockId) {
  comment.textContent = `ngh=${deferBlockId}`;
}
function insertCorruptedTextNodeMarkers(corruptedTextNodes, doc) {
  for (const [textNode, marker] of corruptedTextNodes) {
    textNode.after(doc.createComment(marker));
  }
}
function isContentProjectedNode(tNode) {
  let currentTNode = tNode;
  while (currentTNode != null) {
    if (isComponentHost(currentTNode)) {
      return true;
    }
    currentTNode = currentTNode.parent;
  }
  return false;
}
function annotateDeferBlockRootNodesWithJsAction(tDetails, rootNodes, parentDeferBlockId, context2) {
  const actionList = convertHydrateTriggersToJsAction(tDetails.hydrateTriggers);
  for (let et of actionList) {
    context2.eventTypesToReplay.regular.add(et);
  }
  if (actionList.length > 0) {
    const elementNodes = rootNodes.filter((rn) => rn.nodeType === Node.ELEMENT_NODE);
    for (let rNode of elementNodes) {
      setJSActionAttributes(rNode, actionList, parentDeferBlockId);
    }
  }
}
function enableHydrationRuntimeSupport() {
  if (!isHydrationSupportEnabled) {
    isHydrationSupportEnabled = true;
    enableRetrieveHydrationInfoImpl();
    enableLocateOrCreateElementNodeImpl();
    enableLocateOrCreateTextNodeImpl();
    enableLocateOrCreateElementContainerNodeImpl();
    enableLocateOrCreateContainerAnchorImpl();
    enableLocateOrCreateContainerRefImpl();
    enableFindMatchingDehydratedViewImpl();
    enableApplyRootElementTransformImpl();
  }
}
function enableI18nHydrationRuntimeSupport() {
  if (!isI18nHydrationRuntimeSupportEnabled) {
    isI18nHydrationRuntimeSupportEnabled = true;
    enableLocateOrCreateI18nNodeImpl();
    enablePrepareI18nBlockForHydrationImpl();
    enableClaimDehydratedIcuCaseImpl();
  }
}
function enableIncrementalHydrationRuntimeSupport() {
  if (!isIncrementalHydrationRuntimeSupportEnabled) {
    isIncrementalHydrationRuntimeSupportEnabled = true;
    enableRetrieveDeferBlockDataImpl();
  }
}
function printHydrationStats(injector) {
  const console2 = injector.get(Console);
  const message = `Angular hydrated ${ngDevMode.hydratedComponents} component(s) and ${ngDevMode.hydratedNodes} node(s), ${ngDevMode.componentsSkippedHydration} component(s) were skipped. ` + (isIncrementalHydrationEnabled(injector) ? `${ngDevMode.deferBlocksWithIncrementalHydration} defer block(s) were configured to use incremental hydration. ` : "") + `Learn more at https://angular.dev/guide/hydration.`;
  console2.log(message);
}
function whenStableWithTimeout(appRef) {
  const whenStablePromise = appRef.whenStable();
  if (typeof ngDevMode !== "undefined" && ngDevMode) {
    const timeoutTime = APPLICATION_IS_STABLE_TIMEOUT;
    const console2 = appRef.injector.get(Console);
    const ngZone = appRef.injector.get(NgZone);
    const timeoutId = ngZone.runOutsideAngular(() => {
      return setTimeout(() => logWarningOnStableTimedout(timeoutTime, console2), timeoutTime);
    });
    whenStablePromise.finally(() => clearTimeout(timeoutId));
  }
  return whenStablePromise;
}
function isClientRenderModeEnabled() {
  const doc = getDocument();
  return doc.body.hasAttribute(CLIENT_RENDER_MODE_FLAG);
}
function withDomHydration() {
  const providers = [
    {
      provide: IS_HYDRATION_DOM_REUSE_ENABLED,
      useFactory: () => {
        let isEnabled = true;
        if (true) {
          const transferState = inject2(TransferState, { optional: true });
          isEnabled = !!transferState?.get(NGH_DATA_KEY, null);
        }
        if (isEnabled) {
          performanceMarkFeature("NgHydration");
        }
        return isEnabled;
      }
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      useValue: () => {
        setIsI18nHydrationSupportEnabled(false);
        if (false) {
          return;
        }
        if (inject2(IS_HYDRATION_DOM_REUSE_ENABLED)) {
          verifySsrContentsIntegrity(getDocument());
          enableHydrationRuntimeSupport();
        } else if (typeof ngDevMode !== "undefined" && ngDevMode && !isClientRenderModeEnabled()) {
          const console2 = inject2(Console);
          const message = formatRuntimeError(-505, "Angular hydration was requested on the client, but there was no serialized information present in the server response, thus hydration was not enabled. Make sure the `provideClientHydration()` is included into the list of providers in the server part of the application configuration.");
          console2.warn(message);
        }
      },
      multi: true
    }
  ];
  if (true) {
    providers.push({
      provide: PRESERVE_HOST_CONTENT,
      useFactory: () => {
        return inject2(IS_HYDRATION_DOM_REUSE_ENABLED);
      }
    }, {
      provide: APP_BOOTSTRAP_LISTENER,
      useFactory: () => {
        if (inject2(IS_HYDRATION_DOM_REUSE_ENABLED)) {
          const appRef = inject2(ApplicationRef);
          return () => {
            whenStableWithTimeout(appRef).then(() => {
              if (appRef.destroyed) {
                return;
              }
              cleanupDehydratedViews(appRef);
              if (typeof ngDevMode !== "undefined" && ngDevMode) {
                countBlocksSkippedByHydration(appRef.injector);
                printHydrationStats(appRef.injector);
              }
            });
          };
        }
        return () => {
        };
      },
      multi: true
    });
  }
  return makeEnvironmentProviders(providers);
}
function withI18nSupport() {
  return [
    {
      provide: IS_I18N_HYDRATION_ENABLED,
      useFactory: () => inject2(IS_HYDRATION_DOM_REUSE_ENABLED)
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      useValue: () => {
        if (inject2(IS_HYDRATION_DOM_REUSE_ENABLED)) {
          enableI18nHydrationRuntimeSupport();
          setIsI18nHydrationSupportEnabled(true);
          performanceMarkFeature("NgI18nHydration");
        }
      },
      multi: true
    }
  ];
}
function withIncrementalHydration() {
  const providers = [
    withEventReplay(),
    {
      provide: IS_INCREMENTAL_HYDRATION_ENABLED,
      useValue: true
    },
    {
      provide: DEHYDRATED_BLOCK_REGISTRY,
      useClass: DehydratedBlockRegistry
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      useValue: () => {
        enableIncrementalHydrationRuntimeSupport();
        performanceMarkFeature("NgIncrementalHydration");
      },
      multi: true
    }
  ];
  if (true) {
    providers.push({
      provide: APP_BOOTSTRAP_LISTENER,
      useFactory: () => {
        const injector = inject2(Injector);
        const doc = getDocument();
        return () => {
          const deferBlockData = processBlockData(injector);
          const commentsByBlockId = gatherDeferBlocksCommentNodes(doc, doc.body);
          processAndInitTriggers(injector, deferBlockData, commentsByBlockId);
          appendDeferBlocksToJSActionMap(doc, injector);
        };
      },
      multi: true
    });
  }
  return providers;
}
function logWarningOnStableTimedout(time, console2) {
  const message = `Angular hydration expected the ApplicationRef.isStable() to emit \`true\`, but it didn't happen within ${time}ms. Angular hydration logic depends on the application becoming stable as a signal to complete hydration process.`;
  console2.warn(formatRuntimeError(-506, message));
}
function booleanAttribute(value) {
  return typeof value === "boolean" ? value : value != null && value !== "false";
}
function numberAttribute(value, fallbackValue = NaN) {
  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));
  return isNumberValue ? Number(value) : fallbackValue;
}
function startMeasuring(label) {
  if (!enablePerfLogging) {
    return;
  }
  const { startLabel } = labels(label);
  performance.mark(startLabel);
}
function stopMeasuring(label) {
  if (!enablePerfLogging) {
    return;
  }
  const { startLabel, labelName, endLabel } = labels(label);
  performance.mark(endLabel);
  performance.measure(labelName, startLabel, endLabel);
  performance.clearMarks(startLabel);
  performance.clearMarks(endLabel);
}
function labels(label) {
  const labelName = `${PERFORMANCE_MARK_PREFIX}:${label}`;
  return {
    labelName,
    startLabel: `start:${labelName}`,
    endLabel: `end:${labelName}`
  };
}
function enableProfiling2() {
  if (!warningLogged && (typeof performance === "undefined" || !performance.mark || !performance.measure)) {
    warningLogged = true;
    console.warn("Performance API is not supported on this platform");
    return;
  }
  enablePerfLogging = true;
}
function disableProfiling() {
  enablePerfLogging = false;
}
function getClosestComponentName(node) {
  let currentNode = node;
  while (currentNode) {
    const lView = readPatchedLView(currentNode);
    if (lView !== null) {
      for (let i = HEADER_OFFSET; i < lView.length; i++) {
        const current = lView[i];
        if (!isLView(current) && !isLContainer(current) || current[HOST] !== currentNode) {
          continue;
        }
        const tView = lView[TVIEW];
        const tNode = getTNode(tView, i);
        if (isComponentHost(tNode)) {
          const def = tView.data[tNode.directiveStart + tNode.componentOffset];
          const name = def.debugInfo?.className || def.type.name;
          if (name) {
            return name;
          } else {
            break;
          }
        }
      }
    }
    currentNode = currentNode.parentNode;
  }
  return null;
}
function \u0275assertType(value) {
}
function \u0275\u0275ngDeclareDirective(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "directive",
    type: decl.type
  });
  return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275fac.js`, decl);
}
function \u0275\u0275ngDeclareClassMetadata(decl) {
  setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);
}
function \u0275\u0275ngDeclareClassMetadataAsync(decl) {
  setClassMetadataAsync(decl.type, decl.resolveDeferredDeps, (...types) => {
    const meta = decl.resolveMetadata(...types);
    setClassMetadata(decl.type, meta.decorators, meta.ctorParameters, meta.propDecorators);
  });
}
function \u0275\u0275ngDeclareComponent(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "component",
    type: decl.type
  });
  return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275cmp.js`, decl);
}
function \u0275\u0275ngDeclareFactory(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: getFactoryKind(decl.target),
    type: decl.type
  });
  return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275fac.js`, decl);
}
function getFactoryKind(target) {
  switch (target) {
    case FactoryTarget.Directive:
      return "directive";
    case FactoryTarget.Component:
      return "component";
    case FactoryTarget.Injectable:
      return "injectable";
    case FactoryTarget.Pipe:
      return "pipe";
    case FactoryTarget.NgModule:
      return "NgModule";
  }
}
function \u0275\u0275ngDeclareInjectable(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "injectable",
    type: decl.type
  });
  return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275prov.js`, decl);
}
function \u0275\u0275ngDeclareInjector(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "NgModule",
    type: decl.type
  });
  return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275inj.js`, decl);
}
function \u0275\u0275ngDeclareNgModule(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "NgModule",
    type: decl.type
  });
  return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275mod.js`, decl);
}
function \u0275\u0275ngDeclarePipe(decl) {
  const compiler = getCompilerFacade({
    usage: 1,
    kind: "pipe",
    type: decl.type
  });
  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275pipe.js`, decl);
}
function getTransferState(injector) {
  const doc = getDocument();
  const appId = injector.get(APP_ID);
  const transferState = retrieveTransferredState(doc, appId);
  const filteredEntries = {};
  for (const [key, value] of Object.entries(transferState)) {
    if (!isInternalHydrationTransferStateKey(key)) {
      filteredEntries[key] = value;
    }
  }
  return filteredEntries;
}
function afterRenderEffect(callbackOrSpec, options) {
  ngDevMode && assertNotInReactiveContext(afterRenderEffect, "Call `afterRenderEffect` outside of a reactive context. For example, create the render effect inside the component constructor`.");
  if (ngDevMode && !options?.injector) {
    assertInInjectionContext(afterRenderEffect);
  }
  if (false) {
    return NOOP_AFTER_RENDER_REF;
  }
  const injector = options?.injector ?? inject2(Injector);
  const scheduler = injector.get(ChangeDetectionScheduler);
  const manager = injector.get(AfterRenderManager);
  const tracing = injector.get(TracingService, null, { optional: true });
  manager.impl ??= injector.get(AfterRenderImpl);
  let spec = callbackOrSpec;
  if (typeof spec === "function") {
    spec = { mixedReadWrite: callbackOrSpec };
  }
  const viewContext = injector.get(ViewContext, null, { optional: true });
  const sequence = new AfterRenderEffectSequence(manager.impl, [spec.earlyRead, spec.write, spec.mixedReadWrite, spec.read], viewContext?.view, scheduler, injector.get(DestroyRef), tracing?.snapshot(null));
  manager.impl.register(sequence);
  return sequence;
}
function createComponent(component, options) {
  ngDevMode && assertComponentDef(component);
  const componentDef = getComponentDef(component);
  const elementInjector = options.elementInjector || getNullInjector();
  const factory = new ComponentFactory2(componentDef);
  return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector, options.directives, options.bindings);
}
function reflectComponentType(component) {
  const componentDef = getComponentDef(component);
  if (!componentDef)
    return null;
  const factory = new ComponentFactory2(componentDef);
  return {
    get selector() {
      return factory.selector;
    },
    get type() {
      return factory.componentType;
    },
    get inputs() {
      return factory.inputs;
    },
    get outputs() {
      return factory.outputs;
    },
    get ngContentSelectors() {
      return factory.ngContentSelectors;
    },
    get isStandalone() {
      return componentDef.standalone;
    },
    get isSignal() {
      return componentDef.signals;
    }
  };
}
function mergeApplicationConfig(...configs) {
  return configs.reduce((prev, curr) => {
    return Object.assign(prev, curr, { providers: [...prev.providers, ...curr.providers] });
  }, { providers: [] });
}
var REQUIRED_UNSET_VALUE, INPUT_SIGNAL_NODE, \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE, FactoryTarget, R3TemplateDependencyKind, ViewEncapsulation2, HostAttributeToken, HOST_TAG_NAME, input, viewChild, contentChild, model, emitDistinctChangesOnlyDefaultValue, Query, ContentChildren, ContentChild, ViewChildren, ViewChild, Version, VERSION, SCAN_DELAY, OVERSIZED_IMAGE_TOLERANCE, ImagePerformanceWarning, PLATFORM_DESTROY_LISTENERS, ENABLE_ROOT_COMPONENT_BOOTSTRAP, moduleBootstrapImpl, PlatformRef, _platformInjector, ALLOW_MULTIPLE_PLATFORMS, ChangeDetectorRef, ViewRef2, EmbeddedViewRef, DefaultIterableDifferFactory, trackByIdentity, DefaultIterableDiffer, IterableChangeRecord_, _DuplicateItemRecordList, _DuplicateMap, DefaultKeyValueDifferFactory, DefaultKeyValueDiffer, KeyValueChangeRecord_, IterableDiffers, KeyValueDiffers, keyValDiff, iterableDiff, defaultIterableDiffers, defaultKeyValueDiffers, platformCore, ApplicationModule, appsWithEventReplay, EAGER_CONTENT_LISTENERS_KEY, blockEventQueue, initEventReplay, SerializedViewCollection, tViewSsrId, isHydrationSupportEnabled, isI18nHydrationRuntimeSupportEnabled, isIncrementalHydrationRuntimeSupportEnabled, APPLICATION_IS_STABLE_TIMEOUT, CLIENT_RENDER_MODE_FLAG, PERFORMANCE_MARK_PREFIX, enablePerfLogging, warningLogged, NOT_SET, EMPTY_CLEANUP_SET, AFTER_RENDER_PHASE_EFFECT_NODE, AfterRenderEffectSequence, REQUEST, RESPONSE_INIT, REQUEST_CONTEXT;
var init_core = __esm({
  "node_modules/@angular/core/fesm2022/core.mjs"() {
    "use strict";
    init_root_effect_scheduler();
    init_root_effect_scheduler();
    init_signal();
    init_debug_node();
    init_debug_node();
    init_resource();
    init_resource();
    init_weak_ref();
    init_not_found();
    init_event_dispatch();
    REQUIRED_UNSET_VALUE = /* @__PURE__ */ Symbol("InputSignalNode#UNSET");
    INPUT_SIGNAL_NODE = /* @__PURE__ */ (() => {
      return __spreadProps(__spreadValues({}, SIGNAL_NODE), {
        transformFn: void 0,
        applyValueToInputSignal(node, value) {
          signalSetFn(node, value);
        }
      });
    })();
    \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE = /* @__PURE__ */ Symbol();
    (function(FactoryTarget3) {
      FactoryTarget3[FactoryTarget3["Directive"] = 0] = "Directive";
      FactoryTarget3[FactoryTarget3["Component"] = 1] = "Component";
      FactoryTarget3[FactoryTarget3["Injectable"] = 2] = "Injectable";
      FactoryTarget3[FactoryTarget3["Pipe"] = 3] = "Pipe";
      FactoryTarget3[FactoryTarget3["NgModule"] = 4] = "NgModule";
    })(FactoryTarget || (FactoryTarget = {}));
    (function(R3TemplateDependencyKind3) {
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Directive"] = 0] = "Directive";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Pipe"] = 1] = "Pipe";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["NgModule"] = 2] = "NgModule";
    })(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
    (function(ViewEncapsulation4) {
      ViewEncapsulation4[ViewEncapsulation4["Emulated"] = 0] = "Emulated";
      ViewEncapsulation4[ViewEncapsulation4["None"] = 2] = "None";
      ViewEncapsulation4[ViewEncapsulation4["ShadowDom"] = 3] = "ShadowDom";
    })(ViewEncapsulation2 || (ViewEncapsulation2 = {}));
    HostAttributeToken = class {
      attributeName;
      constructor(attributeName) {
        this.attributeName = attributeName;
      }
      /** @internal */
      __NG_ELEMENT_ID__ = () => \u0275\u0275injectAttribute(this.attributeName);
      toString() {
        return `HostAttributeToken ${this.attributeName}`;
      }
    };
    HOST_TAG_NAME = new InjectionToken(ngDevMode ? "HOST_TAG_NAME" : "");
    HOST_TAG_NAME.__NG_ELEMENT_ID__ = (flags) => {
      const tNode = getCurrentTNode();
      if (tNode === null) {
        throw new RuntimeError(204, ngDevMode && "HOST_TAG_NAME can only be injected in directives and components during construction time (in a class constructor or as a class field initializer)");
      }
      if (tNode.type & 2) {
        return tNode.value;
      }
      if (flags & 8) {
        return null;
      }
      throw new RuntimeError(204, ngDevMode && `HOST_TAG_NAME was used on ${getDevModeNodeName(tNode)} which doesn't have an underlying element in the DOM. This is invalid, and so the dependency should be marked as optional.`);
    };
    input = (() => {
      inputFunction.required = inputRequiredFunction;
      return inputFunction;
    })();
    viewChild = (() => {
      viewChildFn.required = viewChildRequiredFn;
      return viewChildFn;
    })();
    contentChild = (() => {
      contentChildFn.required = contentChildRequiredFn;
      return contentChildFn;
    })();
    model = (() => {
      modelFunction.required = modelRequiredFunction;
      return modelFunction;
    })();
    emitDistinctChangesOnlyDefaultValue = true;
    Query = class {
    };
    ContentChildren = makePropDecorator("ContentChildren", (selector, opts = {}) => __spreadValues({
      selector,
      first: false,
      isViewQuery: false,
      descendants: false,
      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
    }, opts), Query);
    ContentChild = makePropDecorator("ContentChild", (selector, opts = {}) => __spreadValues({
      selector,
      first: true,
      isViewQuery: false,
      descendants: true
    }, opts), Query);
    ViewChildren = makePropDecorator("ViewChildren", (selector, opts = {}) => __spreadValues({
      selector,
      first: false,
      isViewQuery: true,
      descendants: true,
      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
    }, opts), Query);
    ViewChild = makePropDecorator("ViewChild", (selector, opts) => __spreadValues({
      selector,
      first: true,
      isViewQuery: true,
      descendants: true
    }, opts), Query);
    Version = class {
      full;
      major;
      minor;
      patch;
      constructor(full) {
        this.full = full;
        const parts = full.split(".");
        this.major = parts[0];
        this.minor = parts[1];
        this.patch = parts.slice(2).join(".");
      }
    };
    VERSION = new Version("20.1.4");
    SCAN_DELAY = 200;
    OVERSIZED_IMAGE_TOLERANCE = 1200;
    ImagePerformanceWarning = class _ImagePerformanceWarning {
      // Map of full image URLs -> original `ngSrc` values.
      window = null;
      observer = null;
      options = inject2(IMAGE_CONFIG);
      lcpImageUrl;
      start() {
        if (typeof PerformanceObserver === "undefined" || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {
          return;
        }
        this.observer = this.initPerformanceObserver();
        const doc = getDocument();
        const win = doc.defaultView;
        if (win) {
          this.window = win;
          const waitToScan = () => {
            setTimeout(this.scanImages.bind(this), SCAN_DELAY);
          };
          const setup = () => {
            if (doc.readyState === "complete") {
              waitToScan();
            } else {
              this.window?.addEventListener("load", waitToScan, { once: true });
            }
          };
          if (typeof Zone !== "undefined") {
            Zone.root.run(() => setup());
          } else {
            setup();
          }
        }
      }
      ngOnDestroy() {
        this.observer?.disconnect();
      }
      initPerformanceObserver() {
        if (typeof PerformanceObserver === "undefined") {
          return null;
        }
        const observer = new PerformanceObserver((entryList) => {
          const entries = entryList.getEntries();
          if (entries.length === 0)
            return;
          const lcpElement = entries[entries.length - 1];
          const imgSrc = lcpElement.element?.src ?? "";
          if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
            return;
          this.lcpImageUrl = imgSrc;
        });
        observer.observe({ type: "largest-contentful-paint", buffered: true });
        return observer;
      }
      scanImages() {
        const images = getDocument().querySelectorAll("img");
        let lcpElementFound, lcpElementLoadedCorrectly = false;
        for (let index = 0; index < images.length; index++) {
          const image = images[index];
          if (!image) {
            continue;
          }
          if (!this.options?.disableImageSizeWarning) {
            if (!image.getAttribute("ng-img") && this.isOversized(image)) {
              logOversizedImageWarning(image.src);
            }
          }
          if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {
            if (image.src === this.lcpImageUrl) {
              lcpElementFound = true;
              if (image.loading !== "lazy" || image.getAttribute("ng-img")) {
                lcpElementLoadedCorrectly = true;
              }
            }
          }
        }
        if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {
          logLazyLCPWarning(this.lcpImageUrl);
        }
      }
      isOversized(image) {
        if (!this.window) {
          return false;
        }
        const nonOversizedImageExtentions = [
          // SVG images are vector-based, which means they can scale
          // to any size without losing quality.
          ".svg"
        ];
        const imageSource = (image.src || "").toLowerCase();
        if (nonOversizedImageExtentions.some((extension) => imageSource.endsWith(extension))) {
          return false;
        }
        const computedStyle = this.window.getComputedStyle(image);
        let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
        let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
        const boxSizing = computedStyle.getPropertyValue("box-sizing");
        const objectFit = computedStyle.getPropertyValue("object-fit");
        if (objectFit === `cover`) {
          return false;
        }
        if (boxSizing === "border-box") {
          const paddingTop = computedStyle.getPropertyValue("padding-top");
          const paddingRight = computedStyle.getPropertyValue("padding-right");
          const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
          const paddingLeft = computedStyle.getPropertyValue("padding-left");
          renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
          renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
        }
        const intrinsicWidth = image.naturalWidth;
        const intrinsicHeight = image.naturalHeight;
        const recommendedWidth = this.window.devicePixelRatio * renderedWidth;
        const recommendedHeight = this.window.devicePixelRatio * renderedHeight;
        const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;
        const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;
        return oversizedWidth || oversizedHeight;
      }
      static \u0275fac = function ImagePerformanceWarning_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ImagePerformanceWarning)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ImagePerformanceWarning, factory: _ImagePerformanceWarning.\u0275fac, providedIn: "root" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], null, null);
    })();
    PLATFORM_DESTROY_LISTENERS = new InjectionToken(ngDevMode ? "PlatformDestroyListeners" : "");
    ENABLE_ROOT_COMPONENT_BOOTSTRAP = new InjectionToken(ngDevMode ? "ENABLE_ROOT_COMPONENT_BOOTSTRAP" : "");
    PlatformRef = class _PlatformRef {
      _injector;
      _modules = [];
      _destroyListeners = [];
      _destroyed = false;
      /** @internal */
      constructor(_injector) {
        this._injector = _injector;
      }
      /**
       * Creates an instance of an `@NgModule` for the given platform.
       *
       * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
       *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
       */
      bootstrapModuleFactory(moduleFactory, options) {
        const scheduleInRootZone = options?.scheduleInRootZone;
        const ngZoneFactory = () => getNgZone(options?.ngZone, __spreadProps(__spreadValues({}, getNgZoneOptions({
          eventCoalescing: options?.ngZoneEventCoalescing,
          runCoalescing: options?.ngZoneRunCoalescing
        })), {
          scheduleInRootZone
        }));
        const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;
        const allAppProviders = [
          internalProvideZoneChangeDetection({
            ngZoneFactory,
            ignoreChangesOutsideZone
          }),
          { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },
          errorHandlerEnvironmentInitializer
        ];
        const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, allAppProviders);
        setModuleBootstrapImpl();
        return bootstrap({
          moduleRef,
          allPlatformModules: this._modules,
          platformInjector: this.injector
        });
      }
      /**
       * Creates an instance of an `@NgModule` for a given platform.
       *
       * @usageNotes
       * ### Simple Example
       *
       * ```ts
       * @NgModule({
       *   imports: [BrowserModule]
       * })
       * class MyModule {}
       *
       * let moduleRef = platformBrowser().bootstrapModule(MyModule);
       * ```
       *
       */
      bootstrapModule(moduleType, compilerOptions = []) {
        const options = optionsReducer({}, compilerOptions);
        setModuleBootstrapImpl();
        return compileNgModuleFactory(this.injector, options, moduleType).then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));
      }
      /**
       * Registers a listener to be called when the platform is destroyed.
       */
      onDestroy(callback) {
        this._destroyListeners.push(callback);
      }
      /**
       * Retrieves the platform {@link Injector}, which is the parent injector for
       * every Angular application on the page and provides singleton providers.
       */
      get injector() {
        return this._injector;
      }
      /**
       * Destroys the current Angular platform and all Angular applications on the page.
       * Destroys all modules and listeners registered with the platform.
       */
      destroy() {
        if (this._destroyed) {
          throw new RuntimeError(404, ngDevMode && "The platform has already been destroyed!");
        }
        this._modules.slice().forEach((module) => module.destroy());
        this._destroyListeners.forEach((listener2) => listener2());
        const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);
        if (destroyListeners) {
          destroyListeners.forEach((listener2) => listener2());
          destroyListeners.clear();
        }
        this._destroyed = true;
      }
      /**
       * Indicates whether this instance was destroyed.
       */
      get destroyed() {
        return this._destroyed;
      }
      static \u0275fac = function PlatformRef_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _PlatformRef)(\u0275\u0275inject(Injector));
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _PlatformRef, factory: _PlatformRef.\u0275fac, providedIn: "platform" });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
        type: Injectable,
        args: [{ providedIn: "platform" }]
      }], () => [{ type: Injector }], null);
    })();
    _platformInjector = null;
    ALLOW_MULTIPLE_PLATFORMS = new InjectionToken(ngDevMode ? "AllowMultipleToken" : "");
    ChangeDetectorRef = class {
      /**
       * @internal
       * @nocollapse
       */
      static __NG_ELEMENT_ID__ = injectChangeDetectorRef;
    };
    ViewRef2 = class extends ChangeDetectorRef {
    };
    EmbeddedViewRef = class extends ViewRef2 {
    };
    DefaultIterableDifferFactory = class {
      constructor() {
      }
      supports(obj) {
        return isListLikeIterable(obj);
      }
      create(trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
      }
    };
    trackByIdentity = (index, item) => item;
    DefaultIterableDiffer = class {
      length = 0;
      // TODO: confirm the usage of `collection` as it's unused, readonly and on a non public API.
      collection;
      // Keeps track of the used records at any point in time (during & across `_check()` calls)
      _linkedRecords = null;
      // Keeps track of the removed records at any point in time during `_check()` calls.
      _unlinkedRecords = null;
      _previousItHead = null;
      _itHead = null;
      _itTail = null;
      _additionsHead = null;
      _additionsTail = null;
      _movesHead = null;
      _movesTail = null;
      _removalsHead = null;
      _removalsTail = null;
      // Keeps track of records where custom track by is the same, but item identity has changed
      _identityChangesHead = null;
      _identityChangesTail = null;
      _trackByFn;
      constructor(trackByFn) {
        this._trackByFn = trackByFn || trackByIdentity;
      }
      forEachItem(fn2) {
        let record;
        for (record = this._itHead; record !== null; record = record._next) {
          fn2(record);
        }
      }
      forEachOperation(fn2) {
        let nextIt = this._itHead;
        let nextRemove = this._removalsHead;
        let addRemoveOffset = 0;
        let moveOffsets = null;
        while (nextIt || nextRemove) {
          const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
          const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
          const currentIndex = record.currentIndex;
          if (record === nextRemove) {
            addRemoveOffset--;
            nextRemove = nextRemove._nextRemoved;
          } else {
            nextIt = nextIt._next;
            if (record.previousIndex == null) {
              addRemoveOffset++;
            } else {
              if (!moveOffsets)
                moveOffsets = [];
              const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
              const localCurrentIndex = currentIndex - addRemoveOffset;
              if (localMovePreviousIndex != localCurrentIndex) {
                for (let i = 0; i < localMovePreviousIndex; i++) {
                  const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                  const index = offset + i;
                  if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                    moveOffsets[i] = offset + 1;
                  }
                }
                const previousIndex = record.previousIndex;
                moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
              }
            }
          }
          if (adjPreviousIndex !== currentIndex) {
            fn2(record, adjPreviousIndex, currentIndex);
          }
        }
      }
      forEachPreviousItem(fn2) {
        let record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
          fn2(record);
        }
      }
      forEachAddedItem(fn2) {
        let record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          fn2(record);
        }
      }
      forEachMovedItem(fn2) {
        let record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
          fn2(record);
        }
      }
      forEachRemovedItem(fn2) {
        let record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
          fn2(record);
        }
      }
      forEachIdentityChange(fn2) {
        let record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
          fn2(record);
        }
      }
      diff(collection) {
        if (collection == null)
          collection = [];
        if (!isListLikeIterable(collection)) {
          throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
        }
        if (this.check(collection)) {
          return this;
        } else {
          return null;
        }
      }
      onDestroy() {
      }
      check(collection) {
        this._reset();
        let record = this._itHead;
        let mayBeDirty = false;
        let index;
        let item;
        let itemTrackBy;
        if (Array.isArray(collection)) {
          this.length = collection.length;
          for (let index2 = 0; index2 < this.length; index2++) {
            item = collection[index2];
            itemTrackBy = this._trackByFn(index2, item);
            if (record === null || !Object.is(record.trackById, itemTrackBy)) {
              record = this._mismatch(record, item, itemTrackBy, index2);
              mayBeDirty = true;
            } else {
              if (mayBeDirty) {
                record = this._verifyReinsertion(record, item, itemTrackBy, index2);
              }
              if (!Object.is(record.item, item))
                this._addIdentityChange(record, item);
            }
            record = record._next;
          }
        } else {
          index = 0;
          iterateListLike(collection, (item2) => {
            itemTrackBy = this._trackByFn(index, item2);
            if (record === null || !Object.is(record.trackById, itemTrackBy)) {
              record = this._mismatch(record, item2, itemTrackBy, index);
              mayBeDirty = true;
            } else {
              if (mayBeDirty) {
                record = this._verifyReinsertion(record, item2, itemTrackBy, index);
              }
              if (!Object.is(record.item, item2))
                this._addIdentityChange(record, item2);
            }
            record = record._next;
            index++;
          });
          this.length = index;
        }
        this._truncate(record);
        this.collection = collection;
        return this.isDirty;
      }
      /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
       * changes.
       */
      get isDirty() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
      }
      /**
       * Reset the state of the change objects to show no changes. This means set previousKey to
       * currentKey, and clear all of the queues (additions, moves, removals).
       * Set the previousIndexes of moved and added items to their currentIndexes
       * Reset the list of additions, moves and removals
       *
       * @internal
       */
      _reset() {
        if (this.isDirty) {
          let record;
          for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
            record._nextPrevious = record._next;
          }
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            record.previousIndex = record.currentIndex;
          }
          this._additionsHead = this._additionsTail = null;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
            record.previousIndex = record.currentIndex;
          }
          this._movesHead = this._movesTail = null;
          this._removalsHead = this._removalsTail = null;
          this._identityChangesHead = this._identityChangesTail = null;
        }
      }
      /**
       * This is the core function which handles differences between collections.
       *
       * - `record` is the record which we saw at this position last time. If null then it is a new
       *   item.
       * - `item` is the current item in the collection
       * - `index` is the position of the item in the collection
       *
       * @internal
       */
      _mismatch(record, item, itemTrackBy, index) {
        let previousRecord;
        if (record === null) {
          previousRecord = this._itTail;
        } else {
          previousRecord = record._prev;
          this._remove(record);
        }
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
        if (record !== null) {
          if (!Object.is(record.item, item))
            this._addIdentityChange(record, item);
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
          if (record !== null) {
            if (!Object.is(record.item, item))
              this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
          } else {
            record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
          }
        }
        return record;
      }
      /**
       * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
       *
       * Use case: `[a, a]` => `[b, a, a]`
       *
       * If we did not have this check then the insertion of `b` would:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) leave `a` at index `1` as is. <-- this is wrong!
       *   3) reinsert `a` at index 2. <-- this is wrong!
       *
       * The correct behavior is:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) reinsert `a` at index 1.
       *   3) move `a` at from `1` to `2`.
       *
       *
       * Double check that we have not evicted a duplicate item. We need to check if the item type may
       * have already been removed:
       * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
       * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
       * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
       * at the end.
       *
       * @internal
       */
      _verifyReinsertion(record, item, itemTrackBy, index) {
        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
        if (reinsertRecord !== null) {
          record = this._reinsertAfter(reinsertRecord, record._prev, index);
        } else if (record.currentIndex != index) {
          record.currentIndex = index;
          this._addToMoves(record, index);
        }
        return record;
      }
      /**
       * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
       *
       * - `record` The first excess {@link IterableChangeRecord_}.
       *
       * @internal
       */
      _truncate(record) {
        while (record !== null) {
          const nextRecord = record._next;
          this._addToRemovals(this._unlink(record));
          record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
          this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
          this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
          this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
          this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
          this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
          this._identityChangesTail._nextIdentityChange = null;
        }
      }
      /** @internal */
      _reinsertAfter(record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
          this._unlinkedRecords.remove(record);
        }
        const prev = record._prevRemoved;
        const next = record._nextRemoved;
        if (prev === null) {
          this._removalsHead = next;
        } else {
          prev._nextRemoved = next;
        }
        if (next === null) {
          this._removalsTail = prev;
        } else {
          next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
      }
      /** @internal */
      _moveAfter(record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
      }
      /** @internal */
      _addAfter(record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
          this._additionsTail = this._additionsHead = record;
        } else {
          this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
      }
      /** @internal */
      _insertAfter(record, prevRecord, index) {
        const next = prevRecord === null ? this._itHead : prevRecord._next;
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
          this._itTail = record;
        } else {
          next._prev = record;
        }
        if (prevRecord === null) {
          this._itHead = record;
        } else {
          prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
          this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
      }
      /** @internal */
      _remove(record) {
        return this._addToRemovals(this._unlink(record));
      }
      /** @internal */
      _unlink(record) {
        if (this._linkedRecords !== null) {
          this._linkedRecords.remove(record);
        }
        const prev = record._prev;
        const next = record._next;
        if (prev === null) {
          this._itHead = next;
        } else {
          prev._next = next;
        }
        if (next === null) {
          this._itTail = prev;
        } else {
          next._prev = prev;
        }
        return record;
      }
      /** @internal */
      _addToMoves(record, toIndex) {
        if (record.previousIndex === toIndex) {
          return record;
        }
        if (this._movesTail === null) {
          this._movesTail = this._movesHead = record;
        } else {
          this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
      }
      _addToRemovals(record) {
        if (this._unlinkedRecords === null) {
          this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
          this._removalsTail = this._removalsHead = record;
          record._prevRemoved = null;
        } else {
          record._prevRemoved = this._removalsTail;
          this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
      }
      /** @internal */
      _addIdentityChange(record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
          this._identityChangesTail = this._identityChangesHead = record;
        } else {
          this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
      }
    };
    IterableChangeRecord_ = class {
      item;
      trackById;
      currentIndex = null;
      previousIndex = null;
      /** @internal */
      _nextPrevious = null;
      /** @internal */
      _prev = null;
      /** @internal */
      _next = null;
      /** @internal */
      _prevDup = null;
      /** @internal */
      _nextDup = null;
      /** @internal */
      _prevRemoved = null;
      /** @internal */
      _nextRemoved = null;
      /** @internal */
      _nextAdded = null;
      /** @internal */
      _nextMoved = null;
      /** @internal */
      _nextIdentityChange = null;
      constructor(item, trackById) {
        this.item = item;
        this.trackById = trackById;
      }
    };
    _DuplicateItemRecordList = class {
      /** @internal */
      _head = null;
      /** @internal */
      _tail = null;
      /**
       * Append the record to the list of duplicates.
       *
       * Note: by design all records in the list of duplicates hold the same value in record.item.
       */
      add(record) {
        if (this._head === null) {
          this._head = this._tail = record;
          record._nextDup = null;
          record._prevDup = null;
        } else {
          this._tail._nextDup = record;
          record._prevDup = this._tail;
          record._nextDup = null;
          this._tail = record;
        }
      }
      // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
      // IterableChangeRecord_.currentIndex >= atOrAfterIndex
      get(trackById, atOrAfterIndex) {
        let record;
        for (record = this._head; record !== null; record = record._nextDup) {
          if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
            return record;
          }
        }
        return null;
      }
      /**
       * Remove one {@link IterableChangeRecord_} from the list of duplicates.
       *
       * Returns whether the list of duplicates is empty.
       */
      remove(record) {
        const prev = record._prevDup;
        const next = record._nextDup;
        if (prev === null) {
          this._head = next;
        } else {
          prev._nextDup = next;
        }
        if (next === null) {
          this._tail = prev;
        } else {
          next._prevDup = prev;
        }
        return this._head === null;
      }
    };
    _DuplicateMap = class {
      map = /* @__PURE__ */ new Map();
      put(record) {
        const key = record.trackById;
        let duplicates = this.map.get(key);
        if (!duplicates) {
          duplicates = new _DuplicateItemRecordList();
          this.map.set(key, duplicates);
        }
        duplicates.add(record);
      }
      /**
       * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
       * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
       *
       * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
       * have any more `a`s needs to return the second `a`.
       */
      get(trackById, atOrAfterIndex) {
        const key = trackById;
        const recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
      }
      /**
       * Removes a {@link IterableChangeRecord_} from the list of duplicates.
       *
       * The list of duplicates also is removed from the map if it gets empty.
       */
      remove(record) {
        const key = record.trackById;
        const recordList = this.map.get(key);
        if (recordList.remove(record)) {
          this.map.delete(key);
        }
        return record;
      }
      get isEmpty() {
        return this.map.size === 0;
      }
      clear() {
        this.map.clear();
      }
    };
    DefaultKeyValueDifferFactory = class {
      constructor() {
      }
      supports(obj) {
        return obj instanceof Map || isJsObject(obj);
      }
      create() {
        return new DefaultKeyValueDiffer();
      }
    };
    DefaultKeyValueDiffer = class {
      _records = /* @__PURE__ */ new Map();
      _mapHead = null;
      // _appendAfter is used in the check loop
      _appendAfter = null;
      _previousMapHead = null;
      _changesHead = null;
      _changesTail = null;
      _additionsHead = null;
      _additionsTail = null;
      _removalsHead = null;
      _removalsTail = null;
      get isDirty() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      }
      forEachItem(fn2) {
        let record;
        for (record = this._mapHead; record !== null; record = record._next) {
          fn2(record);
        }
      }
      forEachPreviousItem(fn2) {
        let record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
          fn2(record);
        }
      }
      forEachChangedItem(fn2) {
        let record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          fn2(record);
        }
      }
      forEachAddedItem(fn2) {
        let record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          fn2(record);
        }
      }
      forEachRemovedItem(fn2) {
        let record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
          fn2(record);
        }
      }
      diff(map2) {
        if (!map2) {
          map2 = /* @__PURE__ */ new Map();
        } else if (!(map2 instanceof Map || isJsObject(map2))) {
          throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(map2)}'. Only maps and objects are allowed`);
        }
        return this.check(map2) ? this : null;
      }
      onDestroy() {
      }
      /**
       * Check the current state of the map vs the previous.
       * The algorithm is optimised for when the keys do no change.
       */
      check(map2) {
        this._reset();
        let insertBefore = this._mapHead;
        this._appendAfter = null;
        this._forEach(map2, (value, key) => {
          if (insertBefore && insertBefore.key === key) {
            this._maybeAddToChanges(insertBefore, value);
            this._appendAfter = insertBefore;
            insertBefore = insertBefore._next;
          } else {
            const record = this._getOrCreateRecordForKey(key, value);
            insertBefore = this._insertBeforeOrAppend(insertBefore, record);
          }
        });
        if (insertBefore) {
          if (insertBefore._prev) {
            insertBefore._prev._next = null;
          }
          this._removalsHead = insertBefore;
          for (let record = insertBefore; record !== null; record = record._nextRemoved) {
            if (record === this._mapHead) {
              this._mapHead = null;
            }
            this._records.delete(record.key);
            record._nextRemoved = record._next;
            record.previousValue = record.currentValue;
            record.currentValue = null;
            record._prev = null;
            record._next = null;
          }
        }
        if (this._changesTail)
          this._changesTail._nextChanged = null;
        if (this._additionsTail)
          this._additionsTail._nextAdded = null;
        return this.isDirty;
      }
      /**
       * Inserts a record before `before` or append at the end of the list when `before` is null.
       *
       * Notes:
       * - This method appends at `this._appendAfter`,
       * - This method updates `this._appendAfter`,
       * - The return value is the new value for the insertion pointer.
       */
      _insertBeforeOrAppend(before, record) {
        if (before) {
          const prev = before._prev;
          record._next = before;
          record._prev = prev;
          before._prev = record;
          if (prev) {
            prev._next = record;
          }
          if (before === this._mapHead) {
            this._mapHead = record;
          }
          this._appendAfter = before;
          return before;
        }
        if (this._appendAfter) {
          this._appendAfter._next = record;
          record._prev = this._appendAfter;
        } else {
          this._mapHead = record;
        }
        this._appendAfter = record;
        return null;
      }
      _getOrCreateRecordForKey(key, value) {
        if (this._records.has(key)) {
          const record2 = this._records.get(key);
          this._maybeAddToChanges(record2, value);
          const prev = record2._prev;
          const next = record2._next;
          if (prev) {
            prev._next = next;
          }
          if (next) {
            next._prev = prev;
          }
          record2._next = null;
          record2._prev = null;
          return record2;
        }
        const record = new KeyValueChangeRecord_(key);
        this._records.set(key, record);
        record.currentValue = value;
        this._addToAdditions(record);
        return record;
      }
      /** @internal */
      _reset() {
        if (this.isDirty) {
          let record;
          this._previousMapHead = this._mapHead;
          for (record = this._previousMapHead; record !== null; record = record._next) {
            record._nextPrevious = record._next;
          }
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            record.previousValue = record.currentValue;
          }
          for (record = this._additionsHead; record != null; record = record._nextAdded) {
            record.previousValue = record.currentValue;
          }
          this._changesHead = this._changesTail = null;
          this._additionsHead = this._additionsTail = null;
          this._removalsHead = null;
        }
      }
      // Add the record or a given key to the list of changes only when the value has actually changed
      _maybeAddToChanges(record, newValue) {
        if (!Object.is(newValue, record.currentValue)) {
          record.previousValue = record.currentValue;
          record.currentValue = newValue;
          this._addToChanges(record);
        }
      }
      _addToAdditions(record) {
        if (this._additionsHead === null) {
          this._additionsHead = this._additionsTail = record;
        } else {
          this._additionsTail._nextAdded = record;
          this._additionsTail = record;
        }
      }
      _addToChanges(record) {
        if (this._changesHead === null) {
          this._changesHead = this._changesTail = record;
        } else {
          this._changesTail._nextChanged = record;
          this._changesTail = record;
        }
      }
      /** @internal */
      _forEach(obj, fn2) {
        if (obj instanceof Map) {
          obj.forEach(fn2);
        } else {
          Object.keys(obj).forEach((k) => fn2(obj[k], k));
        }
      }
    };
    KeyValueChangeRecord_ = class {
      key;
      previousValue = null;
      currentValue = null;
      /** @internal */
      _nextPrevious = null;
      /** @internal */
      _next = null;
      /** @internal */
      _prev = null;
      /** @internal */
      _nextAdded = null;
      /** @internal */
      _nextRemoved = null;
      /** @internal */
      _nextChanged = null;
      constructor(key) {
        this.key = key;
      }
    };
    IterableDiffers = class _IterableDiffers {
      factories;
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _IterableDiffers,
          providedIn: "root",
          factory: defaultIterableDiffersFactory
        })
      );
      constructor(factories) {
        this.factories = factories;
      }
      static create(factories, parent) {
        if (parent != null) {
          const copied = parent.factories.slice();
          factories = factories.concat(copied);
        }
        return new _IterableDiffers(factories);
      }
      /**
       * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
       * inherited {@link IterableDiffers} instance with the provided factories and return a new
       * {@link IterableDiffers} instance.
       *
       * @usageNotes
       * ### Example
       *
       * The following example shows how to extend an existing list of factories,
       * which will only be applied to the injector for this component and its children.
       * This step is all that's required to make a new {@link IterableDiffer} available.
       *
       * ```ts
       * @Component({
       *   viewProviders: [
       *     IterableDiffers.extend([new ImmutableListDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
        return {
          provide: _IterableDiffers,
          useFactory: (parent) => {
            return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
          },
          // Dependency technically isn't optional, but we can provide a better error message this way.
          deps: [[_IterableDiffers, new SkipSelf(), new Optional()]]
        };
      }
      find(iterable) {
        const factory = this.factories.find((f) => f.supports(iterable));
        if (factory != null) {
          return factory;
        } else {
          throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
        }
      }
    };
    KeyValueDiffers = class _KeyValueDiffers {
      /** @nocollapse */
      static \u0275prov = (
        /** @pureOrBreakMyCode */
        /* @__PURE__ */ \u0275\u0275defineInjectable({
          token: _KeyValueDiffers,
          providedIn: "root",
          factory: defaultKeyValueDiffersFactory
        })
      );
      factories;
      constructor(factories) {
        this.factories = factories;
      }
      static create(factories, parent) {
        if (parent) {
          const copied = parent.factories.slice();
          factories = factories.concat(copied);
        }
        return new _KeyValueDiffers(factories);
      }
      /**
       * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
       * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
       * {@link KeyValueDiffers} instance.
       *
       * @usageNotes
       * ### Example
       *
       * The following example shows how to extend an existing list of factories,
       * which will only be applied to the injector for this component and its children.
       * This step is all that's required to make a new {@link KeyValueDiffer} available.
       *
       * ```ts
       * @Component({
       *   viewProviders: [
       *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
        return {
          provide: _KeyValueDiffers,
          useFactory: (parent) => {
            return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
          },
          // Dependency technically isn't optional, but we can provide a better error message this way.
          deps: [[_KeyValueDiffers, new SkipSelf(), new Optional()]]
        };
      }
      find(kv) {
        const factory = this.factories.find((f) => f.supports(kv));
        if (factory) {
          return factory;
        }
        throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${kv}'`);
      }
    };
    keyValDiff = [new DefaultKeyValueDifferFactory()];
    iterableDiff = [new DefaultIterableDifferFactory()];
    defaultIterableDiffers = new IterableDiffers(iterableDiff);
    defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
    platformCore = createPlatformFactory(null, "core", []);
    ApplicationModule = class _ApplicationModule {
      // Inject ApplicationRef to make it eager...
      constructor(appRef) {
      }
      static \u0275fac = function ApplicationModule_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _ApplicationModule)(\u0275\u0275inject(ApplicationRef));
      };
      static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _ApplicationModule });
      static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
        type: NgModule
      }], () => [{ type: ApplicationRef }], null);
    })();
    appsWithEventReplay = /* @__PURE__ */ new WeakSet();
    EAGER_CONTENT_LISTENERS_KEY = "";
    blockEventQueue = [];
    initEventReplay = (eventDelegation, injector) => {
      const appId = injector.get(APP_ID);
      const earlyJsactionData = window._ejsas[appId];
      const eventContract = eventDelegation.instance = new EventContract(new EventContractContainer(earlyJsactionData.c));
      for (const et of earlyJsactionData.et) {
        eventContract.addEvent(et);
      }
      for (const et of earlyJsactionData.etc) {
        eventContract.addEvent(et);
      }
      const eventInfos = getAppScopedQueuedEventInfos(appId);
      eventContract.replayEarlyEventInfos(eventInfos);
      clearAppScopedEarlyEventContract(appId);
      const dispatcher = new EventDispatcher((event) => {
        invokeRegisteredReplayListeners(injector, event, event.currentTarget);
      });
      registerDispatcher$1(eventContract, dispatcher);
    };
    SerializedViewCollection = class {
      views = [];
      indexByContent = /* @__PURE__ */ new Map();
      add(serializedView) {
        const viewAsString = JSON.stringify(serializedView);
        if (!this.indexByContent.has(viewAsString)) {
          const index = this.views.length;
          this.views.push(serializedView);
          this.indexByContent.set(viewAsString, index);
          return index;
        }
        return this.indexByContent.get(viewAsString);
      }
      getAll() {
        return this.views;
      }
    };
    tViewSsrId = 0;
    isHydrationSupportEnabled = false;
    isI18nHydrationRuntimeSupportEnabled = false;
    isIncrementalHydrationRuntimeSupportEnabled = false;
    APPLICATION_IS_STABLE_TIMEOUT = 1e4;
    CLIENT_RENDER_MODE_FLAG = "ngcm";
    PERFORMANCE_MARK_PREFIX = "\u{1F170}\uFE0F";
    enablePerfLogging = false;
    warningLogged = false;
    NOT_SET = /* @__PURE__ */ Symbol("NOT_SET");
    EMPTY_CLEANUP_SET = /* @__PURE__ */ new Set();
    AFTER_RENDER_PHASE_EFFECT_NODE = /* @__PURE__ */ (() => __spreadProps(__spreadValues({}, SIGNAL_NODE), {
      consumerIsAlwaysLive: true,
      consumerAllowSignalWrites: true,
      value: NOT_SET,
      cleanup: null,
      /** Called when the effect becomes dirty */
      consumerMarkedDirty() {
        if (this.sequence.impl.executing) {
          if (this.sequence.lastPhase === null || this.sequence.lastPhase < this.phase) {
            return;
          }
          this.sequence.erroredOrDestroyed = true;
        }
        this.sequence.scheduler.notify(
          7
          /* NotificationSource.RenderHook */
        );
      },
      phaseFn(previousValue) {
        this.sequence.lastPhase = this.phase;
        if (!this.dirty) {
          return this.signal;
        }
        this.dirty = false;
        if (this.value !== NOT_SET && !consumerPollProducersForChange(this)) {
          return this.signal;
        }
        try {
          for (const cleanupFn of this.cleanup ?? EMPTY_CLEANUP_SET) {
            cleanupFn();
          }
        } finally {
          this.cleanup?.clear();
        }
        const args = [];
        if (previousValue !== void 0) {
          args.push(previousValue);
        }
        args.push(this.registerCleanupFn);
        const prevConsumer = consumerBeforeComputation(this);
        let newValue;
        try {
          newValue = this.userFn.apply(null, args);
        } finally {
          consumerAfterComputation(this, prevConsumer);
        }
        if (this.value === NOT_SET || !this.equal(this.value, newValue)) {
          this.value = newValue;
          this.version++;
        }
        return this.signal;
      }
    }))();
    AfterRenderEffectSequence = class extends AfterRenderSequence {
      scheduler;
      /**
       * While this sequence is executing, this tracks the last phase which was called by the
       * `afterRender` machinery.
       *
       * When a phase effect is marked dirty, this is used to determine whether it's already run or not.
       */
      lastPhase = null;
      /**
       * The reactive nodes for each phase, if a phase effect is defined for that phase.
       *
       * These are initialized to `undefined` but set in the constructor.
       */
      nodes = [void 0, void 0, void 0, void 0];
      constructor(impl, effectHooks, view, scheduler, destroyRef, snapshot = null) {
        super(impl, [void 0, void 0, void 0, void 0], view, false, destroyRef, snapshot);
        this.scheduler = scheduler;
        for (const phase of AFTER_RENDER_PHASES) {
          const effectHook = effectHooks[phase];
          if (effectHook === void 0) {
            continue;
          }
          const node = Object.create(AFTER_RENDER_PHASE_EFFECT_NODE);
          node.sequence = this;
          node.phase = phase;
          node.userFn = effectHook;
          node.dirty = true;
          node.signal = () => {
            producerAccessed(node);
            return node.value;
          };
          node.signal[SIGNAL] = node;
          node.registerCleanupFn = (fn2) => (node.cleanup ??= /* @__PURE__ */ new Set()).add(fn2);
          this.nodes[phase] = node;
          this.hooks[phase] = (value) => node.phaseFn(value);
        }
      }
      afterRun() {
        super.afterRun();
        this.lastPhase = null;
      }
      destroy() {
        super.destroy();
        for (const node of this.nodes) {
          for (const fn2 of node?.cleanup ?? EMPTY_CLEANUP_SET) {
            fn2();
          }
        }
      }
    };
    REQUEST = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "REQUEST" : "", {
      providedIn: "platform",
      factory: () => null
    });
    RESPONSE_INIT = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "RESPONSE_INIT" : "", {
      providedIn: "platform",
      factory: () => null
    });
    REQUEST_CONTEXT = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "REQUEST_CONTEXT" : "", {
      providedIn: "platform",
      factory: () => null
    });
  }
});

// node_modules/@angular/compiler/fesm2022/compiler.mjs
function parserSelectorToSimpleSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
  const elementName = selector.element && selector.element !== "*" ? selector.element : "";
  return [elementName, ...selector.attrs, ...classes];
}
function parserSelectorToNegativeSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
  if (selector.element) {
    return [
      1 | 4,
      selector.element,
      ...selector.attrs,
      ...classes
    ];
  } else if (selector.attrs.length) {
    return [1 | 2, ...selector.attrs, ...classes];
  } else {
    return selector.classNames && selector.classNames.length ? [1 | 8, ...selector.classNames] : [];
  }
}
function parserSelectorToR3Selector(selector) {
  const positive = parserSelectorToSimpleSelector(selector);
  const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map((notSelector) => parserSelectorToNegativeSelector(notSelector)) : [];
  return positive.concat(...negative);
}
function parseSelectorToR3Selector(selector) {
  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
}
function computeDigest(message) {
  return sha1(serializeNodes(message.nodes).join("") + `[${message.meaning}]`);
}
function decimalDigest(message) {
  return message.id || computeDecimalDigest(message);
}
function computeDecimalDigest(message) {
  const visitor = new _SerializerIgnoreIcuExpVisitor();
  const parts = message.nodes.map((a) => a.visit(visitor, null));
  return computeMsgId(parts.join(""), message.meaning);
}
function serializeNodes(nodes) {
  return nodes.map((a) => a.visit(serializerVisitor$1, null));
}
function sha1(str) {
  textEncoder ??= new TextEncoder();
  const utf8 = [...textEncoder.encode(str)];
  const words32 = bytesToWords32(utf8, Endian.Big);
  const len = utf8.length * 8;
  const w = new Uint32Array(80);
  let a = 1732584193, b = 4023233417, c = 2562383102, d = 271733878, e = 3285377520;
  words32[len >> 5] |= 128 << 24 - len % 32;
  words32[(len + 64 >> 9 << 4) + 15] = len;
  for (let i = 0; i < words32.length; i += 16) {
    const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;
    for (let j = 0; j < 80; j++) {
      if (j < 16) {
        w[j] = words32[i + j];
      } else {
        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
      }
      const fkVal = fk(j, b, c, d);
      const f = fkVal[0];
      const k = fkVal[1];
      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
      e = d;
      d = c;
      c = rol32(b, 30);
      b = a;
      a = temp;
    }
    a = add32(a, h0);
    b = add32(b, h1);
    c = add32(c, h2);
    d = add32(d, h3);
    e = add32(e, h4);
  }
  return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);
}
function toHexU32(value) {
  return (value >>> 0).toString(16).padStart(8, "0");
}
function fk(index, b, c, d) {
  if (index < 20) {
    return [b & c | ~b & d, 1518500249];
  }
  if (index < 40) {
    return [b ^ c ^ d, 1859775393];
  }
  if (index < 60) {
    return [b & c | b & d | c & d, 2400959708];
  }
  return [b ^ c ^ d, 3395469782];
}
function fingerprint(str) {
  textEncoder ??= new TextEncoder();
  const utf8 = textEncoder.encode(str);
  const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);
  let hi = hash32(view, utf8.length, 0);
  let lo = hash32(view, utf8.length, 102072);
  if (hi == 0 && (lo == 0 || lo == 1)) {
    hi = hi ^ 319790063;
    lo = lo ^ -1801410264;
  }
  return BigInt.asUintN(32, BigInt(hi)) << BigInt(32) | BigInt.asUintN(32, BigInt(lo));
}
function computeMsgId(msg, meaning = "") {
  let msgFingerprint = fingerprint(msg);
  if (meaning) {
    msgFingerprint = BigInt.asUintN(64, msgFingerprint << BigInt(1)) | msgFingerprint >> BigInt(63) & BigInt(1);
    msgFingerprint += fingerprint(meaning);
  }
  return BigInt.asUintN(63, msgFingerprint).toString();
}
function hash32(view, length, c) {
  let a = 2654435769, b = 2654435769;
  let index = 0;
  const end = length - 12;
  for (; index <= end; index += 12) {
    a += view.getUint32(index, true);
    b += view.getUint32(index + 4, true);
    c += view.getUint32(index + 8, true);
    const res = mix(a, b, c);
    a = res[0], b = res[1], c = res[2];
  }
  const remainder = length - index;
  c += length;
  if (remainder >= 4) {
    a += view.getUint32(index, true);
    index += 4;
    if (remainder >= 8) {
      b += view.getUint32(index, true);
      index += 4;
      if (remainder >= 9) {
        c += view.getUint8(index++) << 8;
      }
      if (remainder >= 10) {
        c += view.getUint8(index++) << 16;
      }
      if (remainder === 11) {
        c += view.getUint8(index++) << 24;
      }
    } else {
      if (remainder >= 5) {
        b += view.getUint8(index++);
      }
      if (remainder >= 6) {
        b += view.getUint8(index++) << 8;
      }
      if (remainder === 7) {
        b += view.getUint8(index++) << 16;
      }
    }
  } else {
    if (remainder >= 1) {
      a += view.getUint8(index++);
    }
    if (remainder >= 2) {
      a += view.getUint8(index++) << 8;
    }
    if (remainder === 3) {
      a += view.getUint8(index++) << 16;
    }
  }
  return mix(a, b, c)[2];
}
function mix(a, b, c) {
  a -= b;
  a -= c;
  a ^= c >>> 13;
  b -= c;
  b -= a;
  b ^= a << 8;
  c -= a;
  c -= b;
  c ^= b >>> 13;
  a -= b;
  a -= c;
  a ^= c >>> 12;
  b -= c;
  b -= a;
  b ^= a << 16;
  c -= a;
  c -= b;
  c ^= b >>> 5;
  a -= b;
  a -= c;
  a ^= c >>> 3;
  b -= c;
  b -= a;
  b ^= a << 10;
  c -= a;
  c -= b;
  c ^= b >>> 15;
  return [a, b, c];
}
function add32(a, b) {
  return add32to64(a, b)[1];
}
function add32to64(a, b) {
  const low = (a & 65535) + (b & 65535);
  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
  return [high >>> 16, high << 16 | low & 65535];
}
function rol32(a, count) {
  return a << count | a >>> 32 - count;
}
function bytesToWords32(bytes, endian) {
  const size = bytes.length + 3 >>> 2;
  const words32 = [];
  for (let i = 0; i < size; i++) {
    words32[i] = wordAt(bytes, i * 4, endian);
  }
  return words32;
}
function byteAt(bytes, index) {
  return index >= bytes.length ? 0 : bytes[index];
}
function wordAt(bytes, index, endian) {
  let word = 0;
  if (endian === Endian.Big) {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 24 - 8 * i;
    }
  } else {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 8 * i;
    }
  }
  return word;
}
function nullSafeIsEquivalent(base, other) {
  if (base == null || other == null) {
    return base == other;
  }
  return base.isEquivalent(other);
}
function areAllEquivalentPredicate(base, other, equivalentPredicate) {
  const len = base.length;
  if (len !== other.length) {
    return false;
  }
  for (let i = 0; i < len; i++) {
    if (!equivalentPredicate(base[i], other[i])) {
      return false;
    }
  }
  return true;
}
function areAllEquivalent(base, other) {
  return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));
}
function createCookedRawString(metaBlock, messagePart, range) {
  if (metaBlock === "") {
    return {
      cooked: messagePart,
      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
      range
    };
  } else {
    return {
      cooked: `:${metaBlock}:${messagePart}`,
      raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),
      range
    };
  }
}
function jsDocComment(tags = []) {
  return new JSDocComment(tags);
}
function variable(name, type, sourceSpan) {
  return new ReadVarExpr(name, type, sourceSpan);
}
function importExpr(id, typeParams = null, sourceSpan) {
  return new ExternalExpr(id, null, typeParams, sourceSpan);
}
function expressionType(expr, typeModifiers, typeParams) {
  return new ExpressionType(expr, typeModifiers, typeParams);
}
function typeofExpr(expr) {
  return new TypeofExpr(expr);
}
function literalArr(values, type, sourceSpan) {
  return new LiteralArrayExpr(values, type, sourceSpan);
}
function literalMap(values, type = null) {
  return new LiteralMapExpr(values.map((e) => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);
}
function not(expr, sourceSpan) {
  return new NotExpr(expr, sourceSpan);
}
function fn(params, body, type, sourceSpan, name) {
  return new FunctionExpr(params, body, type, sourceSpan, name);
}
function arrowFn(params, body, type, sourceSpan) {
  return new ArrowFunctionExpr(params, body, type, sourceSpan);
}
function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
}
function taggedTemplate(tag, template2, type, sourceSpan) {
  return new TaggedTemplateLiteralExpr(tag, template2, type, sourceSpan);
}
function literal(value, type, sourceSpan) {
  return new LiteralExpr(value, type, sourceSpan);
}
function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
}
function tagToString(tag) {
  let out = "";
  if (tag.tagName) {
    out += ` @${tag.tagName}`;
  }
  if (tag.text) {
    if (tag.text.match(/\/\*|\*\//)) {
      throw new Error('JSDoc text cannot contain "/*" and "*/"');
    }
    out += " " + tag.text.replace(/@/g, "\\@");
  }
  return out;
}
function serializeTags(tags) {
  if (tags.length === 0)
    return "";
  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
    return `*${tagToString(tags[0])} `;
  }
  let out = "*\n";
  for (const tag of tags) {
    out += " *";
    out += tagToString(tag).replace(/\n/g, "\n * ");
    out += "\n";
  }
  out += " ";
  return out;
}
function isVariable(e) {
  return e instanceof ReadVarExpr;
}
function isLongStringLiteral(expr) {
  return expr instanceof LiteralExpr && typeof expr.value === "string" && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
}
function dashCaseToCamelCase(input2) {
  return input2.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function splitAtColon(input2, defaultValues) {
  return _splitAt(input2, ":", defaultValues);
}
function splitAtPeriod(input2, defaultValues) {
  return _splitAt(input2, ".", defaultValues);
}
function _splitAt(input2, character, defaultValues) {
  const characterIndex = input2.indexOf(character);
  if (characterIndex == -1)
    return defaultValues;
  return [input2.slice(0, characterIndex).trim(), input2.slice(characterIndex + 1).trim()];
}
function utf8Encode(str) {
  let encoded = [];
  for (let index = 0; index < str.length; index++) {
    let codePoint = str.charCodeAt(index);
    if (codePoint >= 55296 && codePoint <= 56319 && str.length > index + 1) {
      const low = str.charCodeAt(index + 1);
      if (low >= 56320 && low <= 57343) {
        index++;
        codePoint = (codePoint - 55296 << 10) + low - 56320 + 65536;
      }
    }
    if (codePoint <= 127) {
      encoded.push(codePoint);
    } else if (codePoint <= 2047) {
      encoded.push(codePoint >> 6 & 31 | 192, codePoint & 63 | 128);
    } else if (codePoint <= 65535) {
      encoded.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else if (codePoint <= 2097151) {
      encoded.push(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    }
  }
  return encoded;
}
function stringify2(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return `[${token.map(stringify2).join(", ")}]`;
  }
  if (token == null) {
    return "" + token;
  }
  const name = token.overriddenName || token.name;
  if (name) {
    return `${name}`;
  }
  if (!token.toString) {
    return "object";
  }
  const result = token.toString();
  if (result == null) {
    return "" + result;
  }
  const newLineIndex = result.indexOf("\n");
  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;
}
function getJitStandaloneDefaultForVersion(version) {
  if (version.startsWith("0.")) {
    return true;
  }
  if (V1_TO_18.test(version)) {
    return false;
  }
  return true;
}
function toBase64String(value) {
  let b64 = "";
  const encoded = utf8Encode(value);
  for (let i = 0; i < encoded.length; ) {
    const i1 = encoded[i++];
    const i2 = i < encoded.length ? encoded[i++] : null;
    const i3 = i < encoded.length ? encoded[i++] : null;
    b64 += toBase64Digit(i1 >> 2);
    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));
    b64 += i2 === null ? "=" : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));
    b64 += i2 === null || i3 === null ? "=" : toBase64Digit(i3 & 63);
  }
  return b64;
}
function toBase64VLQ(value) {
  value = value < 0 ? (-value << 1) + 1 : value << 1;
  let out = "";
  do {
    let digit = value & 31;
    value = value >> 5;
    if (value > 0) {
      digit = digit | 32;
    }
    out += toBase64Digit(digit);
  } while (value > 0);
  return out;
}
function toBase64Digit(value) {
  if (value < 0 || value >= 64) {
    throw new Error(`Can only encode value in the range [0, 63]`);
  }
  return B64_DIGITS[value];
}
function escapeIdentifier(input2, escapeDollar, alwaysQuote = true) {
  if (input2 == null) {
    return null;
  }
  const body = input2.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {
    if (match[0] == "$") {
      return escapeDollar ? "\\$" : "$";
    } else if (match[0] == "\n") {
      return "\\n";
    } else if (match[0] == "\r") {
      return "\\r";
    } else {
      return `\\${match[0]}`;
    }
  });
  const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
  return requiresQuotes ? `'${body}'` : body;
}
function _createIndent(count) {
  let res = "";
  for (let i = 0; i < count; i++) {
    res += _INDENT_WITH;
  }
  return res;
}
function typeWithParameters(type, numParams) {
  if (numParams === 0) {
    return expressionType(type);
  }
  const params = [];
  for (let i = 0; i < numParams; i++) {
    params.push(DYNAMIC_TYPE);
  }
  return expressionType(type, void 0, params);
}
function getSafePropertyAccessString(accessor, name) {
  const escapedName = escapeIdentifier(name, false, false);
  return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;
}
function jitOnlyGuardedExpression(expr) {
  return guardedExpression("ngJitMode", expr);
}
function guardedExpression(guard, expr) {
  const guardExpr = new ExternalExpr({ name: guard, moduleName: null });
  const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal("undefined"));
  const guardUndefinedOrTrue = new BinaryOperatorExpr(
    BinaryOperator.Or,
    guardNotDefined,
    guardExpr,
    /* type */
    void 0,
    /* sourceSpan */
    void 0
  );
  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
}
function wrapReference(value) {
  const wrapped = new WrappedNodeExpr(value);
  return { value: wrapped, type: wrapped };
}
function refsToArray(refs, shouldForwardDeclare) {
  const values = literalArr(refs.map((ref) => ref.value));
  return shouldForwardDeclare ? arrowFn([], values) : values;
}
function createMayBeForwardRefExpression(expression, forwardRef2) {
  return { expression, forwardRef: forwardRef2 };
}
function convertFromMaybeForwardRefExpression({ expression, forwardRef: forwardRef2 }) {
  switch (forwardRef2) {
    case 0:
    case 1:
      return expression;
    case 2:
      return generateForwardRef(expression);
  }
}
function generateForwardRef(expr) {
  return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);
}
function compileFactoryFunction(meta) {
  const t = variable("__ngFactoryType__");
  let baseFactoryVar = null;
  const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value) : t;
  let ctorExpr = null;
  if (meta.deps !== null) {
    if (meta.deps !== "invalid") {
      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));
    }
  } else {
    baseFactoryVar = variable(`\u0275${meta.name}_BaseFactory`);
    ctorExpr = baseFactoryVar.callFn([typeForCtor]);
  }
  const body = [];
  let retExpr = null;
  function makeConditionalFactory(nonCtorExpr) {
    const r = variable("__ngConditionalFactory__");
    body.push(new DeclareVarStmt(r.name, NULL_EXPR, INFERRED_TYPE));
    const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();
    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
    return r;
  }
  if (isDelegatedFactoryMetadata(meta)) {
    const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);
    const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
    retExpr = makeConditionalFactory(factoryExpr);
  } else if (isExpressionFactoryMetadata(meta)) {
    retExpr = makeConditionalFactory(meta.expression);
  } else {
    retExpr = ctorExpr;
  }
  if (retExpr === null) {
    body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());
  } else if (baseFactoryVar !== null) {
    const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);
    const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));
    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));
  } else {
    body.push(new ReturnStatement(retExpr));
  }
  let factoryFn = fn([new FnParam(t.name, DYNAMIC_TYPE)], body, INFERRED_TYPE, void 0, `${meta.name}_Factory`);
  if (baseFactoryVar !== null) {
    factoryFn = arrowFn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn(
      [],
      /* sourceSpan */
      void 0,
      /* pure */
      true
    );
  }
  return {
    expression: factoryFn,
    statements: [],
    type: createFactoryType(meta)
  };
}
function createFactoryType(meta) {
  const ctorDepsType = meta.deps !== null && meta.deps !== "invalid" ? createCtorDepsType(meta.deps) : NONE_TYPE;
  return expressionType(importExpr(Identifiers.FactoryDeclaration, [
    typeWithParameters(meta.type.type, meta.typeArgumentCount),
    ctorDepsType
  ]));
}
function injectDependencies(deps, target) {
  return deps.map((dep, index) => compileInjectDependency(dep, target, index));
}
function compileInjectDependency(dep, target, index) {
  if (dep.token === null) {
    return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);
  } else if (dep.attributeNameType === null) {
    const flags = 0 | (dep.self ? 2 : 0) | (dep.skipSelf ? 4 : 0) | (dep.host ? 1 : 0) | (dep.optional ? 8 : 0) | (target === FactoryTarget2.Pipe ? 16 : 0);
    let flagsParam = flags !== 0 || dep.optional ? literal(flags) : null;
    const injectArgs2 = [dep.token];
    if (flagsParam) {
      injectArgs2.push(flagsParam);
    }
    const injectFn = getInjectFn(target);
    return importExpr(injectFn).callFn(injectArgs2);
  } else {
    return importExpr(Identifiers.injectAttribute).callFn([dep.token]);
  }
}
function createCtorDepsType(deps) {
  let hasTypes = false;
  const attributeTypes = deps.map((dep) => {
    const type = createCtorDepType(dep);
    if (type !== null) {
      hasTypes = true;
      return type;
    } else {
      return literal(null);
    }
  });
  if (hasTypes) {
    return expressionType(literalArr(attributeTypes));
  } else {
    return NONE_TYPE;
  }
}
function createCtorDepType(dep) {
  const entries = [];
  if (dep.attributeNameType !== null) {
    entries.push({ key: "attribute", value: dep.attributeNameType, quoted: false });
  }
  if (dep.optional) {
    entries.push({ key: "optional", value: literal(true), quoted: false });
  }
  if (dep.host) {
    entries.push({ key: "host", value: literal(true), quoted: false });
  }
  if (dep.self) {
    entries.push({ key: "self", value: literal(true), quoted: false });
  }
  if (dep.skipSelf) {
    entries.push({ key: "skipSelf", value: literal(true), quoted: false });
  }
  return entries.length > 0 ? literalMap(entries) : null;
}
function isDelegatedFactoryMetadata(meta) {
  return meta.delegateType !== void 0;
}
function isExpressionFactoryMetadata(meta) {
  return meta.expression !== void 0;
}
function getInjectFn(target) {
  switch (target) {
    case FactoryTarget2.Component:
    case FactoryTarget2.Directive:
    case FactoryTarget2.Pipe:
      return Identifiers.directiveInject;
    case FactoryTarget2.NgModule:
    case FactoryTarget2.Injectable:
    default:
      return Identifiers.inject;
  }
}
function splitNsName(elementName, fatal = true) {
  if (elementName[0] != ":") {
    return [null, elementName];
  }
  const colonIndex = elementName.indexOf(":", 1);
  if (colonIndex === -1) {
    if (fatal) {
      throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
    } else {
      return [null, elementName];
    }
  }
  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
}
function isNgContainer(tagName) {
  return splitNsName(tagName)[1] === "ng-container";
}
function isNgContent(tagName) {
  return splitNsName(tagName)[1] === "ng-content";
}
function isNgTemplate(tagName) {
  return splitNsName(tagName)[1] === "ng-template";
}
function getNsPrefix(fullName) {
  return fullName === null ? null : splitNsName(fullName)[0];
}
function mergeNsAndName(prefix, localName) {
  return prefix ? `:${prefix}:${localName}` : localName;
}
function visitAll$1(visitor, nodes) {
  const result = [];
  if (visitor.visit) {
    for (const node of nodes) {
      visitor.visit(node);
    }
  } else {
    for (const node of nodes) {
      const newNode = node.visit(visitor);
      if (newNode) {
        result.push(newNode);
      }
    }
  }
  return result;
}
function serializeMessage(messageNodes) {
  const visitor = new LocalizeMessageStringVisitor();
  const str = messageNodes.map((n) => n.visit(visitor)).join("");
  return str;
}
function toPublicName(internalName) {
  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
}
function isI18nAttribute(name) {
  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
}
function hasI18nAttrs(node) {
  return node.attrs.some((attr) => isI18nAttribute(attr.name));
}
function icuFromI18nMessage(message) {
  return message.nodes[0];
}
function formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {
  const _params = {};
  if (params && Object.keys(params).length) {
    Object.keys(params).forEach((key) => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);
  }
  return _params;
}
function formatI18nPlaceholderName(name, useCamelCase = true) {
  const publicName = toPublicName(name);
  if (!useCamelCase) {
    return publicName;
  }
  const chunks = publicName.split("_");
  if (chunks.length === 1) {
    return name.toLowerCase();
  }
  let postfix;
  if (/^\d+$/.test(chunks[chunks.length - 1])) {
    postfix = chunks.pop();
  }
  let raw = chunks.shift().toLowerCase();
  if (chunks.length) {
    raw += chunks.map((c) => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join("");
  }
  return postfix ? `${raw}_${postfix}` : raw;
}
function temporaryAllocator(pushStatement, name) {
  let temp = null;
  return () => {
    if (!temp) {
      pushStatement(new DeclareVarStmt(TEMPORARY_NAME, void 0, DYNAMIC_TYPE));
      temp = variable(name);
    }
    return temp;
  };
}
function asLiteral(value) {
  if (Array.isArray(value)) {
    return literalArr(value.map(asLiteral));
  }
  return literal(value, INFERRED_TYPE);
}
function conditionallyCreateDirectiveBindingLiteral(map2, forInputs) {
  const keys = Object.getOwnPropertyNames(map2);
  if (keys.length === 0) {
    return null;
  }
  return literalMap(keys.map((key) => {
    const value = map2[key];
    let declaredName;
    let publicName;
    let minifiedName;
    let expressionValue;
    if (typeof value === "string") {
      declaredName = key;
      minifiedName = key;
      publicName = value;
      expressionValue = asLiteral(publicName);
    } else {
      minifiedName = key;
      declaredName = value.classPropertyName;
      publicName = value.bindingPropertyName;
      const differentDeclaringName = publicName !== declaredName;
      const hasDecoratorInputTransform = value.transformFunction !== null;
      let flags = InputFlags2.None;
      if (value.isSignal) {
        flags |= InputFlags2.SignalBased;
      }
      if (hasDecoratorInputTransform) {
        flags |= InputFlags2.HasDecoratorInputTransform;
      }
      if (forInputs && (differentDeclaringName || hasDecoratorInputTransform || flags !== InputFlags2.None)) {
        const result = [literal(flags), asLiteral(publicName)];
        if (differentDeclaringName || hasDecoratorInputTransform) {
          result.push(asLiteral(declaredName));
          if (hasDecoratorInputTransform) {
            result.push(value.transformFunction);
          }
        }
        expressionValue = literalArr(result);
      } else {
        expressionValue = asLiteral(publicName);
      }
    }
    return {
      key: minifiedName,
      // put quotes around keys that contain potentially unsafe characters
      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
      value: expressionValue
    };
  }));
}
function createCssSelectorFromNode(node) {
  const elementName = node instanceof Element$1 ? node.name : "ng-template";
  const attributes = getAttrsForDirectiveMatching(node);
  const cssSelector = new CssSelector();
  const elementNameNoNs = splitNsName(elementName)[1];
  cssSelector.setElement(elementNameNoNs);
  Object.getOwnPropertyNames(attributes).forEach((name) => {
    const nameNoNs = splitNsName(name)[1];
    const value = attributes[name];
    cssSelector.addAttribute(nameNoNs, value);
    if (name.toLowerCase() === "class") {
      const classes = value.trim().split(/\s+/);
      classes.forEach((className) => cssSelector.addClassName(className));
    }
  });
  return cssSelector;
}
function getAttrsForDirectiveMatching(elOrTpl) {
  const attributesMap = {};
  if (elOrTpl instanceof Template && elOrTpl.tagName !== "ng-template") {
    elOrTpl.templateAttrs.forEach((a) => attributesMap[a.name] = "");
  } else {
    elOrTpl.attributes.forEach((a) => {
      if (!isI18nAttribute(a.name)) {
        attributesMap[a.name] = a.value;
      }
    });
    elOrTpl.inputs.forEach((i) => {
      if (i.type === BindingType.Property || i.type === BindingType.TwoWay) {
        attributesMap[i.name] = "";
      }
    });
    elOrTpl.outputs.forEach((o) => {
      attributesMap[o.name] = "";
    });
  }
  return attributesMap;
}
function compileInjectable2(meta, resolveForwardRefs) {
  let result = null;
  const factoryMeta = {
    name: meta.name,
    type: meta.type,
    typeArgumentCount: meta.typeArgumentCount,
    deps: [],
    target: FactoryTarget2.Injectable
  };
  if (meta.useClass !== void 0) {
    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);
    let deps = void 0;
    if (meta.deps !== void 0) {
      deps = meta.deps;
    }
    if (deps !== void 0) {
      result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
        delegate: meta.useClass.expression,
        delegateDeps: deps,
        delegateType: R3FactoryDelegateType.Class
      }));
    } else if (useClassOnSelf) {
      result = compileFactoryFunction(factoryMeta);
    } else {
      result = {
        statements: [],
        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)
      };
    }
  } else if (meta.useFactory !== void 0) {
    if (meta.deps !== void 0) {
      result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
        delegate: meta.useFactory,
        delegateDeps: meta.deps || [],
        delegateType: R3FactoryDelegateType.Function
      }));
    } else {
      result = { statements: [], expression: arrowFn([], meta.useFactory.callFn([])) };
    }
  } else if (meta.useValue !== void 0) {
    result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
      expression: meta.useValue.expression
    }));
  } else if (meta.useExisting !== void 0) {
    result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
      expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])
    }));
  } else {
    result = {
      statements: [],
      expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)
    };
  }
  const token = meta.type.value;
  const injectableProps = new DefinitionMap();
  injectableProps.set("token", token);
  injectableProps.set("factory", result.expression);
  if (meta.providedIn.expression.value !== null) {
    injectableProps.set("providedIn", convertFromMaybeForwardRefExpression(meta.providedIn));
  }
  const expression = importExpr(Identifiers.\u0275\u0275defineInjectable).callFn([injectableProps.toLiteralMap()], void 0, true);
  return {
    expression,
    type: createInjectableType(meta),
    statements: result.statements
  };
}
function createInjectableType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [
    typeWithParameters(meta.type.type, meta.typeArgumentCount)
  ]));
}
function delegateToFactory(type, useType, unwrapForwardRefs) {
  if (type.node === useType.node) {
    return useType.prop("\u0275fac");
  }
  if (!unwrapForwardRefs) {
    return createFactoryFunction(useType);
  }
  const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);
  return createFactoryFunction(unwrappedType);
}
function createFactoryFunction(type) {
  const t = new FnParam("__ngFactoryType__", DYNAMIC_TYPE);
  return arrowFn([t], type.prop("\u0275fac").callFn([variable(t.name)]));
}
function assertInterpolationSymbols(identifier, value) {
  if (value != null && !(Array.isArray(value) && value.length == 2)) {
    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
  } else if (value != null) {
    const start = value[0];
    const end = value[1];
    UNUSABLE_INTERPOLATION_REGEXPS.forEach((regexp) => {
      if (regexp.test(start) || regexp.test(end)) {
        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
      }
    });
  }
}
function isWhitespace(code) {
  return code >= $TAB && code <= $SPACE || code == $NBSP;
}
function isDigit(code) {
  return $0 <= code && code <= $9;
}
function isAsciiLetter(code) {
  return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}
function isNewLine(code) {
  return code === $LF || code === $CR;
}
function isOctalDigit(code) {
  return $0 <= code && code <= $7;
}
function isQuote(code) {
  return code === $SQ || code === $DQ || code === $BT;
}
function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
  const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;
  const sourceFile = new ParseSourceFile("", sourceFileName);
  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
}
function identifierName(compileIdentifier) {
  if (!compileIdentifier || !compileIdentifier.reference) {
    return null;
  }
  const ref = compileIdentifier.reference;
  if (ref["__anonymousType"]) {
    return ref["__anonymousType"];
  }
  if (ref["__forward_ref__"]) {
    return "__forward_ref__";
  }
  let identifier = stringify2(ref);
  if (identifier.indexOf("(") >= 0) {
    identifier = `anonymous_${_anonymousTypeIndex++}`;
    ref["__anonymousType"] = identifier;
  } else {
    identifier = sanitizeIdentifier(identifier);
  }
  return identifier;
}
function sanitizeIdentifier(name) {
  return name.replace(/\W/g, "_");
}
function getPolicy2() {
  if (policy2 === void 0) {
    const trustedTypes = _global2["trustedTypes"];
    policy2 = null;
    if (trustedTypes) {
      try {
        policy2 = trustedTypes.createPolicy("angular#unsafe-jit", {
          createScript: (s) => s
        });
      } catch {
      }
    }
  }
  return policy2;
}
function trustedScriptFromString(script) {
  return getPolicy2()?.createScript(script) || script;
}
function newTrustedFunctionForJIT(...args) {
  if (!_global2["trustedTypes"]) {
    return new Function(...args);
  }
  const fnArgs = args.slice(0, -1).join(",");
  const fnBody = args[args.length - 1];
  const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`;
  const fn2 = _global2["eval"](trustedScriptFromString(body));
  if (fn2.bind === void 0) {
    return new Function(...args);
  }
  fn2.toString = () => body;
  return fn2.bind(_global2);
}
function isUseStrictStatement(statement) {
  return statement.isEquivalent(literal("use strict").toStmt());
}
function compileInjector(meta) {
  const definitionMap = new DefinitionMap();
  if (meta.providers !== null) {
    definitionMap.set("providers", meta.providers);
  }
  if (meta.imports.length > 0) {
    definitionMap.set("imports", literalArr(meta.imports));
  }
  const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createInjectorType(meta);
  return { expression, type, statements: [] };
}
function createInjectorType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));
}
function compileNgModule2(meta) {
  const statements = [];
  const definitionMap = new DefinitionMap();
  definitionMap.set("type", meta.type.value);
  if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {
    definitionMap.set("bootstrap", refsToArray(meta.bootstrap, meta.containsForwardDecls));
  }
  if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {
    if (meta.declarations.length > 0) {
      definitionMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
    }
    if (meta.imports.length > 0) {
      definitionMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
    }
    if (meta.exports.length > 0) {
      definitionMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
    }
  } else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {
    const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
    if (setNgModuleScopeCall !== null) {
      statements.push(setNgModuleScopeCall);
    }
  } else ;
  if (meta.schemas !== null && meta.schemas.length > 0) {
    definitionMap.set("schemas", literalArr(meta.schemas.map((ref) => ref.value)));
  }
  if (meta.id !== null) {
    definitionMap.set("id", meta.id);
    statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());
  }
  const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createNgModuleType(meta);
  return { expression, type, statements };
}
function compileNgModuleDeclarationExpression(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set("type", new WrappedNodeExpr(meta.type));
  if (meta.bootstrap !== void 0) {
    definitionMap.set("bootstrap", new WrappedNodeExpr(meta.bootstrap));
  }
  if (meta.declarations !== void 0) {
    definitionMap.set("declarations", new WrappedNodeExpr(meta.declarations));
  }
  if (meta.imports !== void 0) {
    definitionMap.set("imports", new WrappedNodeExpr(meta.imports));
  }
  if (meta.exports !== void 0) {
    definitionMap.set("exports", new WrappedNodeExpr(meta.exports));
  }
  if (meta.schemas !== void 0) {
    definitionMap.set("schemas", new WrappedNodeExpr(meta.schemas));
  }
  if (meta.id !== void 0) {
    definitionMap.set("id", new WrappedNodeExpr(meta.id));
  }
  return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
}
function createNgModuleType(meta) {
  if (meta.kind === R3NgModuleMetadataKind.Local) {
    return new ExpressionType(meta.type.value);
  }
  const { type: moduleType, declarations, exports, imports, includeImportTypes, publicDeclarationTypes } = meta;
  return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [
    new ExpressionType(moduleType.type),
    publicDeclarationTypes === null ? tupleTypeOf(declarations) : tupleOfTypes(publicDeclarationTypes),
    includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE,
    tupleTypeOf(exports)
  ]));
}
function generateSetNgModuleScopeCall(meta) {
  const scopeMap = new DefinitionMap();
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.declarations.length > 0) {
      scopeMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
    }
  } else {
    if (meta.declarationsExpression) {
      scopeMap.set("declarations", meta.declarationsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.imports.length > 0) {
      scopeMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
    }
  } else {
    if (meta.importsExpression) {
      scopeMap.set("imports", meta.importsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.exports.length > 0) {
      scopeMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
    }
  } else {
    if (meta.exportsExpression) {
      scopeMap.set("exports", meta.exportsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {
    scopeMap.set("bootstrap", meta.bootstrapExpression);
  }
  if (Object.keys(scopeMap.values).length === 0) {
    return null;
  }
  const fnCall = new InvokeFunctionExpr(
    /* fn */
    importExpr(Identifiers.setNgModuleScope),
    /* args */
    [meta.type.value, scopeMap.toLiteralMap()]
  );
  const guardedCall = jitOnlyGuardedExpression(fnCall);
  const iife = new FunctionExpr(
    /* params */
    [],
    /* statements */
    [guardedCall.toStmt()]
  );
  const iifeCall = new InvokeFunctionExpr(
    /* fn */
    iife,
    /* args */
    []
  );
  return iifeCall.toStmt();
}
function tupleTypeOf(exp) {
  const types = exp.map((ref) => typeofExpr(ref.type));
  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
}
function tupleOfTypes(types) {
  const typeofTypes = types.map((type) => typeofExpr(type));
  return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;
}
function compilePipeFromMetadata(metadata) {
  const definitionMapValues = [];
  definitionMapValues.push({
    key: "name",
    value: literal(metadata.pipeName ?? metadata.name),
    quoted: false
  });
  definitionMapValues.push({ key: "type", value: metadata.type.value, quoted: false });
  definitionMapValues.push({ key: "pure", value: literal(metadata.pure), quoted: false });
  if (metadata.isStandalone === false) {
    definitionMapValues.push({ key: "standalone", value: literal(false), quoted: false });
  }
  const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], void 0, true);
  const type = createPipeType(metadata);
  return { expression, type, statements: [] };
}
function createPipeType(metadata) {
  return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [
    typeWithParameters(metadata.type.type, metadata.typeArgumentCount),
    new ExpressionType(new LiteralExpr(metadata.pipeName)),
    new ExpressionType(new LiteralExpr(metadata.isStandalone))
  ]));
}
function processRules(input2, ruleCallback) {
  const escaped = escapeInStrings(input2);
  const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
  let nextBlockIndex = 0;
  const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
    const selector = m[2];
    let content = "";
    let suffix = m[4];
    let contentPrefix = "";
    if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
      contentPrefix = "{";
    }
    const rule = ruleCallback(new CssRule(selector, content));
    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
  });
  return unescapeInStrings(escapedResult);
}
function escapeBlocks(input2, charPairs, placeholder) {
  const resultParts = [];
  const escapedBlocks = [];
  let openCharCount = 0;
  let nonBlockStartIndex = 0;
  let blockStartIndex = -1;
  let openChar;
  let closeChar;
  for (let i = 0; i < input2.length; i++) {
    const char = input2[i];
    if (char === "\\") {
      i++;
    } else if (char === closeChar) {
      openCharCount--;
      if (openCharCount === 0) {
        escapedBlocks.push(input2.substring(blockStartIndex, i));
        resultParts.push(placeholder);
        nonBlockStartIndex = i;
        blockStartIndex = -1;
        openChar = closeChar = void 0;
      }
    } else if (char === openChar) {
      openCharCount++;
    } else if (openCharCount === 0 && charPairs.has(char)) {
      openChar = char;
      closeChar = charPairs.get(char);
      openCharCount = 1;
      blockStartIndex = i + 1;
      resultParts.push(input2.substring(nonBlockStartIndex, blockStartIndex));
    }
  }
  if (blockStartIndex !== -1) {
    escapedBlocks.push(input2.substring(blockStartIndex));
    resultParts.push(placeholder);
  } else {
    resultParts.push(input2.substring(nonBlockStartIndex));
  }
  return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
function escapeInStrings(input2) {
  let result = input2;
  let currentQuoteChar = null;
  for (let i = 0; i < result.length; i++) {
    const char = result[i];
    if (char === "\\") {
      i++;
    } else {
      if (currentQuoteChar !== null) {
        if (char === currentQuoteChar) {
          currentQuoteChar = null;
        } else {
          const placeholder = ESCAPE_IN_STRING_MAP[char];
          if (placeholder) {
            result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;
            i += placeholder.length - 1;
          }
        }
      } else if (char === "'" || char === '"') {
        currentQuoteChar = char;
      }
    }
  }
  return result;
}
function unescapeInStrings(input2) {
  let result = input2.replace(_cssCommaInPlaceholderReGlobal, ",");
  result = result.replace(_cssSemiInPlaceholderReGlobal, ";");
  result = result.replace(_cssColonInPlaceholderReGlobal, ":");
  return result;
}
function unescapeQuotes(str, isQuoted) {
  return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, "$1");
}
function _combineHostContextSelectors(contextSelectors, otherSelectors, pseudoPrefix = "") {
  const hostMarker = _polyfillHostNoCombinator;
  _polyfillHostRe.lastIndex = 0;
  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
  if (contextSelectors.length === 0) {
    return hostMarker + otherSelectors;
  }
  const combined = [contextSelectors.pop() || ""];
  while (contextSelectors.length > 0) {
    const length = combined.length;
    const contextSelector = contextSelectors.pop();
    for (let i = 0; i < length; i++) {
      const previousSelectors = combined[i];
      combined[length * 2 + i] = previousSelectors + " " + contextSelector;
      combined[length + i] = contextSelector + " " + previousSelectors;
      combined[i] = contextSelector + previousSelectors;
    }
  }
  return combined.map((s) => otherSelectorsHasHost ? `${pseudoPrefix}${s}${otherSelectors}` : `${pseudoPrefix}${s}${hostMarker}${otherSelectors}, ${pseudoPrefix}${s} ${hostMarker}${otherSelectors}`).join(",");
}
function repeatGroups(groups, multiples) {
  const length = groups.length;
  for (let i = 1; i < multiples; i++) {
    for (let j = 0; j < length; j++) {
      groups[j + i * length] = groups[j].slice(0);
    }
  }
}
function hasConsumesSlotTrait(op) {
  return op[ConsumesSlot] === true;
}
function hasDependsOnSlotContextTrait(value) {
  return value[DependsOnSlotContext] === true;
}
function hasConsumesVarsTrait(value) {
  return value[ConsumesVarsTrait] === true;
}
function hasUsesVarOffsetTrait(expr) {
  return expr[UsesVarOffset] === true;
}
function createStatementOp(statement) {
  return __spreadValues({
    kind: OpKind.Statement,
    statement
  }, NEW_OP);
}
function createVariableOp(xref, variable2, initializer, flags) {
  return __spreadValues({
    kind: OpKind.Variable,
    xref,
    variable: variable2,
    initializer,
    flags
  }, NEW_OP);
}
function createInterpolateTextOp(xref, interpolation, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.InterpolateText,
    target: xref,
    interpolation,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  return __spreadValues({
    kind: OpKind.Binding,
    bindingKind: kind,
    target,
    name,
    expression,
    unit,
    securityContext,
    isTextAttribute,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext: null,
    i18nMessage,
    sourceSpan
  }, NEW_OP);
}
function createPropertyOp(target, name, expression, isLegacyAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Property,
    target,
    name,
    expression,
    isLegacyAnimationTrigger,
    securityContext,
    sanitizer: null,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createTwoWayPropertyOp(target, name, expression, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.TwoWayProperty,
    target,
    name,
    expression,
    securityContext,
    sanitizer: null,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createStylePropOp(xref, name, expression, unit, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StyleProp,
    target: xref,
    name,
    expression,
    unit,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createClassPropOp(xref, name, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.ClassProp,
    target: xref,
    name,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createStyleMapOp(xref, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StyleMap,
    target: xref,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createClassMapOp(xref, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.ClassMap,
    target: xref,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Attribute,
    target,
    namespace,
    name,
    expression,
    securityContext,
    sanitizer: null,
    isTextAttribute,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext: null,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createAdvanceOp(delta, sourceSpan) {
  return __spreadValues({
    kind: OpKind.Advance,
    delta,
    sourceSpan
  }, NEW_OP);
}
function createConditionalOp(target, test, conditions, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Conditional,
    target,
    test,
    conditions,
    processed: null,
    sourceSpan,
    contextValue: null
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS);
}
function createRepeaterOp(repeaterCreate2, targetSlot, collection, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Repeater,
    target: repeaterCreate2,
    targetSlot,
    collection,
    sourceSpan
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT);
}
function createDeferWhenOp(target, expr, modifier, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.DeferWhen,
    target,
    expr,
    modifier,
    sourceSpan
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS);
}
function createI18nExpressionOp(context2, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.I18nExpression,
    context: context2,
    target,
    i18nOwner,
    handle,
    expression,
    icuPlaceholder,
    i18nPlaceholder,
    resolutionTime,
    usage,
    name,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_VARS), TRAIT_DEPENDS_ON_SLOT_CONTEXT);
}
function createI18nApplyOp(owner, handle, sourceSpan) {
  return __spreadValues({
    kind: OpKind.I18nApply,
    owner,
    handle,
    sourceSpan
  }, NEW_OP);
}
function createStoreLetOp(target, declaredName, value, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StoreLet,
    target,
    declaredName,
    value,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function isIrExpression(expr) {
  return expr instanceof ExpressionBase;
}
function visitExpressionsInOp(op, visitor) {
  transformExpressionsInOp(op, (expr, flags) => {
    visitor(expr, flags);
    return expr;
  }, VisitorContextFlag.None);
}
function transformExpressionsInInterpolation(interpolation, transform2, flags) {
  for (let i = 0; i < interpolation.expressions.length; i++) {
    interpolation.expressions[i] = transformExpressionsInExpression(interpolation.expressions[i], transform2, flags);
  }
}
function transformExpressionsInOp(op, transform2, flags) {
  switch (op.kind) {
    case OpKind.StyleProp:
    case OpKind.StyleMap:
    case OpKind.ClassProp:
    case OpKind.ClassMap:
    case OpKind.Binding:
      if (op.expression instanceof Interpolation2) {
        transformExpressionsInInterpolation(op.expression, transform2, flags);
      } else {
        op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
      }
      break;
    case OpKind.Property:
    case OpKind.DomProperty:
    case OpKind.Attribute:
      if (op.expression instanceof Interpolation2) {
        transformExpressionsInInterpolation(op.expression, transform2, flags);
      } else {
        op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
      }
      op.sanitizer = op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform2, flags);
      break;
    case OpKind.TwoWayProperty:
      op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
      op.sanitizer = op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform2, flags);
      break;
    case OpKind.I18nExpression:
      op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
      break;
    case OpKind.InterpolateText:
      transformExpressionsInInterpolation(op.interpolation, transform2, flags);
      break;
    case OpKind.Statement:
      transformExpressionsInStatement(op.statement, transform2, flags);
      break;
    case OpKind.Variable:
      op.initializer = transformExpressionsInExpression(op.initializer, transform2, flags);
      break;
    case OpKind.Conditional:
      for (const condition of op.conditions) {
        if (condition.expr === null) {
          continue;
        }
        condition.expr = transformExpressionsInExpression(condition.expr, transform2, flags);
      }
      if (op.processed !== null) {
        op.processed = transformExpressionsInExpression(op.processed, transform2, flags);
      }
      if (op.contextValue !== null) {
        op.contextValue = transformExpressionsInExpression(op.contextValue, transform2, flags);
      }
      break;
    case OpKind.Listener:
    case OpKind.TwoWayListener:
      for (const innerOp of op.handlerOps) {
        transformExpressionsInOp(innerOp, transform2, flags | VisitorContextFlag.InChildOperation);
      }
      break;
    case OpKind.ExtractedAttribute:
      op.expression = op.expression && transformExpressionsInExpression(op.expression, transform2, flags);
      op.trustedValueFn = op.trustedValueFn && transformExpressionsInExpression(op.trustedValueFn, transform2, flags);
      break;
    case OpKind.RepeaterCreate:
      if (op.trackByOps === null) {
        op.track = transformExpressionsInExpression(op.track, transform2, flags);
      } else {
        for (const innerOp of op.trackByOps) {
          transformExpressionsInOp(innerOp, transform2, flags | VisitorContextFlag.InChildOperation);
        }
      }
      if (op.trackByFn !== null) {
        op.trackByFn = transformExpressionsInExpression(op.trackByFn, transform2, flags);
      }
      break;
    case OpKind.Repeater:
      op.collection = transformExpressionsInExpression(op.collection, transform2, flags);
      break;
    case OpKind.Defer:
      if (op.loadingConfig !== null) {
        op.loadingConfig = transformExpressionsInExpression(op.loadingConfig, transform2, flags);
      }
      if (op.placeholderConfig !== null) {
        op.placeholderConfig = transformExpressionsInExpression(op.placeholderConfig, transform2, flags);
      }
      if (op.resolverFn !== null) {
        op.resolverFn = transformExpressionsInExpression(op.resolverFn, transform2, flags);
      }
      break;
    case OpKind.I18nMessage:
      for (const [placeholder, expr] of op.params) {
        op.params.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
      }
      for (const [placeholder, expr] of op.postprocessingParams) {
        op.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
      }
      break;
    case OpKind.DeferWhen:
      op.expr = transformExpressionsInExpression(op.expr, transform2, flags);
      break;
    case OpKind.StoreLet:
      op.value = transformExpressionsInExpression(op.value, transform2, flags);
      break;
    case OpKind.Advance:
    case OpKind.Container:
    case OpKind.ContainerEnd:
    case OpKind.ContainerStart:
    case OpKind.DeferOn:
    case OpKind.DisableBindings:
    case OpKind.Element:
    case OpKind.ElementEnd:
    case OpKind.ElementStart:
    case OpKind.EnableBindings:
    case OpKind.I18n:
    case OpKind.I18nApply:
    case OpKind.I18nContext:
    case OpKind.I18nEnd:
    case OpKind.I18nStart:
    case OpKind.IcuEnd:
    case OpKind.IcuStart:
    case OpKind.Namespace:
    case OpKind.Pipe:
    case OpKind.Projection:
    case OpKind.ProjectionDef:
    case OpKind.Template:
    case OpKind.Text:
    case OpKind.I18nAttributes:
    case OpKind.IcuPlaceholder:
    case OpKind.DeclareLet:
    case OpKind.SourceLocation:
    case OpKind.ConditionalCreate:
    case OpKind.ConditionalBranchCreate:
      break;
    default:
      throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op.kind]}`);
  }
}
function transformExpressionsInExpression(expr, transform2, flags) {
  if (expr instanceof ExpressionBase) {
    expr.transformInternalExpressions(transform2, flags);
  } else if (expr instanceof BinaryOperatorExpr) {
    expr.lhs = transformExpressionsInExpression(expr.lhs, transform2, flags);
    expr.rhs = transformExpressionsInExpression(expr.rhs, transform2, flags);
  } else if (expr instanceof UnaryOperatorExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof ReadPropExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
  } else if (expr instanceof ReadKeyExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
    expr.index = transformExpressionsInExpression(expr.index, transform2, flags);
  } else if (expr instanceof InvokeFunctionExpr) {
    expr.fn = transformExpressionsInExpression(expr.fn, transform2, flags);
    for (let i = 0; i < expr.args.length; i++) {
      expr.args[i] = transformExpressionsInExpression(expr.args[i], transform2, flags);
    }
  } else if (expr instanceof LiteralArrayExpr) {
    for (let i = 0; i < expr.entries.length; i++) {
      expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform2, flags);
    }
  } else if (expr instanceof LiteralMapExpr) {
    for (let i = 0; i < expr.entries.length; i++) {
      expr.entries[i].value = transformExpressionsInExpression(expr.entries[i].value, transform2, flags);
    }
  } else if (expr instanceof ConditionalExpr) {
    expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
    expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform2, flags);
    if (expr.falseCase !== null) {
      expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform2, flags);
    }
  } else if (expr instanceof TypeofExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof VoidExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof LocalizedString) {
    for (let i = 0; i < expr.expressions.length; i++) {
      expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform2, flags);
    }
  } else if (expr instanceof NotExpr) {
    expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
  } else if (expr instanceof TaggedTemplateLiteralExpr) {
    expr.tag = transformExpressionsInExpression(expr.tag, transform2, flags);
    expr.template.expressions = expr.template.expressions.map((e) => transformExpressionsInExpression(e, transform2, flags));
  } else if (expr instanceof ArrowFunctionExpr) {
    if (Array.isArray(expr.body)) {
      for (let i = 0; i < expr.body.length; i++) {
        transformExpressionsInStatement(expr.body[i], transform2, flags);
      }
    } else {
      expr.body = transformExpressionsInExpression(expr.body, transform2, flags);
    }
  } else if (expr instanceof WrappedNodeExpr) ;
  else if (expr instanceof TemplateLiteralExpr) {
    for (let i = 0; i < expr.expressions.length; i++) {
      expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform2, flags);
    }
  } else if (expr instanceof ParenthesizedExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof ReadVarExpr || expr instanceof ExternalExpr || expr instanceof LiteralExpr) ;
  else {
    throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);
  }
  return transform2(expr, flags);
}
function transformExpressionsInStatement(stmt, transform2, flags) {
  if (stmt instanceof ExpressionStatement) {
    stmt.expr = transformExpressionsInExpression(stmt.expr, transform2, flags);
  } else if (stmt instanceof ReturnStatement) {
    stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
  } else if (stmt instanceof DeclareVarStmt) {
    if (stmt.value !== void 0) {
      stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
    }
  } else if (stmt instanceof IfStmt) {
    stmt.condition = transformExpressionsInExpression(stmt.condition, transform2, flags);
    for (const caseStatement of stmt.trueCase) {
      transformExpressionsInStatement(caseStatement, transform2, flags);
    }
    for (const caseStatement of stmt.falseCase) {
      transformExpressionsInStatement(caseStatement, transform2, flags);
    }
  } else {
    throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);
  }
}
function isStringLiteral(expr) {
  return expr instanceof LiteralExpr && typeof expr.value === "string";
}
function isElementOrContainerOp(op) {
  return elementContainerOpKinds.has(op.kind);
}
function createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.ElementStart,
    xref,
    tag,
    handle: new SlotHandle(),
    attributes: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Template,
    xref,
    templateKind,
    attributes: null,
    tag,
    handle: new SlotHandle(),
    functionNameSuffix,
    decls: null,
    vars: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createConditionalCreateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.ConditionalCreate,
    xref,
    templateKind,
    attributes: null,
    tag,
    handle: new SlotHandle(),
    functionNameSuffix,
    decls: null,
    vars: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createConditionalBranchCreateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.ConditionalBranchCreate,
    xref,
    templateKind,
    attributes: null,
    tag,
    handle: new SlotHandle(),
    functionNameSuffix,
    decls: null,
    vars: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.RepeaterCreate,
    attributes: null,
    xref: primaryView,
    handle: new SlotHandle(),
    emptyView,
    track,
    trackByFn: null,
    trackByOps: null,
    tag,
    emptyTag,
    emptyAttributes: null,
    functionNameSuffix: "For",
    namespace: Namespace.HTML,
    nonBindable: false,
    localRefs: [],
    decls: null,
    vars: null,
    varNames,
    usesComponentInstance: false,
    i18nPlaceholder,
    emptyI18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP), TRAIT_CONSUMES_VARS), {
    numSlotsUsed: emptyView === null ? 2 : 3
  });
}
function createElementEndOp(xref, sourceSpan) {
  return __spreadValues({
    kind: OpKind.ElementEnd,
    xref,
    sourceSpan
  }, NEW_OP);
}
function createDisableBindingsOp(xref) {
  return __spreadValues({
    kind: OpKind.DisableBindings,
    xref
  }, NEW_OP);
}
function createEnableBindingsOp(xref) {
  return __spreadValues({
    kind: OpKind.EnableBindings,
    xref
  }, NEW_OP);
}
function createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Text,
    xref,
    handle: new SlotHandle(),
    initialValue,
    icuPlaceholder,
    sourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createListenerOp(target, targetSlot, name, tag, handlerOps, legacyAnimationPhase, eventTarget, hostListener, sourceSpan) {
  const handlerList = new OpList();
  handlerList.push(handlerOps);
  return __spreadValues({
    kind: OpKind.Listener,
    target,
    targetSlot,
    tag,
    hostListener,
    name,
    handlerOps: handlerList,
    handlerFnName: null,
    consumesDollarEvent: false,
    isLegacyAnimationListener: legacyAnimationPhase !== null,
    legacyAnimationPhase,
    eventTarget,
    sourceSpan
  }, NEW_OP);
}
function createTwoWayListenerOp(target, targetSlot, name, tag, handlerOps, sourceSpan) {
  const handlerList = new OpList();
  handlerList.push(handlerOps);
  return __spreadValues({
    kind: OpKind.TwoWayListener,
    target,
    targetSlot,
    tag,
    name,
    handlerOps: handlerList,
    handlerFnName: null,
    sourceSpan
  }, NEW_OP);
}
function createPipeOp(xref, slot, name) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Pipe,
    xref,
    handle: slot,
    name
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createNamespaceOp(namespace) {
  return __spreadValues({
    kind: OpKind.Namespace,
    active: namespace
  }, NEW_OP);
}
function createProjectionDefOp(def) {
  return __spreadValues({
    kind: OpKind.ProjectionDef,
    def
  }, NEW_OP);
}
function createProjectionOp(xref, selector, i18nPlaceholder, fallbackView, sourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues({
    kind: OpKind.Projection,
    xref,
    handle: new SlotHandle(),
    selector,
    i18nPlaceholder,
    fallbackView,
    projectionSlotIndex: 0,
    attributes: null,
    localRefs: [],
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT), {
    numSlotsUsed: fallbackView === null ? 1 : 2
  });
}
function createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {
  return __spreadValues({
    kind: OpKind.ExtractedAttribute,
    target,
    bindingKind,
    namespace,
    name,
    expression,
    i18nContext,
    i18nMessage,
    securityContext,
    trustedValueFn: null
  }, NEW_OP);
}
function createDeferOp(xref, main, mainSlot, ownResolverFn, resolverFn, sourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues({
    kind: OpKind.Defer,
    xref,
    handle: new SlotHandle(),
    mainView: main,
    mainSlot,
    loadingView: null,
    loadingSlot: null,
    loadingConfig: null,
    loadingMinimumTime: null,
    loadingAfterTime: null,
    placeholderView: null,
    placeholderSlot: null,
    placeholderConfig: null,
    placeholderMinimumTime: null,
    errorView: null,
    errorSlot: null,
    ownResolverFn,
    resolverFn,
    flags: null,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT), {
    numSlotsUsed: 2
  });
}
function createDeferOnOp(defer3, trigger, modifier, sourceSpan) {
  return __spreadValues({
    kind: OpKind.DeferOn,
    defer: defer3,
    trigger,
    modifier,
    sourceSpan
  }, NEW_OP);
}
function createDeclareLetOp(xref, declaredName, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.DeclareLet,
    xref,
    declaredName,
    sourceSpan,
    handle: new SlotHandle()
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {
  return __spreadValues({
    kind: OpKind.I18nMessage,
    xref,
    i18nContext,
    i18nBlock,
    message,
    messagePlaceholder,
    params,
    postprocessingParams,
    needsPostprocessing,
    subMessages: []
  }, NEW_OP);
}
function createI18nStartOp(xref, message, root, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.I18nStart,
    xref,
    handle: new SlotHandle(),
    root: root ?? xref,
    message,
    messageIndex: null,
    subTemplateIndex: null,
    context: null,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createI18nEndOp(xref, sourceSpan) {
  return __spreadValues({
    kind: OpKind.I18nEnd,
    xref,
    sourceSpan
  }, NEW_OP);
}
function createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {
  return __spreadValues({
    kind: OpKind.IcuStart,
    xref,
    message,
    messagePlaceholder,
    context: null,
    sourceSpan
  }, NEW_OP);
}
function createIcuEndOp(xref) {
  return __spreadValues({
    kind: OpKind.IcuEnd,
    xref
  }, NEW_OP);
}
function createIcuPlaceholderOp(xref, name, strings) {
  return __spreadValues({
    kind: OpKind.IcuPlaceholder,
    xref,
    name,
    strings,
    expressionPlaceholders: []
  }, NEW_OP);
}
function createI18nContextOp(contextKind, xref, i18nBlock, message, sourceSpan) {
  if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {
    throw new Error("AssertionError: i18nBlock must be provided for non-attribute contexts.");
  }
  return __spreadValues({
    kind: OpKind.I18nContext,
    contextKind,
    xref,
    i18nBlock,
    message,
    sourceSpan,
    params: /* @__PURE__ */ new Map(),
    postprocessingParams: /* @__PURE__ */ new Map()
  }, NEW_OP);
}
function createI18nAttributesOp(xref, handle, target) {
  return __spreadValues(__spreadValues({
    kind: OpKind.I18nAttributes,
    xref,
    handle,
    target,
    i18nAttributesConfig: null
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createSourceLocationOp(templatePath, locations) {
  return __spreadValues({
    kind: OpKind.SourceLocation,
    templatePath,
    locations
  }, NEW_OP);
}
function createDomPropertyOp(name, expression, isLegacyAnimationTrigger, i18nContext, securityContext, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.DomProperty,
    name,
    expression,
    isLegacyAnimationTrigger,
    i18nContext,
    securityContext,
    sanitizer: null,
    sourceSpan
  }, TRAIT_CONSUMES_VARS), NEW_OP);
}
function deleteAnyCasts(job) {
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      transformExpressionsInOp(op, removeAnys, VisitorContextFlag.None);
    }
  }
}
function removeAnys(e) {
  if (e instanceof InvokeFunctionExpr && e.fn instanceof LexicalReadExpr && e.fn.name === "$any") {
    if (e.args.length !== 1) {
      throw new Error("The $any builtin function expects exactly one argument.");
    }
    return e.args[0];
  }
  return e;
}
function applyI18nExpressions(job) {
  const i18nContexts = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.I18nContext) {
        i18nContexts.set(op.xref, op);
      }
    }
  }
  for (const unit of job.units) {
    for (const op of unit.update) {
      if (op.kind === OpKind.I18nExpression && needsApplication(i18nContexts, op)) {
        OpList.insertAfter(createI18nApplyOp(op.i18nOwner, op.handle, null), op);
      }
    }
  }
}
function needsApplication(i18nContexts, op) {
  if (op.next?.kind !== OpKind.I18nExpression) {
    return true;
  }
  const context2 = i18nContexts.get(op.context);
  const nextContext2 = i18nContexts.get(op.next.context);
  if (context2 === void 0) {
    throw new Error("AssertionError: expected an I18nContextOp to exist for the I18nExpressionOp's context");
  }
  if (nextContext2 === void 0) {
    throw new Error("AssertionError: expected an I18nContextOp to exist for the next I18nExpressionOp's context");
  }
  if (context2.i18nBlock !== null) {
    if (context2.i18nBlock !== nextContext2.i18nBlock) {
      return true;
    }
    return false;
  }
  if (op.i18nOwner !== op.next.i18nOwner) {
    return true;
  }
  return false;
}
function assignI18nSlotDependencies(job) {
  for (const unit of job.units) {
    let updateOp = unit.update.head;
    let i18nExpressionsInProgress = [];
    let state = null;
    for (const createOp of unit.create) {
      if (createOp.kind === OpKind.I18nStart) {
        state = {
          blockXref: createOp.xref,
          lastSlotConsumer: createOp.xref
        };
      } else if (createOp.kind === OpKind.I18nEnd) {
        for (const op of i18nExpressionsInProgress) {
          op.target = state.lastSlotConsumer;
          OpList.insertBefore(op, updateOp);
        }
        i18nExpressionsInProgress.length = 0;
        state = null;
      }
      if (hasConsumesSlotTrait(createOp)) {
        if (state !== null) {
          state.lastSlotConsumer = createOp.xref;
        }
        while (true) {
          if (updateOp.next === null) {
            break;
          }
          if (state !== null && updateOp.kind === OpKind.I18nExpression && updateOp.usage === I18nExpressionFor.I18nText && updateOp.i18nOwner === state.blockXref) {
            const opToRemove = updateOp;
            updateOp = updateOp.next;
            OpList.remove(opToRemove);
            i18nExpressionsInProgress.push(opToRemove);
            continue;
          }
          let hasDifferentTarget = false;
          if (hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {
            hasDifferentTarget = true;
          } else if (
            // Some expressions may consume slots as well (e.g. `storeLet`).
            updateOp.kind === OpKind.Statement || updateOp.kind === OpKind.Variable
          ) {
            visitExpressionsInOp(updateOp, (expr) => {
              if (!hasDifferentTarget && hasDependsOnSlotContextTrait(expr) && expr.target !== createOp.xref) {
                hasDifferentTarget = true;
              }
            });
          }
          if (hasDifferentTarget) {
            break;
          }
          updateOp = updateOp.next;
        }
      }
    }
  }
}
function attachSourceLocations(job) {
  if (!job.enableDebugLocations || job.relativeTemplatePath === null) {
    return;
  }
  for (const unit of job.units) {
    const locations = [];
    for (const op of unit.create) {
      if (op.kind === OpKind.ElementStart || op.kind === OpKind.Element) {
        const start = op.startSourceSpan.start;
        locations.push({
          targetSlot: op.handle,
          offset: start.offset,
          line: start.line,
          column: start.col
        });
      }
    }
    if (locations.length > 0) {
      unit.create.push(createSourceLocationOp(job.relativeTemplatePath, locations));
    }
  }
}
function createOpXrefMap(unit) {
  const map2 = /* @__PURE__ */ new Map();
  for (const op of unit.create) {
    if (!hasConsumesSlotTrait(op)) {
      continue;
    }
    map2.set(op.xref, op);
    if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {
      map2.set(op.emptyView, op);
    }
  }
  return map2;
}
function extractAttributes(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    for (const op of unit.ops()) {
      switch (op.kind) {
        case OpKind.Attribute:
          extractAttributeOp(unit, op, elements);
          break;
        case OpKind.Property:
          if (!op.isLegacyAnimationTrigger) {
            let bindingKind;
            if (op.i18nMessage !== null && op.templateKind === null) {
              bindingKind = BindingKind.I18n;
            } else if (op.isStructuralTemplateAttribute) {
              bindingKind = BindingKind.Template;
            } else {
              bindingKind = BindingKind.Property;
            }
            OpList.insertBefore(
              // Deliberately null i18nMessage value
              createExtractedAttributeOp(
                op.target,
                bindingKind,
                null,
                op.name,
                /* expression */
                null,
                /* i18nContext */
                null,
                /* i18nMessage */
                null,
                op.securityContext
              ),
              lookupElement$2(elements, op.target)
            );
          }
          break;
        case OpKind.TwoWayProperty:
          OpList.insertBefore(createExtractedAttributeOp(
            op.target,
            BindingKind.TwoWayProperty,
            null,
            op.name,
            /* expression */
            null,
            /* i18nContext */
            null,
            /* i18nMessage */
            null,
            op.securityContext
          ), lookupElement$2(elements, op.target));
          break;
        case OpKind.StyleProp:
        case OpKind.ClassProp:
          if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && op.expression instanceof EmptyExpr2) {
            OpList.insertBefore(createExtractedAttributeOp(
              op.target,
              BindingKind.Property,
              null,
              op.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.STYLE
            ), lookupElement$2(elements, op.target));
          }
          break;
        case OpKind.Listener:
          if (!op.isLegacyAnimationListener) {
            const extractedAttributeOp = createExtractedAttributeOp(
              op.target,
              BindingKind.Property,
              null,
              op.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.NONE
            );
            if (job.kind === CompilationJobKind.Host) {
              if (job.compatibility) {
                break;
              }
              unit.create.push(extractedAttributeOp);
            } else {
              OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));
            }
          }
          break;
        case OpKind.TwoWayListener:
          if (job.kind !== CompilationJobKind.Host) {
            const extractedAttributeOp = createExtractedAttributeOp(
              op.target,
              BindingKind.Property,
              null,
              op.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.NONE
            );
            OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));
          }
          break;
      }
    }
  }
}
function lookupElement$2(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function extractAttributeOp(unit, op, elements) {
  if (op.expression instanceof Interpolation2) {
    return;
  }
  let extractable = op.isTextAttribute || op.expression.isConstant();
  if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
    extractable &&= op.isTextAttribute;
  }
  if (extractable) {
    const extractedAttributeOp = createExtractedAttributeOp(op.target, op.isStructuralTemplateAttribute ? BindingKind.Template : BindingKind.Attribute, op.namespace, op.name, op.expression, op.i18nContext, op.i18nMessage, op.securityContext);
    if (unit.job.kind === CompilationJobKind.Host) {
      unit.create.push(extractedAttributeOp);
    } else {
      const ownerOp = lookupElement$2(elements, op.target);
      OpList.insertBefore(extractedAttributeOp, ownerOp);
    }
    OpList.remove(op);
  }
}
function lookupElement$1(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function specializeBindings(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (!isElementOrContainerOp(op)) {
        continue;
      }
      elements.set(op.xref, op);
    }
  }
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      if (op.kind !== OpKind.Binding) {
        continue;
      }
      switch (op.bindingKind) {
        case BindingKind.Attribute:
          if (op.name === "ngNonBindable") {
            OpList.remove(op);
            const target = lookupElement$1(elements, op.target);
            target.nonBindable = true;
          } else {
            const [namespace, name] = splitNsName(op.name);
            OpList.replace(op, createAttributeOp(op.target, namespace, name, op.expression, op.securityContext, op.isTextAttribute, op.isStructuralTemplateAttribute, op.templateKind, op.i18nMessage, op.sourceSpan));
          }
          break;
        case BindingKind.Property:
        case BindingKind.LegacyAnimation:
          if (job.kind === CompilationJobKind.Host) {
            OpList.replace(op, createDomPropertyOp(op.name, op.expression, op.bindingKind === BindingKind.LegacyAnimation, op.i18nContext, op.securityContext, op.sourceSpan));
          } else {
            OpList.replace(op, createPropertyOp(op.target, op.name, op.expression, op.bindingKind === BindingKind.LegacyAnimation, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));
          }
          break;
        case BindingKind.TwoWayProperty:
          if (!(op.expression instanceof Expression)) {
            throw new Error(`Expected value of two-way property binding "${op.name}" to be an expression`);
          }
          OpList.replace(op, createTwoWayPropertyOp(op.target, op.name, op.expression, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));
          break;
        case BindingKind.I18n:
        case BindingKind.ClassName:
        case BindingKind.StyleProperty:
          throw new Error(`Unhandled binding of kind ${BindingKind[op.bindingKind]}`);
      }
    }
  }
}
function chain(job) {
  for (const unit of job.units) {
    chainOperationsInList(unit.create);
    chainOperationsInList(unit.update);
  }
}
function chainOperationsInList(opList) {
  let chain2 = null;
  for (const op of opList) {
    if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement)) {
      chain2 = null;
      continue;
    }
    if (!(op.statement.expr instanceof InvokeFunctionExpr) || !(op.statement.expr.fn instanceof ExternalExpr)) {
      chain2 = null;
      continue;
    }
    const instruction = op.statement.expr.fn.value;
    if (!CHAIN_COMPATIBILITY.has(instruction)) {
      chain2 = null;
      continue;
    }
    if (chain2 !== null && CHAIN_COMPATIBILITY.get(chain2.instruction) === instruction && chain2.length < MAX_CHAIN_LENGTH) {
      const expression = chain2.expression.callFn(op.statement.expr.args, op.statement.expr.sourceSpan, op.statement.expr.pure);
      chain2.expression = expression;
      chain2.op.statement = expression.toStmt();
      chain2.length++;
      OpList.remove(op);
    } else {
      chain2 = {
        op,
        instruction,
        expression: op.statement.expr,
        length: 1
      };
    }
  }
}
function collapseSingletonInterpolations(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      const eligibleOpKind = op.kind === OpKind.Attribute || op.kind === OpKind.StyleProp || op.kind == OpKind.StyleMap || op.kind === OpKind.ClassMap;
      if (eligibleOpKind && op.expression instanceof Interpolation2 && op.expression.strings.length === 2 && op.expression.strings.every((s) => s === "")) {
        op.expression = op.expression.expressions[0];
      }
    }
  }
}
function generateConditionalExpressions(job) {
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      if (op.kind !== OpKind.Conditional) {
        continue;
      }
      let test;
      const defaultCase = op.conditions.findIndex((cond) => cond.expr === null);
      if (defaultCase >= 0) {
        const slot = op.conditions.splice(defaultCase, 1)[0].targetSlot;
        test = new SlotLiteralExpr(slot);
      } else {
        test = literal(-1);
      }
      let tmp = op.test == null ? null : new AssignTemporaryExpr(op.test, job.allocateXrefId());
      for (let i = op.conditions.length - 1; i >= 0; i--) {
        let conditionalCase = op.conditions[i];
        if (conditionalCase.expr === null) {
          continue;
        }
        if (tmp !== null) {
          const useTmp = i === 0 ? tmp : new ReadTemporaryExpr(tmp.xref);
          conditionalCase.expr = new BinaryOperatorExpr(BinaryOperator.Identical, useTmp, conditionalCase.expr);
        } else if (conditionalCase.alias !== null) {
          const caseExpressionTemporaryXref = job.allocateXrefId();
          conditionalCase.expr = new AssignTemporaryExpr(conditionalCase.expr, caseExpressionTemporaryXref);
          op.contextValue = new ReadTemporaryExpr(caseExpressionTemporaryXref);
        }
        test = new ConditionalExpr(conditionalCase.expr, new SlotLiteralExpr(conditionalCase.targetSlot), test);
      }
      op.processed = test;
      op.conditions = [];
    }
  }
}
function namespaceForKey(namespacePrefixKey) {
  const NAMESPACES = /* @__PURE__ */ new Map([
    ["svg", Namespace.SVG],
    ["math", Namespace.Math]
  ]);
  if (namespacePrefixKey === null) {
    return Namespace.HTML;
  }
  return NAMESPACES.get(namespacePrefixKey) ?? Namespace.HTML;
}
function keyForNamespace(namespace) {
  const NAMESPACES = /* @__PURE__ */ new Map([
    ["svg", Namespace.SVG],
    ["math", Namespace.Math]
  ]);
  for (const [k, n] of NAMESPACES.entries()) {
    if (n === namespace) {
      return k;
    }
  }
  return null;
}
function prefixWithNamespace(strippedTag, namespace) {
  if (namespace === Namespace.HTML) {
    return strippedTag;
  }
  return `:${keyForNamespace(namespace)}:${strippedTag}`;
}
function literalOrArrayLiteral(value) {
  if (Array.isArray(value)) {
    return literalArr(value.map(literalOrArrayLiteral));
  }
  return literal(value);
}
function collectElementConsts(job) {
  const allElementAttributes = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.ExtractedAttribute) {
        const attributes = allElementAttributes.get(op.target) || new ElementAttributes(job.compatibility);
        allElementAttributes.set(op.target, attributes);
        attributes.add(op.bindingKind, op.name, op.expression, op.namespace, op.trustedValueFn);
        OpList.remove(op);
      }
    }
  }
  if (job instanceof ComponentCompilationJob) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind == OpKind.Projection) {
          const attributes = allElementAttributes.get(op.xref);
          if (attributes !== void 0) {
            const attrArray = serializeAttributes(attributes);
            if (attrArray.entries.length > 0) {
              op.attributes = attrArray;
            }
          }
        } else if (isElementOrContainerOp(op)) {
          op.attributes = getConstIndex(job, allElementAttributes, op.xref);
          if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {
            op.emptyAttributes = getConstIndex(job, allElementAttributes, op.emptyView);
          }
        }
      }
    }
  } else if (job instanceof HostBindingCompilationJob) {
    for (const [xref, attributes] of allElementAttributes.entries()) {
      if (xref !== job.root.xref) {
        throw new Error(`An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`);
      }
      const attrArray = serializeAttributes(attributes);
      if (attrArray.entries.length > 0) {
        job.root.attributes = attrArray;
      }
    }
  }
}
function getConstIndex(job, allElementAttributes, xref) {
  const attributes = allElementAttributes.get(xref);
  if (attributes !== void 0) {
    const attrArray = serializeAttributes(attributes);
    if (attrArray.entries.length > 0) {
      return job.addConst(attrArray);
    }
  }
  return null;
}
function getAttributeNameLiterals(namespace, name) {
  const nameLiteral = literal(name);
  if (namespace) {
    return [literal(
      0
      /* core.AttributeMarker.NamespaceURI */
    ), literal(namespace), nameLiteral];
  }
  return [nameLiteral];
}
function serializeAttributes({ attributes, bindings, classes, i18n: i18n2, projectAs, styles, template: template2 }) {
  const attrArray = [...attributes];
  if (projectAs !== null) {
    const parsedR3Selector = parseSelectorToR3Selector(projectAs)[0];
    attrArray.push(literal(
      5
      /* core.AttributeMarker.ProjectAs */
    ), literalOrArrayLiteral(parsedR3Selector));
  }
  if (classes.length > 0) {
    attrArray.push(literal(
      1
      /* core.AttributeMarker.Classes */
    ), ...classes);
  }
  if (styles.length > 0) {
    attrArray.push(literal(
      2
      /* core.AttributeMarker.Styles */
    ), ...styles);
  }
  if (bindings.length > 0) {
    attrArray.push(literal(
      3
      /* core.AttributeMarker.Bindings */
    ), ...bindings);
  }
  if (template2.length > 0) {
    attrArray.push(literal(
      4
      /* core.AttributeMarker.Template */
    ), ...template2);
  }
  if (i18n2.length > 0) {
    attrArray.push(literal(
      6
      /* core.AttributeMarker.I18n */
    ), ...i18n2);
  }
  return literalArr(attrArray);
}
function convertI18nBindings(job) {
  const i18nAttributesByElem = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.I18nAttributes) {
        i18nAttributesByElem.set(op.target, op);
      }
    }
    for (const op of unit.update) {
      switch (op.kind) {
        case OpKind.Property:
        case OpKind.Attribute:
          if (op.i18nContext === null) {
            continue;
          }
          if (!(op.expression instanceof Interpolation2)) {
            continue;
          }
          const i18nAttributesForElem = i18nAttributesByElem.get(op.target);
          if (i18nAttributesForElem === void 0) {
            throw new Error("AssertionError: An i18n attribute binding instruction requires the owning element to have an I18nAttributes create instruction");
          }
          if (i18nAttributesForElem.target !== op.target) {
            throw new Error("AssertionError: Expected i18nAttributes target element to match binding target element");
          }
          const ops = [];
          for (let i = 0; i < op.expression.expressions.length; i++) {
            const expr = op.expression.expressions[i];
            if (op.expression.i18nPlaceholders.length !== op.expression.expressions.length) {
              throw new Error(`AssertionError: An i18n attribute binding instruction requires the same number of expressions and placeholders, but found ${op.expression.i18nPlaceholders.length} placeholders and ${op.expression.expressions.length} expressions`);
            }
            ops.push(createI18nExpressionOp(op.i18nContext, i18nAttributesForElem.target, i18nAttributesForElem.xref, i18nAttributesForElem.handle, expr, null, op.expression.i18nPlaceholders[i], I18nParamResolutionTime.Creation, I18nExpressionFor.I18nAttribute, op.name, op.sourceSpan));
          }
          OpList.replaceWithMany(op, ops);
          break;
      }
    }
  }
}
function createI18nContexts(job) {
  const attrContextByMessage = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      switch (op.kind) {
        case OpKind.Binding:
        case OpKind.Property:
        case OpKind.Attribute:
        case OpKind.ExtractedAttribute:
          if (op.i18nMessage === null) {
            continue;
          }
          if (!attrContextByMessage.has(op.i18nMessage)) {
            const i18nContext = createI18nContextOp(I18nContextKind.Attr, job.allocateXrefId(), null, op.i18nMessage, null);
            unit.create.push(i18nContext);
            attrContextByMessage.set(op.i18nMessage, i18nContext.xref);
          }
          op.i18nContext = attrContextByMessage.get(op.i18nMessage);
          break;
      }
    }
  }
  const blockContextByI18nBlock = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          if (op.xref === op.root) {
            const contextOp = createI18nContextOp(I18nContextKind.RootI18n, job.allocateXrefId(), op.xref, op.message, null);
            unit.create.push(contextOp);
            op.context = contextOp.xref;
            blockContextByI18nBlock.set(op.xref, contextOp);
          }
          break;
      }
    }
  }
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.I18nStart && op.xref !== op.root) {
        const rootContext = blockContextByI18nBlock.get(op.root);
        if (rootContext === void 0) {
          throw Error("AssertionError: Root i18n block i18n context should have been created.");
        }
        op.context = rootContext.xref;
        blockContextByI18nBlock.set(op.xref, rootContext);
      }
    }
  }
  let currentI18nOp = null;
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          currentI18nOp = op;
          break;
        case OpKind.I18nEnd:
          currentI18nOp = null;
          break;
        case OpKind.IcuStart:
          if (currentI18nOp === null) {
            throw Error("AssertionError: Unexpected ICU outside of an i18n block.");
          }
          if (op.message.id !== currentI18nOp.message.id) {
            const contextOp = createI18nContextOp(I18nContextKind.Icu, job.allocateXrefId(), currentI18nOp.root, op.message, null);
            unit.create.push(contextOp);
            op.context = contextOp.xref;
          } else {
            op.context = currentI18nOp.context;
            blockContextByI18nBlock.get(currentI18nOp.xref).contextKind = I18nContextKind.Icu;
          }
          break;
      }
    }
  }
}
function deduplicateTextBindings(job) {
  const seen = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.update.reversed()) {
      if (op.kind === OpKind.Binding && op.isTextAttribute) {
        const seenForElement = seen.get(op.target) || /* @__PURE__ */ new Set();
        if (seenForElement.has(op.name)) {
          if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
            if (op.name === "style" || op.name === "class") {
              OpList.remove(op);
            }
          }
        }
        seenForElement.add(op.name);
        seen.set(op.target, seenForElement);
      }
    }
  }
}
function configureDeferInstructions(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind !== OpKind.Defer) {
        continue;
      }
      if (op.placeholderMinimumTime !== null) {
        op.placeholderConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.placeholderMinimumTime]));
      }
      if (op.loadingMinimumTime !== null || op.loadingAfterTime !== null) {
        op.loadingConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.loadingMinimumTime, op.loadingAfterTime]));
      }
    }
  }
}
function resolveDeferTargetNames(job) {
  const scopes = /* @__PURE__ */ new Map();
  function getScopeForView2(view) {
    if (scopes.has(view.xref)) {
      return scopes.get(view.xref);
    }
    const scope = new Scope$1();
    for (const op of view.create) {
      if (!isElementOrContainerOp(op) || op.localRefs === null) {
        continue;
      }
      if (!Array.isArray(op.localRefs)) {
        throw new Error("LocalRefs were already processed, but were needed to resolve defer targets.");
      }
      for (const ref of op.localRefs) {
        if (ref.target !== "") {
          continue;
        }
        scope.targets.set(ref.name, { xref: op.xref, slot: op.handle });
      }
    }
    scopes.set(view.xref, scope);
    return scope;
  }
  function resolveTrigger(deferOwnerView, op, placeholderView) {
    switch (op.trigger.kind) {
      case DeferTriggerKind.Idle:
      case DeferTriggerKind.Never:
      case DeferTriggerKind.Immediate:
      case DeferTriggerKind.Timer:
        return;
      case DeferTriggerKind.Hover:
      case DeferTriggerKind.Interaction:
      case DeferTriggerKind.Viewport:
        if (op.trigger.targetName === null) {
          if (placeholderView === null) {
            throw new Error("defer on trigger with no target name must have a placeholder block");
          }
          const placeholder = job.views.get(placeholderView);
          if (placeholder == void 0) {
            throw new Error("AssertionError: could not find placeholder view for defer on trigger");
          }
          for (const placeholderOp of placeholder.create) {
            if (hasConsumesSlotTrait(placeholderOp) && (isElementOrContainerOp(placeholderOp) || placeholderOp.kind === OpKind.Projection)) {
              op.trigger.targetXref = placeholderOp.xref;
              op.trigger.targetView = placeholderView;
              op.trigger.targetSlotViewSteps = -1;
              op.trigger.targetSlot = placeholderOp.handle;
              return;
            }
          }
          return;
        }
        let view = placeholderView !== null ? job.views.get(placeholderView) : deferOwnerView;
        let step = placeholderView !== null ? -1 : 0;
        while (view !== null) {
          const scope = getScopeForView2(view);
          if (scope.targets.has(op.trigger.targetName)) {
            const { xref, slot } = scope.targets.get(op.trigger.targetName);
            op.trigger.targetXref = xref;
            op.trigger.targetView = view.xref;
            op.trigger.targetSlotViewSteps = step;
            op.trigger.targetSlot = slot;
            return;
          }
          view = view.parent !== null ? job.views.get(view.parent) : null;
          step++;
        }
        break;
      default:
        throw new Error(`Trigger kind ${op.trigger.kind} not handled`);
    }
  }
  for (const unit of job.units) {
    const defers = /* @__PURE__ */ new Map();
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.Defer:
          defers.set(op.xref, op);
          break;
        case OpKind.DeferOn:
          const deferOp = defers.get(op.defer);
          resolveTrigger(unit, op, op.modifier === "hydrate" ? deferOp.mainView : deferOp.placeholderView);
          break;
      }
    }
  }
}
function collapseEmptyInstructions(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      const opReplacements = REPLACEMENTS.get(op.kind);
      if (opReplacements === void 0) {
        continue;
      }
      const [startKind, mergedKind] = opReplacements;
      let prevOp = op.prev;
      while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {
        prevOp = prevOp.prev;
      }
      if (prevOp !== null && prevOp.kind === startKind) {
        prevOp.kind = mergedKind;
        OpList.remove(op);
      }
    }
  }
}
function expandSafeReads(job) {
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      transformExpressionsInOp(op, (e) => safeTransform(e, { job }), VisitorContextFlag.None);
      transformExpressionsInOp(op, ternaryTransform, VisitorContextFlag.None);
    }
  }
}
function needsTemporaryInSafeAccess(e) {
  if (e instanceof UnaryOperatorExpr) {
    return needsTemporaryInSafeAccess(e.expr);
  } else if (e instanceof BinaryOperatorExpr) {
    return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);
  } else if (e instanceof ConditionalExpr) {
    if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase))
      return true;
    return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);
  } else if (e instanceof NotExpr) {
    return needsTemporaryInSafeAccess(e.condition);
  } else if (e instanceof AssignTemporaryExpr) {
    return needsTemporaryInSafeAccess(e.expr);
  } else if (e instanceof ReadPropExpr) {
    return needsTemporaryInSafeAccess(e.receiver);
  } else if (e instanceof ReadKeyExpr) {
    return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);
  } else if (e instanceof ParenthesizedExpr) {
    return needsTemporaryInSafeAccess(e.expr);
  }
  return e instanceof InvokeFunctionExpr || e instanceof LiteralArrayExpr || e instanceof LiteralMapExpr || e instanceof SafeInvokeFunctionExpr || e instanceof PipeBindingExpr;
}
function temporariesIn(e) {
  const temporaries = /* @__PURE__ */ new Set();
  transformExpressionsInExpression(e, (e2) => {
    if (e2 instanceof AssignTemporaryExpr) {
      temporaries.add(e2.xref);
    }
    return e2;
  }, VisitorContextFlag.None);
  return temporaries;
}
function eliminateTemporaryAssignments(e, tmps, ctx) {
  transformExpressionsInExpression(e, (e2) => {
    if (e2 instanceof AssignTemporaryExpr && tmps.has(e2.xref)) {
      const read = new ReadTemporaryExpr(e2.xref);
      return ctx.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder ? new AssignTemporaryExpr(read, read.xref) : read;
    }
    return e2;
  }, VisitorContextFlag.None);
  return e;
}
function safeTernaryWithTemporary(guard, body, ctx) {
  let result;
  if (needsTemporaryInSafeAccess(guard)) {
    const xref = ctx.job.allocateXrefId();
    result = [new AssignTemporaryExpr(guard, xref), new ReadTemporaryExpr(xref)];
  } else {
    result = [guard, guard.clone()];
    eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);
  }
  return new SafeTernaryExpr(result[0], body(result[1]));
}
function isSafeAccessExpression(e) {
  return e instanceof SafePropertyReadExpr || e instanceof SafeKeyedReadExpr || e instanceof SafeInvokeFunctionExpr;
}
function isUnsafeAccessExpression(e) {
  return e instanceof ReadPropExpr || e instanceof ReadKeyExpr || e instanceof InvokeFunctionExpr;
}
function isAccessExpression(e) {
  return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);
}
function deepestSafeTernary(e) {
  if (isAccessExpression(e) && e.receiver instanceof SafeTernaryExpr) {
    let st = e.receiver;
    while (st.expr instanceof SafeTernaryExpr) {
      st = st.expr;
    }
    return st;
  }
  return null;
}
function safeTransform(e, ctx) {
  if (!isAccessExpression(e)) {
    return e;
  }
  const dst = deepestSafeTernary(e);
  if (dst) {
    if (e instanceof InvokeFunctionExpr) {
      dst.expr = dst.expr.callFn(e.args);
      return e.receiver;
    }
    if (e instanceof ReadPropExpr) {
      dst.expr = dst.expr.prop(e.name);
      return e.receiver;
    }
    if (e instanceof ReadKeyExpr) {
      dst.expr = dst.expr.key(e.index);
      return e.receiver;
    }
    if (e instanceof SafeInvokeFunctionExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.callFn(e.args), ctx);
      return e.receiver;
    }
    if (e instanceof SafePropertyReadExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.prop(e.name), ctx);
      return e.receiver;
    }
    if (e instanceof SafeKeyedReadExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.key(e.index), ctx);
      return e.receiver;
    }
  } else {
    if (e instanceof SafeInvokeFunctionExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.callFn(e.args), ctx);
    }
    if (e instanceof SafePropertyReadExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.prop(e.name), ctx);
    }
    if (e instanceof SafeKeyedReadExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.key(e.index), ctx);
    }
  }
  return e;
}
function ternaryTransform(e) {
  if (!(e instanceof SafeTernaryExpr)) {
    return e;
  }
  return new ParenthesizedExpr(new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.Equals, e.guard, NULL_EXPR), NULL_EXPR, e.expr));
}
function extractI18nMessages(job) {
  const i18nMessagesByContext = /* @__PURE__ */ new Map();
  const i18nBlocks = /* @__PURE__ */ new Map();
  const i18nContexts = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nContext:
          const i18nMessageOp = createI18nMessage(job, op);
          unit.create.push(i18nMessageOp);
          i18nMessagesByContext.set(op.xref, i18nMessageOp);
          i18nContexts.set(op.xref, op);
          break;
        case OpKind.I18nStart:
          i18nBlocks.set(op.xref, op);
          break;
      }
    }
  }
  let currentIcu = null;
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.IcuStart:
          currentIcu = op;
          OpList.remove(op);
          const icuContext = i18nContexts.get(op.context);
          if (icuContext.contextKind !== I18nContextKind.Icu) {
            continue;
          }
          const i18nBlock = i18nBlocks.get(icuContext.i18nBlock);
          if (i18nBlock.context === icuContext.xref) {
            continue;
          }
          const rootI18nBlock = i18nBlocks.get(i18nBlock.root);
          const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context);
          if (rootMessage === void 0) {
            throw Error("AssertionError: ICU sub-message should belong to a root message.");
          }
          const subMessage = i18nMessagesByContext.get(icuContext.xref);
          subMessage.messagePlaceholder = op.messagePlaceholder;
          rootMessage.subMessages.push(subMessage.xref);
          break;
        case OpKind.IcuEnd:
          currentIcu = null;
          OpList.remove(op);
          break;
        case OpKind.IcuPlaceholder:
          if (currentIcu === null || currentIcu.context == null) {
            throw Error("AssertionError: Unexpected ICU placeholder outside of i18n context");
          }
          const msg = i18nMessagesByContext.get(currentIcu.context);
          msg.postprocessingParams.set(op.name, literal(formatIcuPlaceholder(op)));
          OpList.remove(op);
          break;
      }
    }
  }
}
function createI18nMessage(job, context2, messagePlaceholder) {
  let formattedParams = formatParams(context2.params);
  const formattedPostprocessingParams = formatParams(context2.postprocessingParams);
  let needsPostprocessing = [...context2.params.values()].some((v) => v.length > 1);
  return createI18nMessageOp(job.allocateXrefId(), context2.xref, context2.i18nBlock, context2.message, null, formattedParams, formattedPostprocessingParams, needsPostprocessing);
}
function formatIcuPlaceholder(op) {
  if (op.strings.length !== op.expressionPlaceholders.length + 1) {
    throw Error(`AssertionError: Invalid ICU placeholder with ${op.strings.length} strings and ${op.expressionPlaceholders.length} expressions`);
  }
  const values = op.expressionPlaceholders.map(formatValue2);
  return op.strings.flatMap((str, i) => [str, values[i] || ""]).join("");
}
function formatParams(params) {
  const formattedParams = /* @__PURE__ */ new Map();
  for (const [placeholder, placeholderValues] of params) {
    const serializedValues = formatParamValues(placeholderValues);
    if (serializedValues !== null) {
      formattedParams.set(placeholder, literal(serializedValues));
    }
  }
  return formattedParams;
}
function formatParamValues(values) {
  if (values.length === 0) {
    return null;
  }
  const serializedValues = values.map((value) => formatValue2(value));
  return serializedValues.length === 1 ? serializedValues[0] : `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;
}
function formatValue2(value) {
  if (value.flags & I18nParamValueFlags.ElementTag && value.flags & I18nParamValueFlags.TemplateTag) {
    if (typeof value.value !== "object") {
      throw Error("AssertionError: Expected i18n param value to have an element and template slot");
    }
    const elementValue = formatValue2(__spreadProps(__spreadValues({}, value), {
      value: value.value.element,
      flags: value.flags & ~I18nParamValueFlags.TemplateTag
    }));
    const templateValue = formatValue2(__spreadProps(__spreadValues({}, value), {
      value: value.value.template,
      flags: value.flags & ~I18nParamValueFlags.ElementTag
    }));
    if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
      return `${templateValue}${elementValue}${templateValue}`;
    }
    return value.flags & I18nParamValueFlags.CloseTag ? `${elementValue}${templateValue}` : `${templateValue}${elementValue}`;
  }
  if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
    return `${formatValue2(__spreadProps(__spreadValues({}, value), {
      flags: value.flags & ~I18nParamValueFlags.CloseTag
    }))}${formatValue2(__spreadProps(__spreadValues({}, value), { flags: value.flags & ~I18nParamValueFlags.OpenTag }))}`;
  }
  if (value.flags === I18nParamValueFlags.None) {
    return `${value.value}`;
  }
  let tagMarker = "";
  let closeMarker = "";
  if (value.flags & I18nParamValueFlags.ElementTag) {
    tagMarker = ELEMENT_MARKER2;
  } else if (value.flags & I18nParamValueFlags.TemplateTag) {
    tagMarker = TEMPLATE_MARKER;
  }
  if (tagMarker !== "") {
    closeMarker = value.flags & I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : "";
  }
  const context2 = value.subTemplateIndex === null ? "" : `${CONTEXT_MARKER}${value.subTemplateIndex}`;
  return `${ESCAPE$1}${closeMarker}${tagMarker}${value.value}${context2}${ESCAPE$1}`;
}
function generateAdvance(job) {
  for (const unit of job.units) {
    const slotMap = /* @__PURE__ */ new Map();
    for (const op of unit.create) {
      if (!hasConsumesSlotTrait(op)) {
        continue;
      } else if (op.handle.slot === null) {
        throw new Error(`AssertionError: expected slots to have been allocated before generating advance() calls`);
      }
      slotMap.set(op.xref, op.handle.slot);
    }
    let slotContext = 0;
    for (const op of unit.update) {
      let consumer = null;
      if (hasDependsOnSlotContextTrait(op)) {
        consumer = op;
      } else {
        visitExpressionsInOp(op, (expr) => {
          if (consumer === null && hasDependsOnSlotContextTrait(expr)) {
            consumer = expr;
          }
        });
      }
      if (consumer === null) {
        continue;
      }
      if (!slotMap.has(consumer.target)) {
        throw new Error(`AssertionError: reference to unknown slot for target ${consumer.target}`);
      }
      const slot = slotMap.get(consumer.target);
      if (slotContext !== slot) {
        const delta = slot - slotContext;
        if (delta < 0) {
          throw new Error(`AssertionError: slot counter should never need to move backwards`);
        }
        OpList.insertBefore(createAdvanceOp(delta, consumer.sourceSpan), op);
        slotContext = slot;
      }
    }
  }
}
function generateLocalLetReferences(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      if (op.kind !== OpKind.StoreLet) {
        continue;
      }
      const variable2 = {
        kind: SemanticVariableKind.Identifier,
        name: null,
        identifier: op.declaredName,
        local: true
      };
      OpList.replace(op, createVariableOp(job.allocateXrefId(), variable2, new StoreLetExpr(op.target, op.value, op.sourceSpan), VariableFlags.None));
    }
  }
}
function generateProjectionDefs(job) {
  const share2 = job.compatibility === CompatibilityMode.TemplateDefinitionBuilder;
  const selectors = [];
  let projectionSlotIndex = 0;
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.Projection) {
        selectors.push(op.selector);
        op.projectionSlotIndex = projectionSlotIndex++;
      }
    }
  }
  if (selectors.length > 0) {
    let defExpr = null;
    if (selectors.length > 1 || selectors[0] !== "*") {
      const def = selectors.map((s) => s === "*" ? s : parseSelectorToR3Selector(s));
      defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share2);
    }
    job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share2);
    job.root.create.prepend([createProjectionDefOp(defExpr)]);
  }
}
function generateVariables(job) {
  recursivelyProcessView(
    job.root,
    /* there is no parent scope for the root view */
    null
  );
}
function recursivelyProcessView(view, parentScope) {
  const scope = getScopeForView(view, parentScope);
  for (const op of view.create) {
    switch (op.kind) {
      case OpKind.ConditionalCreate:
      case OpKind.ConditionalBranchCreate:
      case OpKind.Template:
        recursivelyProcessView(view.job.views.get(op.xref), scope);
        break;
      case OpKind.Projection:
        if (op.fallbackView !== null) {
          recursivelyProcessView(view.job.views.get(op.fallbackView), scope);
        }
        break;
      case OpKind.RepeaterCreate:
        recursivelyProcessView(view.job.views.get(op.xref), scope);
        if (op.emptyView) {
          recursivelyProcessView(view.job.views.get(op.emptyView), scope);
        }
        if (op.trackByOps !== null) {
          op.trackByOps.prepend(generateVariablesInScopeForView(view, scope, false));
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        op.handlerOps.prepend(generateVariablesInScopeForView(view, scope, true));
        break;
    }
  }
  view.update.prepend(generateVariablesInScopeForView(view, scope, false));
}
function getScopeForView(view, parent) {
  const scope = {
    view: view.xref,
    viewContextVariable: {
      kind: SemanticVariableKind.Context,
      name: null,
      view: view.xref
    },
    contextVariables: /* @__PURE__ */ new Map(),
    aliases: view.aliases,
    references: [],
    letDeclarations: [],
    parent
  };
  for (const identifier of view.contextVariables.keys()) {
    scope.contextVariables.set(identifier, {
      kind: SemanticVariableKind.Identifier,
      name: null,
      identifier,
      local: false
    });
  }
  for (const op of view.create) {
    switch (op.kind) {
      case OpKind.ElementStart:
      case OpKind.ConditionalCreate:
      case OpKind.ConditionalBranchCreate:
      case OpKind.Template:
        if (!Array.isArray(op.localRefs)) {
          throw new Error(`AssertionError: expected localRefs to be an array`);
        }
        for (let offset = 0; offset < op.localRefs.length; offset++) {
          scope.references.push({
            name: op.localRefs[offset].name,
            targetId: op.xref,
            targetSlot: op.handle,
            offset,
            variable: {
              kind: SemanticVariableKind.Identifier,
              name: null,
              identifier: op.localRefs[offset].name,
              local: false
            }
          });
        }
        break;
      case OpKind.DeclareLet:
        scope.letDeclarations.push({
          targetId: op.xref,
          targetSlot: op.handle,
          variable: {
            kind: SemanticVariableKind.Identifier,
            name: null,
            identifier: op.declaredName,
            local: false
          }
        });
        break;
    }
  }
  return scope;
}
function generateVariablesInScopeForView(view, scope, isListener) {
  const newOps = [];
  if (scope.view !== view.xref) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new NextContextExpr(), VariableFlags.None));
  }
  const scopeView = view.job.views.get(scope.view);
  for (const [name, value] of scopeView.contextVariables) {
    const context2 = new ContextExpr(scope.view);
    const variable2 = value === CTX_REF ? context2 : new ReadPropExpr(context2, value);
    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name), variable2, VariableFlags.None));
  }
  for (const alias of scopeView.aliases) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), alias, alias.expression.clone(), VariableFlags.AlwaysInline));
  }
  for (const ref of scope.references) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), ref.variable, new ReferenceExpr(ref.targetId, ref.targetSlot, ref.offset), VariableFlags.None));
  }
  if (scope.view !== view.xref || isListener) {
    for (const decl of scope.letDeclarations) {
      newOps.push(createVariableOp(view.job.allocateXrefId(), decl.variable, new ContextLetReferenceExpr(decl.targetId, decl.targetSlot), VariableFlags.None));
    }
  }
  if (scope.parent !== null) {
    newOps.push(...generateVariablesInScopeForView(view, scope.parent, false));
  }
  return newOps;
}
function collectConstExpressions(job) {
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      transformExpressionsInOp(op, (expr) => {
        if (!(expr instanceof ConstCollectedExpr)) {
          return expr;
        }
        return literal(job.addConst(expr.expr));
      }, VisitorContextFlag.None);
    }
  }
}
function parseHostStyleProperties(job) {
  for (const op of job.root.update) {
    if (!(op.kind === OpKind.Binding && op.bindingKind === BindingKind.Property)) {
      continue;
    }
    if (op.name.endsWith(BANG_IMPORTANT)) {
      op.name = op.name.substring(0, op.name.length - BANG_IMPORTANT.length);
    }
    if (op.name.startsWith(STYLE_DOT)) {
      op.bindingKind = BindingKind.StyleProperty;
      op.name = op.name.substring(STYLE_DOT.length);
      if (!isCssCustomProperty(op.name)) {
        op.name = hyphenate$1(op.name);
      }
      const { property: property2, suffix } = parseProperty(op.name);
      op.name = property2;
      op.unit = suffix;
    } else if (op.name.startsWith(STYLE_BANG)) {
      op.bindingKind = BindingKind.StyleProperty;
      op.name = "style";
    } else if (op.name.startsWith(CLASS_DOT)) {
      op.bindingKind = BindingKind.ClassName;
      op.name = parseProperty(op.name.substring(CLASS_DOT.length)).property;
    } else if (op.name.startsWith(CLASS_BANG)) {
      op.bindingKind = BindingKind.ClassName;
      op.name = parseProperty(op.name.substring(CLASS_BANG.length)).property;
    }
  }
}
function isCssCustomProperty(name) {
  return name.startsWith("--");
}
function hyphenate$1(value) {
  return value.replace(/[a-z][A-Z]/g, (v) => {
    return v.charAt(0) + "-" + v.charAt(1);
  }).toLowerCase();
}
function parseProperty(name) {
  const overrideIndex = name.indexOf("!important");
  if (overrideIndex !== -1) {
    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : "";
  }
  let suffix = null;
  let property2 = name;
  const unitIndex = name.lastIndexOf(".");
  if (unitIndex > 0) {
    suffix = name.slice(unitIndex + 1);
    property2 = name.substring(0, unitIndex);
  }
  return { property: property2, suffix };
}
function mapLiteral(obj, quoted = false) {
  return literalMap(Object.keys(obj).map((key) => ({
    key,
    quoted,
    value: obj[key]
  })));
}
function serializeIcuNode(icu) {
  return icu.visit(serializer);
}
function visitAll(visitor, nodes, context2 = null) {
  const result = [];
  const visit = visitor.visit ? (ast) => visitor.visit(ast, context2) || ast.visit(visitor, context2) : (ast) => ast.visit(visitor, context2);
  nodes.forEach((ast) => {
    const astResult = visit(ast);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
function tokenize(source, url, getTagDefinition, options = {}) {
  const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);
  tokenizer.tokenize();
  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);
}
function _unexpectedCharacterErrorMsg(charCode) {
  const char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
  return `Unexpected character "${char}"`;
}
function _unknownEntityErrorMsg(entitySrc) {
  return `Unknown entity "${entitySrc}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
}
function _unparsableEntityErrorMsg(type, entityStr) {
  return `Unable to parse entity "${entityStr}" - ${type} character reference entities must end with ";"`;
}
function isNotWhitespace(code) {
  return !isWhitespace(code) || code === $EOF;
}
function isNameEnd(code) {
  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;
}
function isPrefixEnd(code) {
  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);
}
function isExpansionCaseStart(peek) {
  return peek !== $RBRACE;
}
function compareCharCodeCaseInsensitive(code1, code2) {
  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
  return code >= $a && code <= $z ? code - $a + $A : code;
}
function isBlockNameChar(code) {
  return isAsciiLetter(code) || isDigit(code) || code === $_;
}
function isBlockParameterChar(code) {
  return code !== $SEMICOLON && isNotWhitespace(code);
}
function isSelectorlessNameStart(code) {
  return code === $_ || code >= $A && code <= $Z;
}
function isSelectorlessNameChar(code) {
  return isAsciiLetter(code) || isDigit(code) || code === $_;
}
function isAttributeTerminator(code) {
  return code === $SLASH || code === $GT || code === $LT || code === $EOF;
}
function mergeTextTokens(srcTokens) {
  const dstTokens = [];
  let lastDstToken = void 0;
  for (let i = 0; i < srcTokens.length; i++) {
    const token = srcTokens[i];
    if (lastDstToken && lastDstToken.type === 5 && token.type === 5 || lastDstToken && lastDstToken.type === 16 && token.type === 16) {
      lastDstToken.parts[0] += token.parts[0];
      lastDstToken.sourceSpan.end = token.sourceSpan.end;
    } else {
      lastDstToken = token;
      dstTokens.push(lastDstToken);
    }
  }
  return dstTokens;
}
function lastOnStack(stack, element2) {
  return stack.length > 0 && stack[stack.length - 1] === element2;
}
function decodeEntity(match, entity) {
  if (NAMED_ENTITIES[entity] !== void 0) {
    return NAMED_ENTITIES[entity] || match;
  }
  if (/^#x[a-f0-9]+$/i.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(2), 16));
  }
  if (/^#\d+$/.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(1), 10));
  }
  return match;
}
function hasPreserveWhitespacesAttr(attrs) {
  return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);
}
function replaceNgsp2(value) {
  return value.replace(new RegExp(NGSP_UNICODE, "g"), " ");
}
function trimLeadingWhitespace(token, context2) {
  if (token.type !== 5)
    return token;
  const isFirstTokenInTag = !context2?.prev;
  if (!isFirstTokenInTag)
    return token;
  return transformTextToken(token, (text2) => text2.trimStart());
}
function trimTrailingWhitespace(token, context2) {
  if (token.type !== 5)
    return token;
  const isLastTokenInTag = !context2?.next;
  if (!isLastTokenInTag)
    return token;
  return transformTextToken(token, (text2) => text2.trimEnd());
}
function trimLeadingAndTrailingWhitespace(text2, context2) {
  const isFirstTokenInTag = !context2?.prev;
  const isLastTokenInTag = !context2?.next;
  const maybeTrimmedStart = isFirstTokenInTag ? text2.trimStart() : text2;
  const maybeTrimmed = isLastTokenInTag ? maybeTrimmedStart.trimEnd() : maybeTrimmedStart;
  return maybeTrimmed;
}
function createWhitespaceProcessedTextToken({ type, parts, sourceSpan }) {
  return { type, parts: [processWhitespace(parts[0])], sourceSpan };
}
function transformTextToken({ type, parts, sourceSpan }, transform2) {
  return { type, parts: [transform2(parts[0])], sourceSpan };
}
function processWhitespace(text2) {
  return replaceNgsp2(text2).replace(WS_REPLACE_REGEXP, " ");
}
function visitAllWithSiblings(visitor, nodes) {
  const result = [];
  nodes.forEach((ast, i) => {
    const context2 = { prev: nodes[i - 1], next: nodes[i + 1] };
    const astResult = ast.visit(visitor, context2);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
function newCharacterToken(index, end, code) {
  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));
}
function newIdentifierToken(index, end, text2) {
  return new Token(index, end, TokenType.Identifier, 0, text2);
}
function newPrivateIdentifierToken(index, end, text2) {
  return new Token(index, end, TokenType.PrivateIdentifier, 0, text2);
}
function newKeywordToken(index, end, text2) {
  return new Token(index, end, TokenType.Keyword, 0, text2);
}
function newOperatorToken(index, end, text2) {
  return new Token(index, end, TokenType.Operator, 0, text2);
}
function newNumberToken(index, end, n) {
  return new Token(index, end, TokenType.Number, n, "");
}
function newErrorToken(index, end, message) {
  return new Token(index, end, TokenType.Error, 0, message);
}
function isIdentifierStart(code) {
  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
function isIdentifierPart(code) {
  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
function isExponentStart(code) {
  return code == $e || code == $E;
}
function isExponentSign(code) {
  return code == $MINUS || code == $PLUS;
}
function unescape(code) {
  switch (code) {
    case $n:
      return $LF;
    case $f:
      return $FF;
    case $r:
      return $CR;
    case $t:
      return $TAB;
    case $v:
      return $VTAB;
    default:
      return code;
  }
}
function parseIntAutoRadix(text2) {
  const result = parseInt(text2);
  if (isNaN(result)) {
    throw new Error("Invalid integer literal when parsing " + text2);
  }
  return result;
}
function getLocation(span) {
  return span.start.toString() || "(unknown)";
}
function getParseError(message, input2, locationText, parseSourceSpan) {
  if (locationText.length > 0) {
    locationText = ` ${locationText} `;
  }
  const location2 = getLocation(parseSourceSpan);
  const error = `Parser Error: ${message}${locationText}[${input2}] in ${location2}`;
  return new ParseError(parseSourceSpan, error);
}
function getIndexMapForOriginalTemplate(interpolatedTokens) {
  let offsetMap = /* @__PURE__ */ new Map();
  let consumedInOriginalTemplate = 0;
  let consumedInInput = 0;
  let tokenIndex = 0;
  while (tokenIndex < interpolatedTokens.length) {
    const currentToken = interpolatedTokens[tokenIndex];
    if (currentToken.type === 9) {
      const [decoded, encoded] = currentToken.parts;
      consumedInOriginalTemplate += encoded.length;
      consumedInInput += decoded.length;
    } else {
      const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);
      consumedInInput += lengthOfParts;
      consumedInOriginalTemplate += lengthOfParts;
    }
    offsetMap.set(consumedInInput, consumedInOriginalTemplate);
    tokenIndex++;
  }
  return offsetMap;
}
function serialize(expression) {
  return expression.visit(new SerializeExpressionVisitor());
}
function zip(left, right) {
  if (left.length !== right.length)
    throw new Error("Array lengths must match");
  return left.map((l, i) => [l, right[i]]);
}
function interleave(left, right) {
  const result = [];
  for (let index = 0; index < Math.max(left.length, right.length); index++) {
    if (index < left.length)
      result.push(left[index]);
    if (index < right.length)
      result.push(right[index]);
  }
  return result;
}
function SECURITY_SCHEMA() {
  if (!_SECURITY_SCHEMA) {
    _SECURITY_SCHEMA = {};
    registerContext(SecurityContext2.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]);
    registerContext(SecurityContext2.STYLE, ["*|style"]);
    registerContext(SecurityContext2.URL, [
      "*|formAction",
      "area|href",
      "area|ping",
      "audio|src",
      "a|href",
      "a|ping",
      "blockquote|cite",
      "body|background",
      "del|cite",
      "form|action",
      "img|src",
      "input|src",
      "ins|cite",
      "q|cite",
      "source|src",
      "track|src",
      "video|poster",
      "video|src"
    ]);
    registerContext(SecurityContext2.RESOURCE_URL, [
      "applet|code",
      "applet|codebase",
      "base|href",
      "embed|src",
      "frame|src",
      "head|profile",
      "html|manifest",
      "iframe|src",
      "link|href",
      "media|src",
      "object|codebase",
      "object|data",
      "script|src"
    ]);
  }
  return _SECURITY_SCHEMA;
}
function registerContext(ctx, specs) {
  for (const spec of specs)
    _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
}
function isIframeSecuritySensitiveAttr(attrName) {
  return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());
}
function _isPixelDimensionStyle(prop) {
  switch (prop) {
    case "width":
    case "height":
    case "minWidth":
    case "minHeight":
    case "maxWidth":
    case "maxHeight":
    case "left":
    case "top":
    case "bottom":
    case "right":
    case "fontSize":
    case "outlineWidth":
    case "outlineOffset":
    case "paddingTop":
    case "paddingLeft":
    case "paddingBottom":
    case "paddingRight":
    case "marginTop":
    case "marginLeft":
    case "marginBottom":
    case "marginRight":
    case "borderRadius":
    case "borderWidth":
    case "borderTopWidth":
    case "borderLeftWidth":
    case "borderRightWidth":
    case "borderBottomWidth":
    case "textIndent":
      return true;
    default:
      return false;
  }
}
function getHtmlTagDefinition(tagName) {
  if (!TAG_DEFINITIONS) {
    DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({ canSelfClose: true });
    TAG_DEFINITIONS = Object.assign(/* @__PURE__ */ Object.create(null), {
      "base": new HtmlTagDefinition({ isVoid: true }),
      "meta": new HtmlTagDefinition({ isVoid: true }),
      "area": new HtmlTagDefinition({ isVoid: true }),
      "embed": new HtmlTagDefinition({ isVoid: true }),
      "link": new HtmlTagDefinition({ isVoid: true }),
      "img": new HtmlTagDefinition({ isVoid: true }),
      "input": new HtmlTagDefinition({ isVoid: true }),
      "param": new HtmlTagDefinition({ isVoid: true }),
      "hr": new HtmlTagDefinition({ isVoid: true }),
      "br": new HtmlTagDefinition({ isVoid: true }),
      "source": new HtmlTagDefinition({ isVoid: true }),
      "track": new HtmlTagDefinition({ isVoid: true }),
      "wbr": new HtmlTagDefinition({ isVoid: true }),
      "p": new HtmlTagDefinition({
        closedByChildren: [
          "address",
          "article",
          "aside",
          "blockquote",
          "div",
          "dl",
          "fieldset",
          "footer",
          "form",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6",
          "header",
          "hgroup",
          "hr",
          "main",
          "nav",
          "ol",
          "p",
          "pre",
          "section",
          "table",
          "ul"
        ],
        closedByParent: true
      }),
      "thead": new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"] }),
      "tbody": new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"], closedByParent: true }),
      "tfoot": new HtmlTagDefinition({ closedByChildren: ["tbody"], closedByParent: true }),
      "tr": new HtmlTagDefinition({ closedByChildren: ["tr"], closedByParent: true }),
      "td": new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: true }),
      "th": new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: true }),
      "col": new HtmlTagDefinition({ isVoid: true }),
      "svg": new HtmlTagDefinition({ implicitNamespacePrefix: "svg" }),
      "foreignObject": new HtmlTagDefinition({
        // Usually the implicit namespace here would be redundant since it will be inherited from
        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser
        // works is that the parent node of an end tag is its own start tag which means that
        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the
        // implicit namespace which is `html`, unless specified otherwise.
        implicitNamespacePrefix: "svg",
        // We want to prevent children of foreignObject from inheriting its namespace, because
        // the point of the element is to allow nodes from other namespaces to be inserted.
        preventNamespaceInheritance: true
      }),
      "math": new HtmlTagDefinition({ implicitNamespacePrefix: "math" }),
      "li": new HtmlTagDefinition({ closedByChildren: ["li"], closedByParent: true }),
      "dt": new HtmlTagDefinition({ closedByChildren: ["dt", "dd"] }),
      "dd": new HtmlTagDefinition({ closedByChildren: ["dt", "dd"], closedByParent: true }),
      "rb": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "rt": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "rtc": new HtmlTagDefinition({ closedByChildren: ["rb", "rtc", "rp"], closedByParent: true }),
      "rp": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "optgroup": new HtmlTagDefinition({ closedByChildren: ["optgroup"], closedByParent: true }),
      "option": new HtmlTagDefinition({
        closedByChildren: ["option", "optgroup"],
        closedByParent: true
      }),
      "pre": new HtmlTagDefinition({ ignoreFirstLf: true }),
      "listing": new HtmlTagDefinition({ ignoreFirstLf: true }),
      "style": new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
      "script": new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
      "title": new HtmlTagDefinition({
        // The browser supports two separate `title` tags which have to use
        // a different content type: `HTMLTitleElement` and `SVGTitleElement`
        contentType: {
          default: TagContentType.ESCAPABLE_RAW_TEXT,
          svg: TagContentType.PARSABLE_DATA
        }
      }),
      "textarea": new HtmlTagDefinition({
        contentType: TagContentType.ESCAPABLE_RAW_TEXT,
        ignoreFirstLf: true
      })
    });
    new DomElementSchemaRegistry().allKnownElementNames().forEach((knownTagName) => {
      if (!TAG_DEFINITIONS[knownTagName] && getNsPrefix(knownTagName) === null) {
        TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({ canSelfClose: false });
      }
    });
  }
  return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ?? DEFAULT_TAG_DEFINITION;
}
function createI18nMessageFactory(interpolationConfig, containerBlocks, retainEmptyTokens, preserveExpressionWhitespace) {
  const visitor = new _I18nVisitor(_expParser, interpolationConfig, containerBlocks, retainEmptyTokens, preserveExpressionWhitespace);
  return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
}
function noopVisitNodeFn(_html, i18n2) {
  return i18n2;
}
function reusePreviousSourceSpans(nodes, previousI18n) {
  if (previousI18n instanceof Message) {
    assertSingleContainerMessage(previousI18n);
    previousI18n = previousI18n.nodes[0];
  }
  if (previousI18n instanceof Container) {
    assertEquivalentNodes(previousI18n.children, nodes);
    for (let i = 0; i < nodes.length; i++) {
      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
    }
  }
}
function assertSingleContainerMessage(message) {
  const nodes = message.nodes;
  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {
    throw new Error("Unexpected previous i18n message - expected it to consist of only a single `Container` node.");
  }
}
function assertEquivalentNodes(previousNodes, nodes) {
  if (previousNodes.length !== nodes.length) {
    throw new Error(`
The number of i18n message children changed between first and second pass.

First pass (${previousNodes.length} tokens):
${previousNodes.map((node) => `"${node.sourceSpan.toString()}"`).join("\n")}

Second pass (${nodes.length} tokens):
${nodes.map((node) => `"${node.sourceSpan.toString()}"`).join("\n")}
    `.trim());
  }
  if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {
    throw new Error("The types of the i18n message children changed between first and second pass.");
  }
}
function extractPlaceholderName(input2) {
  return input2.split(_CUSTOM_PH_EXP)[2];
}
function isTrustedTypesSink(tagName, propName) {
  tagName = tagName.toLowerCase();
  propName = propName.toLowerCase();
  return TRUSTED_TYPES_SINKS.has(tagName + "|" + propName) || TRUSTED_TYPES_SINKS.has("*|" + propName);
}
function parseI18nMeta(meta = "") {
  let customId;
  let meaning;
  let description;
  meta = meta.trim();
  if (meta) {
    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);
    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
    let meaningAndDesc;
    [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ""];
    [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ["", meaningAndDesc];
  }
  return { customId, meaning, description };
}
function i18nMetaToJSDoc(meta) {
  const tags = [];
  if (meta.description) {
    tags.push({ tagName: "desc", text: meta.description });
  } else {
    tags.push({ tagName: "suppress", text: "{msgDescriptions}" });
  }
  if (meta.meaning) {
    tags.push({ tagName: "meaning", text: meta.meaning });
  }
  return jsDocComment(tags);
}
function createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {
  const messageString = serializeI18nMessageForGetMsg(message);
  const args = [literal(messageString)];
  if (Object.keys(placeholderValues).length) {
    args.push(mapLiteral(
      formatI18nPlaceholderNamesInMap(
        placeholderValues,
        true
        /* useCamelCase */
      ),
      true
      /* quoted */
    ));
    args.push(mapLiteral({
      original_code: literalMap(Object.keys(placeholderValues).map((param) => ({
        key: formatI18nPlaceholderName(param),
        quoted: true,
        value: message.placeholders[param] ? (
          // Get source span for typical placeholder if it exists.
          literal(message.placeholders[param].sourceSpan.toString())
        ) : (
          // Otherwise must be an ICU expression, get it's source span.
          literal(message.placeholderToMessage[param].nodes.map((node) => node.sourceSpan.toString()).join(""))
        )
      })))
    }));
  }
  const googGetMsgStmt = new DeclareVarStmt(closureVar.name, variable(GOOG_GET_MSG).callFn(args), INFERRED_TYPE, StmtModifier.Final);
  googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));
  const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));
  return [googGetMsgStmt, i18nAssignmentStmt];
}
function serializeI18nMessageForGetMsg(message) {
  return message.nodes.map((node) => node.visit(serializerVisitor, null)).join("");
}
function createLocalizeStatements(variable2, message, params) {
  const { messageParts, placeHolders } = serializeI18nMessageForLocalize(message);
  const sourceSpan = getSourceSpan(message);
  const expressions = placeHolders.map((ph) => params[ph.text]);
  const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);
  const variableInitialization = variable2.set(localizedString$1);
  return [new ExpressionStatement(variableInitialization)];
}
function serializeI18nMessageForLocalize(message) {
  const pieces = [];
  const serializerVisitor2 = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);
  message.nodes.forEach((node) => node.visit(serializerVisitor2));
  return processMessagePieces(pieces);
}
function getSourceSpan(message) {
  const startNode = message.nodes[0];
  const endNode = message.nodes[message.nodes.length - 1];
  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);
}
function processMessagePieces(pieces) {
  const messageParts = [];
  const placeHolders = [];
  if (pieces[0] instanceof PlaceholderPiece) {
    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));
  }
  for (let i = 0; i < pieces.length; i++) {
    const part = pieces[i];
    if (part instanceof LiteralPiece) {
      messageParts.push(part);
    } else {
      placeHolders.push(part);
      if (pieces[i - 1] instanceof PlaceholderPiece) {
        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));
      }
    }
  }
  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));
  }
  return { messageParts, placeHolders };
}
function createEmptyMessagePart(location2) {
  return new LiteralPiece("", new ParseSourceSpan(location2, location2));
}
function getTranslationConstPrefix(extra) {
  return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();
}
function declareI18nVariable(variable2) {
  return new DeclareVarStmt(variable2.name, void 0, INFERRED_TYPE, void 0, variable2.sourceSpan);
}
function collectI18nConsts(job) {
  const fileBasedI18nSuffix = job.relativeContextFilePath.replace(/[^A-Za-z0-9]/g, "_").toUpperCase() + "_";
  const extractedAttributesByI18nContext = /* @__PURE__ */ new Map();
  const i18nAttributesByElement = /* @__PURE__ */ new Map();
  const i18nExpressionsByElement = /* @__PURE__ */ new Map();
  const messages = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      if (op.kind === OpKind.ExtractedAttribute && op.i18nContext !== null) {
        const attributes = extractedAttributesByI18nContext.get(op.i18nContext) ?? [];
        attributes.push(op);
        extractedAttributesByI18nContext.set(op.i18nContext, attributes);
      } else if (op.kind === OpKind.I18nAttributes) {
        i18nAttributesByElement.set(op.target, op);
      } else if (op.kind === OpKind.I18nExpression && op.usage === I18nExpressionFor.I18nAttribute) {
        const expressions = i18nExpressionsByElement.get(op.target) ?? [];
        expressions.push(op);
        i18nExpressionsByElement.set(op.target, expressions);
      } else if (op.kind === OpKind.I18nMessage) {
        messages.set(op.xref, op);
      }
    }
  }
  const i18nValuesByContext = /* @__PURE__ */ new Map();
  const messageConstIndices = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.I18nMessage) {
        if (op.messagePlaceholder === null) {
          const { mainVar, statements } = collectMessage(job, fileBasedI18nSuffix, messages, op);
          if (op.i18nBlock !== null) {
            const i18nConst = job.addConst(mainVar, statements);
            messageConstIndices.set(op.i18nBlock, i18nConst);
          } else {
            job.constsInitializers.push(...statements);
            i18nValuesByContext.set(op.i18nContext, mainVar);
            const attributesForMessage = extractedAttributesByI18nContext.get(op.i18nContext);
            if (attributesForMessage !== void 0) {
              for (const attr of attributesForMessage) {
                attr.expression = mainVar.clone();
              }
            }
          }
        }
        OpList.remove(op);
      }
    }
  }
  for (const unit of job.units) {
    for (const elem of unit.create) {
      if (isElementOrContainerOp(elem)) {
        const i18nAttributes2 = i18nAttributesByElement.get(elem.xref);
        if (i18nAttributes2 === void 0) {
          continue;
        }
        let i18nExpressions = i18nExpressionsByElement.get(elem.xref);
        if (i18nExpressions === void 0) {
          throw new Error("AssertionError: Could not find any i18n expressions associated with an I18nAttributes instruction");
        }
        const seenPropertyNames = /* @__PURE__ */ new Set();
        i18nExpressions = i18nExpressions.filter((i18nExpr) => {
          const seen = seenPropertyNames.has(i18nExpr.name);
          seenPropertyNames.add(i18nExpr.name);
          return !seen;
        });
        const i18nAttributeConfig = i18nExpressions.flatMap((i18nExpr) => {
          const i18nExprValue = i18nValuesByContext.get(i18nExpr.context);
          if (i18nExprValue === void 0) {
            throw new Error("AssertionError: Could not find i18n expression's value");
          }
          return [literal(i18nExpr.name), i18nExprValue];
        });
        i18nAttributes2.i18nAttributesConfig = job.addConst(new LiteralArrayExpr(i18nAttributeConfig));
      }
    }
  }
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.I18nStart) {
        const msgIndex = messageConstIndices.get(op.root);
        if (msgIndex === void 0) {
          throw new Error("AssertionError: Could not find corresponding i18n block index for an i18n message op; was an i18n message incorrectly assumed to correspond to an attribute?");
        }
        op.messageIndex = msgIndex;
      }
    }
  }
}
function collectMessage(job, fileBasedI18nSuffix, messages, messageOp) {
  const statements = [];
  const subMessagePlaceholders = /* @__PURE__ */ new Map();
  for (const subMessageId of messageOp.subMessages) {
    const subMessage = messages.get(subMessageId);
    const { mainVar: subMessageVar, statements: subMessageStatements } = collectMessage(job, fileBasedI18nSuffix, messages, subMessage);
    statements.push(...subMessageStatements);
    const subMessages = subMessagePlaceholders.get(subMessage.messagePlaceholder) ?? [];
    subMessages.push(subMessageVar);
    subMessagePlaceholders.set(subMessage.messagePlaceholder, subMessages);
  }
  addSubMessageParams(messageOp, subMessagePlaceholders);
  messageOp.params = new Map([...messageOp.params.entries()].sort());
  const mainVar = variable(job.pool.uniqueName(TRANSLATION_VAR_PREFIX));
  const closureVar = i18nGenerateClosureVar(job.pool, messageOp.message.id, fileBasedI18nSuffix, job.i18nUseExternalIds);
  let transformFn = void 0;
  if (messageOp.needsPostprocessing || messageOp.postprocessingParams.size > 0) {
    const postprocessingParams = Object.fromEntries([...messageOp.postprocessingParams.entries()].sort());
    const formattedPostprocessingParams = formatI18nPlaceholderNamesInMap(
      postprocessingParams,
      /* useCamelCase */
      false
    );
    const extraTransformFnParams = [];
    if (messageOp.postprocessingParams.size > 0) {
      extraTransformFnParams.push(mapLiteral(
        formattedPostprocessingParams,
        /* quoted */
        true
      ));
    }
    transformFn = (expr) => importExpr(Identifiers.i18nPostprocess).callFn([expr, ...extraTransformFnParams]);
  }
  statements.push(...getTranslationDeclStmts(messageOp.message, mainVar, closureVar, messageOp.params, transformFn));
  return { mainVar, statements };
}
function addSubMessageParams(messageOp, subMessagePlaceholders) {
  for (const [placeholder, subMessages] of subMessagePlaceholders) {
    if (subMessages.length === 1) {
      messageOp.params.set(placeholder, subMessages[0]);
    } else {
      messageOp.params.set(placeholder, literal(`${ESCAPE}${I18N_ICU_MAPPING_PREFIX}${placeholder}${ESCAPE}`));
      messageOp.postprocessingParams.set(placeholder, literalArr(subMessages));
    }
  }
}
function getTranslationDeclStmts(message, variable2, closureVar, params, transformFn) {
  const paramsObject = Object.fromEntries(params);
  const statements = [
    declareI18nVariable(variable2),
    ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable2, message, closureVar, paramsObject), createLocalizeStatements(variable2, message, formatI18nPlaceholderNamesInMap(
      paramsObject,
      /* useCamelCase */
      false
    )))
  ];
  if (transformFn) {
    statements.push(new ExpressionStatement(variable2.set(transformFn(variable2))));
  }
  return statements;
}
function createClosureModeGuard() {
  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal("undefined", STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));
}
function i18nGenerateClosureVar(pool, messageId, fileBasedI18nSuffix, useExternalIds) {
  let name;
  const suffix = fileBasedI18nSuffix;
  if (useExternalIds) {
    const prefix = getTranslationConstPrefix(`EXTERNAL_`);
    const uniqueSuffix = pool.uniqueName(suffix);
    name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;
  } else {
    const prefix = getTranslationConstPrefix(suffix);
    name = pool.uniqueName(prefix);
  }
  return variable(name);
}
function convertI18nText(job) {
  for (const unit of job.units) {
    let currentI18n = null;
    let currentIcu = null;
    const textNodeI18nBlocks = /* @__PURE__ */ new Map();
    const textNodeIcus = /* @__PURE__ */ new Map();
    const icuPlaceholderByText = /* @__PURE__ */ new Map();
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          if (op.context === null) {
            throw Error("I18n op should have its context set.");
          }
          currentI18n = op;
          break;
        case OpKind.I18nEnd:
          currentI18n = null;
          break;
        case OpKind.IcuStart:
          if (op.context === null) {
            throw Error("Icu op should have its context set.");
          }
          currentIcu = op;
          break;
        case OpKind.IcuEnd:
          currentIcu = null;
          break;
        case OpKind.Text:
          if (currentI18n !== null) {
            textNodeI18nBlocks.set(op.xref, currentI18n);
            textNodeIcus.set(op.xref, currentIcu);
            if (op.icuPlaceholder !== null) {
              const icuPlaceholderOp = createIcuPlaceholderOp(job.allocateXrefId(), op.icuPlaceholder, [op.initialValue]);
              OpList.replace(op, icuPlaceholderOp);
              icuPlaceholderByText.set(op.xref, icuPlaceholderOp);
            } else {
              OpList.remove(op);
            }
          }
          break;
      }
    }
    for (const op of unit.update) {
      switch (op.kind) {
        case OpKind.InterpolateText:
          if (!textNodeI18nBlocks.has(op.target)) {
            continue;
          }
          const i18nOp = textNodeI18nBlocks.get(op.target);
          const icuOp = textNodeIcus.get(op.target);
          const icuPlaceholder = icuPlaceholderByText.get(op.target);
          const contextId = icuOp ? icuOp.context : i18nOp.context;
          const resolutionTime = icuOp ? I18nParamResolutionTime.Postproccessing : I18nParamResolutionTime.Creation;
          const ops = [];
          for (let i = 0; i < op.interpolation.expressions.length; i++) {
            const expr = op.interpolation.expressions[i];
            ops.push(createI18nExpressionOp(contextId, i18nOp.xref, i18nOp.xref, i18nOp.handle, expr, icuPlaceholder?.xref ?? null, op.interpolation.i18nPlaceholders[i] ?? null, resolutionTime, I18nExpressionFor.I18nText, "", expr.sourceSpan ?? op.sourceSpan));
          }
          OpList.replaceWithMany(op, ops);
          if (icuPlaceholder !== void 0) {
            icuPlaceholder.strings = op.interpolation.strings;
          }
          break;
      }
    }
  }
}
function liftLocalRefs(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.ElementStart:
        case OpKind.ConditionalCreate:
        case OpKind.ConditionalBranchCreate:
        case OpKind.Template:
          if (!Array.isArray(op.localRefs)) {
            throw new Error(`AssertionError: expected localRefs to be an array still`);
          }
          op.numSlotsUsed += op.localRefs.length;
          if (op.localRefs.length > 0) {
            const localRefs = serializeLocalRefs(op.localRefs);
            op.localRefs = job.addConst(localRefs);
          } else {
            op.localRefs = null;
          }
          break;
      }
    }
  }
}
function serializeLocalRefs(refs) {
  const constRefs = [];
  for (const ref of refs) {
    constRefs.push(literal(ref.name), literal(ref.target));
  }
  return literalArr(constRefs);
}
function emitNamespaceChanges(job) {
  for (const unit of job.units) {
    let activeNamespace = Namespace.HTML;
    for (const op of unit.create) {
      if (op.kind !== OpKind.ElementStart) {
        continue;
      }
      if (op.namespace !== activeNamespace) {
        OpList.insertBefore(createNamespaceOp(op.namespace), op);
        activeNamespace = op.namespace;
      }
    }
  }
}
function parse(value) {
  const styles = [];
  let i = 0;
  let parenDepth = 0;
  let quote = 0;
  let valueStart = 0;
  let propStart = 0;
  let currentProp = null;
  while (i < value.length) {
    const token = value.charCodeAt(i++);
    switch (token) {
      case 40:
        parenDepth++;
        break;
      case 41:
        parenDepth--;
        break;
      case 39:
        if (quote === 0) {
          quote = 39;
        } else if (quote === 39 && value.charCodeAt(i - 1) !== 92) {
          quote = 0;
        }
        break;
      case 34:
        if (quote === 0) {
          quote = 34;
        } else if (quote === 34 && value.charCodeAt(i - 1) !== 92) {
          quote = 0;
        }
        break;
      case 58:
        if (!currentProp && parenDepth === 0 && quote === 0) {
          currentProp = hyphenate(value.substring(propStart, i - 1).trim());
          valueStart = i;
        }
        break;
      case 59:
        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0) {
          const styleVal = value.substring(valueStart, i - 1).trim();
          styles.push(currentProp, styleVal);
          propStart = i;
          valueStart = 0;
          currentProp = null;
        }
        break;
    }
  }
  if (currentProp && valueStart) {
    const styleVal = value.slice(valueStart).trim();
    styles.push(currentProp, styleVal);
  }
  return styles;
}
function hyphenate(value) {
  return value.replace(/[a-z][A-Z]/g, (v) => {
    return v.charAt(0) + "-" + v.charAt(1);
  }).toLowerCase();
}
function parseExtractedStyles(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (isElementOrContainerOp(op)) {
        elements.set(op.xref, op);
      }
    }
  }
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.ExtractedAttribute && op.bindingKind === BindingKind.Attribute && isStringLiteral(op.expression)) {
        const target = elements.get(op.target);
        if (target !== void 0 && (target.kind === OpKind.Template || target.kind === OpKind.ConditionalCreate || target.kind === OpKind.ConditionalBranchCreate) && target.templateKind === TemplateKind.Structural) {
          continue;
        }
        if (op.name === "style") {
          const parsedStyles = parse(op.expression.value);
          for (let i = 0; i < parsedStyles.length - 1; i += 2) {
            OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.StyleProperty, null, parsedStyles[i], literal(parsedStyles[i + 1]), null, null, SecurityContext2.STYLE), op);
          }
          OpList.remove(op);
        } else if (op.name === "class") {
          const parsedClasses = op.expression.value.trim().split(/\s+/g);
          for (const parsedClass of parsedClasses) {
            OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.ClassName, null, parsedClass, null, null, null, SecurityContext2.NONE), op);
          }
          OpList.remove(op);
        }
      }
    }
  }
}
function nameFunctionsAndVariables(job) {
  addNamesToView(job.root, job.componentName, { index: 0 }, job.compatibility === CompatibilityMode.TemplateDefinitionBuilder);
}
function addNamesToView(unit, baseName, state, compatibility) {
  if (unit.fnName === null) {
    unit.fnName = unit.job.pool.uniqueName(
      sanitizeIdentifier(`${baseName}_${unit.job.fnSuffix}`),
      /* alwaysIncludeSuffix */
      false
    );
  }
  const varNames = /* @__PURE__ */ new Map();
  for (const op of unit.ops()) {
    switch (op.kind) {
      case OpKind.Property:
      case OpKind.DomProperty:
        if (op.isLegacyAnimationTrigger) {
          op.name = "@" + op.name;
        }
        break;
      case OpKind.Listener:
        if (op.handlerFnName !== null) {
          break;
        }
        if (!op.hostListener && op.targetSlot.slot === null) {
          throw new Error(`Expected a slot to be assigned`);
        }
        let animation = "";
        if (op.isLegacyAnimationListener) {
          op.name = `@${op.name}.${op.legacyAnimationPhase}`;
          animation = "animation";
        }
        if (op.hostListener) {
          op.handlerFnName = `${baseName}_${animation}${op.name}_HostBindingHandler`;
        } else {
          op.handlerFnName = `${unit.fnName}_${op.tag.replace("-", "_")}_${animation}${op.name}_${op.targetSlot.slot}_listener`;
        }
        op.handlerFnName = sanitizeIdentifier(op.handlerFnName);
        break;
      case OpKind.TwoWayListener:
        if (op.handlerFnName !== null) {
          break;
        }
        if (op.targetSlot.slot === null) {
          throw new Error(`Expected a slot to be assigned`);
        }
        op.handlerFnName = sanitizeIdentifier(`${unit.fnName}_${op.tag.replace("-", "_")}_${op.name}_${op.targetSlot.slot}_listener`);
        break;
      case OpKind.Variable:
        varNames.set(op.xref, getVariableName(unit, op.variable, state));
        break;
      case OpKind.RepeaterCreate:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (op.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        if (op.emptyView !== null) {
          const emptyView = unit.job.views.get(op.emptyView);
          addNamesToView(emptyView, `${baseName}_${op.functionNameSuffix}Empty_${op.handle.slot + 2}`, state, compatibility);
        }
        addNamesToView(unit.job.views.get(op.xref), `${baseName}_${op.functionNameSuffix}_${op.handle.slot + 1}`, state, compatibility);
        break;
      case OpKind.Projection:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (op.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        if (op.fallbackView !== null) {
          const fallbackView = unit.job.views.get(op.fallbackView);
          addNamesToView(fallbackView, `${baseName}_ProjectionFallback_${op.handle.slot}`, state, compatibility);
        }
        break;
      case OpKind.ConditionalCreate:
      case OpKind.ConditionalBranchCreate:
      case OpKind.Template:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        const childView = unit.job.views.get(op.xref);
        if (op.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        const suffix = op.functionNameSuffix.length === 0 ? "" : `_${op.functionNameSuffix}`;
        addNamesToView(childView, `${baseName}${suffix}_${op.handle.slot}`, state, compatibility);
        break;
      case OpKind.StyleProp:
        op.name = normalizeStylePropName(op.name);
        if (compatibility) {
          op.name = stripImportant(op.name);
        }
        break;
      case OpKind.ClassProp:
        if (compatibility) {
          op.name = stripImportant(op.name);
        }
        break;
    }
  }
  for (const op of unit.ops()) {
    visitExpressionsInOp(op, (expr) => {
      if (!(expr instanceof ReadVariableExpr) || expr.name !== null) {
        return;
      }
      if (!varNames.has(expr.xref)) {
        throw new Error(`Variable ${expr.xref} not yet named`);
      }
      expr.name = varNames.get(expr.xref);
    });
  }
}
function getVariableName(unit, variable2, state) {
  if (variable2.name === null) {
    switch (variable2.kind) {
      case SemanticVariableKind.Context:
        variable2.name = `ctx_r${state.index++}`;
        break;
      case SemanticVariableKind.Identifier:
        if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
          const compatPrefix = variable2.identifier === "ctx" ? "i" : "";
          variable2.name = `${variable2.identifier}_${compatPrefix}r${++state.index}`;
        } else {
          variable2.name = `${variable2.identifier}_i${state.index++}`;
        }
        break;
      default:
        variable2.name = `_r${++state.index}`;
        break;
    }
  }
  return variable2.name;
}
function normalizeStylePropName(name) {
  return name.startsWith("--") ? name : hyphenate(name);
}
function stripImportant(name) {
  const importantIndex = name.indexOf("!important");
  if (importantIndex > -1) {
    return name.substring(0, importantIndex);
  }
  return name;
}
function mergeNextContextExpressions(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        mergeNextContextsInOps(op.handlerOps);
      }
    }
    mergeNextContextsInOps(unit.update);
  }
}
function mergeNextContextsInOps(ops) {
  for (const op of ops) {
    if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement) || !(op.statement.expr instanceof NextContextExpr)) {
      continue;
    }
    const mergeSteps = op.statement.expr.steps;
    let tryToMerge = true;
    for (let candidate = op.next; candidate.kind !== OpKind.ListEnd && tryToMerge; candidate = candidate.next) {
      visitExpressionsInOp(candidate, (expr, flags) => {
        if (!isIrExpression(expr)) {
          return expr;
        }
        if (!tryToMerge) {
          return;
        }
        if (flags & VisitorContextFlag.InChildOperation) {
          return;
        }
        switch (expr.kind) {
          case ExpressionKind.NextContext:
            expr.steps += mergeSteps;
            OpList.remove(op);
            tryToMerge = false;
            break;
          case ExpressionKind.GetCurrentView:
          case ExpressionKind.Reference:
          case ExpressionKind.ContextLetReference:
            tryToMerge = false;
            break;
        }
        return;
      });
    }
  }
}
function generateNgContainerOps(job) {
  for (const unit of job.units) {
    const updatedElementXrefs = /* @__PURE__ */ new Set();
    for (const op of unit.create) {
      if (op.kind === OpKind.ElementStart && op.tag === CONTAINER_TAG) {
        op.kind = OpKind.ContainerStart;
        updatedElementXrefs.add(op.xref);
      }
      if (op.kind === OpKind.ElementEnd && updatedElementXrefs.has(op.xref)) {
        op.kind = OpKind.ContainerEnd;
      }
    }
  }
}
function lookupElement(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function disableBindings$1(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const view of job.units) {
    for (const op of view.create) {
      if (!isElementOrContainerOp(op)) {
        continue;
      }
      elements.set(op.xref, op);
    }
  }
  for (const unit of job.units) {
    for (const op of unit.create) {
      if ((op.kind === OpKind.ElementStart || op.kind === OpKind.ContainerStart) && op.nonBindable) {
        OpList.insertAfter(createDisableBindingsOp(op.xref), op);
      }
      if ((op.kind === OpKind.ElementEnd || op.kind === OpKind.ContainerEnd) && lookupElement(elements, op.xref).nonBindable) {
        OpList.insertBefore(createEnableBindingsOp(op.xref), op);
      }
    }
  }
}
function kindTest(kind) {
  return (op) => op.kind === kind;
}
function kindWithInterpolationTest(kind, interpolation) {
  return (op) => {
    return op.kind === kind && interpolation === op.expression instanceof Interpolation2;
  };
}
function basicListenerKindTest(op) {
  return op.kind === OpKind.Listener && !(op.hostListener && op.isLegacyAnimationListener) || op.kind === OpKind.TwoWayListener;
}
function nonInterpolationPropertyKindTest(op) {
  return (op.kind === OpKind.Property || op.kind === OpKind.TwoWayProperty) && !(op.expression instanceof Interpolation2);
}
function orderOps(job) {
  for (const unit of job.units) {
    orderWithin(unit.create, CREATE_ORDERING);
    const ordering = unit.job.kind === CompilationJobKind.Host ? UPDATE_HOST_ORDERING : UPDATE_ORDERING;
    orderWithin(unit.update, ordering);
  }
}
function orderWithin(opList, ordering) {
  let opsToOrder = [];
  let firstTargetInGroup = null;
  for (const op of opList) {
    const currentTarget = hasDependsOnSlotContextTrait(op) ? op.target : null;
    if (!handledOpKinds.has(op.kind) || currentTarget !== firstTargetInGroup && firstTargetInGroup !== null && currentTarget !== null) {
      OpList.insertBefore(reorder(opsToOrder, ordering), op);
      opsToOrder = [];
      firstTargetInGroup = null;
    }
    if (handledOpKinds.has(op.kind)) {
      opsToOrder.push(op);
      OpList.remove(op);
      firstTargetInGroup = currentTarget ?? firstTargetInGroup;
    }
  }
  opList.push(reorder(opsToOrder, ordering));
}
function reorder(ops, ordering) {
  const groups = Array.from(ordering, () => new Array());
  for (const op of ops) {
    const groupIndex = ordering.findIndex((o) => o.test(op));
    groups[groupIndex].push(op);
  }
  return groups.flatMap((group, i) => {
    const transform2 = ordering[i].transform;
    return transform2 ? transform2(group) : group;
  });
}
function keepLast(ops) {
  return ops.slice(ops.length - 1);
}
function removeContentSelectors(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    for (const op of unit.ops()) {
      switch (op.kind) {
        case OpKind.Binding:
          const target = lookupInXrefMap(elements, op.target);
          if (isSelectAttribute(op.name) && target.kind === OpKind.Projection) {
            OpList.remove(op);
          }
          break;
      }
    }
  }
}
function isSelectAttribute(name) {
  return name.toLowerCase() === "select";
}
function lookupInXrefMap(map2, xref) {
  const el = map2.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an slottable target.");
  }
  return el;
}
function createPipes(job) {
  for (const unit of job.units) {
    processPipeBindingsInView(unit);
  }
}
function processPipeBindingsInView(unit) {
  for (const updateOp of unit.update) {
    visitExpressionsInOp(updateOp, (expr, flags) => {
      if (!isIrExpression(expr)) {
        return;
      }
      if (expr.kind !== ExpressionKind.PipeBinding) {
        return;
      }
      if (flags & VisitorContextFlag.InChildOperation) {
        throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);
      }
      if (unit.job.compatibility) {
        const slotHandle = updateOp.target;
        if (slotHandle == void 0) {
          throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);
        }
        addPipeToCreationBlock(unit, updateOp.target, expr);
      } else {
        unit.create.push(createPipeOp(expr.target, expr.targetSlot, expr.name));
      }
    });
  }
}
function addPipeToCreationBlock(unit, afterTargetXref, binding) {
  for (let op = unit.create.head.next; op.kind !== OpKind.ListEnd; op = op.next) {
    if (!hasConsumesSlotTrait(op)) {
      continue;
    }
    if (op.xref !== afterTargetXref) {
      continue;
    }
    while (op.next.kind === OpKind.Pipe) {
      op = op.next;
    }
    const pipe3 = createPipeOp(binding.target, binding.targetSlot, binding.name);
    OpList.insertBefore(pipe3, op.next);
    return;
  }
  throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);
}
function createVariadicPipes(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      transformExpressionsInOp(op, (expr) => {
        if (!(expr instanceof PipeBindingExpr)) {
          return expr;
        }
        if (expr.args.length <= 4) {
          return expr;
        }
        return new PipeBindingVariadicExpr(expr.target, expr.targetSlot, expr.name, literalArr(expr.args), expr.args.length);
      }, VisitorContextFlag.None);
    }
  }
}
function propagateI18nBlocks(job) {
  propagateI18nBlocksToTemplates(job.root, 0);
}
function propagateI18nBlocksToTemplates(unit, subTemplateIndex) {
  let i18nBlock = null;
  for (const op of unit.create) {
    switch (op.kind) {
      case OpKind.I18nStart:
        op.subTemplateIndex = subTemplateIndex === 0 ? null : subTemplateIndex;
        i18nBlock = op;
        break;
      case OpKind.I18nEnd:
        if (i18nBlock.subTemplateIndex === null) {
          subTemplateIndex = 0;
        }
        i18nBlock = null;
        break;
      case OpKind.ConditionalCreate:
      case OpKind.ConditionalBranchCreate:
      case OpKind.Template:
        subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);
        break;
      case OpKind.RepeaterCreate:
        const forView = unit.job.views.get(op.xref);
        subTemplateIndex = propagateI18nBlocksForView(forView, i18nBlock, op.i18nPlaceholder, subTemplateIndex);
        if (op.emptyView !== null) {
          subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.emptyView), i18nBlock, op.emptyI18nPlaceholder, subTemplateIndex);
        }
        break;
    }
  }
  return subTemplateIndex;
}
function propagateI18nBlocksForView(view, i18nBlock, i18nPlaceholder, subTemplateIndex) {
  if (i18nPlaceholder !== void 0) {
    if (i18nBlock === null) {
      throw Error("Expected template with i18n placeholder to be in an i18n block.");
    }
    subTemplateIndex++;
    wrapTemplateWithI18n(view, i18nBlock);
  }
  return propagateI18nBlocksToTemplates(view, subTemplateIndex);
}
function wrapTemplateWithI18n(unit, parentI18n) {
  if (unit.create.head.next?.kind !== OpKind.I18nStart) {
    const id = unit.job.allocateXrefId();
    OpList.insertAfter(
      // Nested ng-template i18n start/end ops should not receive source spans.
      createI18nStartOp(id, parentI18n.message, parentI18n.root, null),
      unit.create.head
    );
    OpList.insertBefore(createI18nEndOp(id, null), unit.create.tail);
  }
}
function extractPureFunctions(job) {
  for (const view of job.units) {
    for (const op of view.ops()) {
      visitExpressionsInOp(op, (expr) => {
        if (!(expr instanceof PureFunctionExpr) || expr.body === null) {
          return;
        }
        const constantDef = new PureFunctionConstant(expr.args.length);
        expr.fn = job.pool.getSharedConstant(constantDef, expr.body);
        expr.body = null;
      });
    }
  }
}
function generatePureLiteralStructures(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      transformExpressionsInOp(op, (expr, flags) => {
        if (flags & VisitorContextFlag.InChildOperation) {
          return expr;
        }
        if (expr instanceof LiteralArrayExpr) {
          return transformLiteralArray(expr);
        } else if (expr instanceof LiteralMapExpr) {
          return transformLiteralMap(expr);
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function transformLiteralArray(expr) {
  const derivedEntries = [];
  const nonConstantArgs = [];
  for (const entry of expr.entries) {
    if (entry.isConstant()) {
      derivedEntries.push(entry);
    } else {
      const idx = nonConstantArgs.length;
      nonConstantArgs.push(entry);
      derivedEntries.push(new PureFunctionParameterExpr(idx));
    }
  }
  return new PureFunctionExpr(literalArr(derivedEntries), nonConstantArgs);
}
function transformLiteralMap(expr) {
  let derivedEntries = [];
  const nonConstantArgs = [];
  for (const entry of expr.entries) {
    if (entry.value.isConstant()) {
      derivedEntries.push(entry);
    } else {
      const idx = nonConstantArgs.length;
      nonConstantArgs.push(entry.value);
      derivedEntries.push(new LiteralMapEntry(entry.key, new PureFunctionParameterExpr(idx), entry.quoted));
    }
  }
  return new PureFunctionExpr(literalMap(derivedEntries), nonConstantArgs);
}
function element(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.element, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function elementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.elementStart, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function elementOrContainerBase(instruction, slot, tag, constIndex, localRefIndex, sourceSpan) {
  const args = [literal(slot)];
  if (tag !== null) {
    args.push(literal(tag));
  }
  if (localRefIndex !== null) {
    args.push(
      literal(constIndex),
      // might be null, but that's okay.
      literal(localRefIndex)
    );
  } else if (constIndex !== null) {
    args.push(literal(constIndex));
  }
  return call(instruction, args, sourceSpan);
}
function templateBase(instruction, slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  const args = [
    literal(slot),
    templateFnRef,
    literal(decls),
    literal(vars),
    literal(tag),
    literal(constIndex)
  ];
  if (localRefs !== null) {
    args.push(literal(localRefs));
    args.push(importExpr(Identifiers.templateRefExtractor));
  }
  while (args[args.length - 1].isEquivalent(NULL_EXPR)) {
    args.pop();
  }
  return call(instruction, args, sourceSpan);
}
function propertyBase(instruction, name, expression, sanitizer, sourceSpan) {
  const args = [literal(name)];
  if (expression instanceof Interpolation2) {
    args.push(interpolationToExpression(expression, sourceSpan));
  } else {
    args.push(expression);
  }
  if (sanitizer !== null) {
    args.push(sanitizer);
  }
  return call(instruction, args, sourceSpan);
}
function elementEnd(sourceSpan) {
  return call(Identifiers.elementEnd, [], sourceSpan);
}
function elementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.elementContainerStart,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function elementContainer(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.elementContainer,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function elementContainerEnd() {
  return call(Identifiers.elementContainerEnd, [], null);
}
function template(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  return templateBase(Identifiers.templateCreate, slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan);
}
function disableBindings() {
  return call(Identifiers.disableBindings, [], null);
}
function enableBindings() {
  return call(Identifiers.enableBindings, [], null);
}
function listener(name, handlerFn, eventTargetResolver, syntheticHost, sourceSpan) {
  const args = [literal(name), handlerFn];
  if (eventTargetResolver !== null) {
    args.push(importExpr(eventTargetResolver));
  }
  return call(syntheticHost ? Identifiers.syntheticHostListener : Identifiers.listener, args, sourceSpan);
}
function twoWayBindingSet(target, value) {
  return importExpr(Identifiers.twoWayBindingSet).callFn([target, value]);
}
function twoWayListener(name, handlerFn, sourceSpan) {
  return call(Identifiers.twoWayListener, [literal(name), handlerFn], sourceSpan);
}
function pipe2(slot, name) {
  return call(Identifiers.pipe, [literal(slot), literal(name)], null);
}
function namespaceHTML() {
  return call(Identifiers.namespaceHTML, [], null);
}
function namespaceSVG() {
  return call(Identifiers.namespaceSVG, [], null);
}
function namespaceMath() {
  return call(Identifiers.namespaceMathML, [], null);
}
function advance(delta, sourceSpan) {
  return call(Identifiers.advance, delta > 1 ? [literal(delta)] : [], sourceSpan);
}
function reference(slot) {
  return importExpr(Identifiers.reference).callFn([literal(slot)]);
}
function nextContext(steps) {
  return importExpr(Identifiers.nextContext).callFn(steps === 1 ? [] : [literal(steps)]);
}
function getCurrentView() {
  return importExpr(Identifiers.getCurrentView).callFn([]);
}
function restoreView(savedView) {
  return importExpr(Identifiers.restoreView).callFn([savedView]);
}
function resetView(returnValue) {
  return importExpr(Identifiers.resetView).callFn([returnValue]);
}
function text(slot, initialValue, sourceSpan) {
  const args = [literal(slot, null)];
  if (initialValue !== "") {
    args.push(literal(initialValue));
  }
  return call(Identifiers.text, args, sourceSpan);
}
function defer2(selfSlot, primarySlot, dependencyResolverFn, loadingSlot, placeholderSlot, errorSlot, loadingConfig, placeholderConfig, enableTimerScheduling, sourceSpan, flags) {
  const args = [
    literal(selfSlot),
    literal(primarySlot),
    dependencyResolverFn ?? literal(null),
    literal(loadingSlot),
    literal(placeholderSlot),
    literal(errorSlot),
    loadingConfig ?? literal(null),
    placeholderConfig ?? literal(null),
    enableTimerScheduling ? importExpr(Identifiers.deferEnableTimerScheduling) : literal(null),
    literal(flags)
  ];
  let expr;
  while ((expr = args[args.length - 1]) !== null && expr instanceof LiteralExpr && expr.value === null) {
    args.pop();
  }
  return call(Identifiers.defer, args, sourceSpan);
}
function deferOn(trigger, args, modifier, sourceSpan) {
  const instructionToCall = deferTriggerToR3TriggerInstructionsMap.get(trigger)?.[modifier];
  if (instructionToCall === void 0) {
    throw new Error(`Unable to determine instruction for trigger ${trigger}`);
  }
  return call(instructionToCall, args.map((a) => literal(a)), sourceSpan);
}
function projectionDef(def) {
  return call(Identifiers.projectionDef, def ? [def] : [], null);
}
function projection(slot, projectionSlotIndex, attributes, fallbackFnName, fallbackDecls, fallbackVars, sourceSpan) {
  const args = [literal(slot)];
  if (projectionSlotIndex !== 0 || attributes !== null || fallbackFnName !== null) {
    args.push(literal(projectionSlotIndex));
    if (attributes !== null) {
      args.push(attributes);
    }
    if (fallbackFnName !== null) {
      if (attributes === null) {
        args.push(literal(null));
      }
      args.push(variable(fallbackFnName), literal(fallbackDecls), literal(fallbackVars));
    }
  }
  return call(Identifiers.projection, args, sourceSpan);
}
function i18nStart(slot, constIndex, subTemplateIndex, sourceSpan) {
  const args = [literal(slot), literal(constIndex)];
  if (subTemplateIndex !== null) {
    args.push(literal(subTemplateIndex));
  }
  return call(Identifiers.i18nStart, args, sourceSpan);
}
function conditionalCreate(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  const args = [
    literal(slot),
    templateFnRef,
    literal(decls),
    literal(vars),
    literal(tag),
    literal(constIndex)
  ];
  if (localRefs !== null) {
    args.push(literal(localRefs));
    args.push(importExpr(Identifiers.templateRefExtractor));
  }
  while (args[args.length - 1].isEquivalent(NULL_EXPR)) {
    args.pop();
  }
  return call(Identifiers.conditionalCreate, args, sourceSpan);
}
function conditionalBranchCreate(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  const args = [
    literal(slot),
    templateFnRef,
    literal(decls),
    literal(vars),
    literal(tag),
    literal(constIndex)
  ];
  if (localRefs !== null) {
    args.push(literal(localRefs));
    args.push(importExpr(Identifiers.templateRefExtractor));
  }
  while (args[args.length - 1].isEquivalent(NULL_EXPR)) {
    args.pop();
  }
  return call(Identifiers.conditionalBranchCreate, args, sourceSpan);
}
function repeaterCreate(slot, viewFnName, decls, vars, tag, constIndex, trackByFn, trackByUsesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, emptyTag, emptyConstIndex, sourceSpan) {
  const args = [
    literal(slot),
    variable(viewFnName),
    literal(decls),
    literal(vars),
    literal(tag),
    literal(constIndex),
    trackByFn
  ];
  if (trackByUsesComponentInstance || emptyViewFnName !== null) {
    args.push(literal(trackByUsesComponentInstance));
    if (emptyViewFnName !== null) {
      args.push(variable(emptyViewFnName), literal(emptyDecls), literal(emptyVars));
      if (emptyTag !== null || emptyConstIndex !== null) {
        args.push(literal(emptyTag));
      }
      if (emptyConstIndex !== null) {
        args.push(literal(emptyConstIndex));
      }
    }
  }
  return call(Identifiers.repeaterCreate, args, sourceSpan);
}
function repeater(collection, sourceSpan) {
  return call(Identifiers.repeater, [collection], sourceSpan);
}
function deferWhen(modifier, expr, sourceSpan) {
  if (modifier === "prefetch") {
    return call(Identifiers.deferPrefetchWhen, [expr], sourceSpan);
  } else if (modifier === "hydrate") {
    return call(Identifiers.deferHydrateWhen, [expr], sourceSpan);
  }
  return call(Identifiers.deferWhen, [expr], sourceSpan);
}
function declareLet(slot, sourceSpan) {
  return call(Identifiers.declareLet, [literal(slot)], sourceSpan);
}
function storeLet(value, sourceSpan) {
  return importExpr(Identifiers.storeLet).callFn([value], sourceSpan);
}
function readContextLet(slot) {
  return importExpr(Identifiers.readContextLet).callFn([literal(slot)]);
}
function i18n(slot, constIndex, subTemplateIndex, sourceSpan) {
  const args = [literal(slot), literal(constIndex)];
  if (subTemplateIndex) {
    args.push(literal(subTemplateIndex));
  }
  return call(Identifiers.i18n, args, sourceSpan);
}
function i18nEnd(endSourceSpan) {
  return call(Identifiers.i18nEnd, [], endSourceSpan);
}
function i18nAttributes(slot, i18nAttributesConfig) {
  const args = [literal(slot), literal(i18nAttributesConfig)];
  return call(Identifiers.i18nAttributes, args, null);
}
function property(name, expression, sanitizer, sourceSpan) {
  return propertyBase(Identifiers.property, name, expression, sanitizer, sourceSpan);
}
function twoWayProperty(name, expression, sanitizer, sourceSpan) {
  const args = [literal(name), expression];
  if (sanitizer !== null) {
    args.push(sanitizer);
  }
  return call(Identifiers.twoWayProperty, args, sourceSpan);
}
function attribute(name, expression, sanitizer, namespace, sourceSpan) {
  const args = [literal(name)];
  if (expression instanceof Interpolation2) {
    args.push(interpolationToExpression(expression, sourceSpan));
  } else {
    args.push(expression);
  }
  if (sanitizer !== null || namespace !== null) {
    args.push(sanitizer ?? literal(null));
  }
  if (namespace !== null) {
    args.push(literal(namespace));
  }
  return call(Identifiers.attribute, args, null);
}
function styleProp(name, expression, unit, sourceSpan) {
  const args = [literal(name)];
  if (expression instanceof Interpolation2) {
    args.push(interpolationToExpression(expression, sourceSpan));
  } else {
    args.push(expression);
  }
  if (unit !== null) {
    args.push(literal(unit));
  }
  return call(Identifiers.styleProp, args, sourceSpan);
}
function classProp(name, expression, sourceSpan) {
  return call(Identifiers.classProp, [literal(name), expression], sourceSpan);
}
function styleMap(expression, sourceSpan) {
  const value = expression instanceof Interpolation2 ? interpolationToExpression(expression, sourceSpan) : expression;
  return call(Identifiers.styleMap, [value], sourceSpan);
}
function classMap(expression, sourceSpan) {
  const value = expression instanceof Interpolation2 ? interpolationToExpression(expression, sourceSpan) : expression;
  return call(Identifiers.classMap, [value], sourceSpan);
}
function domElement(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.domElement, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function domElementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.domElementStart, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function domElementEnd(sourceSpan) {
  return call(Identifiers.domElementEnd, [], sourceSpan);
}
function domElementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.domElementContainerStart,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function domElementContainer(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.domElementContainer,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function domElementContainerEnd() {
  return call(Identifiers.domElementContainerEnd, [], null);
}
function domListener(name, handlerFn, eventTargetResolver, sourceSpan) {
  const args = [literal(name), handlerFn];
  if (eventTargetResolver !== null) {
    args.push(importExpr(eventTargetResolver));
  }
  return call(Identifiers.domListener, args, sourceSpan);
}
function domTemplate(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  return templateBase(Identifiers.domTemplate, slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan);
}
function pipeBind(slot, varOffset, args) {
  if (args.length < 1 || args.length > PIPE_BINDINGS.length) {
    throw new Error(`pipeBind() argument count out of bounds`);
  }
  const instruction = PIPE_BINDINGS[args.length - 1];
  return importExpr(instruction).callFn([literal(slot), literal(varOffset), ...args]);
}
function pipeBindV(slot, varOffset, args) {
  return importExpr(Identifiers.pipeBindV).callFn([literal(slot), literal(varOffset), args]);
}
function textInterpolate(strings, expressions, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  return callVariadicInstruction(TEXT_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
}
function i18nExp(expr, sourceSpan) {
  return call(Identifiers.i18nExp, [expr], sourceSpan);
}
function i18nApply(slot, sourceSpan) {
  return call(Identifiers.i18nApply, [literal(slot)], sourceSpan);
}
function domProperty(name, expression, sanitizer, sourceSpan) {
  return propertyBase(Identifiers.domProperty, name, expression, sanitizer, sourceSpan);
}
function syntheticHostProperty(name, expression, sourceSpan) {
  return call(Identifiers.syntheticHostProperty, [literal(name), expression], sourceSpan);
}
function pureFunction(varOffset, fn2, args) {
  return callVariadicInstructionExpr(PURE_FUNCTION_CONFIG, [literal(varOffset), fn2], args, [], null);
}
function attachSourceLocation(templatePath, locations) {
  return call(Identifiers.attachSourceLocations, [literal(templatePath), locations], null);
}
function collateInterpolationArgs(strings, expressions) {
  if (strings.length < 1 || expressions.length !== strings.length - 1) {
    throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);
  }
  const interpolationArgs = [];
  if (expressions.length === 1 && strings[0] === "" && strings[1] === "") {
    interpolationArgs.push(expressions[0]);
  } else {
    let idx;
    for (idx = 0; idx < expressions.length; idx++) {
      interpolationArgs.push(literal(strings[idx]), expressions[idx]);
    }
    interpolationArgs.push(literal(strings[idx]));
  }
  return interpolationArgs;
}
function interpolationToExpression(interpolation, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(interpolation.strings, interpolation.expressions);
  return callVariadicInstructionExpr(VALUE_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
}
function call(instruction, args, sourceSpan) {
  const expr = importExpr(instruction).callFn(args, sourceSpan);
  return createStatementOp(new ExpressionStatement(expr, sourceSpan));
}
function conditional(condition, contextValue, sourceSpan) {
  const args = [condition];
  if (contextValue !== null) {
    args.push(contextValue);
  }
  return call(Identifiers.conditional, args, sourceSpan);
}
function callVariadicInstructionExpr(config2, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
  const n = config2.mapping(interpolationArgs.length);
  const lastInterpolationArg = interpolationArgs.at(-1);
  if (extraArgs.length === 0 && interpolationArgs.length > 1 && lastInterpolationArg instanceof LiteralExpr && lastInterpolationArg.value === "") {
    interpolationArgs.pop();
  }
  if (n < config2.constant.length) {
    return importExpr(config2.constant[n]).callFn([...baseArgs, ...interpolationArgs, ...extraArgs], sourceSpan);
  } else if (config2.variable !== null) {
    return importExpr(config2.variable).callFn([...baseArgs, literalArr(interpolationArgs), ...extraArgs], sourceSpan);
  } else {
    throw new Error(`AssertionError: unable to call variadic function`);
  }
}
function callVariadicInstruction(config2, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
  return createStatementOp(callVariadicInstructionExpr(config2, baseArgs, interpolationArgs, extraArgs, sourceSpan).toStmt());
}
function reify(job) {
  for (const unit of job.units) {
    reifyCreateOperations(unit, unit.create);
    reifyUpdateOperations(unit, unit.update);
  }
}
function reifyCreateOperations(unit, ops) {
  for (const op of ops) {
    transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);
    switch (op.kind) {
      case OpKind.Text:
        OpList.replace(op, text(op.handle.slot, op.initialValue, op.sourceSpan));
        break;
      case OpKind.ElementStart:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElementStart(op.handle.slot, op.tag, op.attributes, op.localRefs, op.startSourceSpan) : elementStart(op.handle.slot, op.tag, op.attributes, op.localRefs, op.startSourceSpan));
        break;
      case OpKind.Element:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElement(op.handle.slot, op.tag, op.attributes, op.localRefs, op.wholeSourceSpan) : element(op.handle.slot, op.tag, op.attributes, op.localRefs, op.wholeSourceSpan));
        break;
      case OpKind.ElementEnd:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElementEnd(op.sourceSpan) : elementEnd(op.sourceSpan));
        break;
      case OpKind.ContainerStart:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElementContainerStart(op.handle.slot, op.attributes, op.localRefs, op.startSourceSpan) : elementContainerStart(op.handle.slot, op.attributes, op.localRefs, op.startSourceSpan));
        break;
      case OpKind.Container:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElementContainer(op.handle.slot, op.attributes, op.localRefs, op.wholeSourceSpan) : elementContainer(op.handle.slot, op.attributes, op.localRefs, op.wholeSourceSpan));
        break;
      case OpKind.ContainerEnd:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly ? domElementContainerEnd() : elementContainerEnd());
        break;
      case OpKind.I18nStart:
        OpList.replace(op, i18nStart(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));
        break;
      case OpKind.I18nEnd:
        OpList.replace(op, i18nEnd(op.sourceSpan));
        break;
      case OpKind.I18n:
        OpList.replace(op, i18n(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));
        break;
      case OpKind.I18nAttributes:
        if (op.i18nAttributesConfig === null) {
          throw new Error(`AssertionError: i18nAttributesConfig was not set`);
        }
        OpList.replace(op, i18nAttributes(op.handle.slot, op.i18nAttributesConfig));
        break;
      case OpKind.Template:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (Array.isArray(op.localRefs)) {
          throw new Error(`AssertionError: local refs array should have been extracted into a constant`);
        }
        const childView = unit.job.views.get(op.xref);
        OpList.replace(
          op,
          // Block templates can't have directives so we can always generate them as DOM-only.
          op.templateKind === TemplateKind.Block || unit.job.mode === TemplateCompilationMode.DomOnly ? domTemplate(op.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan) : template(op.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan)
        );
        break;
      case OpKind.DisableBindings:
        OpList.replace(op, disableBindings());
        break;
      case OpKind.EnableBindings:
        OpList.replace(op, enableBindings());
        break;
      case OpKind.Pipe:
        OpList.replace(op, pipe2(op.handle.slot, op.name));
        break;
      case OpKind.DeclareLet:
        OpList.replace(op, declareLet(op.handle.slot, op.sourceSpan));
        break;
      case OpKind.Listener:
        const listenerFn = reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, op.consumesDollarEvent);
        const eventTargetResolver = op.eventTarget ? GLOBAL_TARGET_RESOLVERS.get(op.eventTarget) : null;
        if (eventTargetResolver === void 0) {
          throw new Error(`Unexpected global target '${op.eventTarget}' defined for '${op.name}' event. Supported list of global targets: window,document,body.`);
        }
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly && !op.hostListener && !op.isLegacyAnimationListener ? domListener(op.name, listenerFn, eventTargetResolver, op.sourceSpan) : listener(op.name, listenerFn, eventTargetResolver, op.hostListener && op.isLegacyAnimationListener, op.sourceSpan));
        break;
      case OpKind.TwoWayListener:
        OpList.replace(op, twoWayListener(op.name, reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, true), op.sourceSpan));
        break;
      case OpKind.Variable:
        if (op.variable.name === null) {
          throw new Error(`AssertionError: unnamed variable ${op.xref}`);
        }
        OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, void 0, StmtModifier.Final)));
        break;
      case OpKind.Namespace:
        switch (op.active) {
          case Namespace.HTML:
            OpList.replace(op, namespaceHTML());
            break;
          case Namespace.SVG:
            OpList.replace(op, namespaceSVG());
            break;
          case Namespace.Math:
            OpList.replace(op, namespaceMath());
            break;
        }
        break;
      case OpKind.Defer:
        const timerScheduling = !!op.loadingMinimumTime || !!op.loadingAfterTime || !!op.placeholderMinimumTime;
        OpList.replace(op, defer2(op.handle.slot, op.mainSlot.slot, op.resolverFn, op.loadingSlot?.slot ?? null, op.placeholderSlot?.slot ?? null, op.errorSlot?.slot ?? null, op.loadingConfig, op.placeholderConfig, timerScheduling, op.sourceSpan, op.flags));
        break;
      case OpKind.DeferOn:
        let args = [];
        switch (op.trigger.kind) {
          case DeferTriggerKind.Never:
          case DeferTriggerKind.Idle:
          case DeferTriggerKind.Immediate:
            break;
          case DeferTriggerKind.Timer:
            args = [op.trigger.delay];
            break;
          case DeferTriggerKind.Interaction:
          case DeferTriggerKind.Hover:
          case DeferTriggerKind.Viewport:
            if (op.modifier === "hydrate") {
              args = [];
            } else {
              args = [op.trigger.targetSlot?.slot ?? null];
              if (op.trigger.targetSlotViewSteps !== 0) {
                args.push(op.trigger.targetSlotViewSteps);
              }
            }
            break;
          default:
            throw new Error(`AssertionError: Unsupported reification of defer trigger kind ${op.trigger.kind}`);
        }
        OpList.replace(op, deferOn(op.trigger.kind, args, op.modifier, op.sourceSpan));
        break;
      case OpKind.ProjectionDef:
        OpList.replace(op, projectionDef(op.def));
        break;
      case OpKind.Projection:
        if (op.handle.slot === null) {
          throw new Error("No slot was assigned for project instruction");
        }
        let fallbackViewFnName = null;
        let fallbackDecls = null;
        let fallbackVars = null;
        if (op.fallbackView !== null) {
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          const fallbackView = unit.job.views.get(op.fallbackView);
          if (fallbackView === void 0) {
            throw new Error("AssertionError: projection had fallback view xref, but fallback view was not found");
          }
          if (fallbackView.fnName === null || fallbackView.decls === null || fallbackView.vars === null) {
            throw new Error(`AssertionError: expected projection fallback view to have been named and counted`);
          }
          fallbackViewFnName = fallbackView.fnName;
          fallbackDecls = fallbackView.decls;
          fallbackVars = fallbackView.vars;
        }
        OpList.replace(op, projection(op.handle.slot, op.projectionSlotIndex, op.attributes, fallbackViewFnName, fallbackDecls, fallbackVars, op.sourceSpan));
        break;
      case OpKind.ConditionalCreate:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (Array.isArray(op.localRefs)) {
          throw new Error(`AssertionError: local refs array should have been extracted into a constant`);
        }
        const conditionalCreateChildView = unit.job.views.get(op.xref);
        OpList.replace(op, conditionalCreate(op.handle.slot, variable(conditionalCreateChildView.fnName), conditionalCreateChildView.decls, conditionalCreateChildView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan));
        break;
      case OpKind.ConditionalBranchCreate:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (Array.isArray(op.localRefs)) {
          throw new Error(`AssertionError: local refs array should have been extracted into a constant`);
        }
        const conditionalBranchCreateChildView = unit.job.views.get(op.xref);
        OpList.replace(op, conditionalBranchCreate(op.handle.slot, variable(conditionalBranchCreateChildView.fnName), conditionalBranchCreateChildView.decls, conditionalBranchCreateChildView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan));
        break;
      case OpKind.RepeaterCreate:
        if (op.handle.slot === null) {
          throw new Error("No slot was assigned for repeater instruction");
        }
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        const repeaterView = unit.job.views.get(op.xref);
        if (repeaterView.fnName === null) {
          throw new Error(`AssertionError: expected repeater primary view to have been named`);
        }
        let emptyViewFnName = null;
        let emptyDecls = null;
        let emptyVars = null;
        if (op.emptyView !== null) {
          const emptyView = unit.job.views.get(op.emptyView);
          if (emptyView === void 0) {
            throw new Error("AssertionError: repeater had empty view xref, but empty view was not found");
          }
          if (emptyView.fnName === null || emptyView.decls === null || emptyView.vars === null) {
            throw new Error(`AssertionError: expected repeater empty view to have been named and counted`);
          }
          emptyViewFnName = emptyView.fnName;
          emptyDecls = emptyView.decls;
          emptyVars = emptyView.vars;
        }
        OpList.replace(op, repeaterCreate(op.handle.slot, repeaterView.fnName, op.decls, op.vars, op.tag, op.attributes, reifyTrackBy(unit, op), op.usesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, op.emptyTag, op.emptyAttributes, op.wholeSourceSpan));
        break;
      case OpKind.SourceLocation:
        const locationsLiteral = literalArr(op.locations.map(({ targetSlot, offset, line, column }) => {
          if (targetSlot.slot === null) {
            throw new Error("No slot was assigned for source location");
          }
          return literalArr([
            literal(targetSlot.slot),
            literal(offset),
            literal(line),
            literal(column)
          ]);
        }));
        OpList.replace(op, attachSourceLocation(op.templatePath, locationsLiteral));
        break;
      case OpKind.Statement:
        break;
      default:
        throw new Error(`AssertionError: Unsupported reification of create op ${OpKind[op.kind]}`);
    }
  }
}
function reifyUpdateOperations(unit, ops) {
  for (const op of ops) {
    transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);
    switch (op.kind) {
      case OpKind.Advance:
        OpList.replace(op, advance(op.delta, op.sourceSpan));
        break;
      case OpKind.Property:
        OpList.replace(op, unit.job.mode === TemplateCompilationMode.DomOnly && !op.isLegacyAnimationTrigger ? domProperty(DOM_PROPERTY_REMAPPING.get(op.name) ?? op.name, op.expression, op.sanitizer, op.sourceSpan) : property(op.name, op.expression, op.sanitizer, op.sourceSpan));
        break;
      case OpKind.TwoWayProperty:
        OpList.replace(op, twoWayProperty(op.name, op.expression, op.sanitizer, op.sourceSpan));
        break;
      case OpKind.StyleProp:
        OpList.replace(op, styleProp(op.name, op.expression, op.unit, op.sourceSpan));
        break;
      case OpKind.ClassProp:
        OpList.replace(op, classProp(op.name, op.expression, op.sourceSpan));
        break;
      case OpKind.StyleMap:
        OpList.replace(op, styleMap(op.expression, op.sourceSpan));
        break;
      case OpKind.ClassMap:
        OpList.replace(op, classMap(op.expression, op.sourceSpan));
        break;
      case OpKind.I18nExpression:
        OpList.replace(op, i18nExp(op.expression, op.sourceSpan));
        break;
      case OpKind.I18nApply:
        OpList.replace(op, i18nApply(op.handle.slot, op.sourceSpan));
        break;
      case OpKind.InterpolateText:
        OpList.replace(op, textInterpolate(op.interpolation.strings, op.interpolation.expressions, op.sourceSpan));
        break;
      case OpKind.Attribute:
        OpList.replace(op, attribute(op.name, op.expression, op.sanitizer, op.namespace, op.sourceSpan));
        break;
      case OpKind.DomProperty:
        if (op.expression instanceof Interpolation2) {
          throw new Error("not yet handled");
        } else {
          if (op.isLegacyAnimationTrigger) {
            OpList.replace(op, syntheticHostProperty(op.name, op.expression, op.sourceSpan));
          } else {
            OpList.replace(op, domProperty(DOM_PROPERTY_REMAPPING.get(op.name) ?? op.name, op.expression, op.sanitizer, op.sourceSpan));
          }
        }
        break;
      case OpKind.Variable:
        if (op.variable.name === null) {
          throw new Error(`AssertionError: unnamed variable ${op.xref}`);
        }
        OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, void 0, StmtModifier.Final)));
        break;
      case OpKind.Conditional:
        if (op.processed === null) {
          throw new Error(`Conditional test was not set.`);
        }
        OpList.replace(op, conditional(op.processed, op.contextValue, op.sourceSpan));
        break;
      case OpKind.Repeater:
        OpList.replace(op, repeater(op.collection, op.sourceSpan));
        break;
      case OpKind.DeferWhen:
        OpList.replace(op, deferWhen(op.modifier, op.expr, op.sourceSpan));
        break;
      case OpKind.StoreLet:
        throw new Error(`AssertionError: unexpected storeLet ${op.declaredName}`);
      case OpKind.Statement:
        break;
      default:
        throw new Error(`AssertionError: Unsupported reification of update op ${OpKind[op.kind]}`);
    }
  }
}
function reifyIrExpression(expr) {
  if (!isIrExpression(expr)) {
    return expr;
  }
  switch (expr.kind) {
    case ExpressionKind.NextContext:
      return nextContext(expr.steps);
    case ExpressionKind.Reference:
      return reference(expr.targetSlot.slot + 1 + expr.offset);
    case ExpressionKind.LexicalRead:
      throw new Error(`AssertionError: unresolved LexicalRead of ${expr.name}`);
    case ExpressionKind.TwoWayBindingSet:
      throw new Error(`AssertionError: unresolved TwoWayBindingSet`);
    case ExpressionKind.RestoreView:
      if (typeof expr.view === "number") {
        throw new Error(`AssertionError: unresolved RestoreView`);
      }
      return restoreView(expr.view);
    case ExpressionKind.ResetView:
      return resetView(expr.expr);
    case ExpressionKind.GetCurrentView:
      return getCurrentView();
    case ExpressionKind.ReadVariable:
      if (expr.name === null) {
        throw new Error(`Read of unnamed variable ${expr.xref}`);
      }
      return variable(expr.name);
    case ExpressionKind.ReadTemporaryExpr:
      if (expr.name === null) {
        throw new Error(`Read of unnamed temporary ${expr.xref}`);
      }
      return variable(expr.name);
    case ExpressionKind.AssignTemporaryExpr:
      if (expr.name === null) {
        throw new Error(`Assign of unnamed temporary ${expr.xref}`);
      }
      return variable(expr.name).set(expr.expr);
    case ExpressionKind.PureFunctionExpr:
      if (expr.fn === null) {
        throw new Error(`AssertionError: expected PureFunctions to have been extracted`);
      }
      return pureFunction(expr.varOffset, expr.fn, expr.args);
    case ExpressionKind.PureFunctionParameterExpr:
      throw new Error(`AssertionError: expected PureFunctionParameterExpr to have been extracted`);
    case ExpressionKind.PipeBinding:
      return pipeBind(expr.targetSlot.slot, expr.varOffset, expr.args);
    case ExpressionKind.PipeBindingVariadic:
      return pipeBindV(expr.targetSlot.slot, expr.varOffset, expr.args);
    case ExpressionKind.SlotLiteralExpr:
      return literal(expr.slot.slot);
    case ExpressionKind.ContextLetReference:
      return readContextLet(expr.targetSlot.slot);
    case ExpressionKind.StoreLet:
      return storeLet(expr.value, expr.sourceSpan);
    case ExpressionKind.TrackContext:
      return variable("this");
    default:
      throw new Error(`AssertionError: Unsupported reification of ir.Expression kind: ${ExpressionKind[expr.kind]}`);
  }
}
function reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {
  reifyUpdateOperations(unit, handlerOps);
  const handlerStmts = [];
  for (const op of handlerOps) {
    if (op.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[op.kind]}`);
    }
    handlerStmts.push(op.statement);
  }
  const params = [];
  if (consumesDollarEvent) {
    params.push(new FnParam("$event"));
  }
  return fn(params, handlerStmts, void 0, void 0, name);
}
function reifyTrackBy(unit, op) {
  if (op.trackByFn !== null) {
    return op.trackByFn;
  }
  const params = [new FnParam("$index"), new FnParam("$item")];
  let fn$1;
  if (op.trackByOps === null) {
    fn$1 = op.usesComponentInstance ? fn(params, [new ReturnStatement(op.track)]) : arrowFn(params, op.track);
  } else {
    reifyUpdateOperations(unit, op.trackByOps);
    const statements = [];
    for (const trackOp of op.trackByOps) {
      if (trackOp.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[trackOp.kind]}`);
      }
      statements.push(trackOp.statement);
    }
    fn$1 = op.usesComponentInstance || statements.length !== 1 || !(statements[0] instanceof ReturnStatement) ? fn(params, statements) : arrowFn(params, statements[0].value);
  }
  op.trackByFn = unit.job.pool.getSharedFunctionReference(fn$1, "_forTrack");
  return op.trackByFn;
}
function removeEmptyBindings(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      switch (op.kind) {
        case OpKind.Attribute:
        case OpKind.Binding:
        case OpKind.ClassProp:
        case OpKind.ClassMap:
        case OpKind.Property:
        case OpKind.StyleProp:
        case OpKind.StyleMap:
          if (op.expression instanceof EmptyExpr2) {
            OpList.remove(op);
          }
          break;
      }
    }
  }
}
function removeI18nContexts(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nContext:
          OpList.remove(op);
          break;
        case OpKind.I18nStart:
          op.context = null;
          break;
      }
    }
  }
}
function removeIllegalLetReferences(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      if (op.kind !== OpKind.Variable || op.variable.kind !== SemanticVariableKind.Identifier || !(op.initializer instanceof StoreLetExpr)) {
        continue;
      }
      const name = op.variable.identifier;
      let current = op;
      while (current && current.kind !== OpKind.ListEnd) {
        transformExpressionsInOp(current, (expr) => expr instanceof LexicalReadExpr && expr.name === name ? literal(void 0) : expr, VisitorContextFlag.None);
        current = current.prev;
      }
    }
  }
}
function removeUnusedI18nAttributesOps(job) {
  for (const unit of job.units) {
    const ownersWithI18nExpressions = /* @__PURE__ */ new Set();
    for (const op of unit.update) {
      switch (op.kind) {
        case OpKind.I18nExpression:
          ownersWithI18nExpressions.add(op.i18nOwner);
      }
    }
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nAttributes:
          if (ownersWithI18nExpressions.has(op.xref)) {
            continue;
          }
          OpList.remove(op);
      }
    }
  }
}
function resolveContexts(job) {
  for (const unit of job.units) {
    processLexicalScope$1(unit, unit.create);
    processLexicalScope$1(unit, unit.update);
  }
}
function processLexicalScope$1(view, ops) {
  const scope = /* @__PURE__ */ new Map();
  scope.set(view.xref, variable("ctx"));
  for (const op of ops) {
    switch (op.kind) {
      case OpKind.Variable:
        switch (op.variable.kind) {
          case SemanticVariableKind.Context:
            scope.set(op.variable.view, new ReadVariableExpr(op.xref));
            break;
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        processLexicalScope$1(view, op.handlerOps);
        break;
      case OpKind.RepeaterCreate:
        if (op.trackByOps !== null) {
          processLexicalScope$1(view, op.trackByOps);
        }
        break;
    }
  }
  if (view === view.job.root) {
    scope.set(view.xref, variable("ctx"));
  }
  for (const op of ops) {
    transformExpressionsInOp(op, (expr) => {
      if (expr instanceof ContextExpr) {
        if (!scope.has(expr.view)) {
          throw new Error(`No context found for reference to view ${expr.view} from view ${view.xref}`);
        }
        return scope.get(expr.view);
      } else {
        return expr;
      }
    }, VisitorContextFlag.None);
  }
}
function resolveDeferDepsFns(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.Defer) {
        if (op.resolverFn !== null) {
          continue;
        }
        if (op.ownResolverFn !== null) {
          if (op.handle.slot === null) {
            throw new Error("AssertionError: slot must be assigned before extracting defer deps functions");
          }
          const fullPathName = unit.fnName?.replace("_Template", "");
          op.resolverFn = job.pool.getSharedFunctionReference(
            op.ownResolverFn,
            `${fullPathName}_Defer_${op.handle.slot}_DepsFn`,
            /* Don't use unique names for TDB compatibility */
            false
          );
        }
      }
    }
  }
}
function resolveDollarEvent(job) {
  for (const unit of job.units) {
    transformDollarEvent(unit.create);
    transformDollarEvent(unit.update);
  }
}
function transformDollarEvent(ops) {
  for (const op of ops) {
    if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof LexicalReadExpr && expr.name === "$event") {
          if (op.kind === OpKind.Listener) {
            op.consumesDollarEvent = true;
          }
          return new ReadVarExpr(expr.name);
        }
        return expr;
      }, VisitorContextFlag.InChildOperation);
    }
  }
}
function resolveI18nElementPlaceholders(job) {
  const i18nContexts = /* @__PURE__ */ new Map();
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nContext:
          i18nContexts.set(op.xref, op);
          break;
        case OpKind.ElementStart:
          elements.set(op.xref, op);
          break;
      }
    }
  }
  resolvePlaceholdersForView(job, job.root, i18nContexts, elements);
}
function resolvePlaceholdersForView(job, unit, i18nContexts, elements, pendingStructuralDirective) {
  let currentOps = null;
  let pendingStructuralDirectiveCloses = /* @__PURE__ */ new Map();
  for (const op of unit.create) {
    switch (op.kind) {
      case OpKind.I18nStart:
        if (!op.context) {
          throw Error("Could not find i18n context for i18n op");
        }
        currentOps = { i18nBlock: op, i18nContext: i18nContexts.get(op.context) };
        break;
      case OpKind.I18nEnd:
        currentOps = null;
        break;
      case OpKind.ElementStart:
        if (op.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          if (pendingStructuralDirective && op.i18nPlaceholder.closeName) {
            pendingStructuralDirectiveCloses.set(op.xref, pendingStructuralDirective);
          }
          pendingStructuralDirective = void 0;
        }
        break;
      case OpKind.ElementEnd:
        const startOp = elements.get(op.xref);
        if (startOp && startOp.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("AssertionError: i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementClose(startOp, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirectiveCloses.get(op.xref));
          pendingStructuralDirectiveCloses.delete(op.xref);
        }
        break;
      case OpKind.Projection:
        if (op.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          recordElementClose(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          pendingStructuralDirective = void 0;
        }
        break;
      case OpKind.ConditionalCreate:
      case OpKind.ConditionalBranchCreate:
      case OpKind.Template:
        const view = job.views.get(op.xref);
        if (op.i18nPlaceholder === void 0) {
          resolvePlaceholdersForView(job, view, i18nContexts, elements);
        } else {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          if (op.templateKind === TemplateKind.Structural) {
            resolvePlaceholdersForView(job, view, i18nContexts, elements, op);
          } else {
            recordTemplateStart(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            resolvePlaceholdersForView(job, view, i18nContexts, elements);
            recordTemplateClose(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
        }
        break;
      case OpKind.RepeaterCreate:
        if (pendingStructuralDirective !== void 0) {
          throw Error("AssertionError: Unexpected structural directive associated with @for block");
        }
        const forSlot = op.handle.slot + 1;
        const forView = job.views.get(op.xref);
        if (op.i18nPlaceholder === void 0) {
          resolvePlaceholdersForView(job, forView, i18nContexts, elements);
        } else {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordTemplateStart(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          resolvePlaceholdersForView(job, forView, i18nContexts, elements);
          recordTemplateClose(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          pendingStructuralDirective = void 0;
        }
        if (op.emptyView !== null) {
          const emptySlot = op.handle.slot + 2;
          const emptyView = job.views.get(op.emptyView);
          if (op.emptyI18nPlaceholder === void 0) {
            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
          } else {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            recordTemplateStart(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
            recordTemplateClose(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
        }
        break;
    }
  }
}
function recordElementStart(op, i18nContext, i18nBlock, structuralDirective) {
  const { startName, closeName } = op.i18nPlaceholder;
  let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.OpenTag;
  let value = op.handle.slot;
  if (structuralDirective !== void 0) {
    flags |= I18nParamValueFlags.TemplateTag;
    value = { element: value, template: structuralDirective.handle.slot };
  }
  if (!closeName) {
    flags |= I18nParamValueFlags.CloseTag;
  }
  addParam(i18nContext.params, startName, value, i18nBlock.subTemplateIndex, flags);
}
function recordElementClose(op, i18nContext, i18nBlock, structuralDirective) {
  const { closeName } = op.i18nPlaceholder;
  if (closeName) {
    let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.CloseTag;
    let value = op.handle.slot;
    if (structuralDirective !== void 0) {
      flags |= I18nParamValueFlags.TemplateTag;
      value = { element: value, template: structuralDirective.handle.slot };
    }
    addParam(i18nContext.params, closeName, value, i18nBlock.subTemplateIndex, flags);
  }
}
function recordTemplateStart(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
  let { startName, closeName } = i18nPlaceholder;
  let flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.OpenTag;
  if (!closeName) {
    flags |= I18nParamValueFlags.CloseTag;
  }
  if (structuralDirective !== void 0) {
    addParam(i18nContext.params, startName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
  }
  addParam(i18nContext.params, startName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
}
function recordTemplateClose(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
  const { closeName } = i18nPlaceholder;
  const flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.CloseTag;
  if (closeName) {
    addParam(i18nContext.params, closeName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
    if (structuralDirective !== void 0) {
      addParam(i18nContext.params, closeName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
    }
  }
}
function getSubTemplateIndexForTemplateTag(job, i18nOp, view) {
  for (const childOp of view.create) {
    if (childOp.kind === OpKind.I18nStart) {
      return childOp.subTemplateIndex;
    }
  }
  return i18nOp.subTemplateIndex;
}
function addParam(params, placeholder, value, subTemplateIndex, flags) {
  const values = params.get(placeholder) ?? [];
  values.push({ value, subTemplateIndex, flags });
  params.set(placeholder, values);
}
function resolveI18nExpressionPlaceholders(job) {
  const subTemplateIndices = /* @__PURE__ */ new Map();
  const i18nContexts = /* @__PURE__ */ new Map();
  const icuPlaceholders = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          subTemplateIndices.set(op.xref, op.subTemplateIndex);
          break;
        case OpKind.I18nContext:
          i18nContexts.set(op.xref, op);
          break;
        case OpKind.IcuPlaceholder:
          icuPlaceholders.set(op.xref, op);
          break;
      }
    }
  }
  const expressionIndices = /* @__PURE__ */ new Map();
  const referenceIndex = (op) => op.usage === I18nExpressionFor.I18nText ? op.i18nOwner : op.context;
  for (const unit of job.units) {
    for (const op of unit.update) {
      if (op.kind === OpKind.I18nExpression) {
        const index = expressionIndices.get(referenceIndex(op)) || 0;
        const subTemplateIndex = subTemplateIndices.get(op.i18nOwner) ?? null;
        const value = {
          value: index,
          subTemplateIndex,
          flags: I18nParamValueFlags.ExpressionIndex
        };
        updatePlaceholder(op, value, i18nContexts, icuPlaceholders);
        expressionIndices.set(referenceIndex(op), index + 1);
      }
    }
  }
}
function updatePlaceholder(op, value, i18nContexts, icuPlaceholders) {
  if (op.i18nPlaceholder !== null) {
    const i18nContext = i18nContexts.get(op.context);
    const params = op.resolutionTime === I18nParamResolutionTime.Creation ? i18nContext.params : i18nContext.postprocessingParams;
    const values = params.get(op.i18nPlaceholder) || [];
    values.push(value);
    params.set(op.i18nPlaceholder, values);
  }
  if (op.icuPlaceholder !== null) {
    const icuPlaceholderOp = icuPlaceholders.get(op.icuPlaceholder);
    icuPlaceholderOp?.expressionPlaceholders.push(value);
  }
}
function resolveNames(job) {
  for (const unit of job.units) {
    processLexicalScope(unit, unit.create, null);
    processLexicalScope(unit, unit.update, null);
  }
}
function processLexicalScope(unit, ops, savedView) {
  const scope = /* @__PURE__ */ new Map();
  const localDefinitions = /* @__PURE__ */ new Map();
  for (const op of ops) {
    switch (op.kind) {
      case OpKind.Variable:
        switch (op.variable.kind) {
          case SemanticVariableKind.Identifier:
            if (op.variable.local) {
              if (localDefinitions.has(op.variable.identifier)) {
                continue;
              }
              localDefinitions.set(op.variable.identifier, op.xref);
            } else if (scope.has(op.variable.identifier)) {
              continue;
            }
            scope.set(op.variable.identifier, op.xref);
            break;
          case SemanticVariableKind.Alias:
            if (scope.has(op.variable.identifier)) {
              continue;
            }
            scope.set(op.variable.identifier, op.xref);
            break;
          case SemanticVariableKind.SavedView:
            savedView = {
              view: op.variable.view,
              variable: op.xref
            };
            break;
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        processLexicalScope(unit, op.handlerOps, savedView);
        break;
      case OpKind.RepeaterCreate:
        if (op.trackByOps !== null) {
          processLexicalScope(unit, op.trackByOps, savedView);
        }
        break;
    }
  }
  for (const op of ops) {
    if (op.kind == OpKind.Listener || op.kind === OpKind.TwoWayListener) {
      continue;
    }
    transformExpressionsInOp(op, (expr) => {
      if (expr instanceof LexicalReadExpr) {
        if (localDefinitions.has(expr.name)) {
          return new ReadVariableExpr(localDefinitions.get(expr.name));
        } else if (scope.has(expr.name)) {
          return new ReadVariableExpr(scope.get(expr.name));
        } else {
          return new ReadPropExpr(new ContextExpr(unit.job.root.xref), expr.name);
        }
      } else if (expr instanceof RestoreViewExpr && typeof expr.view === "number") {
        if (savedView === null || savedView.view !== expr.view) {
          throw new Error(`AssertionError: no saved view ${expr.view} from view ${unit.xref}`);
        }
        expr.view = new ReadVariableExpr(savedView.variable);
        return expr;
      } else {
        return expr;
      }
    }, VisitorContextFlag.None);
  }
  for (const op of ops) {
    visitExpressionsInOp(op, (expr) => {
      if (expr instanceof LexicalReadExpr) {
        throw new Error(`AssertionError: no lexical reads should remain, but found read of ${expr.name}`);
      }
    });
  }
}
function resolveSanitizers(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    if (job.kind !== CompilationJobKind.Host) {
      for (const op of unit.create) {
        if (op.kind === OpKind.ExtractedAttribute) {
          const trustedValueFn = trustedValueFns.get(getOnlySecurityContext(op.securityContext)) ?? null;
          op.trustedValueFn = trustedValueFn !== null ? importExpr(trustedValueFn) : null;
        }
      }
    }
    for (const op of unit.update) {
      switch (op.kind) {
        case OpKind.Property:
        case OpKind.Attribute:
        case OpKind.DomProperty:
          let sanitizerFn = null;
          if (Array.isArray(op.securityContext) && op.securityContext.length === 2 && op.securityContext.indexOf(SecurityContext2.URL) > -1 && op.securityContext.indexOf(SecurityContext2.RESOURCE_URL) > -1) {
            sanitizerFn = Identifiers.sanitizeUrlOrResourceUrl;
          } else {
            sanitizerFn = sanitizerFns.get(getOnlySecurityContext(op.securityContext)) ?? null;
          }
          op.sanitizer = sanitizerFn !== null ? importExpr(sanitizerFn) : null;
          if (op.sanitizer === null) {
            let isIframe = false;
            if (job.kind === CompilationJobKind.Host || op.kind === OpKind.DomProperty) {
              isIframe = true;
            } else {
              const ownerOp = elements.get(op.target);
              if (ownerOp === void 0 || !isElementOrContainerOp(ownerOp)) {
                throw Error("Property should have an element-like owner");
              }
              isIframe = isIframeElement(ownerOp);
            }
            if (isIframe && isIframeSecuritySensitiveAttr(op.name)) {
              op.sanitizer = importExpr(Identifiers.validateIframeAttribute);
            }
          }
          break;
      }
    }
  }
}
function isIframeElement(op) {
  return op.kind === OpKind.ElementStart && op.tag?.toLowerCase() === "iframe";
}
function getOnlySecurityContext(securityContext) {
  if (Array.isArray(securityContext)) {
    if (securityContext.length > 1) {
      throw Error(`AssertionError: Ambiguous security context`);
    }
    return securityContext[0] || SecurityContext2.NONE;
  }
  return securityContext;
}
function saveAndRestoreView(job) {
  for (const unit of job.units) {
    unit.create.prepend([
      createVariableOp(unit.job.allocateXrefId(), {
        kind: SemanticVariableKind.SavedView,
        name: null,
        view: unit.xref
      }, new GetCurrentViewExpr(), VariableFlags.None)
    ]);
    for (const op of unit.create) {
      if (op.kind !== OpKind.Listener && op.kind !== OpKind.TwoWayListener) {
        continue;
      }
      let needsRestoreView = unit !== job.root;
      if (!needsRestoreView) {
        for (const handlerOp of op.handlerOps) {
          visitExpressionsInOp(handlerOp, (expr) => {
            if (expr instanceof ReferenceExpr || expr instanceof ContextLetReferenceExpr) {
              needsRestoreView = true;
            }
          });
        }
      }
      if (needsRestoreView) {
        addSaveRestoreViewOperationToListener(unit, op);
      }
    }
  }
}
function addSaveRestoreViewOperationToListener(unit, op) {
  op.handlerOps.prepend([
    createVariableOp(unit.job.allocateXrefId(), {
      kind: SemanticVariableKind.Context,
      name: null,
      view: unit.xref
    }, new RestoreViewExpr(unit.xref), VariableFlags.None)
  ]);
  for (const handlerOp of op.handlerOps) {
    if (handlerOp.kind === OpKind.Statement && handlerOp.statement instanceof ReturnStatement) {
      handlerOp.statement.value = new ResetViewExpr(handlerOp.statement.value);
    }
  }
}
function allocateSlots(job) {
  const slotMap = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    let slotCount = 0;
    for (const op of unit.create) {
      if (!hasConsumesSlotTrait(op)) {
        continue;
      }
      op.handle.slot = slotCount;
      slotMap.set(op.xref, op.handle.slot);
      slotCount += op.numSlotsUsed;
    }
    unit.decls = slotCount;
  }
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      if (op.kind === OpKind.Template || op.kind === OpKind.ConditionalCreate || op.kind === OpKind.ConditionalBranchCreate || op.kind === OpKind.RepeaterCreate) {
        const childView = job.views.get(op.xref);
        op.decls = childView.decls;
      }
    }
  }
}
function optimizeStoreLet(job) {
  const letUsedExternally = /* @__PURE__ */ new Set();
  const declareLetOps = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      if (op.kind === OpKind.DeclareLet) {
        declareLetOps.set(op.xref, op);
      }
      visitExpressionsInOp(op, (expr) => {
        if (expr instanceof ContextLetReferenceExpr) {
          letUsedExternally.add(expr.target);
        }
      });
    }
  }
  for (const unit of job.units) {
    for (const op of unit.update) {
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof StoreLetExpr && !letUsedExternally.has(expr.target)) {
          if (!hasPipe(expr)) {
            OpList.remove(declareLetOps.get(expr.target));
          }
          return expr.value;
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function hasPipe(root) {
  let result = false;
  transformExpressionsInExpression(root, (expr) => {
    if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {
      result = true;
    }
    return expr;
  }, VisitorContextFlag.None);
  return result;
}
function stripNonrequiredParentheses(job) {
  const requiredParens = /* @__PURE__ */ new Set();
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      visitExpressionsInOp(op, (expr) => {
        if (expr instanceof BinaryOperatorExpr) {
          switch (expr.operator) {
            case BinaryOperator.Exponentiation:
              checkExponentiationParens(expr, requiredParens);
              break;
            case BinaryOperator.NullishCoalesce:
              checkNullishCoalescingParens(expr, requiredParens);
              break;
          }
        }
      });
    }
  }
  for (const unit of job.units) {
    for (const op of unit.ops()) {
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof ParenthesizedExpr) {
          return requiredParens.has(expr) ? expr : expr.expr;
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function checkExponentiationParens(expr, requiredParens) {
  if (expr.lhs instanceof ParenthesizedExpr && expr.lhs.expr instanceof UnaryOperatorExpr) {
    requiredParens.add(expr.lhs);
  }
}
function checkNullishCoalescingParens(expr, requiredParens) {
  if (expr.lhs instanceof ParenthesizedExpr && (isLogicalAndOr(expr.lhs.expr) || expr.lhs.expr instanceof ConditionalExpr)) {
    requiredParens.add(expr.lhs);
  }
  if (expr.rhs instanceof ParenthesizedExpr && (isLogicalAndOr(expr.rhs.expr) || expr.rhs.expr instanceof ConditionalExpr)) {
    requiredParens.add(expr.rhs);
  }
}
function isLogicalAndOr(expr) {
  return expr instanceof BinaryOperatorExpr && (expr.operator === BinaryOperator.And || expr.operator === BinaryOperator.Or);
}
function specializeStyleBindings(job) {
  for (const unit of job.units) {
    for (const op of unit.update) {
      if (op.kind !== OpKind.Binding) {
        continue;
      }
      switch (op.bindingKind) {
        case BindingKind.ClassName:
          if (op.expression instanceof Interpolation2) {
            throw new Error(`Unexpected interpolation in ClassName binding`);
          }
          OpList.replace(op, createClassPropOp(op.target, op.name, op.expression, op.sourceSpan));
          break;
        case BindingKind.StyleProperty:
          OpList.replace(op, createStylePropOp(op.target, op.name, op.expression, op.unit, op.sourceSpan));
          break;
        case BindingKind.Property:
        case BindingKind.Template:
          if (op.name === "style") {
            OpList.replace(op, createStyleMapOp(op.target, op.expression, op.sourceSpan));
          } else if (op.name === "class") {
            OpList.replace(op, createClassMapOp(op.target, op.expression, op.sourceSpan));
          }
          break;
      }
    }
  }
}
function generateTemporaryVariables(job) {
  for (const unit of job.units) {
    unit.create.prepend(generateTemporaries(unit.create));
    unit.update.prepend(generateTemporaries(unit.update));
  }
}
function generateTemporaries(ops) {
  let opCount = 0;
  let generatedStatements = [];
  for (const op of ops) {
    const finalReads = /* @__PURE__ */ new Map();
    visitExpressionsInOp(op, (expr, flag) => {
      if (flag & VisitorContextFlag.InChildOperation) {
        return;
      }
      if (expr instanceof ReadTemporaryExpr) {
        finalReads.set(expr.xref, expr);
      }
    });
    let count = 0;
    const assigned = /* @__PURE__ */ new Set();
    const released = /* @__PURE__ */ new Set();
    const defs = /* @__PURE__ */ new Map();
    visitExpressionsInOp(op, (expr, flag) => {
      if (flag & VisitorContextFlag.InChildOperation) {
        return;
      }
      if (expr instanceof AssignTemporaryExpr) {
        if (!assigned.has(expr.xref)) {
          assigned.add(expr.xref);
          defs.set(expr.xref, `tmp_${opCount}_${count++}`);
        }
        assignName(defs, expr);
      } else if (expr instanceof ReadTemporaryExpr) {
        if (finalReads.get(expr.xref) === expr) {
          released.add(expr.xref);
          count--;
        }
        assignName(defs, expr);
      }
    });
    generatedStatements.push(...Array.from(new Set(defs.values())).map((name) => createStatementOp(new DeclareVarStmt(name))));
    opCount++;
    if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
      op.handlerOps.prepend(generateTemporaries(op.handlerOps));
    } else if (op.kind === OpKind.RepeaterCreate && op.trackByOps !== null) {
      op.trackByOps.prepend(generateTemporaries(op.trackByOps));
    }
  }
  return generatedStatements;
}
function assignName(names, expr) {
  const name = names.get(expr.xref);
  if (name === void 0) {
    throw new Error(`Found xref with unassigned name: ${expr.xref}`);
  }
  expr.name = name;
}
function optimizeTrackFns(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind !== OpKind.RepeaterCreate) {
        continue;
      }
      if (op.track instanceof ReadVarExpr && op.track.name === "$index") {
        op.trackByFn = importExpr(Identifiers.repeaterTrackByIndex);
      } else if (op.track instanceof ReadVarExpr && op.track.name === "$item") {
        op.trackByFn = importExpr(Identifiers.repeaterTrackByIdentity);
      } else if (isTrackByFunctionCall(job.root.xref, op.track)) {
        op.usesComponentInstance = true;
        if (op.track.receiver.receiver.view === unit.xref) {
          op.trackByFn = op.track.receiver;
        } else {
          op.trackByFn = importExpr(Identifiers.componentInstance).callFn([]).prop(op.track.receiver.name);
          op.track = op.trackByFn;
        }
      } else {
        op.track = transformExpressionsInExpression(op.track, (expr) => {
          if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {
            throw new Error(`Illegal State: Pipes are not allowed in this context`);
          } else if (expr instanceof ContextExpr) {
            op.usesComponentInstance = true;
            return new TrackContextExpr(expr.view);
          }
          return expr;
        }, VisitorContextFlag.None);
        const trackOpList = new OpList();
        trackOpList.push(createStatementOp(new ReturnStatement(op.track, op.track.sourceSpan)));
        op.trackByOps = trackOpList;
      }
    }
  }
}
function isTrackByFunctionCall(rootView, expr) {
  if (!(expr instanceof InvokeFunctionExpr) || expr.args.length === 0 || expr.args.length > 2) {
    return false;
  }
  if (!(expr.receiver instanceof ReadPropExpr && expr.receiver.receiver instanceof ContextExpr) || expr.receiver.receiver.view !== rootView) {
    return false;
  }
  const [arg0, arg1] = expr.args;
  if (!(arg0 instanceof ReadVarExpr) || arg0.name !== "$index") {
    return false;
  } else if (expr.args.length === 1) {
    return true;
  }
  if (!(arg1 instanceof ReadVarExpr) || arg1.name !== "$item") {
    return false;
  }
  return true;
}
function generateTrackVariables(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind !== OpKind.RepeaterCreate) {
        continue;
      }
      op.track = transformExpressionsInExpression(op.track, (expr) => {
        if (expr instanceof LexicalReadExpr) {
          if (op.varNames.$index.has(expr.name)) {
            return variable("$index");
          } else if (expr.name === op.varNames.$implicit) {
            return variable("$item");
          }
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function transformTwoWayBindingSet(job) {
  for (const unit of job.units) {
    for (const op of unit.create) {
      if (op.kind === OpKind.TwoWayListener) {
        transformExpressionsInOp(op, (expr) => {
          if (!(expr instanceof TwoWayBindingSetExpr)) {
            return expr;
          }
          const { target, value } = expr;
          if (target instanceof ReadPropExpr || target instanceof ReadKeyExpr) {
            return twoWayBindingSet(target, value).or(target.set(value));
          }
          if (target instanceof ReadVariableExpr) {
            return twoWayBindingSet(target, value);
          }
          throw new Error(`Unsupported expression in two-way action binding.`);
        }, VisitorContextFlag.InChildOperation);
      }
    }
  }
}
function countVariables(job) {
  for (const unit of job.units) {
    let varCount = 0;
    for (const op of unit.ops()) {
      if (hasConsumesVarsTrait(op)) {
        varCount += varsUsedByOp(op);
      }
    }
    for (const op of unit.ops()) {
      visitExpressionsInOp(op, (expr) => {
        if (!isIrExpression(expr)) {
          return;
        }
        if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && expr instanceof PureFunctionExpr) {
          return;
        }
        if (hasUsesVarOffsetTrait(expr)) {
          expr.varOffset = varCount;
        }
        if (hasConsumesVarsTrait(expr)) {
          varCount += varsUsedByIrExpression(expr);
        }
      });
    }
    if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
      for (const op of unit.ops()) {
        visitExpressionsInOp(op, (expr) => {
          if (!isIrExpression(expr) || !(expr instanceof PureFunctionExpr)) {
            return;
          }
          if (hasUsesVarOffsetTrait(expr)) {
            expr.varOffset = varCount;
          }
          if (hasConsumesVarsTrait(expr)) {
            varCount += varsUsedByIrExpression(expr);
          }
        });
      }
    }
    unit.vars = varCount;
  }
  if (job instanceof ComponentCompilationJob) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind !== OpKind.Template && op.kind !== OpKind.RepeaterCreate && op.kind !== OpKind.ConditionalCreate && op.kind !== OpKind.ConditionalBranchCreate) {
          continue;
        }
        const childView = job.views.get(op.xref);
        op.vars = childView.vars;
      }
    }
  }
}
function varsUsedByOp(op) {
  let slots;
  switch (op.kind) {
    case OpKind.Attribute:
      slots = 1;
      if (op.expression instanceof Interpolation2 && !isSingletonInterpolation(op.expression)) {
        slots += op.expression.expressions.length;
      }
      return slots;
    case OpKind.Property:
    case OpKind.DomProperty:
      slots = 1;
      if (op.expression instanceof Interpolation2) {
        slots += op.expression.expressions.length;
      }
      return slots;
    case OpKind.TwoWayProperty:
      return 1;
    case OpKind.StyleProp:
    case OpKind.ClassProp:
    case OpKind.StyleMap:
    case OpKind.ClassMap:
      slots = 2;
      if (op.expression instanceof Interpolation2) {
        slots += op.expression.expressions.length;
      }
      return slots;
    case OpKind.InterpolateText:
      return op.interpolation.expressions.length;
    case OpKind.I18nExpression:
    case OpKind.Conditional:
    case OpKind.DeferWhen:
    case OpKind.StoreLet:
      return 1;
    case OpKind.RepeaterCreate:
      return op.emptyView ? 1 : 0;
    default:
      throw new Error(`Unhandled op: ${OpKind[op.kind]}`);
  }
}
function varsUsedByIrExpression(expr) {
  switch (expr.kind) {
    case ExpressionKind.PureFunctionExpr:
      return 1 + expr.args.length;
    case ExpressionKind.PipeBinding:
      return 1 + expr.args.length;
    case ExpressionKind.PipeBindingVariadic:
      return 1 + expr.numArgs;
    case ExpressionKind.StoreLet:
      return 1;
    default:
      throw new Error(`AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`);
  }
}
function isSingletonInterpolation(expr) {
  if (expr.expressions.length !== 1 || expr.strings.length !== 2) {
    return false;
  }
  if (expr.strings[0] !== "" || expr.strings[1] !== "") {
    return false;
  }
  return true;
}
function optimizeVariables(job) {
  for (const unit of job.units) {
    inlineAlwaysInlineVariables(unit.create);
    inlineAlwaysInlineVariables(unit.update);
    for (const op of unit.create) {
      if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        inlineAlwaysInlineVariables(op.handlerOps);
      } else if (op.kind === OpKind.RepeaterCreate && op.trackByOps !== null) {
        inlineAlwaysInlineVariables(op.trackByOps);
      }
    }
    optimizeVariablesInOpList(unit.create, job.compatibility);
    optimizeVariablesInOpList(unit.update, job.compatibility);
    for (const op of unit.create) {
      if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        optimizeVariablesInOpList(op.handlerOps, job.compatibility);
      } else if (op.kind === OpKind.RepeaterCreate && op.trackByOps !== null) {
        optimizeVariablesInOpList(op.trackByOps, job.compatibility);
      }
    }
  }
}
function inlineAlwaysInlineVariables(ops) {
  const vars = /* @__PURE__ */ new Map();
  for (const op of ops) {
    if (op.kind === OpKind.Variable && op.flags & VariableFlags.AlwaysInline) {
      visitExpressionsInOp(op, (expr) => {
        if (isIrExpression(expr) && fencesForIrExpression(expr) !== Fence.None) {
          throw new Error(`AssertionError: A context-sensitive variable was marked AlwaysInline`);
        }
      });
      vars.set(op.xref, op);
    }
    transformExpressionsInOp(op, (expr) => {
      if (expr instanceof ReadVariableExpr && vars.has(expr.xref)) {
        const varOp = vars.get(expr.xref);
        return varOp.initializer.clone();
      }
      return expr;
    }, VisitorContextFlag.None);
  }
  for (const op of vars.values()) {
    OpList.remove(op);
  }
}
function optimizeVariablesInOpList(ops, compatibility) {
  const varDecls = /* @__PURE__ */ new Map();
  const varUsages = /* @__PURE__ */ new Map();
  const varRemoteUsages = /* @__PURE__ */ new Set();
  const opMap = /* @__PURE__ */ new Map();
  for (const op of ops) {
    if (op.kind === OpKind.Variable) {
      if (varDecls.has(op.xref) || varUsages.has(op.xref)) {
        throw new Error(`Should not see two declarations of the same variable: ${op.xref}`);
      }
      varDecls.set(op.xref, op);
      varUsages.set(op.xref, 0);
    }
    opMap.set(op, collectOpInfo(op));
    countVariableUsages(op, varUsages, varRemoteUsages);
  }
  let contextIsUsed = false;
  for (const op of ops.reversed()) {
    const opInfo = opMap.get(op);
    if (op.kind === OpKind.Variable && varUsages.get(op.xref) === 0) {
      if (contextIsUsed && opInfo.fences & Fence.ViewContextWrite || opInfo.fences & Fence.SideEffectful) {
        const stmtOp = createStatementOp(op.initializer.toStmt());
        opMap.set(stmtOp, opInfo);
        OpList.replace(op, stmtOp);
      } else {
        uncountVariableUsages(op, varUsages);
        OpList.remove(op);
      }
      opMap.delete(op);
      varDecls.delete(op.xref);
      varUsages.delete(op.xref);
      continue;
    }
    if (opInfo.fences & Fence.ViewContextRead) {
      contextIsUsed = true;
    }
  }
  const toInline = [];
  for (const [id, count] of varUsages) {
    const decl = varDecls.get(id);
    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
    if (count !== 1 || isAlwaysInline) {
      continue;
    }
    if (varRemoteUsages.has(id)) {
      continue;
    }
    toInline.push(id);
  }
  let candidate;
  while (candidate = toInline.pop()) {
    const decl = varDecls.get(candidate);
    const varInfo = opMap.get(decl);
    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
    if (isAlwaysInline) {
      throw new Error(`AssertionError: Found an 'AlwaysInline' variable after the always inlining pass.`);
    }
    for (let targetOp = decl.next; targetOp.kind !== OpKind.ListEnd; targetOp = targetOp.next) {
      const opInfo = opMap.get(targetOp);
      if (opInfo.variablesUsed.has(candidate)) {
        if (compatibility === CompatibilityMode.TemplateDefinitionBuilder && !allowConservativeInlining(decl, targetOp)) {
          break;
        }
        if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {
          opInfo.variablesUsed.delete(candidate);
          for (const id of varInfo.variablesUsed) {
            opInfo.variablesUsed.add(id);
          }
          opInfo.fences |= varInfo.fences;
          varDecls.delete(candidate);
          varUsages.delete(candidate);
          opMap.delete(decl);
          OpList.remove(decl);
        }
        break;
      }
      if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {
        break;
      }
    }
  }
}
function fencesForIrExpression(expr) {
  switch (expr.kind) {
    case ExpressionKind.NextContext:
      return Fence.ViewContextRead | Fence.ViewContextWrite;
    case ExpressionKind.RestoreView:
      return Fence.ViewContextRead | Fence.ViewContextWrite | Fence.SideEffectful;
    case ExpressionKind.StoreLet:
      return Fence.SideEffectful;
    case ExpressionKind.Reference:
    case ExpressionKind.ContextLetReference:
      return Fence.ViewContextRead;
    default:
      return Fence.None;
  }
}
function collectOpInfo(op) {
  let fences = Fence.None;
  const variablesUsed = /* @__PURE__ */ new Set();
  visitExpressionsInOp(op, (expr) => {
    if (!isIrExpression(expr)) {
      return;
    }
    switch (expr.kind) {
      case ExpressionKind.ReadVariable:
        variablesUsed.add(expr.xref);
        break;
      default:
        fences |= fencesForIrExpression(expr);
    }
  });
  return { fences, variablesUsed };
}
function countVariableUsages(op, varUsages, varRemoteUsage) {
  visitExpressionsInOp(op, (expr, flags) => {
    if (!isIrExpression(expr)) {
      return;
    }
    if (expr.kind !== ExpressionKind.ReadVariable) {
      return;
    }
    const count = varUsages.get(expr.xref);
    if (count === void 0) {
      return;
    }
    varUsages.set(expr.xref, count + 1);
    if (flags & VisitorContextFlag.InChildOperation) {
      varRemoteUsage.add(expr.xref);
    }
  });
}
function uncountVariableUsages(op, varUsages) {
  visitExpressionsInOp(op, (expr) => {
    if (!isIrExpression(expr)) {
      return;
    }
    if (expr.kind !== ExpressionKind.ReadVariable) {
      return;
    }
    const count = varUsages.get(expr.xref);
    if (count === void 0) {
      return;
    } else if (count === 0) {
      throw new Error(`Inaccurate variable count: ${expr.xref} - found another read but count is already 0`);
    }
    varUsages.set(expr.xref, count - 1);
  });
}
function safeToInlinePastFences(fences, declFences) {
  if (fences & Fence.ViewContextWrite) {
    if (declFences & Fence.ViewContextRead) {
      return false;
    }
  } else if (fences & Fence.ViewContextRead) {
    if (declFences & Fence.ViewContextWrite) {
      return false;
    }
  }
  return true;
}
function tryInlineVariableInitializer(id, initializer, target, declFences) {
  let inlined = false;
  let inliningAllowed = true;
  transformExpressionsInOp(target, (expr, flags) => {
    if (!isIrExpression(expr)) {
      return expr;
    }
    if (inlined || !inliningAllowed) {
      return expr;
    } else if (flags & VisitorContextFlag.InChildOperation && declFences & Fence.ViewContextRead) {
      return expr;
    }
    switch (expr.kind) {
      case ExpressionKind.ReadVariable:
        if (expr.xref === id) {
          inlined = true;
          return initializer;
        }
        break;
      default:
        const exprFences = fencesForIrExpression(expr);
        inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);
        break;
    }
    return expr;
  }, VisitorContextFlag.None);
  return inlined;
}
function allowConservativeInlining(decl, target) {
  switch (decl.variable.kind) {
    case SemanticVariableKind.Identifier:
      if (decl.initializer instanceof ReadVarExpr && decl.initializer.name === "ctx") {
        return true;
      }
      return false;
    case SemanticVariableKind.Context:
      return target.kind === OpKind.Variable;
    default:
      return true;
  }
}
function wrapI18nIcus(job) {
  for (const unit of job.units) {
    let currentI18nOp = null;
    let addedI18nId = null;
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          currentI18nOp = op;
          break;
        case OpKind.I18nEnd:
          currentI18nOp = null;
          break;
        case OpKind.IcuStart:
          if (currentI18nOp === null) {
            addedI18nId = job.allocateXrefId();
            OpList.insertBefore(createI18nStartOp(addedI18nId, op.message, void 0, null), op);
          }
          break;
        case OpKind.IcuEnd:
          if (addedI18nId !== null) {
            OpList.insertAfter(createI18nEndOp(addedI18nId, null), op);
            addedI18nId = null;
          }
          break;
      }
    }
  }
}
function transform(job, kind) {
  for (const phase of phases) {
    if (phase.kind === kind || phase.kind === CompilationJobKind.Both) {
      phase.fn(job);
    }
  }
}
function emitTemplateFn(tpl, pool) {
  const rootFn = emitView(tpl.root);
  emitChildViews(tpl.root, pool);
  return rootFn;
}
function emitChildViews(parent, pool) {
  for (const unit of parent.job.units) {
    if (unit.parent !== parent.xref) {
      continue;
    }
    emitChildViews(unit, pool);
    const viewFn = emitView(unit);
    pool.statements.push(viewFn.toDeclStmt(viewFn.name));
  }
}
function emitView(view) {
  if (view.fnName === null) {
    throw new Error(`AssertionError: view ${view.xref} is unnamed`);
  }
  const createStatements = [];
  for (const op of view.create) {
    if (op.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);
    }
    createStatements.push(op.statement);
  }
  const updateStatements = [];
  for (const op of view.update) {
    if (op.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);
    }
    updateStatements.push(op.statement);
  }
  const createCond = maybeGenerateRfBlock(1, createStatements);
  const updateCond = maybeGenerateRfBlock(2, updateStatements);
  return fn(
    [new FnParam("rf"), new FnParam("ctx")],
    [...createCond, ...updateCond],
    /* type */
    void 0,
    /* sourceSpan */
    void 0,
    view.fnName
  );
}
function maybeGenerateRfBlock(flag, statements) {
  if (statements.length === 0) {
    return [];
  }
  return [
    ifStmt(new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, variable("rf"), literal(flag)), statements)
  ];
}
function emitHostBindingFunction(job) {
  if (job.root.fnName === null) {
    throw new Error(`AssertionError: host binding function is unnamed`);
  }
  const createStatements = [];
  for (const op of job.root.create) {
    if (op.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);
    }
    createStatements.push(op.statement);
  }
  const updateStatements = [];
  for (const op of job.root.update) {
    if (op.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);
    }
    updateStatements.push(op.statement);
  }
  if (createStatements.length === 0 && updateStatements.length === 0) {
    return null;
  }
  const createCond = maybeGenerateRfBlock(1, createStatements);
  const updateCond = maybeGenerateRfBlock(2, updateStatements);
  return fn(
    [new FnParam("rf"), new FnParam("ctx")],
    [...createCond, ...updateCond],
    /* type */
    void 0,
    /* sourceSpan */
    void 0,
    job.root.fnName
  );
}
function isI18nRootNode(meta) {
  return meta instanceof Message;
}
function isSingleI18nIcu(meta) {
  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu2;
}
function ingestComponent(componentName, template2, constantPool, compilationMode, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations) {
  const job = new ComponentCompilationJob(componentName, constantPool, compatibilityMode, compilationMode, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations);
  ingestNodes(job.root, template2);
  return job;
}
function ingestHostBinding(input2, bindingParser, constantPool) {
  const job = new HostBindingCompilationJob(input2.componentName, constantPool, compatibilityMode, TemplateCompilationMode.DomOnly);
  for (const property2 of input2.properties ?? []) {
    let bindingKind = BindingKind.Property;
    if (property2.name.startsWith("attr.")) {
      property2.name = property2.name.substring("attr.".length);
      bindingKind = BindingKind.Attribute;
    }
    if (property2.isLegacyAnimation) {
      bindingKind = BindingKind.LegacyAnimation;
    }
    const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, property2.name, bindingKind === BindingKind.Attribute).filter((context2) => context2 !== SecurityContext2.NONE);
    ingestDomProperty(job, property2, bindingKind, securityContexts);
  }
  for (const [name, expr] of Object.entries(input2.attributes) ?? []) {
    const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, name, true).filter((context2) => context2 !== SecurityContext2.NONE);
    ingestHostAttribute(job, name, expr, securityContexts);
  }
  for (const event of input2.events ?? []) {
    ingestHostEvent(job, event);
  }
  return job;
}
function ingestDomProperty(job, property2, bindingKind, securityContexts) {
  let expression;
  const ast = property2.expression.ast;
  if (ast instanceof Interpolation$1) {
    expression = new Interpolation2(ast.strings, ast.expressions.map((expr) => convertAst(expr, job, property2.sourceSpan)), []);
  } else {
    expression = convertAst(ast, job, property2.sourceSpan);
  }
  job.root.update.push(createBindingOp(
    job.root.xref,
    bindingKind,
    property2.name,
    expression,
    null,
    securityContexts,
    false,
    false,
    null,
    /* TODO: How do Host bindings handle i18n attrs? */
    null,
    property2.sourceSpan
  ));
}
function ingestHostAttribute(job, name, value, securityContexts) {
  const attrBinding = createBindingOp(
    job.root.xref,
    BindingKind.Attribute,
    name,
    value,
    null,
    securityContexts,
    /* Host attributes should always be extracted to const hostAttrs, even if they are not
     *strictly* text literals */
    true,
    false,
    null,
    /* TODO */
    null,
    /** TODO: May be null? */
    value.sourceSpan
  );
  job.root.update.push(attrBinding);
}
function ingestHostEvent(job, event) {
  const [phase, target] = event.type !== ParsedEventType.LegacyAnimation ? [null, event.targetOrPhase] : [event.targetOrPhase, null];
  const eventBinding = createListenerOp(job.root.xref, new SlotHandle(), event.name, null, makeListenerHandlerOps(job.root, event.handler, event.handlerSpan), phase, target, true, event.sourceSpan);
  job.root.create.push(eventBinding);
}
function ingestNodes(unit, template2) {
  for (const node of template2) {
    if (node instanceof Element$1) {
      ingestElement(unit, node);
    } else if (node instanceof Template) {
      ingestTemplate(unit, node);
    } else if (node instanceof Content) {
      ingestContent(unit, node);
    } else if (node instanceof Text$3) {
      ingestText(unit, node, null);
    } else if (node instanceof BoundText) {
      ingestBoundText(unit, node, null);
    } else if (node instanceof IfBlock) {
      ingestIfBlock(unit, node);
    } else if (node instanceof SwitchBlock) {
      ingestSwitchBlock(unit, node);
    } else if (node instanceof DeferredBlock) {
      ingestDeferBlock(unit, node);
    } else if (node instanceof Icu$1) {
      ingestIcu(unit, node);
    } else if (node instanceof ForLoopBlock) {
      ingestForBlock(unit, node);
    } else if (node instanceof LetDeclaration$1) {
      ingestLetDeclaration(unit, node);
    } else if (node instanceof Component$1) ;
    else {
      throw new Error(`Unsupported template node: ${node.constructor.name}`);
    }
  }
}
function ingestElement(unit, element2) {
  if (element2.i18n !== void 0 && !(element2.i18n instanceof Message || element2.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for element: ${element2.i18n.constructor.name}`);
  }
  const id = unit.job.allocateXrefId();
  const [namespaceKey, elementName] = splitNsName(element2.name);
  const startOp = createElementStartOp(elementName, id, namespaceForKey(namespaceKey), element2.i18n instanceof TagPlaceholder ? element2.i18n : void 0, element2.startSourceSpan, element2.sourceSpan);
  unit.create.push(startOp);
  ingestElementBindings(unit, startOp, element2);
  ingestReferences(startOp, element2);
  let i18nBlockId = null;
  if (element2.i18n instanceof Message) {
    i18nBlockId = unit.job.allocateXrefId();
    unit.create.push(createI18nStartOp(i18nBlockId, element2.i18n, void 0, element2.startSourceSpan));
  }
  ingestNodes(unit, element2.children);
  const endOp = createElementEndOp(id, element2.endSourceSpan ?? element2.startSourceSpan);
  unit.create.push(endOp);
  if (i18nBlockId !== null) {
    OpList.insertBefore(createI18nEndOp(i18nBlockId, element2.endSourceSpan ?? element2.startSourceSpan), endOp);
  }
}
function ingestTemplate(unit, tmpl) {
  if (tmpl.i18n !== void 0 && !(tmpl.i18n instanceof Message || tmpl.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for template: ${tmpl.i18n.constructor.name}`);
  }
  const childView = unit.job.allocateView(unit.xref);
  let tagNameWithoutNamespace = tmpl.tagName;
  let namespacePrefix = "";
  if (tmpl.tagName) {
    [namespacePrefix, tagNameWithoutNamespace] = splitNsName(tmpl.tagName);
  }
  const i18nPlaceholder = tmpl.i18n instanceof TagPlaceholder ? tmpl.i18n : void 0;
  const namespace = namespaceForKey(namespacePrefix);
  const functionNameSuffix = tagNameWithoutNamespace === null ? "" : prefixWithNamespace(tagNameWithoutNamespace, namespace);
  const templateKind = isPlainTemplate(tmpl) ? TemplateKind.NgTemplate : TemplateKind.Structural;
  const templateOp = createTemplateOp(childView.xref, templateKind, tagNameWithoutNamespace, functionNameSuffix, namespace, i18nPlaceholder, tmpl.startSourceSpan, tmpl.sourceSpan);
  unit.create.push(templateOp);
  ingestTemplateBindings(unit, templateOp, tmpl, templateKind);
  ingestReferences(templateOp, tmpl);
  ingestNodes(childView, tmpl.children);
  for (const { name, value } of tmpl.variables) {
    childView.contextVariables.set(name, value !== "" ? value : "$implicit");
  }
  if (templateKind === TemplateKind.NgTemplate && tmpl.i18n instanceof Message) {
    const id = unit.job.allocateXrefId();
    OpList.insertAfter(createI18nStartOp(id, tmpl.i18n, void 0, tmpl.startSourceSpan), childView.create.head);
    OpList.insertBefore(createI18nEndOp(id, tmpl.endSourceSpan ?? tmpl.startSourceSpan), childView.create.tail);
  }
}
function ingestContent(unit, content) {
  if (content.i18n !== void 0 && !(content.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for element: ${content.i18n.constructor.name}`);
  }
  let fallbackView = null;
  if (content.children.some((child) => !(child instanceof Comment$1) && (!(child instanceof Text$3) || child.value.trim().length > 0))) {
    fallbackView = unit.job.allocateView(unit.xref);
    ingestNodes(fallbackView, content.children);
  }
  const id = unit.job.allocateXrefId();
  const op = createProjectionOp(id, content.selector, content.i18n, fallbackView?.xref ?? null, content.sourceSpan);
  for (const attr of content.attributes) {
    const securityContext = domSchema.securityContext(content.name, attr.name, true);
    unit.update.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
  }
  unit.create.push(op);
}
function ingestText(unit, text2, icuPlaceholder) {
  unit.create.push(createTextOp(unit.job.allocateXrefId(), text2.value, icuPlaceholder, text2.sourceSpan));
}
function ingestBoundText(unit, text2, icuPlaceholder) {
  let value = text2.value;
  if (value instanceof ASTWithSource) {
    value = value.ast;
  }
  if (!(value instanceof Interpolation$1)) {
    throw new Error(`AssertionError: expected Interpolation for BoundText node, got ${value.constructor.name}`);
  }
  if (text2.i18n !== void 0 && !(text2.i18n instanceof Container)) {
    throw Error(`Unhandled i18n metadata type for text interpolation: ${text2.i18n?.constructor.name}`);
  }
  const i18nPlaceholders = text2.i18n instanceof Container ? text2.i18n.children.filter((node) => node instanceof Placeholder).map((placeholder) => placeholder.name) : [];
  if (i18nPlaceholders.length > 0 && i18nPlaceholders.length !== value.expressions.length) {
    throw Error(`Unexpected number of i18n placeholders (${value.expressions.length}) for BoundText with ${value.expressions.length} expressions`);
  }
  const textXref = unit.job.allocateXrefId();
  unit.create.push(createTextOp(textXref, "", icuPlaceholder, text2.sourceSpan));
  const baseSourceSpan = unit.job.compatibility ? null : text2.sourceSpan;
  unit.update.push(createInterpolateTextOp(textXref, new Interpolation2(value.strings, value.expressions.map((expr) => convertAst(expr, unit.job, baseSourceSpan)), i18nPlaceholders), text2.sourceSpan));
}
function ingestIfBlock(unit, ifBlock) {
  let firstXref = null;
  let conditions = [];
  for (let i = 0; i < ifBlock.branches.length; i++) {
    const ifCase = ifBlock.branches[i];
    const cView = unit.job.allocateView(unit.xref);
    const tagName = ingestControlFlowInsertionPoint(unit, cView.xref, ifCase);
    if (ifCase.expressionAlias !== null) {
      cView.contextVariables.set(ifCase.expressionAlias.name, CTX_REF);
    }
    let ifCaseI18nMeta = void 0;
    if (ifCase.i18n !== void 0) {
      if (!(ifCase.i18n instanceof BlockPlaceholder)) {
        throw Error(`Unhandled i18n metadata type for if block: ${ifCase.i18n?.constructor.name}`);
      }
      ifCaseI18nMeta = ifCase.i18n;
    }
    const createOp = i === 0 ? createConditionalCreateOp : createConditionalBranchCreateOp;
    const conditionalCreateOp = createOp(cView.xref, TemplateKind.Block, tagName, "Conditional", Namespace.HTML, ifCaseI18nMeta, ifCase.startSourceSpan, ifCase.sourceSpan);
    unit.create.push(conditionalCreateOp);
    if (firstXref === null) {
      firstXref = cView.xref;
    }
    const caseExpr = ifCase.expression ? convertAst(ifCase.expression, unit.job, null) : null;
    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, conditionalCreateOp.xref, conditionalCreateOp.handle, ifCase.expressionAlias);
    conditions.push(conditionalCaseExpr);
    ingestNodes(cView, ifCase.children);
  }
  unit.update.push(createConditionalOp(firstXref, null, conditions, ifBlock.sourceSpan));
}
function ingestSwitchBlock(unit, switchBlock) {
  if (switchBlock.cases.length === 0) {
    return;
  }
  let firstXref = null;
  let conditions = [];
  for (let i = 0; i < switchBlock.cases.length; i++) {
    const switchCase = switchBlock.cases[i];
    const cView = unit.job.allocateView(unit.xref);
    const tagName = ingestControlFlowInsertionPoint(unit, cView.xref, switchCase);
    let switchCaseI18nMeta = void 0;
    if (switchCase.i18n !== void 0) {
      if (!(switchCase.i18n instanceof BlockPlaceholder)) {
        throw Error(`Unhandled i18n metadata type for switch block: ${switchCase.i18n?.constructor.name}`);
      }
      switchCaseI18nMeta = switchCase.i18n;
    }
    const createOp = i === 0 ? createConditionalCreateOp : createConditionalBranchCreateOp;
    const conditionalCreateOp = createOp(cView.xref, TemplateKind.Block, tagName, "Case", Namespace.HTML, switchCaseI18nMeta, switchCase.startSourceSpan, switchCase.sourceSpan);
    unit.create.push(conditionalCreateOp);
    if (firstXref === null) {
      firstXref = cView.xref;
    }
    const caseExpr = switchCase.expression ? convertAst(switchCase.expression, unit.job, switchBlock.startSourceSpan) : null;
    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, conditionalCreateOp.xref, conditionalCreateOp.handle);
    conditions.push(conditionalCaseExpr);
    ingestNodes(cView, switchCase.children);
  }
  unit.update.push(createConditionalOp(firstXref, convertAst(switchBlock.expression, unit.job, null), conditions, switchBlock.sourceSpan));
}
function ingestDeferView(unit, suffix, i18nMeta, children, sourceSpan) {
  if (i18nMeta !== void 0 && !(i18nMeta instanceof BlockPlaceholder)) {
    throw Error("Unhandled i18n metadata type for defer block");
  }
  if (children === void 0) {
    return null;
  }
  const secondaryView = unit.job.allocateView(unit.xref);
  ingestNodes(secondaryView, children);
  const templateOp = createTemplateOp(secondaryView.xref, TemplateKind.Block, null, `Defer${suffix}`, Namespace.HTML, i18nMeta, sourceSpan, sourceSpan);
  unit.create.push(templateOp);
  return templateOp;
}
function ingestDeferBlock(unit, deferBlock) {
  let ownResolverFn = null;
  if (unit.job.deferMeta.mode === 0) {
    if (!unit.job.deferMeta.blocks.has(deferBlock)) {
      throw new Error(`AssertionError: unable to find a dependency function for this deferred block`);
    }
    ownResolverFn = unit.job.deferMeta.blocks.get(deferBlock) ?? null;
  }
  const main = ingestDeferView(unit, "", deferBlock.i18n, deferBlock.children, deferBlock.sourceSpan);
  const loading = ingestDeferView(unit, "Loading", deferBlock.loading?.i18n, deferBlock.loading?.children, deferBlock.loading?.sourceSpan);
  const placeholder = ingestDeferView(unit, "Placeholder", deferBlock.placeholder?.i18n, deferBlock.placeholder?.children, deferBlock.placeholder?.sourceSpan);
  const error = ingestDeferView(unit, "Error", deferBlock.error?.i18n, deferBlock.error?.children, deferBlock.error?.sourceSpan);
  const deferXref = unit.job.allocateXrefId();
  const deferOp = createDeferOp(deferXref, main.xref, main.handle, ownResolverFn, unit.job.allDeferrableDepsFn, deferBlock.sourceSpan);
  deferOp.placeholderView = placeholder?.xref ?? null;
  deferOp.placeholderSlot = placeholder?.handle ?? null;
  deferOp.loadingSlot = loading?.handle ?? null;
  deferOp.errorSlot = error?.handle ?? null;
  deferOp.placeholderMinimumTime = deferBlock.placeholder?.minimumTime ?? null;
  deferOp.loadingMinimumTime = deferBlock.loading?.minimumTime ?? null;
  deferOp.loadingAfterTime = deferBlock.loading?.afterTime ?? null;
  deferOp.flags = calcDeferBlockFlags(deferBlock);
  unit.create.push(deferOp);
  const deferOnOps = [];
  const deferWhenOps = [];
  ingestDeferTriggers("hydrate", deferBlock.hydrateTriggers, deferOnOps, deferWhenOps, unit, deferXref);
  ingestDeferTriggers("none", deferBlock.triggers, deferOnOps, deferWhenOps, unit, deferXref);
  ingestDeferTriggers("prefetch", deferBlock.prefetchTriggers, deferOnOps, deferWhenOps, unit, deferXref);
  const hasConcreteTrigger = deferOnOps.some(
    (op) => op.modifier === "none"
    /* ir.DeferOpModifierKind.NONE */
  ) || deferWhenOps.some(
    (op) => op.modifier === "none"
    /* ir.DeferOpModifierKind.NONE */
  );
  if (!hasConcreteTrigger) {
    deferOnOps.push(createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, "none", null));
  }
  unit.create.push(deferOnOps);
  unit.update.push(deferWhenOps);
}
function calcDeferBlockFlags(deferBlockDetails) {
  if (Object.keys(deferBlockDetails.hydrateTriggers).length > 0) {
    return 1;
  }
  return null;
}
function ingestDeferTriggers(modifier, triggers, onOps, whenOps, unit, deferXref) {
  if (triggers.idle !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, modifier, triggers.idle.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.immediate !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Immediate }, modifier, triggers.immediate.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.timer !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Timer, delay: triggers.timer.delay }, modifier, triggers.timer.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.hover !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Hover,
      targetName: triggers.hover.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.hover.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.interaction !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Interaction,
      targetName: triggers.interaction.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.interaction.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.viewport !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Viewport,
      targetName: triggers.viewport.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.viewport.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.never !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Never }, modifier, triggers.never.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.when !== void 0) {
    if (triggers.when.value instanceof Interpolation$1) {
      throw new Error(`Unexpected interpolation in defer block when trigger`);
    }
    const deferOnOp = createDeferWhenOp(deferXref, convertAst(triggers.when.value, unit.job, triggers.when.sourceSpan), modifier, triggers.when.sourceSpan);
    whenOps.push(deferOnOp);
  }
}
function ingestIcu(unit, icu) {
  if (icu.i18n instanceof Message && isSingleI18nIcu(icu.i18n)) {
    const xref = unit.job.allocateXrefId();
    unit.create.push(createIcuStartOp(xref, icu.i18n, icuFromI18nMessage(icu.i18n).name, null));
    for (const [placeholder, text2] of Object.entries(__spreadValues(__spreadValues({}, icu.vars), icu.placeholders))) {
      if (text2 instanceof BoundText) {
        ingestBoundText(unit, text2, placeholder);
      } else {
        ingestText(unit, text2, placeholder);
      }
    }
    unit.create.push(createIcuEndOp(xref));
  } else {
    throw Error(`Unhandled i18n metadata type for ICU: ${icu.i18n?.constructor.name}`);
  }
}
function ingestForBlock(unit, forBlock) {
  const repeaterView = unit.job.allocateView(unit.xref);
  const indexName = `\u0275$index_${repeaterView.xref}`;
  const countName = `\u0275$count_${repeaterView.xref}`;
  const indexVarNames = /* @__PURE__ */ new Set();
  repeaterView.contextVariables.set(forBlock.item.name, forBlock.item.value);
  for (const variable2 of forBlock.contextVariables) {
    if (variable2.value === "$index") {
      indexVarNames.add(variable2.name);
    }
    if (variable2.name === "$index") {
      repeaterView.contextVariables.set("$index", variable2.value).set(indexName, variable2.value);
    } else if (variable2.name === "$count") {
      repeaterView.contextVariables.set("$count", variable2.value).set(countName, variable2.value);
    } else {
      repeaterView.aliases.add({
        kind: SemanticVariableKind.Alias,
        name: null,
        identifier: variable2.name,
        expression: getComputedForLoopVariableExpression(variable2, indexName, countName)
      });
    }
  }
  const sourceSpan = convertSourceSpan(forBlock.trackBy.span, forBlock.sourceSpan);
  const track = convertAst(forBlock.trackBy, unit.job, sourceSpan);
  ingestNodes(repeaterView, forBlock.children);
  let emptyView = null;
  let emptyTagName = null;
  if (forBlock.empty !== null) {
    emptyView = unit.job.allocateView(unit.xref);
    ingestNodes(emptyView, forBlock.empty.children);
    emptyTagName = ingestControlFlowInsertionPoint(unit, emptyView.xref, forBlock.empty);
  }
  const varNames = {
    $index: indexVarNames,
    $implicit: forBlock.item.name
  };
  if (forBlock.i18n !== void 0 && !(forBlock.i18n instanceof BlockPlaceholder)) {
    throw Error("AssertionError: Unhandled i18n metadata type or @for");
  }
  if (forBlock.empty?.i18n !== void 0 && !(forBlock.empty.i18n instanceof BlockPlaceholder)) {
    throw Error("AssertionError: Unhandled i18n metadata type or @empty");
  }
  const i18nPlaceholder = forBlock.i18n;
  const emptyI18nPlaceholder = forBlock.empty?.i18n;
  const tagName = ingestControlFlowInsertionPoint(unit, repeaterView.xref, forBlock);
  const repeaterCreate2 = createRepeaterCreateOp(repeaterView.xref, emptyView?.xref ?? null, tagName, track, varNames, emptyTagName, i18nPlaceholder, emptyI18nPlaceholder, forBlock.startSourceSpan, forBlock.sourceSpan);
  unit.create.push(repeaterCreate2);
  const expression = convertAst(forBlock.expression, unit.job, convertSourceSpan(forBlock.expression.span, forBlock.sourceSpan));
  const repeater2 = createRepeaterOp(repeaterCreate2.xref, repeaterCreate2.handle, expression, forBlock.sourceSpan);
  unit.update.push(repeater2);
}
function getComputedForLoopVariableExpression(variable2, indexName, countName) {
  switch (variable2.value) {
    case "$index":
      return new LexicalReadExpr(indexName);
    case "$count":
      return new LexicalReadExpr(countName);
    case "$first":
      return new LexicalReadExpr(indexName).identical(literal(0));
    case "$last":
      return new LexicalReadExpr(indexName).identical(new LexicalReadExpr(countName).minus(literal(1)));
    case "$even":
      return new LexicalReadExpr(indexName).modulo(literal(2)).identical(literal(0));
    case "$odd":
      return new LexicalReadExpr(indexName).modulo(literal(2)).notIdentical(literal(0));
    default:
      throw new Error(`AssertionError: unknown @for loop variable ${variable2.value}`);
  }
}
function ingestLetDeclaration(unit, node) {
  const target = unit.job.allocateXrefId();
  unit.create.push(createDeclareLetOp(target, node.name, node.sourceSpan));
  unit.update.push(createStoreLetOp(target, node.name, convertAst(node.value, unit.job, node.valueSpan), node.sourceSpan));
}
function convertAst(ast, job, baseSourceSpan) {
  if (ast instanceof ASTWithSource) {
    return convertAst(ast.ast, job, baseSourceSpan);
  } else if (ast instanceof PropertyRead) {
    const isImplicitReceiver = ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver);
    if (isImplicitReceiver) {
      return new LexicalReadExpr(ast.name);
    } else {
      return new ReadPropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, null, convertSourceSpan(ast.span, baseSourceSpan));
    }
  } else if (ast instanceof Call) {
    if (ast.receiver instanceof ImplicitReceiver) {
      throw new Error(`Unexpected ImplicitReceiver`);
    } else {
      return new InvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((arg) => convertAst(arg, job, baseSourceSpan)), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    }
  } else if (ast instanceof LiteralPrimitive) {
    return literal(ast.value, void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof Unary) {
    switch (ast.operator) {
      case "+":
        return new UnaryOperatorExpr(UnaryOperator.Plus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
      case "-":
        return new UnaryOperatorExpr(UnaryOperator.Minus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
      default:
        throw new Error(`AssertionError: unknown unary operator ${ast.operator}`);
    }
  } else if (ast instanceof Binary) {
    const operator = BINARY_OPERATORS.get(ast.operation);
    if (operator === void 0) {
      throw new Error(`AssertionError: unknown binary operator ${ast.operation}`);
    }
    return new BinaryOperatorExpr(operator, convertAst(ast.left, job, baseSourceSpan), convertAst(ast.right, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof ThisReceiver) {
    return new ContextExpr(job.root.xref);
  } else if (ast instanceof KeyedRead) {
    return new ReadKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof Chain) {
    throw new Error(`AssertionError: Chain in unknown context`);
  } else if (ast instanceof LiteralMap) {
    const entries = ast.keys.map((key, idx) => {
      const value = ast.values[idx];
      return new LiteralMapEntry(key.key, convertAst(value, job, baseSourceSpan), key.quoted);
    });
    return new LiteralMapExpr(entries, void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof LiteralArray) {
    return new LiteralArrayExpr(ast.expressions.map((expr) => convertAst(expr, job, baseSourceSpan)));
  } else if (ast instanceof Conditional) {
    return new ConditionalExpr(convertAst(ast.condition, job, baseSourceSpan), convertAst(ast.trueExp, job, baseSourceSpan), convertAst(ast.falseExp, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof NonNullAssert) {
    return convertAst(ast.expression, job, baseSourceSpan);
  } else if (ast instanceof BindingPipe) {
    return new PipeBindingExpr(job.allocateXrefId(), new SlotHandle(), ast.name, [
      convertAst(ast.exp, job, baseSourceSpan),
      ...ast.args.map((arg) => convertAst(arg, job, baseSourceSpan))
    ]);
  } else if (ast instanceof SafeKeyedRead) {
    return new SafeKeyedReadExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof SafePropertyRead) {
    return new SafePropertyReadExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name);
  } else if (ast instanceof SafeCall) {
    return new SafeInvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((a) => convertAst(a, job, baseSourceSpan)));
  } else if (ast instanceof EmptyExpr$1) {
    return new EmptyExpr2(convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof PrefixNot) {
    return not(convertAst(ast.expression, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof TypeofExpression) {
    return typeofExpr(convertAst(ast.expression, job, baseSourceSpan));
  } else if (ast instanceof VoidExpression) {
    return new VoidExpr(convertAst(ast.expression, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof TemplateLiteral) {
    return convertTemplateLiteral(ast, job, baseSourceSpan);
  } else if (ast instanceof TaggedTemplateLiteral) {
    return new TaggedTemplateLiteralExpr(convertAst(ast.tag, job, baseSourceSpan), convertTemplateLiteral(ast.template, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof ParenthesizedExpression) {
    return new ParenthesizedExpr(convertAst(ast.expression, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else {
    throw new Error(`Unhandled expression type "${ast.constructor.name}" in file "${baseSourceSpan?.start.file.url}"`);
  }
}
function convertTemplateLiteral(ast, job, baseSourceSpan) {
  return new TemplateLiteralExpr(ast.elements.map((el) => {
    return new TemplateLiteralElementExpr(el.text, convertSourceSpan(el.span, baseSourceSpan));
  }), ast.expressions.map((expr) => convertAst(expr, job, baseSourceSpan)), convertSourceSpan(ast.span, baseSourceSpan));
}
function convertAstWithInterpolation(job, value, i18nMeta, sourceSpan) {
  let expression;
  if (value instanceof Interpolation$1) {
    expression = new Interpolation2(value.strings, value.expressions.map((e) => convertAst(e, job, null)), Object.keys(asMessage(i18nMeta)?.placeholders ?? {}));
  } else if (value instanceof AST) {
    expression = convertAst(value, job, null);
  } else {
    expression = literal(value);
  }
  return expression;
}
function isPlainTemplate(tmpl) {
  return splitNsName(tmpl.tagName ?? "")[1] === NG_TEMPLATE_TAG_NAME;
}
function asMessage(i18nMeta) {
  if (i18nMeta == null) {
    return null;
  }
  if (!(i18nMeta instanceof Message)) {
    throw Error(`Expected i18n meta to be a Message, but got: ${i18nMeta.constructor.name}`);
  }
  return i18nMeta;
}
function ingestElementBindings(unit, op, element2) {
  let bindings = new Array();
  let i18nAttributeBindingNames = /* @__PURE__ */ new Set();
  for (const attr of element2.attributes) {
    const securityContext = domSchema.securityContext(element2.name, attr.name, true);
    bindings.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, convertAstWithInterpolation(unit.job, attr.value, attr.i18n), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
    if (attr.i18n) {
      i18nAttributeBindingNames.add(attr.name);
    }
  }
  for (const input2 of element2.inputs) {
    if (i18nAttributeBindingNames.has(input2.name)) {
      console.error(`On component ${unit.job.componentName}, the binding ${input2.name} is both an i18n attribute and a property. You may want to remove the property binding. This will become a compilation error in future versions of Angular.`);
    }
    bindings.push(createBindingOp(op.xref, BINDING_KINDS.get(input2.type), input2.name, convertAstWithInterpolation(unit.job, astOf(input2.value), input2.i18n), input2.unit, input2.securityContext, false, false, null, asMessage(input2.i18n) ?? null, input2.sourceSpan));
  }
  unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
  unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
  for (const output2 of element2.outputs) {
    if (output2.type === ParsedEventType.LegacyAnimation && output2.phase === null) {
      throw Error("Animation listener should have a phase");
    }
    if (output2.type === ParsedEventType.TwoWay) {
      unit.create.push(createTwoWayListenerOp(op.xref, op.handle, output2.name, op.tag, makeTwoWayListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.sourceSpan));
    } else {
      unit.create.push(createListenerOp(op.xref, op.handle, output2.name, op.tag, makeListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.phase, output2.target, false, output2.sourceSpan));
    }
  }
  if (bindings.some((b) => b?.i18nMessage) !== null) {
    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));
  }
}
function ingestTemplateBindings(unit, op, template2, templateKind) {
  let bindings = new Array();
  for (const attr of template2.templateAttrs) {
    if (attr instanceof TextAttribute) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
      bindings.push(createTemplateBinding(unit, op.xref, BindingType.Attribute, attr.name, attr.value, null, securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
    } else {
      bindings.push(createTemplateBinding(unit, op.xref, attr.type, attr.name, astOf(attr.value), attr.unit, attr.securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
    }
  }
  for (const attr of template2.attributes) {
    const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
    bindings.push(createTemplateBinding(unit, op.xref, BindingType.Attribute, attr.name, attr.value, null, securityContext, false, templateKind, asMessage(attr.i18n), attr.sourceSpan));
  }
  for (const input2 of template2.inputs) {
    bindings.push(createTemplateBinding(unit, op.xref, input2.type, input2.name, astOf(input2.value), input2.unit, input2.securityContext, false, templateKind, asMessage(input2.i18n), input2.sourceSpan));
  }
  unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
  unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
  for (const output2 of template2.outputs) {
    if (output2.type === ParsedEventType.LegacyAnimation && output2.phase === null) {
      throw Error("Animation listener should have a phase");
    }
    if (templateKind === TemplateKind.NgTemplate) {
      if (output2.type === ParsedEventType.TwoWay) {
        unit.create.push(createTwoWayListenerOp(op.xref, op.handle, output2.name, op.tag, makeTwoWayListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.sourceSpan));
      } else {
        unit.create.push(createListenerOp(op.xref, op.handle, output2.name, op.tag, makeListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.phase, output2.target, false, output2.sourceSpan));
      }
    }
    if (templateKind === TemplateKind.Structural && output2.type !== ParsedEventType.LegacyAnimation) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, output2.name, false);
      unit.create.push(createExtractedAttributeOp(op.xref, BindingKind.Property, null, output2.name, null, null, null, securityContext));
    }
  }
  if (bindings.some((b) => b?.i18nMessage) !== null) {
    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));
  }
}
function createTemplateBinding(view, xref, type, name, value, unit, securityContext, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  const isTextBinding = typeof value === "string";
  if (templateKind === TemplateKind.Structural) {
    if (!isStructuralTemplateAttribute) {
      switch (type) {
        case BindingType.Property:
        case BindingType.Class:
        case BindingType.Style:
          return createExtractedAttributeOp(xref, BindingKind.Property, null, name, null, null, i18nMessage, securityContext);
        case BindingType.TwoWay:
          return createExtractedAttributeOp(xref, BindingKind.TwoWayProperty, null, name, null, null, i18nMessage, securityContext);
      }
    }
    if (!isTextBinding && (type === BindingType.Attribute || type === BindingType.LegacyAnimation)) {
      return null;
    }
  }
  let bindingType = BINDING_KINDS.get(type);
  if (templateKind === TemplateKind.NgTemplate) {
    if (type === BindingType.Class || type === BindingType.Style || type === BindingType.Attribute && !isTextBinding) {
      bindingType = BindingKind.Property;
    }
  }
  return createBindingOp(xref, bindingType, name, convertAstWithInterpolation(view.job, value, i18nMessage), unit, securityContext, isTextBinding, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan);
}
function makeListenerHandlerOps(unit, handler, handlerSpan) {
  handler = astOf(handler);
  const handlerOps = new Array();
  let handlerExprs = handler instanceof Chain ? handler.expressions : [handler];
  if (handlerExprs.length === 0) {
    throw new Error("Expected listener to have non-empty expression list.");
  }
  const expressions = handlerExprs.map((expr) => convertAst(expr, unit.job, handlerSpan));
  const returnExpr = expressions.pop();
  handlerOps.push(...expressions.map((e) => createStatementOp(new ExpressionStatement(e, e.sourceSpan))));
  handlerOps.push(createStatementOp(new ReturnStatement(returnExpr, returnExpr.sourceSpan)));
  return handlerOps;
}
function makeTwoWayListenerHandlerOps(unit, handler, handlerSpan) {
  handler = astOf(handler);
  const handlerOps = new Array();
  if (handler instanceof Chain) {
    if (handler.expressions.length === 1) {
      handler = handler.expressions[0];
    } else {
      throw new Error("Expected two-way listener to have a single expression.");
    }
  }
  const handlerExpr = convertAst(handler, unit.job, handlerSpan);
  const eventReference = new LexicalReadExpr("$event");
  const twoWaySetExpr = new TwoWayBindingSetExpr(handlerExpr, eventReference);
  handlerOps.push(createStatementOp(new ExpressionStatement(twoWaySetExpr)));
  handlerOps.push(createStatementOp(new ReturnStatement(eventReference)));
  return handlerOps;
}
function astOf(ast) {
  return ast instanceof ASTWithSource ? ast.ast : ast;
}
function ingestReferences(op, element2) {
  assertIsArray(op.localRefs);
  for (const { name, value } of element2.references) {
    op.localRefs.push({
      name,
      target: value
    });
  }
}
function assertIsArray(value) {
  if (!Array.isArray(value)) {
    throw new Error(`AssertionError: expected an array`);
  }
}
function convertSourceSpan(span, baseSourceSpan) {
  if (baseSourceSpan === null) {
    return null;
  }
  const start = baseSourceSpan.start.moveBy(span.start);
  const end = baseSourceSpan.start.moveBy(span.end);
  const fullStart = baseSourceSpan.fullStart.moveBy(span.start);
  return new ParseSourceSpan(start, end, fullStart);
}
function ingestControlFlowInsertionPoint(unit, xref, node) {
  let root = null;
  for (const child of node.children) {
    if (child instanceof Comment$1 || child instanceof LetDeclaration$1) {
      continue;
    }
    if (root !== null) {
      return null;
    }
    if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {
      root = child;
    } else {
      return null;
    }
  }
  if (root !== null) {
    for (const attr of root.attributes) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
      unit.update.push(createBindingOp(xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
    }
    for (const attr of root.inputs) {
      if (attr.type !== BindingType.LegacyAnimation && attr.type !== BindingType.Attribute) {
        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
        unit.create.push(createExtractedAttributeOp(xref, BindingKind.Property, null, attr.name, null, null, null, securityContext));
      }
    }
    const tagName = root instanceof Element$1 ? root.name : root.tagName;
    return tagName === NG_TEMPLATE_TAG_NAME ? null : tagName;
  }
  return null;
}
function getTemplateSourceLocationsEnabled() {
  return ENABLE_TEMPLATE_SOURCE_LOCATIONS;
}
function renderFlagCheckIfStmt(flags, statements) {
  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null), statements);
}
function toQueryFlags(query) {
  return (query.descendants ? 1 : 0) | (query.static ? 2 : 0) | (query.emitDistinctChangesOnly ? 4 : 0);
}
function getQueryPredicate(query, constantPool) {
  if (Array.isArray(query.predicate)) {
    let predicate = [];
    query.predicate.forEach((selector) => {
      const selectors = selector.split(",").map((token) => literal(token.trim()));
      predicate.push(...selectors);
    });
    return constantPool.getConstLiteral(literalArr(predicate), true);
  } else {
    switch (query.predicate.forwardRef) {
      case 0:
      case 2:
        return query.predicate.expression;
      case 1:
        return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);
    }
  }
}
function createQueryCreateCall(query, constantPool, queryTypeFns, prependParams) {
  const parameters = [];
  if (prependParams !== void 0) {
    parameters.push(...prependParams);
  }
  if (query.isSignal) {
    parameters.push(new ReadPropExpr(variable(CONTEXT_NAME), query.propertyName));
  }
  parameters.push(getQueryPredicate(query, constantPool), literal(toQueryFlags(query)));
  if (query.read) {
    parameters.push(query.read);
  }
  const queryCreateFn = query.isSignal ? queryTypeFns.signalBased : queryTypeFns.nonSignal;
  return importExpr(queryCreateFn).callFn(parameters);
}
function collapseAdvanceStatements(statements) {
  const result = [];
  let advanceCollapseCount = 0;
  const flushAdvanceCount = () => {
    if (advanceCollapseCount > 0) {
      result.unshift(importExpr(Identifiers.queryAdvance).callFn(advanceCollapseCount === 1 ? [] : [literal(advanceCollapseCount)]).toStmt());
      advanceCollapseCount = 0;
    }
  };
  for (let i = statements.length - 1; i >= 0; i--) {
    const st = statements[i];
    if (st === queryAdvancePlaceholder) {
      advanceCollapseCount++;
    } else {
      flushAdvanceCount();
      result.unshift(st);
    }
  }
  flushAdvanceCount();
  return result;
}
function createViewQueriesFunction(viewQueries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
  viewQueries.forEach((query) => {
    const queryDefinitionCall = createQueryCreateCall(query, constantPool, {
      signalBased: Identifiers.viewQuerySignal,
      nonSignal: Identifiers.viewQuery
    });
    createStatements.push(queryDefinitionCall.toStmt());
    if (query.isSignal) {
      updateStatements.push(queryAdvancePlaceholder);
      return;
    }
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  });
  const viewQueryFnName = name ? `${name}_Query` : null;
  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [
    renderFlagCheckIfStmt(1, createStatements),
    renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))
  ], INFERRED_TYPE, null, viewQueryFnName);
}
function createContentQueriesFunction(queries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
  for (const query of queries) {
    createStatements.push(createQueryCreateCall(
      query,
      constantPool,
      { nonSignal: Identifiers.contentQuery, signalBased: Identifiers.contentQuerySignal },
      /* prependParams */
      [variable("dirIndex")]
    ).toStmt());
    if (query.isSignal) {
      updateStatements.push(queryAdvancePlaceholder);
      continue;
    }
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  }
  const contentQueriesFnName = name ? `${name}_ContentQueries` : null;
  return fn([
    new FnParam(RENDER_FLAGS, NUMBER_TYPE),
    new FnParam(CONTEXT_NAME, null),
    new FnParam("dirIndex", null)
  ], [
    renderFlagCheckIfStmt(1, createStatements),
    renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))
  ], INFERRED_TYPE, null, contentQueriesFnName);
}
function hasRecursiveSafeReceiver(ast) {
  if (ast instanceof SafePropertyRead || ast instanceof SafeKeyedRead) {
    return true;
  }
  if (ast instanceof ParenthesizedExpression) {
    return hasRecursiveSafeReceiver(ast.expression);
  }
  if (ast instanceof PropertyRead || ast instanceof KeyedRead || ast instanceof Call) {
    return hasRecursiveSafeReceiver(ast.receiver);
  }
  return false;
}
function isLegacyAnimationLabel(name) {
  return name[0] == "@";
}
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
  let ctxs;
  const nameToContext = (elName) => registry.securityContext(elName, propName, isAttribute);
  if (selector === null) {
    ctxs = registry.allKnownElementNames().map(nameToContext);
  } else {
    ctxs = [];
    CssSelector.parse(selector).forEach((selector2) => {
      const elementNames = selector2.element ? [selector2.element] : registry.allKnownElementNames();
      const notElementNames = new Set(selector2.notSelectors.filter((selector3) => selector3.isElementSelector()).map((selector3) => selector3.element));
      const possibleElementNames = elementNames.filter((elName) => !notElementNames.has(elName));
      ctxs.push(...possibleElementNames.map(nameToContext));
    });
  }
  return ctxs.length === 0 ? [SecurityContext2.NONE] : Array.from(new Set(ctxs)).sort();
}
function moveParseSourceSpan(sourceSpan, absoluteSpan) {
  const startDiff = absoluteSpan.start - sourceSpan.start.offset;
  const endDiff = absoluteSpan.end - sourceSpan.end.offset;
  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);
}
function isStyleUrlResolvable(url) {
  if (url == null || url.length === 0 || url[0] == "/")
    return false;
  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
  return schemeMatch === null || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
function preparseElement(ast) {
  let selectAttr = null;
  let hrefAttr = null;
  let relAttr = null;
  let nonBindable = false;
  let projectAs = "";
  ast.attrs.forEach((attr) => {
    const lcAttrName = attr.name.toLowerCase();
    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
      selectAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
      hrefAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
      relAttr = attr.value;
    } else if (attr.name == NG_NON_BINDABLE_ATTR) {
      nonBindable = true;
    } else if (attr.name == NG_PROJECT_AS) {
      if (attr.value.length > 0) {
        projectAs = attr.value;
      }
    }
  });
  selectAttr = normalizeNgContentSelect(selectAttr);
  const nodeName = ast.name.toLowerCase();
  let type = PreparsedElementType.OTHER;
  if (isNgContent(nodeName)) {
    type = PreparsedElementType.NG_CONTENT;
  } else if (nodeName == STYLE_ELEMENT) {
    type = PreparsedElementType.STYLE;
  } else if (nodeName == SCRIPT_ELEMENT) {
    type = PreparsedElementType.SCRIPT;
  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
    type = PreparsedElementType.STYLESHEET;
  }
  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
function normalizeNgContentSelect(selectAttr) {
  if (selectAttr === null || selectAttr.length === 0) {
    return "*";
  }
  return selectAttr;
}
function isConnectedForLoopBlock(name) {
  return name === "empty";
}
function isConnectedIfLoopBlock(name) {
  return name === "else" || ELSE_IF_PATTERN.test(name);
}
function createIfBlock(ast, connectedBlocks, visitor, bindingParser) {
  const errors = validateIfConnectedBlocks(connectedBlocks);
  const branches = [];
  const mainBlockParams = parseConditionalBlockParameters(ast, errors, bindingParser);
  if (mainBlockParams !== null) {
    branches.push(new IfBlockBranch(mainBlockParams.expression, visitAll(visitor, ast.children, ast.children), mainBlockParams.expressionAlias, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan, ast.i18n));
  }
  for (const block of connectedBlocks) {
    if (ELSE_IF_PATTERN.test(block.name)) {
      const params = parseConditionalBlockParameters(block, errors, bindingParser);
      if (params !== null) {
        const children = visitAll(visitor, block.children, block.children);
        branches.push(new IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
      }
    } else if (block.name === "else") {
      const children = visitAll(visitor, block.children, block.children);
      branches.push(new IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
    }
  }
  const ifBlockStartSourceSpan = branches.length > 0 ? branches[0].startSourceSpan : ast.startSourceSpan;
  const ifBlockEndSourceSpan = branches.length > 0 ? branches[branches.length - 1].endSourceSpan : ast.endSourceSpan;
  let wholeSourceSpan = ast.sourceSpan;
  const lastBranch = branches[branches.length - 1];
  if (lastBranch !== void 0) {
    wholeSourceSpan = new ParseSourceSpan(ifBlockStartSourceSpan.start, lastBranch.sourceSpan.end);
  }
  return {
    node: new IfBlock(branches, wholeSourceSpan, ast.startSourceSpan, ifBlockEndSourceSpan, ast.nameSpan),
    errors
  };
}
function createForLoop(ast, connectedBlocks, visitor, bindingParser) {
  const errors = [];
  const params = parseForLoopParameters(ast, errors, bindingParser);
  let node = null;
  let empty = null;
  for (const block of connectedBlocks) {
    if (block.name === "empty") {
      if (empty !== null) {
        errors.push(new ParseError(block.sourceSpan, "@for loop can only have one @empty block"));
      } else if (block.parameters.length > 0) {
        errors.push(new ParseError(block.sourceSpan, "@empty block cannot have parameters"));
      } else {
        empty = new ForLoopBlockEmpty(visitAll(visitor, block.children, block.children), block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n);
      }
    } else {
      errors.push(new ParseError(block.sourceSpan, `Unrecognized @for loop block "${block.name}"`));
    }
  }
  if (params !== null) {
    if (params.trackBy === null) {
      errors.push(new ParseError(ast.startSourceSpan, '@for loop must have a "track" expression'));
    } else {
      const endSpan = empty?.endSourceSpan ?? ast.endSourceSpan;
      const sourceSpan = new ParseSourceSpan(ast.sourceSpan.start, endSpan?.end ?? ast.sourceSpan.end);
      node = new ForLoopBlock(params.itemName, params.expression, params.trackBy.expression, params.trackBy.keywordSpan, params.context, visitAll(visitor, ast.children, ast.children), empty, sourceSpan, ast.sourceSpan, ast.startSourceSpan, endSpan, ast.nameSpan, ast.i18n);
    }
  }
  return { node, errors };
}
function createSwitchBlock(ast, visitor, bindingParser) {
  const errors = validateSwitchBlock(ast);
  const primaryExpression = ast.parameters.length > 0 ? parseBlockParameterToBinding(ast.parameters[0], bindingParser) : bindingParser.parseBinding("", false, ast.sourceSpan, 0);
  const cases = [];
  const unknownBlocks = [];
  let defaultCase = null;
  for (const node of ast.children) {
    if (!(node instanceof Block)) {
      continue;
    }
    if ((node.name !== "case" || node.parameters.length === 0) && node.name !== "default") {
      unknownBlocks.push(new UnknownBlock(node.name, node.sourceSpan, node.nameSpan));
      continue;
    }
    const expression = node.name === "case" ? parseBlockParameterToBinding(node.parameters[0], bindingParser) : null;
    const ast2 = new SwitchBlockCase(expression, visitAll(visitor, node.children, node.children), node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.nameSpan, node.i18n);
    if (expression === null) {
      defaultCase = ast2;
    } else {
      cases.push(ast2);
    }
  }
  if (defaultCase !== null) {
    cases.push(defaultCase);
  }
  return {
    node: new SwitchBlock(primaryExpression, cases, unknownBlocks, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan),
    errors
  };
}
function parseForLoopParameters(block, errors, bindingParser) {
  if (block.parameters.length === 0) {
    errors.push(new ParseError(block.startSourceSpan, "@for loop does not have an expression"));
    return null;
  }
  const [expressionParam, ...secondaryParams] = block.parameters;
  const match = stripOptionalParentheses(expressionParam, errors)?.match(FOR_LOOP_EXPRESSION_PATTERN);
  if (!match || match[2].trim().length === 0) {
    errors.push(new ParseError(expressionParam.sourceSpan, 'Cannot parse expression. @for loop expression must match the pattern "<identifier> of <expression>"'));
    return null;
  }
  const [, itemName, rawExpression] = match;
  if (ALLOWED_FOR_LOOP_LET_VARIABLES.has(itemName)) {
    errors.push(new ParseError(expressionParam.sourceSpan, `@for loop item name cannot be one of ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(", ")}.`));
  }
  const variableName = expressionParam.expression.split(" ")[0];
  const variableSpan = new ParseSourceSpan(expressionParam.sourceSpan.start, expressionParam.sourceSpan.start.moveBy(variableName.length));
  const result = {
    itemName: new Variable(itemName, "$implicit", variableSpan, variableSpan),
    trackBy: null,
    expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),
    context: Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES, (variableName2) => {
      const emptySpanAfterForBlockStart = new ParseSourceSpan(block.startSourceSpan.end, block.startSourceSpan.end);
      return new Variable(variableName2, variableName2, emptySpanAfterForBlockStart, emptySpanAfterForBlockStart);
    })
  };
  for (const param of secondaryParams) {
    const letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);
    if (letMatch !== null) {
      const variablesSpan = new ParseSourceSpan(param.sourceSpan.start.moveBy(letMatch[0].length - letMatch[1].length), param.sourceSpan.end);
      parseLetParameter(param.sourceSpan, letMatch[1], variablesSpan, itemName, result.context, errors);
      continue;
    }
    const trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);
    if (trackMatch !== null) {
      if (result.trackBy !== null) {
        errors.push(new ParseError(param.sourceSpan, '@for loop can only have one "track" expression'));
      } else {
        const expression = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);
        if (expression.ast instanceof EmptyExpr$1) {
          errors.push(new ParseError(block.startSourceSpan, '@for loop must have a "track" expression'));
        }
        const keywordSpan = new ParseSourceSpan(param.sourceSpan.start, param.sourceSpan.start.moveBy("track".length));
        result.trackBy = { expression, keywordSpan };
      }
      continue;
    }
    errors.push(new ParseError(param.sourceSpan, `Unrecognized @for loop parameter "${param.expression}"`));
  }
  return result;
}
function parseLetParameter(sourceSpan, expression, span, loopItemName, context2, errors) {
  const parts = expression.split(",");
  let startSpan = span.start;
  for (const part of parts) {
    const expressionParts = part.split("=");
    const name = expressionParts.length === 2 ? expressionParts[0].trim() : "";
    const variableName = expressionParts.length === 2 ? expressionParts[1].trim() : "";
    if (name.length === 0 || variableName.length === 0) {
      errors.push(new ParseError(sourceSpan, `Invalid @for loop "let" parameter. Parameter should match the pattern "<name> = <variable name>"`));
    } else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {
      errors.push(new ParseError(sourceSpan, `Unknown "let" parameter variable "${variableName}". The allowed variables are: ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(", ")}`));
    } else if (name === loopItemName) {
      errors.push(new ParseError(sourceSpan, `Invalid @for loop "let" parameter. Variable cannot be called "${loopItemName}"`));
    } else if (context2.some((v) => v.name === name)) {
      errors.push(new ParseError(sourceSpan, `Duplicate "let" parameter variable "${variableName}"`));
    } else {
      const [, keyLeadingWhitespace, keyName] = expressionParts[0].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
      const keySpan = keyLeadingWhitespace !== void 0 && expressionParts.length === 2 ? new ParseSourceSpan(
        /* strip leading spaces */
        startSpan.moveBy(keyLeadingWhitespace.length),
        /* advance to end of the variable name */
        startSpan.moveBy(keyLeadingWhitespace.length + keyName.length)
      ) : span;
      let valueSpan = void 0;
      if (expressionParts.length === 2) {
        const [, valueLeadingWhitespace, implicit] = expressionParts[1].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
        valueSpan = valueLeadingWhitespace !== void 0 ? new ParseSourceSpan(startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length), startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length + implicit.length)) : void 0;
      }
      const sourceSpan2 = new ParseSourceSpan(keySpan.start, valueSpan?.end ?? keySpan.end);
      context2.push(new Variable(name, variableName, sourceSpan2, keySpan, valueSpan));
    }
    startSpan = startSpan.moveBy(
      part.length + 1
      /* add 1 to move past the comma */
    );
  }
}
function validateIfConnectedBlocks(connectedBlocks) {
  const errors = [];
  let hasElse = false;
  for (let i = 0; i < connectedBlocks.length; i++) {
    const block = connectedBlocks[i];
    if (block.name === "else") {
      if (hasElse) {
        errors.push(new ParseError(block.startSourceSpan, "Conditional can only have one @else block"));
      } else if (connectedBlocks.length > 1 && i < connectedBlocks.length - 1) {
        errors.push(new ParseError(block.startSourceSpan, "@else block must be last inside the conditional"));
      } else if (block.parameters.length > 0) {
        errors.push(new ParseError(block.startSourceSpan, "@else block cannot have parameters"));
      }
      hasElse = true;
    } else if (!ELSE_IF_PATTERN.test(block.name)) {
      errors.push(new ParseError(block.startSourceSpan, `Unrecognized conditional block @${block.name}`));
    }
  }
  return errors;
}
function validateSwitchBlock(ast) {
  const errors = [];
  let hasDefault = false;
  if (ast.parameters.length !== 1) {
    errors.push(new ParseError(ast.startSourceSpan, "@switch block must have exactly one parameter"));
    return errors;
  }
  for (const node of ast.children) {
    if (node instanceof Comment2 || node instanceof Text4 && node.value.trim().length === 0) {
      continue;
    }
    if (!(node instanceof Block) || node.name !== "case" && node.name !== "default") {
      errors.push(new ParseError(node.sourceSpan, "@switch block can only contain @case and @default blocks"));
      continue;
    }
    if (node.name === "default") {
      if (hasDefault) {
        errors.push(new ParseError(node.startSourceSpan, "@switch block can only have one @default block"));
      } else if (node.parameters.length > 0) {
        errors.push(new ParseError(node.startSourceSpan, "@default block cannot have parameters"));
      }
      hasDefault = true;
    } else if (node.name === "case" && node.parameters.length !== 1) {
      errors.push(new ParseError(node.startSourceSpan, "@case block must have exactly one parameter"));
    }
  }
  return errors;
}
function parseBlockParameterToBinding(ast, bindingParser, part) {
  let start;
  let end;
  if (typeof part === "string") {
    start = Math.max(0, ast.expression.lastIndexOf(part));
    end = start + part.length;
  } else {
    start = 0;
    end = ast.expression.length;
  }
  return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);
}
function parseConditionalBlockParameters(block, errors, bindingParser) {
  if (block.parameters.length === 0) {
    errors.push(new ParseError(block.startSourceSpan, "Conditional block does not have an expression"));
    return null;
  }
  const expression = parseBlockParameterToBinding(block.parameters[0], bindingParser);
  let expressionAlias = null;
  for (let i = 1; i < block.parameters.length; i++) {
    const param = block.parameters[i];
    const aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);
    if (aliasMatch === null) {
      errors.push(new ParseError(param.sourceSpan, `Unrecognized conditional parameter "${param.expression}"`));
    } else if (block.name !== "if") {
      errors.push(new ParseError(param.sourceSpan, '"as" expression is only allowed on the primary @if block'));
    } else if (expressionAlias !== null) {
      errors.push(new ParseError(param.sourceSpan, 'Conditional can only have one "as" expression'));
    } else {
      const name = aliasMatch[2].trim();
      if (IDENTIFIER_PATTERN.test(name)) {
        const variableStart = param.sourceSpan.start.moveBy(aliasMatch[1].length);
        const variableSpan = new ParseSourceSpan(variableStart, variableStart.moveBy(name.length));
        expressionAlias = new Variable(name, name, variableSpan, variableSpan);
      } else {
        errors.push(new ParseError(param.sourceSpan, '"as" expression must be a valid JavaScript identifier'));
      }
    }
  }
  return { expression, expressionAlias };
}
function stripOptionalParentheses(param, errors) {
  const expression = param.expression;
  const spaceRegex = /^\s$/;
  let openParens = 0;
  let start = 0;
  let end = expression.length - 1;
  for (let i = 0; i < expression.length; i++) {
    const char = expression[i];
    if (char === "(") {
      start = i + 1;
      openParens++;
    } else if (spaceRegex.test(char)) {
      continue;
    } else {
      break;
    }
  }
  if (openParens === 0) {
    return expression;
  }
  for (let i = expression.length - 1; i > -1; i--) {
    const char = expression[i];
    if (char === ")") {
      end = i;
      openParens--;
      if (openParens === 0) {
        break;
      }
    } else if (spaceRegex.test(char)) {
      continue;
    } else {
      break;
    }
  }
  if (openParens !== 0) {
    errors.push(new ParseError(param.sourceSpan, "Unclosed parentheses in expression"));
    return null;
  }
  return expression.slice(start, end);
}
function parseNeverTrigger({ expression, sourceSpan }, triggers, errors) {
  const neverIndex = expression.indexOf("never");
  const neverSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(neverIndex), sourceSpan.start.moveBy(neverIndex + "never".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (neverIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "never" keyword in expression`));
  } else {
    trackTrigger("never", triggers, errors, new NeverDeferredTrigger(neverSourceSpan, sourceSpan, prefetchSpan, null, hydrateSpan));
  }
}
function parseWhenTrigger({ expression, sourceSpan }, bindingParser, triggers, errors) {
  const whenIndex = expression.indexOf("when");
  const whenSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(whenIndex), sourceSpan.start.moveBy(whenIndex + "when".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (whenIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "when" keyword in expression`));
  } else {
    const start = getTriggerParametersStart(expression, whenIndex + 1);
    const parsed = bindingParser.parseBinding(expression.slice(start), false, sourceSpan, sourceSpan.start.offset + start);
    trackTrigger("when", triggers, errors, new BoundDeferredTrigger(parsed, sourceSpan, prefetchSpan, whenSourceSpan, hydrateSpan));
  }
}
function parseOnTrigger({ expression, sourceSpan }, triggers, errors, placeholder) {
  const onIndex = expression.indexOf("on");
  const onSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(onIndex), sourceSpan.start.moveBy(onIndex + "on".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (onIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "on" keyword in expression`));
  } else {
    const start = getTriggerParametersStart(expression, onIndex + 1);
    const parser = new OnTriggerParser(expression, start, sourceSpan, triggers, errors, expression.startsWith("hydrate") ? validateHydrateReferenceBasedTrigger : validatePlainReferenceBasedTrigger, placeholder, prefetchSpan, onSourceSpan, hydrateSpan);
    parser.parse();
  }
}
function getPrefetchSpan(expression, sourceSpan) {
  if (!expression.startsWith("prefetch")) {
    return null;
  }
  return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy("prefetch".length));
}
function getHydrateSpan(expression, sourceSpan) {
  if (!expression.startsWith("hydrate")) {
    return null;
  }
  return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy("hydrate".length));
}
function trackTrigger(name, allTriggers, errors, trigger) {
  if (allTriggers[name]) {
    errors.push(new ParseError(trigger.sourceSpan, `Duplicate "${name}" trigger is not allowed`));
  } else {
    allTriggers[name] = trigger;
  }
}
function createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length > 0) {
    throw new Error(`"${OnTriggerType.IDLE}" trigger cannot have parameters`);
  }
  return new IdleDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createTimerTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length !== 1) {
    throw new Error(`"${OnTriggerType.TIMER}" trigger must have exactly one parameter`);
  }
  const delay = parseDeferredTime(parameters[0]);
  if (delay === null) {
    throw new Error(`Could not parse time value of trigger "${OnTriggerType.TIMER}"`);
  }
  return new TimerDeferredTrigger(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createImmediateTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length > 0) {
    throw new Error(`"${OnTriggerType.IMMEDIATE}" trigger cannot have parameters`);
  }
  return new ImmediateDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createHoverTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, placeholder, validator) {
  validator(OnTriggerType.HOVER, parameters);
  return new HoverDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createInteractionTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, validator) {
  validator(OnTriggerType.INTERACTION, parameters);
  return new InteractionDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createViewportTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, validator) {
  validator(OnTriggerType.VIEWPORT, parameters);
  return new ViewportDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function validatePlainReferenceBasedTrigger(type, parameters) {
  if (parameters.length > 1) {
    throw new Error(`"${type}" trigger can only have zero or one parameters`);
  }
}
function validateHydrateReferenceBasedTrigger(type, parameters) {
  if (parameters.length > 0) {
    throw new Error(`Hydration trigger "${type}" cannot have parameters`);
  }
}
function getTriggerParametersStart(value, startPosition = 0) {
  let hasFoundSeparator = false;
  for (let i = startPosition; i < value.length; i++) {
    if (SEPARATOR_PATTERN.test(value[i])) {
      hasFoundSeparator = true;
    } else if (hasFoundSeparator) {
      return i;
    }
  }
  return -1;
}
function parseDeferredTime(value) {
  const match = value.match(TIME_PATTERN);
  if (!match) {
    return null;
  }
  const [time, units] = match;
  return parseFloat(time) * (units === "s" ? 1e3 : 1);
}
function isConnectedDeferLoopBlock(name) {
  return name === "placeholder" || name === "loading" || name === "error";
}
function createDeferredBlock(ast, connectedBlocks, visitor, bindingParser) {
  const errors = [];
  const { placeholder, loading, error } = parseConnectedBlocks(connectedBlocks, errors, visitor);
  const { triggers, prefetchTriggers, hydrateTriggers } = parsePrimaryTriggers(ast, bindingParser, errors, placeholder);
  let lastEndSourceSpan = ast.endSourceSpan;
  let endOfLastSourceSpan = ast.sourceSpan.end;
  if (connectedBlocks.length > 0) {
    const lastConnectedBlock = connectedBlocks[connectedBlocks.length - 1];
    lastEndSourceSpan = lastConnectedBlock.endSourceSpan;
    endOfLastSourceSpan = lastConnectedBlock.sourceSpan.end;
  }
  const sourceSpanWithConnectedBlocks = new ParseSourceSpan(ast.sourceSpan.start, endOfLastSourceSpan);
  const node = new DeferredBlock(visitAll(visitor, ast.children, ast.children), triggers, prefetchTriggers, hydrateTriggers, placeholder, loading, error, ast.nameSpan, sourceSpanWithConnectedBlocks, ast.sourceSpan, ast.startSourceSpan, lastEndSourceSpan, ast.i18n);
  return { node, errors };
}
function parseConnectedBlocks(connectedBlocks, errors, visitor) {
  let placeholder = null;
  let loading = null;
  let error = null;
  for (const block of connectedBlocks) {
    try {
      if (!isConnectedDeferLoopBlock(block.name)) {
        errors.push(new ParseError(block.startSourceSpan, `Unrecognized block "@${block.name}"`));
        break;
      }
      switch (block.name) {
        case "placeholder":
          if (placeholder !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @placeholder block`));
          } else {
            placeholder = parsePlaceholderBlock(block, visitor);
          }
          break;
        case "loading":
          if (loading !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @loading block`));
          } else {
            loading = parseLoadingBlock(block, visitor);
          }
          break;
        case "error":
          if (error !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @error block`));
          } else {
            error = parseErrorBlock(block, visitor);
          }
          break;
      }
    } catch (e) {
      errors.push(new ParseError(block.startSourceSpan, e.message));
    }
  }
  return { placeholder, loading, error };
}
function parsePlaceholderBlock(ast, visitor) {
  let minimumTime = null;
  for (const param of ast.parameters) {
    if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
      if (minimumTime != null) {
        throw new Error(`@placeholder block can only have one "minimum" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "minimum"`);
      }
      minimumTime = parsedTime;
    } else {
      throw new Error(`Unrecognized parameter in @placeholder block: "${param.expression}"`);
    }
  }
  return new DeferredBlockPlaceholder(visitAll(visitor, ast.children, ast.children), minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parseLoadingBlock(ast, visitor) {
  let afterTime = null;
  let minimumTime = null;
  for (const param of ast.parameters) {
    if (AFTER_PARAMETER_PATTERN.test(param.expression)) {
      if (afterTime != null) {
        throw new Error(`@loading block can only have one "after" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "after"`);
      }
      afterTime = parsedTime;
    } else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
      if (minimumTime != null) {
        throw new Error(`@loading block can only have one "minimum" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "minimum"`);
      }
      minimumTime = parsedTime;
    } else {
      throw new Error(`Unrecognized parameter in @loading block: "${param.expression}"`);
    }
  }
  return new DeferredBlockLoading(visitAll(visitor, ast.children, ast.children), afterTime, minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parseErrorBlock(ast, visitor) {
  if (ast.parameters.length > 0) {
    throw new Error(`@error block cannot have parameters`);
  }
  return new DeferredBlockError(visitAll(visitor, ast.children, ast.children), ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parsePrimaryTriggers(ast, bindingParser, errors, placeholder) {
  const triggers = {};
  const prefetchTriggers = {};
  const hydrateTriggers = {};
  for (const param of ast.parameters) {
    if (WHEN_PARAMETER_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, triggers, errors);
    } else if (ON_PARAMETER_PATTERN.test(param.expression)) {
      parseOnTrigger(param, triggers, errors, placeholder);
    } else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, prefetchTriggers, errors);
    } else if (PREFETCH_ON_PATTERN.test(param.expression)) {
      parseOnTrigger(param, prefetchTriggers, errors, placeholder);
    } else if (HYDRATE_WHEN_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, hydrateTriggers, errors);
    } else if (HYDRATE_ON_PATTERN.test(param.expression)) {
      parseOnTrigger(param, hydrateTriggers, errors, placeholder);
    } else if (HYDRATE_NEVER_PATTERN.test(param.expression)) {
      parseNeverTrigger(param, hydrateTriggers, errors);
    } else {
      errors.push(new ParseError(param.sourceSpan, "Unrecognized trigger"));
    }
  }
  if (hydrateTriggers.never && Object.keys(hydrateTriggers).length > 1) {
    errors.push(new ParseError(ast.startSourceSpan, "Cannot specify additional `hydrate` triggers if `hydrate never` is present"));
  }
  return { triggers, prefetchTriggers, hydrateTriggers };
}
function htmlAstToRender3Ast(htmlNodes, bindingParser, options) {
  const transformer = new HtmlAstToIvyAst(bindingParser, options);
  const ivyNodes = visitAll(transformer, htmlNodes, htmlNodes);
  const allErrors = bindingParser.errors.concat(transformer.errors);
  const result = {
    nodes: ivyNodes,
    errors: allErrors,
    styleUrls: transformer.styleUrls,
    styles: transformer.styles,
    ngContentSelectors: transformer.ngContentSelectors
  };
  if (options.collectCommentNodes) {
    result.commentNodes = transformer.commentNodes;
  }
  return result;
}
function normalizeAttributeName(attrName) {
  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
}
function addEvents(events, boundEvents) {
  boundEvents.push(...events.map((e) => BoundEvent.fromParsedEvent(e)));
}
function textContents(node) {
  if (node.children.length !== 1 || !(node.children[0] instanceof Text4)) {
    return null;
  } else {
    return node.children[0].value;
  }
}
function parseTemplate(template2, templateUrl, options = {}) {
  const { interpolationConfig, preserveWhitespaces, enableI18nLegacyMessageIdFormat } = options;
  const selectorlessEnabled = options.enableSelectorless ?? false;
  const bindingParser = makeBindingParser(interpolationConfig, selectorlessEnabled);
  const htmlParser = new HtmlParser();
  const parseResult = htmlParser.parse(template2, templateUrl, __spreadProps(__spreadValues({
    leadingTriviaChars: LEADING_TRIVIA_CHARS
  }, options), {
    tokenizeExpansionForms: true,
    tokenizeBlocks: options.enableBlockSyntax ?? true,
    tokenizeLet: options.enableLetSyntax ?? true,
    selectorlessEnabled
  }));
  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {
    const parsedTemplate2 = {
      interpolationConfig,
      preserveWhitespaces,
      errors: parseResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate2.commentNodes = [];
    }
    return parsedTemplate2;
  }
  let rootNodes = parseResult.rootNodes;
  const retainEmptyTokens = !(options.preserveSignificantWhitespace ?? true);
  const i18nMetaVisitor = new I18nMetaVisitor(
    interpolationConfig,
    /* keepI18nAttrs */
    !preserveWhitespaces,
    enableI18nLegacyMessageIdFormat,
    /* containerBlocks */
    void 0,
    options.preserveSignificantWhitespace,
    retainEmptyTokens
  );
  const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);
  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {
    const parsedTemplate2 = {
      interpolationConfig,
      preserveWhitespaces,
      errors: i18nMetaResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate2.commentNodes = [];
    }
    return parsedTemplate2;
  }
  rootNodes = i18nMetaResult.rootNodes;
  if (!preserveWhitespaces) {
    rootNodes = visitAll(new WhitespaceVisitor(
      /* preserveSignificantWhitespace */
      true,
      /* originalNodeMap */
      void 0,
      /* requireContext */
      false
    ), rootNodes);
    if (i18nMetaVisitor.hasI18nMeta) {
      rootNodes = visitAll(new I18nMetaVisitor(
        interpolationConfig,
        /* keepI18nAttrs */
        false,
        /* enableI18nLegacyMessageIdFormat */
        void 0,
        /* containerBlocks */
        void 0,
        /* preserveSignificantWhitespace */
        true,
        retainEmptyTokens
      ), rootNodes);
    }
  }
  const { nodes, errors, styleUrls, styles, ngContentSelectors, commentNodes } = htmlAstToRender3Ast(rootNodes, bindingParser, { collectCommentNodes: !!options.collectCommentNodes });
  errors.push(...parseResult.errors, ...i18nMetaResult.errors);
  const parsedTemplate = {
    interpolationConfig,
    preserveWhitespaces,
    errors: errors.length > 0 ? errors : null,
    nodes,
    styleUrls,
    styles,
    ngContentSelectors
  };
  if (options.collectCommentNodes) {
    parsedTemplate.commentNodes = commentNodes;
  }
  return parsedTemplate;
}
function makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, selectorlessEnabled = false) {
  return new BindingParser(new Parser2(new Lexer(), selectorlessEnabled), interpolationConfig, elementRegistry, []);
}
function baseDirectiveFields(meta, constantPool, bindingParser) {
  const definitionMap = new DefinitionMap();
  const selectors = parseSelectorToR3Selector(meta.selector);
  definitionMap.set("type", meta.type.value);
  if (selectors.length > 0) {
    definitionMap.set("selectors", asLiteral(selectors));
  }
  if (meta.queries.length > 0) {
    definitionMap.set("contentQueries", createContentQueriesFunction(meta.queries, constantPool, meta.name));
  }
  if (meta.viewQueries.length) {
    definitionMap.set("viewQuery", createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
  }
  definitionMap.set("hostBindings", createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || "", meta.name, definitionMap));
  definitionMap.set("inputs", conditionallyCreateDirectiveBindingLiteral(meta.inputs, true));
  definitionMap.set("outputs", conditionallyCreateDirectiveBindingLiteral(meta.outputs));
  if (meta.exportAs !== null) {
    definitionMap.set("exportAs", literalArr(meta.exportAs.map((e) => literal(e))));
  }
  if (meta.isStandalone === false) {
    definitionMap.set("standalone", literal(false));
  }
  if (meta.isSignal) {
    definitionMap.set("signals", literal(true));
  }
  return definitionMap;
}
function addFeatures(definitionMap, meta) {
  const features = [];
  const providers = meta.providers;
  const viewProviders = meta.viewProviders;
  if (providers || viewProviders) {
    const args = [providers || new LiteralArrayExpr([])];
    if (viewProviders) {
      args.push(viewProviders);
    }
    features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));
  }
  if (meta.hostDirectives?.length) {
    features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));
  }
  if (meta.usesInheritance) {
    features.push(importExpr(Identifiers.InheritDefinitionFeature));
  }
  if (meta.fullInheritance) {
    features.push(importExpr(Identifiers.CopyDefinitionFeature));
  }
  if (meta.lifecycle.usesOnChanges) {
    features.push(importExpr(Identifiers.NgOnChangesFeature));
  }
  if ("externalStyles" in meta && meta.externalStyles?.length) {
    const externalStyleNodes = meta.externalStyles.map((externalStyle) => literal(externalStyle));
    features.push(importExpr(Identifiers.ExternalStylesFeature).callFn([literalArr(externalStyleNodes)]));
  }
  if (features.length) {
    definitionMap.set("features", literalArr(features));
  }
}
function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createDirectiveType(meta);
  return { expression, type, statements: [] };
}
function compileComponentFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const selector = meta.selector && CssSelector.parse(meta.selector);
  const firstSelector = selector && selector[0];
  if (firstSelector) {
    const selectorAttributes = firstSelector.getAttrs();
    if (selectorAttributes.length) {
      definitionMap.set("attrs", constantPool.getConstLiteral(
        literalArr(selectorAttributes.map((value) => value != null ? literal(value) : literal(void 0))),
        /* forceShared */
        true
      ));
    }
  }
  const templateTypeName = meta.name;
  let allDeferrableDepsFn = null;
  if (meta.defer.mode === 1 && meta.defer.dependenciesFn !== null) {
    const fnName = `${templateTypeName}_DeferFn`;
    constantPool.statements.push(new DeclareVarStmt(fnName, meta.defer.dependenciesFn, void 0, StmtModifier.Final));
    allDeferrableDepsFn = variable(fnName);
  }
  const compilationMode = meta.isStandalone && !meta.hasDirectiveDependencies ? TemplateCompilationMode.DomOnly : TemplateCompilationMode.Full;
  const tpl = ingestComponent(meta.name, meta.template.nodes, constantPool, compilationMode, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.defer, allDeferrableDepsFn, meta.relativeTemplatePath, getTemplateSourceLocationsEnabled());
  transform(tpl, CompilationJobKind.Tmpl);
  const templateFn = emitTemplateFn(tpl, constantPool);
  if (tpl.contentSelectors !== null) {
    definitionMap.set("ngContentSelectors", tpl.contentSelectors);
  }
  definitionMap.set("decls", literal(tpl.root.decls));
  definitionMap.set("vars", literal(tpl.root.vars));
  if (tpl.consts.length > 0) {
    if (tpl.constsInitializers.length > 0) {
      definitionMap.set("consts", arrowFn([], [...tpl.constsInitializers, new ReturnStatement(literalArr(tpl.consts))]));
    } else {
      definitionMap.set("consts", literalArr(tpl.consts));
    }
  }
  definitionMap.set("template", templateFn);
  if (meta.declarationListEmitMode !== 3 && meta.declarations.length > 0) {
    definitionMap.set("dependencies", compileDeclarationList(literalArr(meta.declarations.map((decl) => decl.type)), meta.declarationListEmitMode));
  } else if (meta.declarationListEmitMode === 3) {
    const args = [meta.type.value];
    if (meta.rawImports) {
      args.push(meta.rawImports);
    }
    definitionMap.set("dependencies", importExpr(Identifiers.getComponentDepsFactory).callFn(args));
  }
  if (meta.encapsulation === null) {
    meta.encapsulation = ViewEncapsulation$1.Emulated;
  }
  let hasStyles = !!meta.externalStyles?.length;
  if (meta.styles && meta.styles.length) {
    const styleValues = meta.encapsulation == ViewEncapsulation$1.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;
    const styleNodes = styleValues.reduce((result, style) => {
      if (style.trim().length > 0) {
        result.push(constantPool.getConstLiteral(literal(style)));
      }
      return result;
    }, []);
    if (styleNodes.length > 0) {
      hasStyles = true;
      definitionMap.set("styles", literalArr(styleNodes));
    }
  }
  if (!hasStyles && meta.encapsulation === ViewEncapsulation$1.Emulated) {
    meta.encapsulation = ViewEncapsulation$1.None;
  }
  if (meta.encapsulation !== ViewEncapsulation$1.Emulated) {
    definitionMap.set("encapsulation", literal(meta.encapsulation));
  }
  if (meta.animations !== null) {
    definitionMap.set("data", literalMap([{ key: "animation", value: meta.animations, quoted: false }]));
  }
  if (meta.changeDetection !== null) {
    if (typeof meta.changeDetection === "number" && meta.changeDetection !== ChangeDetectionStrategy2.Default) {
      definitionMap.set("changeDetection", literal(meta.changeDetection));
    } else if (typeof meta.changeDetection === "object") {
      definitionMap.set("changeDetection", meta.changeDetection);
    }
  }
  const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createComponentType(meta);
  return { expression, type, statements: [] };
}
function createComponentType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  if (meta.isSignal) {
    typeParams.push(expressionType(literal(meta.isSignal)));
  }
  return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));
}
function compileDeclarationList(list, mode) {
  switch (mode) {
    case 0:
      return list;
    case 1:
      return arrowFn([], list);
    case 2:
      const resolvedList = list.prop("map").callFn([importExpr(Identifiers.resolveForwardRef)]);
      return arrowFn([], resolvedList);
    case 3:
      throw new Error(`Unsupported with an array of pre-resolved dependencies`);
  }
}
function stringAsType(str) {
  return expressionType(literal(str));
}
function stringMapAsLiteralExpression(map2) {
  const mapValues = Object.keys(map2).map((key) => {
    const value = Array.isArray(map2[key]) ? map2[key][0] : map2[key];
    return {
      key,
      value: literal(value),
      quoted: true
    };
  });
  return literalMap(mapValues);
}
function stringArrayAsType(arr) {
  return arr.length > 0 ? expressionType(literalArr(arr.map((value) => literal(value)))) : NONE_TYPE;
}
function createBaseDirectiveTypeParams(meta) {
  const selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, "") : null;
  return [
    typeWithParameters(meta.type.type, meta.typeArgumentCount),
    selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE,
    meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,
    expressionType(getInputsTypeExpression(meta)),
    expressionType(stringMapAsLiteralExpression(meta.outputs)),
    stringArrayAsType(meta.queries.map((q) => q.propertyName))
  ];
}
function getInputsTypeExpression(meta) {
  return literalMap(Object.keys(meta.inputs).map((key) => {
    const value = meta.inputs[key];
    const values = [
      { key: "alias", value: literal(value.bindingPropertyName), quoted: true },
      { key: "required", value: literal(value.required), quoted: true }
    ];
    if (value.isSignal) {
      values.push({ key: "isSignal", value: literal(value.isSignal), quoted: true });
    }
    return { key, value: literalMap(values), quoted: true };
  }));
}
function createDirectiveType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  typeParams.push(NONE_TYPE);
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  if (meta.isSignal) {
    typeParams.push(expressionType(literal(meta.isSignal)));
  }
  return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));
}
function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
  const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);
  const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);
  if (hostBindingsMetadata.specialAttributes.styleAttr) {
    hostBindingsMetadata.attributes["style"] = literal(hostBindingsMetadata.specialAttributes.styleAttr);
  }
  if (hostBindingsMetadata.specialAttributes.classAttr) {
    hostBindingsMetadata.attributes["class"] = literal(hostBindingsMetadata.specialAttributes.classAttr);
  }
  const hostJob = ingestHostBinding({
    componentName: name,
    componentSelector: selector,
    properties: bindings,
    events: eventBindings,
    attributes: hostBindingsMetadata.attributes
  }, bindingParser, constantPool);
  transform(hostJob, CompilationJobKind.Host);
  definitionMap.set("hostAttrs", hostJob.root.attributes);
  const varCount = hostJob.root.vars;
  if (varCount !== null && varCount > 0) {
    definitionMap.set("hostVars", literal(varCount));
  }
  return emitHostBindingFunction(hostJob);
}
function parseHostBindings(host) {
  const attributes = {};
  const listeners = {};
  const properties = {};
  const specialAttributes = {};
  for (const key of Object.keys(host)) {
    const value = host[key];
    const matches = key.match(HOST_REG_EXP);
    if (matches === null) {
      switch (key) {
        case "class":
          if (typeof value !== "string") {
            throw new Error(`Class binding must be string`);
          }
          specialAttributes.classAttr = value;
          break;
        case "style":
          if (typeof value !== "string") {
            throw new Error(`Style binding must be string`);
          }
          specialAttributes.styleAttr = value;
          break;
        default:
          if (typeof value === "string") {
            attributes[key] = literal(value);
          } else {
            attributes[key] = value;
          }
      }
    } else if (matches[
      1
      /* HostBindingGroup.Binding */
    ] != null) {
      if (typeof value !== "string") {
        throw new Error(`Property binding must be string`);
      }
      properties[matches[
        1
        /* HostBindingGroup.Binding */
      ]] = value;
    } else if (matches[
      2
      /* HostBindingGroup.Event */
    ] != null) {
      if (typeof value !== "string") {
        throw new Error(`Event binding must be string`);
      }
      listeners[matches[
        2
        /* HostBindingGroup.Event */
      ]] = value;
    }
  }
  return { attributes, listeners, properties, specialAttributes };
}
function verifyHostBindings(bindings, sourceSpan) {
  const bindingParser = makeBindingParser();
  bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);
  bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);
  return bindingParser.errors;
}
function compileStyles(styles, selector, hostSelector) {
  const shadowCss = new ShadowCss();
  return styles.map((style) => {
    return shadowCss.shimCssText(style, selector, hostSelector);
  });
}
function createHostDirectivesType(meta) {
  if (!meta.hostDirectives?.length) {
    return NONE_TYPE;
  }
  return expressionType(literalArr(meta.hostDirectives.map((hostMeta) => literalMap([
    { key: "directive", value: typeofExpr(hostMeta.directive.type), quoted: false },
    {
      key: "inputs",
      value: stringMapAsLiteralExpression(hostMeta.inputs || {}),
      quoted: false
    },
    {
      key: "outputs",
      value: stringMapAsLiteralExpression(hostMeta.outputs || {}),
      quoted: false
    }
  ]))));
}
function createHostDirectivesFeatureArg(hostDirectives) {
  const expressions = [];
  let hasForwardRef = false;
  for (const current of hostDirectives) {
    if (!current.inputs && !current.outputs) {
      expressions.push(current.directive.type);
    } else {
      const keys = [{ key: "directive", value: current.directive.type, quoted: false }];
      if (current.inputs) {
        const inputsLiteral = createHostDirectivesMappingArray(current.inputs);
        if (inputsLiteral) {
          keys.push({ key: "inputs", value: inputsLiteral, quoted: false });
        }
      }
      if (current.outputs) {
        const outputsLiteral = createHostDirectivesMappingArray(current.outputs);
        if (outputsLiteral) {
          keys.push({ key: "outputs", value: outputsLiteral, quoted: false });
        }
      }
      expressions.push(literalMap(keys));
    }
    if (current.isForwardReference) {
      hasForwardRef = true;
    }
  }
  return hasForwardRef ? new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) : literalArr(expressions);
}
function createHostDirectivesMappingArray(mapping) {
  const elements = [];
  for (const publicName in mapping) {
    if (mapping.hasOwnProperty(publicName)) {
      elements.push(literal(publicName), literal(mapping[publicName]));
    }
  }
  return elements.length > 0 ? literalArr(elements) : null;
}
function extractScopedNodeEntities(rootScope, templateEntities) {
  const entityMap = /* @__PURE__ */ new Map();
  function extractScopeEntities(scope) {
    if (entityMap.has(scope.rootNode)) {
      return entityMap.get(scope.rootNode);
    }
    const currentEntities = scope.namedEntities;
    let entities;
    if (scope.parentScope !== null) {
      entities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);
    } else {
      entities = new Map(currentEntities);
    }
    entityMap.set(scope.rootNode, entities);
    return entities;
  }
  const scopesToProcess = [rootScope];
  while (scopesToProcess.length > 0) {
    const scope = scopesToProcess.pop();
    for (const childScope of scope.childScopes.values()) {
      scopesToProcess.push(childScope);
    }
    extractScopeEntities(scope);
  }
  for (const [template2, entities] of entityMap) {
    templateEntities.set(template2, new Set(entities.values()));
  }
}
function convertToR3QueryMetadata2(facade) {
  return __spreadProps(__spreadValues({}, facade), {
    isSignal: facade.isSignal,
    predicate: convertQueryPredicate(facade.predicate),
    read: facade.read ? new WrappedNodeExpr(facade.read) : null,
    static: facade.static,
    emitDistinctChangesOnly: facade.emitDistinctChangesOnly
  });
}
function convertQueryDeclarationToMetadata(declaration) {
  return {
    propertyName: declaration.propertyName,
    first: declaration.first ?? false,
    predicate: convertQueryPredicate(declaration.predicate),
    descendants: declaration.descendants ?? false,
    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,
    static: declaration.static ?? false,
    emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true,
    isSignal: !!declaration.isSignal
  };
}
function convertQueryPredicate(predicate) {
  return Array.isArray(predicate) ? (
    // The predicate is an array of strings so pass it through.
    predicate
  ) : (
    // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.
    createMayBeForwardRefExpression(
      new WrappedNodeExpr(predicate),
      1
      /* ForwardRefHandling.Wrapped */
    )
  );
}
function convertDirectiveFacadeToMetadata(facade) {
  const inputsFromMetadata = parseInputsArray(facade.inputs || []);
  const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);
  const propMetadata = facade.propMetadata;
  const inputsFromType = {};
  const outputsFromType = {};
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach((ann) => {
        if (isInput(ann)) {
          inputsFromType[field] = {
            bindingPropertyName: ann.alias || field,
            classPropertyName: field,
            required: ann.required || false,
            // For JIT, decorators are used to declare signal inputs. That is because of
            // a technical limitation where it's not possible to statically reflect class
            // members of a directive/component at runtime before instantiating the class.
            isSignal: !!ann.isSignal,
            transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null
          };
        } else if (isOutput(ann)) {
          outputsFromType[field] = ann.alias || field;
        }
      });
    }
  }
  const hostDirectives = facade.hostDirectives?.length ? facade.hostDirectives.map((hostDirective) => {
    return typeof hostDirective === "function" ? {
      directive: wrapReference(hostDirective),
      inputs: null,
      outputs: null,
      isForwardReference: false
    } : {
      directive: wrapReference(hostDirective.directive),
      isForwardReference: false,
      inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,
      outputs: hostDirective.outputs ? parseMappingStringArray(hostDirective.outputs) : null
    };
  }) : null;
  return __spreadProps(__spreadValues({}, facade), {
    typeArgumentCount: 0,
    typeSourceSpan: facade.typeSourceSpan,
    type: wrapReference(facade.type),
    deps: null,
    host: __spreadValues({}, extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host)),
    inputs: __spreadValues(__spreadValues({}, inputsFromMetadata), inputsFromType),
    outputs: __spreadValues(__spreadValues({}, outputsFromMetadata), outputsFromType),
    queries: facade.queries.map(convertToR3QueryMetadata2),
    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,
    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata2),
    fullInheritance: false,
    hostDirectives
  });
}
function convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {
  const hostDirectives = declaration.hostDirectives?.length ? declaration.hostDirectives.map((dir) => ({
    directive: wrapReference(dir.directive),
    isForwardReference: false,
    inputs: dir.inputs ? getHostDirectiveBindingMapping(dir.inputs) : null,
    outputs: dir.outputs ? getHostDirectiveBindingMapping(dir.outputs) : null
  })) : null;
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    typeSourceSpan,
    selector: declaration.selector ?? null,
    inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},
    outputs: declaration.outputs ?? {},
    host: convertHostDeclarationToMetadata(declaration.host),
    queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),
    viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),
    providers: declaration.providers !== void 0 ? new WrappedNodeExpr(declaration.providers) : null,
    exportAs: declaration.exportAs ?? null,
    usesInheritance: declaration.usesInheritance ?? false,
    lifecycle: { usesOnChanges: declaration.usesOnChanges ?? false },
    deps: null,
    typeArgumentCount: 0,
    fullInheritance: false,
    isStandalone: declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version),
    isSignal: declaration.isSignal ?? false,
    hostDirectives
  };
}
function convertHostDeclarationToMetadata(host = {}) {
  return {
    attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),
    listeners: host.listeners ?? {},
    properties: host.properties ?? {},
    specialAttributes: {
      classAttr: host.classAttribute,
      styleAttr: host.styleAttribute
    }
  };
}
function getHostDirectiveBindingMapping(array) {
  let result = null;
  for (let i = 1; i < array.length; i += 2) {
    result = result || {};
    result[array[i - 1]] = array[i];
  }
  return result;
}
function convertOpaqueValuesToExpressions(obj) {
  const result = {};
  for (const key of Object.keys(obj)) {
    result[key] = new WrappedNodeExpr(obj[key]);
  }
  return result;
}
function convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {
  const { template: template2, interpolation, defer: defer3 } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation, decl.deferBlockDependencies);
  const declarations = [];
  if (decl.dependencies) {
    for (const innerDep of decl.dependencies) {
      switch (innerDep.kind) {
        case "directive":
        case "component":
          declarations.push(convertDirectiveDeclarationToMetadata(innerDep));
          break;
        case "pipe":
          declarations.push(convertPipeDeclarationToMetadata(innerDep));
          break;
      }
    }
  } else if (decl.components || decl.directives || decl.pipes) {
    decl.components && declarations.push(...decl.components.map((dir) => convertDirectiveDeclarationToMetadata(
      dir,
      /* isComponent */
      true
    )));
    decl.directives && declarations.push(...decl.directives.map((dir) => convertDirectiveDeclarationToMetadata(dir)));
    decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));
  }
  const hasDirectiveDependencies = declarations.some(({ kind }) => kind === R3TemplateDependencyKind2.Directive || kind === R3TemplateDependencyKind2.NgModule);
  return __spreadProps(__spreadValues({}, convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan)), {
    template: template2,
    styles: decl.styles ?? [],
    declarations,
    viewProviders: decl.viewProviders !== void 0 ? new WrappedNodeExpr(decl.viewProviders) : null,
    animations: decl.animations !== void 0 ? new WrappedNodeExpr(decl.animations) : null,
    defer: defer3,
    changeDetection: decl.changeDetection ?? ChangeDetectionStrategy2.Default,
    encapsulation: decl.encapsulation ?? ViewEncapsulation$1.Emulated,
    interpolation,
    declarationListEmitMode: 2,
    relativeContextFilePath: "",
    i18nUseExternalIds: true,
    relativeTemplatePath: null,
    hasDirectiveDependencies
  });
}
function convertDeclarationFacadeToMetadata(declaration) {
  return __spreadProps(__spreadValues({}, declaration), {
    type: new WrappedNodeExpr(declaration.type)
  });
}
function convertDirectiveDeclarationToMetadata(declaration, isComponent2 = null) {
  return {
    kind: R3TemplateDependencyKind2.Directive,
    isComponent: isComponent2 || declaration.kind === "component",
    selector: declaration.selector,
    type: new WrappedNodeExpr(declaration.type),
    inputs: declaration.inputs ?? [],
    outputs: declaration.outputs ?? [],
    exportAs: declaration.exportAs ?? null
  };
}
function convertPipeMapToMetadata(pipes) {
  if (!pipes) {
    return [];
  }
  return Object.keys(pipes).map((name) => {
    return {
      kind: R3TemplateDependencyKind2.Pipe,
      name,
      type: new WrappedNodeExpr(pipes[name])
    };
  });
}
function convertPipeDeclarationToMetadata(pipe3) {
  return {
    kind: R3TemplateDependencyKind2.Pipe,
    name: pipe3.name,
    type: new WrappedNodeExpr(pipe3.type)
  };
}
function parseJitTemplate(template2, typeName, sourceMapUrl, preserveWhitespaces, interpolation, deferBlockDependencies) {
  const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;
  const parsed = parseTemplate(template2, sourceMapUrl, {
    preserveWhitespaces,
    interpolationConfig
  });
  if (parsed.errors !== null) {
    const errors = parsed.errors.map((err) => err.toString()).join(", ");
    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);
  }
  const binder = new R3TargetBinder(null);
  const boundTarget = binder.bind({ template: parsed.nodes });
  return {
    template: parsed,
    interpolation: interpolationConfig,
    defer: createR3ComponentDeferMetadata(boundTarget, deferBlockDependencies)
  };
}
function convertToProviderExpression(obj, property2) {
  if (obj.hasOwnProperty(property2)) {
    return createMayBeForwardRefExpression(
      new WrappedNodeExpr(obj[property2]),
      0
      /* ForwardRefHandling.None */
    );
  } else {
    return void 0;
  }
}
function wrapExpression(obj, property2) {
  if (obj.hasOwnProperty(property2)) {
    return new WrappedNodeExpr(obj[property2]);
  } else {
    return void 0;
  }
}
function computeProvidedIn(providedIn) {
  const expression = typeof providedIn === "function" ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn ?? null);
  return createMayBeForwardRefExpression(
    expression,
    0
    /* ForwardRefHandling.None */
  );
}
function convertR3DependencyMetadataArray(facades) {
  return facades == null ? null : facades.map(convertR3DependencyMetadata);
}
function convertR3DependencyMetadata(facade) {
  const isAttributeDep = facade.attribute != null;
  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;
  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);
}
function convertR3DeclareDependencyMetadata(facade) {
  const isAttributeDep = facade.attribute ?? false;
  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);
}
function createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {
  const attributeNameType = isAttributeDep ? literal("unknown") : null;
  return { token, attributeNameType, host, optional, self, skipSelf };
}
function createR3ComponentDeferMetadata(boundTarget, deferBlockDependencies) {
  const deferredBlocks = boundTarget.getDeferBlocks();
  const blocks = /* @__PURE__ */ new Map();
  for (let i = 0; i < deferredBlocks.length; i++) {
    const dependencyFn = deferBlockDependencies?.[i];
    blocks.set(deferredBlocks[i], dependencyFn ? new WrappedNodeExpr(dependencyFn) : null);
  }
  return { mode: 0, blocks };
}
function extractHostBindings(propMetadata, sourceSpan, host) {
  const bindings = parseHostBindings(host || {});
  const errors = verifyHostBindings(bindings, sourceSpan);
  if (errors.length) {
    throw new Error(errors.map((error) => error.msg).join("\n"));
  }
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach((ann) => {
        if (isHostBinding(ann)) {
          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString("this", field);
        } else if (isHostListener(ann)) {
          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(",")})`;
        }
      });
    }
  }
  return bindings;
}
function isHostBinding(value) {
  return value.ngMetadataName === "HostBinding";
}
function isHostListener(value) {
  return value.ngMetadataName === "HostListener";
}
function isInput(value) {
  return value.ngMetadataName === "Input";
}
function isOutput(value) {
  return value.ngMetadataName === "Output";
}
function inputsPartialMetadataToInputMetadata(inputs) {
  return Object.keys(inputs).reduce((result, minifiedClassName) => {
    const value = inputs[minifiedClassName];
    if (typeof value === "string" || Array.isArray(value)) {
      result[minifiedClassName] = parseLegacyInputPartialOutput(value);
    } else {
      result[minifiedClassName] = {
        bindingPropertyName: value.publicName,
        classPropertyName: minifiedClassName,
        transformFunction: value.transformFunction !== null ? new WrappedNodeExpr(value.transformFunction) : null,
        required: value.isRequired,
        isSignal: value.isSignal
      };
    }
    return result;
  }, {});
}
function parseLegacyInputPartialOutput(value) {
  if (typeof value === "string") {
    return {
      bindingPropertyName: value,
      classPropertyName: value,
      transformFunction: null,
      required: false,
      // legacy partial output does not capture signal inputs.
      isSignal: false
    };
  }
  return {
    bindingPropertyName: value[0],
    classPropertyName: value[1],
    transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,
    required: false,
    // legacy partial output does not capture signal inputs.
    isSignal: false
  };
}
function parseInputsArray(values) {
  return values.reduce((results, value) => {
    if (typeof value === "string") {
      const [bindingPropertyName, classPropertyName] = parseMappingString(value);
      results[classPropertyName] = {
        bindingPropertyName,
        classPropertyName,
        required: false,
        // Signal inputs not supported for the inputs array.
        isSignal: false,
        transformFunction: null
      };
    } else {
      results[value.name] = {
        bindingPropertyName: value.alias || value.name,
        classPropertyName: value.name,
        required: value.required || false,
        // Signal inputs not supported for the inputs array.
        isSignal: false,
        transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null
      };
    }
    return results;
  }, {});
}
function parseMappingStringArray(values) {
  return values.reduce((results, value) => {
    const [alias, fieldName] = parseMappingString(value);
    results[fieldName] = alias;
    return results;
  }, {});
}
function parseMappingString(value) {
  const [fieldName, bindingPropertyName] = value.split(":", 2).map((str) => str.trim());
  return [bindingPropertyName ?? fieldName, fieldName];
}
function convertDeclarePipeFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    typeArgumentCount: 0,
    pipeName: declaration.name,
    deps: null,
    pure: declaration.pure ?? true,
    isStandalone: declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version)
  };
}
function convertDeclareInjectorFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    providers: declaration.providers !== void 0 && declaration.providers.length > 0 ? new WrappedNodeExpr(declaration.providers) : null,
    imports: declaration.imports !== void 0 ? declaration.imports.map((i) => new WrappedNodeExpr(i)) : []
  };
}
function publishFacade(global) {
  const ng = global.ng || (global.ng = {});
  ng.\u0275compilerFacade = new CompilerFacadeImpl();
}
var _SELECTOR_REGEXP, CssSelector, SelectorMatcher, SelectorListContext, SelectorContext, SelectorlessMatcher, ViewEncapsulation$1, ChangeDetectionStrategy2, InputFlags2, CUSTOM_ELEMENTS_SCHEMA2, NO_ERRORS_SCHEMA2, SecurityContext2, MissingTranslationStrategy2, FactoryTarget2, R3TemplateDependencyKind$1, ViewEncapsulation3, textEncoder, _SerializerVisitor, serializerVisitor$1, _SerializerIgnoreIcuExpVisitor, Endian, TypeModifier, Type2, BuiltinTypeName, BuiltinType, ExpressionType, DYNAMIC_TYPE, INFERRED_TYPE, BOOL_TYPE, INT_TYPE, NUMBER_TYPE, STRING_TYPE, FUNCTION_TYPE, NONE_TYPE, UnaryOperator, BinaryOperator, Expression, ReadVarExpr, TypeofExpr, VoidExpr, WrappedNodeExpr, InvokeFunctionExpr, TaggedTemplateLiteralExpr, InstantiateExpr, LiteralExpr, TemplateLiteralExpr, TemplateLiteralElementExpr, LiteralPiece, PlaceholderPiece, MEANING_SEPARATOR$1, ID_SEPARATOR$1, LEGACY_ID_INDICATOR, LocalizedString, escapeSlashes, escapeStartingColon, escapeColons, escapeForTemplateLiteral, ExternalExpr, ConditionalExpr, NotExpr, FnParam, FunctionExpr, ArrowFunctionExpr, UnaryOperatorExpr, ParenthesizedExpr, BinaryOperatorExpr, ReadPropExpr, ReadKeyExpr, LiteralArrayExpr, LiteralMapEntry, LiteralMapExpr, NULL_EXPR, TYPED_NULL_EXPR, StmtModifier, LeadingComment, JSDocComment, Statement, DeclareVarStmt, DeclareFunctionStmt, ExpressionStatement, ReturnStatement, IfStmt, CONSTANT_PREFIX, UNKNOWN_VALUE_KEY, KEY_CONTEXT, POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS, FixupExpression, ConstantPool, GenericKeyFn, CORE, Identifiers, DASH_CASE_REGEXP, Version2, _global2, V1_TO_18, VERSION$1, JS_B64_PREFIX, SourceMapGenerator, B64_DIGITS, _SINGLE_QUOTE_ESCAPE_STRING_RE, _LEGAL_IDENTIFIER_RE, _INDENT_WITH, _EmittedLine, BINARY_OPERATORS$1, EmitterVisitorContext, AbstractEmitterVisitor, R3FactoryDelegateType, ParseSpan, AST, ASTWithName, EmptyExpr$1, ImplicitReceiver, ThisReceiver, Chain, Conditional, PropertyRead, SafePropertyRead, KeyedRead, SafeKeyedRead, BindingPipeType, BindingPipe, LiteralPrimitive, LiteralArray, LiteralMap, Interpolation$1, Binary, Unary, PrefixNot, TypeofExpression, VoidExpression, NonNullAssert, Call, SafeCall, TaggedTemplateLiteral, TemplateLiteral, TemplateLiteralElement, ParenthesizedExpression, AbsoluteSourceSpan, ASTWithSource, VariableBinding, ExpressionBinding, RecursiveAstVisitor, ParsedProperty, ParsedPropertyType, ParsedEventType, ParsedEvent, ParsedVariable, BindingType, BoundElementProperty, TagContentType, Comment$1, Text$3, BoundText, TextAttribute, BoundAttribute, BoundEvent, Element$1, DeferredTrigger, BoundDeferredTrigger, NeverDeferredTrigger, IdleDeferredTrigger, ImmediateDeferredTrigger, HoverDeferredTrigger, TimerDeferredTrigger, InteractionDeferredTrigger, ViewportDeferredTrigger, BlockNode, DeferredBlockPlaceholder, DeferredBlockLoading, DeferredBlockError, DeferredBlock, SwitchBlock, SwitchBlockCase, ForLoopBlock, ForLoopBlockEmpty, IfBlock, IfBlockBranch, UnknownBlock, LetDeclaration$1, Component$1, Directive$1, Template, Content, Variable, Reference, Icu$1, HostElement, Message, Text$2, Container, Icu2, TagPlaceholder, Placeholder, IcuPlaceholder, BlockPlaceholder, LocalizeMessageStringVisitor, _Visitor$2, _visitor, I18N_ATTR, I18N_ATTR_PREFIX, I18N_ICU_VAR_PREFIX, UNSAFE_OBJECT_KEY_NAME_REGEXP, TEMPORARY_NAME, CONTEXT_NAME, RENDER_FLAGS, DefinitionMap, UNUSABLE_INTERPOLATION_REGEXPS, InterpolationConfig, DEFAULT_INTERPOLATION_CONFIG, DEFAULT_CONTAINER_BLOCKS, $EOF, $BSPACE, $TAB, $LF, $VTAB, $FF, $CR, $SPACE, $BANG, $DQ, $HASH, $$, $PERCENT, $AMPERSAND, $SQ, $LPAREN, $RPAREN, $STAR, $PLUS, $COMMA, $MINUS, $PERIOD, $SLASH, $COLON, $SEMICOLON, $LT, $EQ, $GT, $QUESTION, $0, $7, $9, $A, $E, $F, $X, $Z, $LBRACKET, $BACKSLASH, $RBRACKET, $CARET, $_, $a, $b, $e, $f, $n, $r, $t, $u, $v, $x, $z, $LBRACE, $BAR, $RBRACE, $NBSP, $AT, $BT, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseErrorLevel, ParseError, _anonymousTypeIndex, makeTemplateObjectPolyfill, AbstractJsEmitterVisitor, policy2, JitEvaluator, JitEmitterVisitor, R3JitReflector, R3SelectorScopeMode, R3NgModuleMetadataKind, R3TemplateDependencyKind2, animationKeywords, scopedAtRuleIdentifiers, ShadowCss, SafeSelector, _cssScopedPseudoFunctionPrefix, _cssPrefixWithPseudoSelectorFunction, _cssContentNextSelectorRe, _cssContentRuleRe, _cssContentUnscopedRuleRe, _polyfillHost, _polyfillHostContext, _parenSuffix, _cssColonHostRe, _hostContextPattern, _cssColonHostContextReGlobal, _cssColonHostContextRe, _polyfillHostNoCombinator, _polyfillHostNoCombinatorOutsidePseudoFunction, _polyfillHostNoCombinatorRe, _shadowDOMSelectorsRe, _shadowDeepSelectors, _selectorReSuffix, _polyfillHostRe, _colonHostRe, _colonHostContextRe, _newLinesRe, _commentRe, _commentWithHashRe, COMMENT_PLACEHOLDER, _commentWithHashPlaceHolderRe, BLOCK_PLACEHOLDER, _ruleRe, CONTENT_PAIRS, COMMA_IN_PLACEHOLDER, SEMI_IN_PLACEHOLDER, COLON_IN_PLACEHOLDER, _cssCommaInPlaceholderReGlobal, _cssSemiInPlaceholderReGlobal, _cssColonInPlaceholderReGlobal, CssRule, StringWithEscapedBlocks, ESCAPE_IN_STRING_MAP, OpKind, ExpressionKind, VariableFlags, SemanticVariableKind, CompatibilityMode, BindingKind, I18nParamResolutionTime, I18nExpressionFor, I18nParamValueFlags, Namespace, DeferTriggerKind, I18nContextKind, TemplateKind, ConsumesSlot, DependsOnSlotContext, ConsumesVarsTrait, UsesVarOffset, TRAIT_CONSUMES_SLOT, TRAIT_DEPENDS_ON_SLOT_CONTEXT, TRAIT_CONSUMES_VARS, NEW_OP, Interpolation2, ExpressionBase, LexicalReadExpr, ReferenceExpr, StoreLetExpr, ContextLetReferenceExpr, ContextExpr, TrackContextExpr, NextContextExpr, GetCurrentViewExpr, RestoreViewExpr, ResetViewExpr, TwoWayBindingSetExpr, ReadVariableExpr, PureFunctionExpr, PureFunctionParameterExpr, PipeBindingExpr, PipeBindingVariadicExpr, SafePropertyReadExpr, SafeKeyedReadExpr, SafeInvokeFunctionExpr, SafeTernaryExpr, EmptyExpr2, AssignTemporaryExpr, ReadTemporaryExpr, SlotLiteralExpr, ConditionalCaseExpr, ConstCollectedExpr, VisitorContextFlag, OpList, SlotHandle, elementContainerOpKinds, CTX_REF, CompilationJobKind, TemplateCompilationMode, CompilationJob, ComponentCompilationJob, CompilationUnit, ViewCompilationUnit, HostBindingCompilationJob, HostBindingCompilationUnit, CHAIN_COMPATIBILITY, MAX_CHAIN_LENGTH, BINARY_OPERATORS, FLYWEIGHT_ARRAY, ElementAttributes, Scope$1, REPLACEMENTS, IGNORED_OP_KINDS, ESCAPE$1, ELEMENT_MARKER2, TEMPLATE_MARKER, TAG_CLOSE_MARKER, CONTEXT_MARKER, LIST_START_MARKER, LIST_END_MARKER, LIST_DELIMITER, STYLE_DOT, CLASS_DOT, STYLE_BANG, CLASS_BANG, BANG_IMPORTANT, IcuSerializerVisitor, serializer, NodeWithI18n, Text4, Expansion, ExpansionCase, Attribute3, Element3, Comment2, Block, Component3, Directive3, BlockParameter, LetDeclaration2, NAMED_ENTITIES, NGSP_UNICODE, TokenizeResult, _CR_OR_CRLF_REGEXP, CharacterReferenceType, SUPPORTED_BLOCKS, _Tokenizer, PlainCharacterCursor, EscapedCharacterCursor, CursorError, TreeError, ParseTreeResult, Parser$1, _TreeBuilder, PRESERVE_WS_ATTR_NAME, SKIP_WS_TRIM_TAGS, WS_CHARS, NO_WS_REGEXP, WS_REPLACE_REGEXP, WhitespaceVisitor, TokenType, StringTokenKind, KEYWORDS, Lexer, Token, StringToken, EOF, _Scanner, SplitInterpolation, TemplateBindingParseResult, Parser2, ParseContextFlags, _ParseAST, SimpleExpressionChecker, SerializeExpressionVisitor, _SECURITY_SCHEMA, IFRAME_SECURITY_SENSITIVE_ATTRS, ElementSchemaRegistry, BOOLEAN, NUMBER, STRING, OBJECT, SCHEMA, _ATTR_TO_PROP, _PROP_TO_ATTR, DomElementSchemaRegistry, HtmlTagDefinition, DEFAULT_TAG_DEFINITION, TAG_DEFINITIONS, TAG_TO_PLACEHOLDER_NAMES, PlaceholderRegistry, _expParser, _I18nVisitor, _CUSTOM_PH_EXP, TRUSTED_TYPES_SINKS, setI18nRefs, I18nMetaVisitor, I18N_MEANING_SEPARATOR, I18N_ID_SEPARATOR, GOOG_GET_MSG, GetMsgSerializerVisitor, serializerVisitor, LocalizeSerializerVisitor, NG_I18N_CLOSURE_MODE, TRANSLATION_VAR_PREFIX, I18N_ICU_MAPPING_PREFIX, ESCAPE, CLOSURE_TRANSLATION_VAR_PREFIX, CONTAINER_TAG, CREATE_ORDERING, UPDATE_ORDERING, UPDATE_HOST_ORDERING, handledOpKinds, PureFunctionConstant, deferTriggerToR3TriggerInstructionsMap, PIPE_BINDINGS, TEXT_INTERPOLATE_CONFIG, VALUE_INTERPOLATE_CONFIG, PURE_FUNCTION_CONFIG, GLOBAL_TARGET_RESOLVERS, DOM_PROPERTY_REMAPPING, sanitizerFns, trustedValueFns, Fence, phases, compatibilityMode, domSchema, NG_TEMPLATE_TAG_NAME, BINDING_KINDS, ENABLE_TEMPLATE_SOURCE_LOCATIONS, queryAdvancePlaceholder, HtmlParser, PROPERTY_PARTS_SEPARATOR, ATTRIBUTE_PREFIX, CLASS_PREFIX, STYLE_PREFIX, TEMPLATE_ATTR_PREFIX$1, LEGACY_ANIMATE_PROP_PREFIX, BindingParser, URL_WITH_SCHEMA_REGEXP, NG_CONTENT_SELECT_ATTR, LINK_ELEMENT, LINK_STYLE_REL_ATTR, LINK_STYLE_HREF_ATTR, LINK_STYLE_REL_VALUE, STYLE_ELEMENT, SCRIPT_ELEMENT, NG_NON_BINDABLE_ATTR, NG_PROJECT_AS, PreparsedElementType, PreparsedElement, FOR_LOOP_EXPRESSION_PATTERN, FOR_LOOP_TRACK_PATTERN, CONDITIONAL_ALIAS_PATTERN, ELSE_IF_PATTERN, FOR_LOOP_LET_PATTERN, IDENTIFIER_PATTERN, CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN, ALLOWED_FOR_LOOP_LET_VARIABLES, TIME_PATTERN, SEPARATOR_PATTERN, COMMA_DELIMITED_SYNTAX, OnTriggerType, OnTriggerParser, PREFETCH_WHEN_PATTERN, PREFETCH_ON_PATTERN, HYDRATE_WHEN_PATTERN, HYDRATE_ON_PATTERN, HYDRATE_NEVER_PATTERN, MINIMUM_PARAMETER_PATTERN, AFTER_PARAMETER_PATTERN, WHEN_PARAMETER_PATTERN, ON_PARAMETER_PATTERN, BIND_NAME_REGEXP, KW_BIND_IDX, KW_LET_IDX, KW_REF_IDX, KW_ON_IDX, KW_BINDON_IDX, KW_AT_IDX, IDENT_KW_IDX, BINDING_DELIMS, TEMPLATE_ATTR_PREFIX, UNSUPPORTED_SELECTORLESS_TAGS, UNSUPPORTED_SELECTORLESS_DIRECTIVE_ATTRS, HtmlAstToIvyAst, NonBindableVisitor, NON_BINDABLE_VISITOR, LEADING_TRIVIA_CHARS, elementRegistry, COMPONENT_VARIABLE, HOST_ATTR, CONTENT_ATTR, HOST_REG_EXP, CombinedRecursiveAstVisitor, R3TargetBinder, Scope2, DirectiveBinder, TemplateBinder, R3BoundTarget, ResourceLoader, CompilerFacadeImpl, _VisitorMode, XmlTagDefinition, _TAG_DEFINITION, VERSION2;
var init_compiler = __esm({
  "node_modules/@angular/compiler/fesm2022/compiler.mjs"() {
    "use strict";
    _SELECTOR_REGEXP = new RegExp(
      `(\\:not\\()|(([\\.\\#]?)[-\\w]+)|(?:\\[([-.\\w*\\\\$]+)(?:=(["']?)([^\\]"']*)\\5)?\\])|(\\))|(\\s*,\\s*)`,
      // 8: ","
      "g"
    );
    CssSelector = class _CssSelector {
      element = null;
      classNames = [];
      /**
       * The selectors are encoded in pairs where:
       * - even locations are attribute names
       * - odd locations are attribute values.
       *
       * Example:
       * Selector: `[key1=value1][key2]` would parse to:
       * ```
       * ['key1', 'value1', 'key2', '']
       * ```
       */
      attrs = [];
      notSelectors = [];
      static parse(selector) {
        const results = [];
        const _addResult = (res, cssSel) => {
          if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
            cssSel.element = "*";
          }
          res.push(cssSel);
        };
        let cssSelector = new _CssSelector();
        let match;
        let current = cssSelector;
        let inNot = false;
        _SELECTOR_REGEXP.lastIndex = 0;
        while (match = _SELECTOR_REGEXP.exec(selector)) {
          if (match[
            1
            /* SelectorRegexp.NOT */
          ]) {
            if (inNot) {
              throw new Error("Nesting :not in a selector is not allowed");
            }
            inNot = true;
            current = new _CssSelector();
            cssSelector.notSelectors.push(current);
          }
          const tag = match[
            2
            /* SelectorRegexp.TAG */
          ];
          if (tag) {
            const prefix = match[
              3
              /* SelectorRegexp.PREFIX */
            ];
            if (prefix === "#") {
              current.addAttribute("id", tag.slice(1));
            } else if (prefix === ".") {
              current.addClassName(tag.slice(1));
            } else {
              current.setElement(tag);
            }
          }
          const attribute2 = match[
            4
            /* SelectorRegexp.ATTRIBUTE */
          ];
          if (attribute2) {
            current.addAttribute(current.unescapeAttribute(attribute2), match[
              6
              /* SelectorRegexp.ATTRIBUTE_VALUE */
            ]);
          }
          if (match[
            7
            /* SelectorRegexp.NOT_END */
          ]) {
            inNot = false;
            current = cssSelector;
          }
          if (match[
            8
            /* SelectorRegexp.SEPARATOR */
          ]) {
            if (inNot) {
              throw new Error("Multiple selectors in :not are not supported");
            }
            _addResult(results, cssSelector);
            cssSelector = current = new _CssSelector();
          }
        }
        _addResult(results, cssSelector);
        return results;
      }
      /**
       * Unescape `\$` sequences from the CSS attribute selector.
       *
       * This is needed because `$` can have a special meaning in CSS selectors,
       * but we might want to match an attribute that contains `$`.
       * [MDN web link for more
       * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
       * @param attr the attribute to unescape.
       * @returns the unescaped string.
       */
      unescapeAttribute(attr) {
        let result = "";
        let escaping = false;
        for (let i = 0; i < attr.length; i++) {
          const char = attr.charAt(i);
          if (char === "\\") {
            escaping = true;
            continue;
          }
          if (char === "$" && !escaping) {
            throw new Error(`Error in attribute selector "${attr}". Unescaped "$" is not supported. Please escape with "\\$".`);
          }
          escaping = false;
          result += char;
        }
        return result;
      }
      /**
       * Escape `$` sequences from the CSS attribute selector.
       *
       * This is needed because `$` can have a special meaning in CSS selectors,
       * with this method we are escaping `$` with `\$'.
       * [MDN web link for more
       * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
       * @param attr the attribute to escape.
       * @returns the escaped string.
       */
      escapeAttribute(attr) {
        return attr.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
      }
      isElementSelector() {
        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
      }
      hasElementSelector() {
        return !!this.element;
      }
      setElement(element2 = null) {
        this.element = element2;
      }
      getAttrs() {
        const result = [];
        if (this.classNames.length > 0) {
          result.push("class", this.classNames.join(" "));
        }
        return result.concat(this.attrs);
      }
      addAttribute(name, value = "") {
        this.attrs.push(name, value && value.toLowerCase() || "");
      }
      addClassName(name) {
        this.classNames.push(name.toLowerCase());
      }
      toString() {
        let res = this.element || "";
        if (this.classNames) {
          this.classNames.forEach((klass) => res += `.${klass}`);
        }
        if (this.attrs) {
          for (let i = 0; i < this.attrs.length; i += 2) {
            const name = this.escapeAttribute(this.attrs[i]);
            const value = this.attrs[i + 1];
            res += `[${name}${value ? "=" + value : ""}]`;
          }
        }
        this.notSelectors.forEach((notSelector) => res += `:not(${notSelector})`);
        return res;
      }
    };
    SelectorMatcher = class _SelectorMatcher {
      static createNotMatcher(notSelectors) {
        const notMatcher = new _SelectorMatcher();
        notMatcher.addSelectables(notSelectors, null);
        return notMatcher;
      }
      _elementMap = /* @__PURE__ */ new Map();
      _elementPartialMap = /* @__PURE__ */ new Map();
      _classMap = /* @__PURE__ */ new Map();
      _classPartialMap = /* @__PURE__ */ new Map();
      _attrValueMap = /* @__PURE__ */ new Map();
      _attrValuePartialMap = /* @__PURE__ */ new Map();
      _listContexts = [];
      addSelectables(cssSelectors, callbackCtxt) {
        let listContext = null;
        if (cssSelectors.length > 1) {
          listContext = new SelectorListContext(cssSelectors);
          this._listContexts.push(listContext);
        }
        for (let i = 0; i < cssSelectors.length; i++) {
          this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }
      }
      /**
       * Add an object that can be found later on by calling `match`.
       * @param cssSelector A css selector
       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
       */
      _addSelectable(cssSelector, callbackCtxt, listContext) {
        let matcher = this;
        const element2 = cssSelector.element;
        const classNames = cssSelector.classNames;
        const attrs = cssSelector.attrs;
        const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
        if (element2) {
          const isTerminal = attrs.length === 0 && classNames.length === 0;
          if (isTerminal) {
            this._addTerminal(matcher._elementMap, element2, selectable);
          } else {
            matcher = this._addPartial(matcher._elementPartialMap, element2);
          }
        }
        if (classNames) {
          for (let i = 0; i < classNames.length; i++) {
            const isTerminal = attrs.length === 0 && i === classNames.length - 1;
            const className = classNames[i];
            if (isTerminal) {
              this._addTerminal(matcher._classMap, className, selectable);
            } else {
              matcher = this._addPartial(matcher._classPartialMap, className);
            }
          }
        }
        if (attrs) {
          for (let i = 0; i < attrs.length; i += 2) {
            const isTerminal = i === attrs.length - 2;
            const name = attrs[i];
            const value = attrs[i + 1];
            if (isTerminal) {
              const terminalMap = matcher._attrValueMap;
              let terminalValuesMap = terminalMap.get(name);
              if (!terminalValuesMap) {
                terminalValuesMap = /* @__PURE__ */ new Map();
                terminalMap.set(name, terminalValuesMap);
              }
              this._addTerminal(terminalValuesMap, value, selectable);
            } else {
              const partialMap = matcher._attrValuePartialMap;
              let partialValuesMap = partialMap.get(name);
              if (!partialValuesMap) {
                partialValuesMap = /* @__PURE__ */ new Map();
                partialMap.set(name, partialValuesMap);
              }
              matcher = this._addPartial(partialValuesMap, value);
            }
          }
        }
      }
      _addTerminal(map2, name, selectable) {
        let terminalList = map2.get(name);
        if (!terminalList) {
          terminalList = [];
          map2.set(name, terminalList);
        }
        terminalList.push(selectable);
      }
      _addPartial(map2, name) {
        let matcher = map2.get(name);
        if (!matcher) {
          matcher = new _SelectorMatcher();
          map2.set(name, matcher);
        }
        return matcher;
      }
      /**
       * Find the objects that have been added via `addSelectable`
       * whose css selector is contained in the given css selector.
       * @param cssSelector A css selector
       * @param matchedCallback This callback will be called with the object handed into `addSelectable`
       * @return boolean true if a match was found
       */
      match(cssSelector, matchedCallback) {
        let result = false;
        const element2 = cssSelector.element;
        const classNames = cssSelector.classNames;
        const attrs = cssSelector.attrs;
        for (let i = 0; i < this._listContexts.length; i++) {
          this._listContexts[i].alreadyMatched = false;
        }
        result = this._matchTerminal(this._elementMap, element2, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._elementPartialMap, element2, cssSelector, matchedCallback) || result;
        if (classNames) {
          for (let i = 0; i < classNames.length; i++) {
            const className = classNames[i];
            result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
          }
        }
        if (attrs) {
          for (let i = 0; i < attrs.length; i += 2) {
            const name = attrs[i];
            const value = attrs[i + 1];
            const terminalValuesMap = this._attrValueMap.get(name);
            if (value) {
              result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result;
            }
            result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
            const partialValuesMap = this._attrValuePartialMap.get(name);
            if (value) {
              result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result;
            }
            result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
          }
        }
        return result;
      }
      /** @internal */
      _matchTerminal(map2, name, cssSelector, matchedCallback) {
        if (!map2 || typeof name !== "string") {
          return false;
        }
        let selectables = map2.get(name) || [];
        const starSelectables = map2.get("*");
        if (starSelectables) {
          selectables = selectables.concat(starSelectables);
        }
        if (selectables.length === 0) {
          return false;
        }
        let selectable;
        let result = false;
        for (let i = 0; i < selectables.length; i++) {
          selectable = selectables[i];
          result = selectable.finalize(cssSelector, matchedCallback) || result;
        }
        return result;
      }
      /** @internal */
      _matchPartial(map2, name, cssSelector, matchedCallback) {
        if (!map2 || typeof name !== "string") {
          return false;
        }
        const nestedSelector = map2.get(name);
        if (!nestedSelector) {
          return false;
        }
        return nestedSelector.match(cssSelector, matchedCallback);
      }
    };
    SelectorListContext = class {
      selectors;
      alreadyMatched = false;
      constructor(selectors) {
        this.selectors = selectors;
      }
    };
    SelectorContext = class {
      selector;
      cbContext;
      listContext;
      notSelectors;
      constructor(selector, cbContext, listContext) {
        this.selector = selector;
        this.cbContext = cbContext;
        this.listContext = listContext;
        this.notSelectors = selector.notSelectors;
      }
      finalize(cssSelector, callback) {
        let result = true;
        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
          const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
          result = !notMatcher.match(cssSelector, null);
        }
        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
          if (this.listContext) {
            this.listContext.alreadyMatched = true;
          }
          callback(this.selector, this.cbContext);
        }
        return result;
      }
    };
    SelectorlessMatcher = class {
      registry;
      constructor(registry) {
        this.registry = registry;
      }
      match(name) {
        return this.registry.has(name) ? this.registry.get(name) : [];
      }
    };
    (function(ViewEncapsulation4) {
      ViewEncapsulation4[ViewEncapsulation4["Emulated"] = 0] = "Emulated";
      ViewEncapsulation4[ViewEncapsulation4["None"] = 2] = "None";
      ViewEncapsulation4[ViewEncapsulation4["ShadowDom"] = 3] = "ShadowDom";
    })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
    (function(ChangeDetectionStrategy3) {
      ChangeDetectionStrategy3[ChangeDetectionStrategy3["OnPush"] = 0] = "OnPush";
      ChangeDetectionStrategy3[ChangeDetectionStrategy3["Default"] = 1] = "Default";
    })(ChangeDetectionStrategy2 || (ChangeDetectionStrategy2 = {}));
    (function(InputFlags3) {
      InputFlags3[InputFlags3["None"] = 0] = "None";
      InputFlags3[InputFlags3["SignalBased"] = 1] = "SignalBased";
      InputFlags3[InputFlags3["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
    })(InputFlags2 || (InputFlags2 = {}));
    CUSTOM_ELEMENTS_SCHEMA2 = {
      name: "custom-elements"
    };
    NO_ERRORS_SCHEMA2 = {
      name: "no-errors-schema"
    };
    (function(SecurityContext3) {
      SecurityContext3[SecurityContext3["NONE"] = 0] = "NONE";
      SecurityContext3[SecurityContext3["HTML"] = 1] = "HTML";
      SecurityContext3[SecurityContext3["STYLE"] = 2] = "STYLE";
      SecurityContext3[SecurityContext3["SCRIPT"] = 3] = "SCRIPT";
      SecurityContext3[SecurityContext3["URL"] = 4] = "URL";
      SecurityContext3[SecurityContext3["RESOURCE_URL"] = 5] = "RESOURCE_URL";
    })(SecurityContext2 || (SecurityContext2 = {}));
    (function(MissingTranslationStrategy3) {
      MissingTranslationStrategy3[MissingTranslationStrategy3["Error"] = 0] = "Error";
      MissingTranslationStrategy3[MissingTranslationStrategy3["Warning"] = 1] = "Warning";
      MissingTranslationStrategy3[MissingTranslationStrategy3["Ignore"] = 2] = "Ignore";
    })(MissingTranslationStrategy2 || (MissingTranslationStrategy2 = {}));
    (function(FactoryTarget3) {
      FactoryTarget3[FactoryTarget3["Directive"] = 0] = "Directive";
      FactoryTarget3[FactoryTarget3["Component"] = 1] = "Component";
      FactoryTarget3[FactoryTarget3["Injectable"] = 2] = "Injectable";
      FactoryTarget3[FactoryTarget3["Pipe"] = 3] = "Pipe";
      FactoryTarget3[FactoryTarget3["NgModule"] = 4] = "NgModule";
    })(FactoryTarget2 || (FactoryTarget2 = {}));
    (function(R3TemplateDependencyKind3) {
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Directive"] = 0] = "Directive";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Pipe"] = 1] = "Pipe";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["NgModule"] = 2] = "NgModule";
    })(R3TemplateDependencyKind$1 || (R3TemplateDependencyKind$1 = {}));
    (function(ViewEncapsulation4) {
      ViewEncapsulation4[ViewEncapsulation4["Emulated"] = 0] = "Emulated";
      ViewEncapsulation4[ViewEncapsulation4["None"] = 2] = "None";
      ViewEncapsulation4[ViewEncapsulation4["ShadowDom"] = 3] = "ShadowDom";
    })(ViewEncapsulation3 || (ViewEncapsulation3 = {}));
    _SerializerVisitor = class {
      visitText(text2, context2) {
        return text2.value;
      }
      visitContainer(container, context2) {
        return `[${container.children.map((child) => child.visit(this)).join(", ")}]`;
      }
      visitIcu(icu, context2) {
        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
        return `{${icu.expression}, ${icu.type}, ${strCases.join(", ")}}`;
      }
      visitTagPlaceholder(ph, context2) {
        return ph.isVoid ? `<ph tag name="${ph.startName}"/>` : `<ph tag name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
      }
      visitPlaceholder(ph, context2) {
        return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
      }
      visitIcuPlaceholder(ph, context2) {
        return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
      }
      visitBlockPlaceholder(ph, context2) {
        return `<ph block name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
      }
    };
    serializerVisitor$1 = new _SerializerVisitor();
    _SerializerIgnoreIcuExpVisitor = class extends _SerializerVisitor {
      visitIcu(icu) {
        let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
        return `{${icu.type}, ${strCases.join(", ")}}`;
      }
    };
    (function(Endian2) {
      Endian2[Endian2["Little"] = 0] = "Little";
      Endian2[Endian2["Big"] = 1] = "Big";
    })(Endian || (Endian = {}));
    (function(TypeModifier2) {
      TypeModifier2[TypeModifier2["None"] = 0] = "None";
      TypeModifier2[TypeModifier2["Const"] = 1] = "Const";
    })(TypeModifier || (TypeModifier = {}));
    Type2 = class {
      modifiers;
      constructor(modifiers = TypeModifier.None) {
        this.modifiers = modifiers;
      }
      hasModifier(modifier) {
        return (this.modifiers & modifier) !== 0;
      }
    };
    (function(BuiltinTypeName2) {
      BuiltinTypeName2[BuiltinTypeName2["Dynamic"] = 0] = "Dynamic";
      BuiltinTypeName2[BuiltinTypeName2["Bool"] = 1] = "Bool";
      BuiltinTypeName2[BuiltinTypeName2["String"] = 2] = "String";
      BuiltinTypeName2[BuiltinTypeName2["Int"] = 3] = "Int";
      BuiltinTypeName2[BuiltinTypeName2["Number"] = 4] = "Number";
      BuiltinTypeName2[BuiltinTypeName2["Function"] = 5] = "Function";
      BuiltinTypeName2[BuiltinTypeName2["Inferred"] = 6] = "Inferred";
      BuiltinTypeName2[BuiltinTypeName2["None"] = 7] = "None";
    })(BuiltinTypeName || (BuiltinTypeName = {}));
    BuiltinType = class extends Type2 {
      name;
      constructor(name, modifiers) {
        super(modifiers);
        this.name = name;
      }
      visitType(visitor, context2) {
        return visitor.visitBuiltinType(this, context2);
      }
    };
    ExpressionType = class extends Type2 {
      value;
      typeParams;
      constructor(value, modifiers, typeParams = null) {
        super(modifiers);
        this.value = value;
        this.typeParams = typeParams;
      }
      visitType(visitor, context2) {
        return visitor.visitExpressionType(this, context2);
      }
    };
    DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
    INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
    BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
    INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
    NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
    STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
    FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
    NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
    (function(UnaryOperator2) {
      UnaryOperator2[UnaryOperator2["Minus"] = 0] = "Minus";
      UnaryOperator2[UnaryOperator2["Plus"] = 1] = "Plus";
    })(UnaryOperator || (UnaryOperator = {}));
    (function(BinaryOperator2) {
      BinaryOperator2[BinaryOperator2["Equals"] = 0] = "Equals";
      BinaryOperator2[BinaryOperator2["NotEquals"] = 1] = "NotEquals";
      BinaryOperator2[BinaryOperator2["Assign"] = 2] = "Assign";
      BinaryOperator2[BinaryOperator2["Identical"] = 3] = "Identical";
      BinaryOperator2[BinaryOperator2["NotIdentical"] = 4] = "NotIdentical";
      BinaryOperator2[BinaryOperator2["Minus"] = 5] = "Minus";
      BinaryOperator2[BinaryOperator2["Plus"] = 6] = "Plus";
      BinaryOperator2[BinaryOperator2["Divide"] = 7] = "Divide";
      BinaryOperator2[BinaryOperator2["Multiply"] = 8] = "Multiply";
      BinaryOperator2[BinaryOperator2["Modulo"] = 9] = "Modulo";
      BinaryOperator2[BinaryOperator2["And"] = 10] = "And";
      BinaryOperator2[BinaryOperator2["Or"] = 11] = "Or";
      BinaryOperator2[BinaryOperator2["BitwiseOr"] = 12] = "BitwiseOr";
      BinaryOperator2[BinaryOperator2["BitwiseAnd"] = 13] = "BitwiseAnd";
      BinaryOperator2[BinaryOperator2["Lower"] = 14] = "Lower";
      BinaryOperator2[BinaryOperator2["LowerEquals"] = 15] = "LowerEquals";
      BinaryOperator2[BinaryOperator2["Bigger"] = 16] = "Bigger";
      BinaryOperator2[BinaryOperator2["BiggerEquals"] = 17] = "BiggerEquals";
      BinaryOperator2[BinaryOperator2["NullishCoalesce"] = 18] = "NullishCoalesce";
      BinaryOperator2[BinaryOperator2["Exponentiation"] = 19] = "Exponentiation";
      BinaryOperator2[BinaryOperator2["In"] = 20] = "In";
      BinaryOperator2[BinaryOperator2["AdditionAssignment"] = 21] = "AdditionAssignment";
      BinaryOperator2[BinaryOperator2["SubtractionAssignment"] = 22] = "SubtractionAssignment";
      BinaryOperator2[BinaryOperator2["MultiplicationAssignment"] = 23] = "MultiplicationAssignment";
      BinaryOperator2[BinaryOperator2["DivisionAssignment"] = 24] = "DivisionAssignment";
      BinaryOperator2[BinaryOperator2["RemainderAssignment"] = 25] = "RemainderAssignment";
      BinaryOperator2[BinaryOperator2["ExponentiationAssignment"] = 26] = "ExponentiationAssignment";
      BinaryOperator2[BinaryOperator2["AndAssignment"] = 27] = "AndAssignment";
      BinaryOperator2[BinaryOperator2["OrAssignment"] = 28] = "OrAssignment";
      BinaryOperator2[BinaryOperator2["NullishCoalesceAssignment"] = 29] = "NullishCoalesceAssignment";
    })(BinaryOperator || (BinaryOperator = {}));
    Expression = class {
      type;
      sourceSpan;
      constructor(type, sourceSpan) {
        this.type = type || null;
        this.sourceSpan = sourceSpan || null;
      }
      prop(name, sourceSpan) {
        return new ReadPropExpr(this, name, null, sourceSpan);
      }
      key(index, type, sourceSpan) {
        return new ReadKeyExpr(this, index, type, sourceSpan);
      }
      callFn(params, sourceSpan, pure) {
        return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
      }
      instantiate(params, type, sourceSpan) {
        return new InstantiateExpr(this, params, type, sourceSpan);
      }
      conditional(trueCase, falseCase = null, sourceSpan) {
        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
      }
      equals(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
      }
      notEquals(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
      }
      identical(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
      }
      notIdentical(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
      }
      minus(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
      }
      plus(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
      }
      divide(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
      }
      multiply(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
      }
      modulo(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
      }
      power(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Exponentiation, this, rhs, null, sourceSpan);
      }
      and(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
      }
      bitwiseOr(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan);
      }
      bitwiseAnd(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan);
      }
      or(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
      }
      lower(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
      }
      lowerEquals(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
      }
      bigger(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
      }
      biggerEquals(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
      }
      isBlank(sourceSpan) {
        return this.equals(TYPED_NULL_EXPR, sourceSpan);
      }
      nullishCoalesce(rhs, sourceSpan) {
        return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);
      }
      toStmt() {
        return new ExpressionStatement(this, null);
      }
    };
    ReadVarExpr = class _ReadVarExpr extends Expression {
      name;
      constructor(name, type, sourceSpan) {
        super(type, sourceSpan);
        this.name = name;
      }
      isEquivalent(e) {
        return e instanceof _ReadVarExpr && this.name === e.name;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitReadVarExpr(this, context2);
      }
      clone() {
        return new _ReadVarExpr(this.name, this.type, this.sourceSpan);
      }
      set(value) {
        return new BinaryOperatorExpr(BinaryOperator.Assign, this, value, null, this.sourceSpan);
      }
    };
    TypeofExpr = class _TypeofExpr extends Expression {
      expr;
      constructor(expr, type, sourceSpan) {
        super(type, sourceSpan);
        this.expr = expr;
      }
      visitExpression(visitor, context2) {
        return visitor.visitTypeofExpr(this, context2);
      }
      isEquivalent(e) {
        return e instanceof _TypeofExpr && e.expr.isEquivalent(this.expr);
      }
      isConstant() {
        return this.expr.isConstant();
      }
      clone() {
        return new _TypeofExpr(this.expr.clone());
      }
    };
    VoidExpr = class _VoidExpr extends Expression {
      expr;
      constructor(expr, type, sourceSpan) {
        super(type, sourceSpan);
        this.expr = expr;
      }
      visitExpression(visitor, context2) {
        return visitor.visitVoidExpr(this, context2);
      }
      isEquivalent(e) {
        return e instanceof _VoidExpr && e.expr.isEquivalent(this.expr);
      }
      isConstant() {
        return this.expr.isConstant();
      }
      clone() {
        return new _VoidExpr(this.expr.clone());
      }
    };
    WrappedNodeExpr = class _WrappedNodeExpr extends Expression {
      node;
      constructor(node, type, sourceSpan) {
        super(type, sourceSpan);
        this.node = node;
      }
      isEquivalent(e) {
        return e instanceof _WrappedNodeExpr && this.node === e.node;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitWrappedNodeExpr(this, context2);
      }
      clone() {
        return new _WrappedNodeExpr(this.node, this.type, this.sourceSpan);
      }
    };
    InvokeFunctionExpr = class _InvokeFunctionExpr extends Expression {
      fn;
      args;
      pure;
      constructor(fn2, args, type, sourceSpan, pure = false) {
        super(type, sourceSpan);
        this.fn = fn2;
        this.args = args;
        this.pure = pure;
      }
      // An alias for fn, which allows other logic to handle calls and property reads together.
      get receiver() {
        return this.fn;
      }
      isEquivalent(e) {
        return e instanceof _InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitInvokeFunctionExpr(this, context2);
      }
      clone() {
        return new _InvokeFunctionExpr(this.fn.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan, this.pure);
      }
    };
    TaggedTemplateLiteralExpr = class _TaggedTemplateLiteralExpr extends Expression {
      tag;
      template;
      constructor(tag, template2, type, sourceSpan) {
        super(type, sourceSpan);
        this.tag = tag;
        this.template = template2;
      }
      isEquivalent(e) {
        return e instanceof _TaggedTemplateLiteralExpr && this.tag.isEquivalent(e.tag) && this.template.isEquivalent(e.template);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitTaggedTemplateLiteralExpr(this, context2);
      }
      clone() {
        return new _TaggedTemplateLiteralExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);
      }
    };
    InstantiateExpr = class _InstantiateExpr extends Expression {
      classExpr;
      args;
      constructor(classExpr, args, type, sourceSpan) {
        super(type, sourceSpan);
        this.classExpr = classExpr;
        this.args = args;
      }
      isEquivalent(e) {
        return e instanceof _InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitInstantiateExpr(this, context2);
      }
      clone() {
        return new _InstantiateExpr(this.classExpr.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan);
      }
    };
    LiteralExpr = class _LiteralExpr extends Expression {
      value;
      constructor(value, type, sourceSpan) {
        super(type, sourceSpan);
        this.value = value;
      }
      isEquivalent(e) {
        return e instanceof _LiteralExpr && this.value === e.value;
      }
      isConstant() {
        return true;
      }
      visitExpression(visitor, context2) {
        return visitor.visitLiteralExpr(this, context2);
      }
      clone() {
        return new _LiteralExpr(this.value, this.type, this.sourceSpan);
      }
    };
    TemplateLiteralExpr = class _TemplateLiteralExpr extends Expression {
      elements;
      expressions;
      constructor(elements, expressions, sourceSpan) {
        super(null, sourceSpan);
        this.elements = elements;
        this.expressions = expressions;
      }
      isEquivalent(e) {
        return e instanceof _TemplateLiteralExpr && areAllEquivalentPredicate(this.elements, e.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.expressions, e.expressions);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitTemplateLiteralExpr(this, context2);
      }
      clone() {
        return new _TemplateLiteralExpr(this.elements.map((el) => el.clone()), this.expressions.map((expr) => expr.clone()));
      }
    };
    TemplateLiteralElementExpr = class _TemplateLiteralElementExpr extends Expression {
      text;
      rawText;
      constructor(text2, sourceSpan, rawText) {
        super(STRING_TYPE, sourceSpan);
        this.text = text2;
        this.rawText = rawText ?? escapeForTemplateLiteral(escapeSlashes(text2));
      }
      visitExpression(visitor, context2) {
        return visitor.visitTemplateLiteralElementExpr(this, context2);
      }
      isEquivalent(e) {
        return e instanceof _TemplateLiteralElementExpr && e.text === this.text && e.rawText === this.rawText;
      }
      isConstant() {
        return true;
      }
      clone() {
        return new _TemplateLiteralElementExpr(this.text, this.sourceSpan, this.rawText);
      }
    };
    LiteralPiece = class {
      text;
      sourceSpan;
      constructor(text2, sourceSpan) {
        this.text = text2;
        this.sourceSpan = sourceSpan;
      }
    };
    PlaceholderPiece = class {
      text;
      sourceSpan;
      associatedMessage;
      /**
       * Create a new instance of a `PlaceholderPiece`.
       *
       * @param text the name of this placeholder (e.g. `PH_1`).
       * @param sourceSpan the location of this placeholder in its localized message the source code.
       * @param associatedMessage reference to another message that this placeholder is associated with.
       * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has
       * been extracted out from the message containing the placeholder.
       */
      constructor(text2, sourceSpan, associatedMessage) {
        this.text = text2;
        this.sourceSpan = sourceSpan;
        this.associatedMessage = associatedMessage;
      }
    };
    MEANING_SEPARATOR$1 = "|";
    ID_SEPARATOR$1 = "@@";
    LEGACY_ID_INDICATOR = "\u241F";
    LocalizedString = class _LocalizedString extends Expression {
      metaBlock;
      messageParts;
      placeHolderNames;
      expressions;
      constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
        super(STRING_TYPE, sourceSpan);
        this.metaBlock = metaBlock;
        this.messageParts = messageParts;
        this.placeHolderNames = placeHolderNames;
        this.expressions = expressions;
      }
      isEquivalent(e) {
        return false;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitLocalizedString(this, context2);
      }
      clone() {
        return new _LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map((expr) => expr.clone()), this.sourceSpan);
      }
      /**
       * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
       * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
       * `parseI18nMeta()`.
       *
       * @param meta The metadata to serialize
       * @param messagePart The first part of the tagged string
       */
      serializeI18nHead() {
        let metaBlock = this.metaBlock.description || "";
        if (this.metaBlock.meaning) {
          metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;
        }
        if (this.metaBlock.customId) {
          metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;
        }
        if (this.metaBlock.legacyIds) {
          this.metaBlock.legacyIds.forEach((legacyId) => {
            metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;
          });
        }
        return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
      }
      getMessagePartSourceSpan(i) {
        return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;
      }
      getPlaceholderSourceSpan(i) {
        return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan;
      }
      /**
       * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
       * can be used in a `$localize` tagged string.
       *
       * The format is `:<placeholder-name>[@@<associated-id>]:`.
       *
       * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder
       * refers.
       *
       * @param partIndex The index of the message part to serialize.
       */
      serializeI18nTemplatePart(partIndex) {
        const placeholder = this.placeHolderNames[partIndex - 1];
        const messagePart = this.messageParts[partIndex];
        let metaBlock = placeholder.text;
        if (placeholder.associatedMessage?.legacyIds.length === 0) {
          metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;
        }
        return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));
      }
    };
    escapeSlashes = (str) => str.replace(/\\/g, "\\\\");
    escapeStartingColon = (str) => str.replace(/^:/, "\\:");
    escapeColons = (str) => str.replace(/:/g, "\\:");
    escapeForTemplateLiteral = (str) => str.replace(/`/g, "\\`").replace(/\${/g, "$\\{");
    ExternalExpr = class _ExternalExpr extends Expression {
      value;
      typeParams;
      constructor(value, type, typeParams = null, sourceSpan) {
        super(type, sourceSpan);
        this.value = value;
        this.typeParams = typeParams;
      }
      isEquivalent(e) {
        return e instanceof _ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitExternalExpr(this, context2);
      }
      clone() {
        return new _ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);
      }
    };
    ConditionalExpr = class _ConditionalExpr extends Expression {
      condition;
      falseCase;
      trueCase;
      constructor(condition, trueCase, falseCase = null, type, sourceSpan) {
        super(type || trueCase.type, sourceSpan);
        this.condition = condition;
        this.falseCase = falseCase;
        this.trueCase = trueCase;
      }
      isEquivalent(e) {
        return e instanceof _ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitConditionalExpr(this, context2);
      }
      clone() {
        return new _ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);
      }
    };
    NotExpr = class _NotExpr extends Expression {
      condition;
      constructor(condition, sourceSpan) {
        super(BOOL_TYPE, sourceSpan);
        this.condition = condition;
      }
      isEquivalent(e) {
        return e instanceof _NotExpr && this.condition.isEquivalent(e.condition);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitNotExpr(this, context2);
      }
      clone() {
        return new _NotExpr(this.condition.clone(), this.sourceSpan);
      }
    };
    FnParam = class _FnParam {
      name;
      type;
      constructor(name, type = null) {
        this.name = name;
        this.type = type;
      }
      isEquivalent(param) {
        return this.name === param.name;
      }
      clone() {
        return new _FnParam(this.name, this.type);
      }
    };
    FunctionExpr = class _FunctionExpr extends Expression {
      params;
      statements;
      name;
      constructor(params, statements, type, sourceSpan, name) {
        super(type, sourceSpan);
        this.params = params;
        this.statements = statements;
        this.name = name;
      }
      isEquivalent(e) {
        return (e instanceof _FunctionExpr || e instanceof DeclareFunctionStmt) && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitFunctionExpr(this, context2);
      }
      toDeclStmt(name, modifiers) {
        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
      }
      clone() {
        return new _FunctionExpr(this.params.map((p) => p.clone()), this.statements, this.type, this.sourceSpan, this.name);
      }
    };
    ArrowFunctionExpr = class _ArrowFunctionExpr extends Expression {
      params;
      body;
      // Note that `body: Expression` represents `() => expr` whereas
      // `body: Statement[]` represents `() => { expr }`.
      constructor(params, body, type, sourceSpan) {
        super(type, sourceSpan);
        this.params = params;
        this.body = body;
      }
      isEquivalent(e) {
        if (!(e instanceof _ArrowFunctionExpr) || !areAllEquivalent(this.params, e.params)) {
          return false;
        }
        if (this.body instanceof Expression && e.body instanceof Expression) {
          return this.body.isEquivalent(e.body);
        }
        if (Array.isArray(this.body) && Array.isArray(e.body)) {
          return areAllEquivalent(this.body, e.body);
        }
        return false;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitArrowFunctionExpr(this, context2);
      }
      clone() {
        return new _ArrowFunctionExpr(this.params.map((p) => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);
      }
      toDeclStmt(name, modifiers) {
        return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);
      }
    };
    UnaryOperatorExpr = class _UnaryOperatorExpr extends Expression {
      operator;
      expr;
      parens;
      constructor(operator, expr, type, sourceSpan, parens = true) {
        super(type || NUMBER_TYPE, sourceSpan);
        this.operator = operator;
        this.expr = expr;
        this.parens = parens;
      }
      isEquivalent(e) {
        return e instanceof _UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitUnaryOperatorExpr(this, context2);
      }
      clone() {
        return new _UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);
      }
    };
    ParenthesizedExpr = class _ParenthesizedExpr extends Expression {
      expr;
      constructor(expr, type, sourceSpan) {
        super(type, sourceSpan);
        this.expr = expr;
      }
      visitExpression(visitor, context2) {
        return visitor.visitParenthesizedExpr(this, context2);
      }
      isEquivalent(e) {
        return e instanceof _ParenthesizedExpr && e.expr.isEquivalent(this.expr);
      }
      isConstant() {
        return this.expr.isConstant();
      }
      clone() {
        return new _ParenthesizedExpr(this.expr.clone());
      }
    };
    BinaryOperatorExpr = class _BinaryOperatorExpr extends Expression {
      operator;
      rhs;
      lhs;
      constructor(operator, lhs, rhs, type, sourceSpan) {
        super(type || lhs.type, sourceSpan);
        this.operator = operator;
        this.rhs = rhs;
        this.lhs = lhs;
      }
      isEquivalent(e) {
        return e instanceof _BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitBinaryOperatorExpr(this, context2);
      }
      clone() {
        return new _BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan);
      }
      isAssignment() {
        const op = this.operator;
        return op === BinaryOperator.Assign || op === BinaryOperator.AdditionAssignment || op === BinaryOperator.SubtractionAssignment || op === BinaryOperator.MultiplicationAssignment || op === BinaryOperator.DivisionAssignment || op === BinaryOperator.RemainderAssignment || op === BinaryOperator.ExponentiationAssignment || op === BinaryOperator.AndAssignment || op === BinaryOperator.OrAssignment || op === BinaryOperator.NullishCoalesceAssignment;
      }
    };
    ReadPropExpr = class _ReadPropExpr extends Expression {
      receiver;
      name;
      constructor(receiver, name, type, sourceSpan) {
        super(type, sourceSpan);
        this.receiver = receiver;
        this.name = name;
      }
      // An alias for name, which allows other logic to handle property reads and keyed reads together.
      get index() {
        return this.name;
      }
      isEquivalent(e) {
        return e instanceof _ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitReadPropExpr(this, context2);
      }
      set(value) {
        return new BinaryOperatorExpr(BinaryOperator.Assign, this.receiver.prop(this.name), value, null, this.sourceSpan);
      }
      clone() {
        return new _ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);
      }
    };
    ReadKeyExpr = class _ReadKeyExpr extends Expression {
      receiver;
      index;
      constructor(receiver, index, type, sourceSpan) {
        super(type, sourceSpan);
        this.receiver = receiver;
        this.index = index;
      }
      isEquivalent(e) {
        return e instanceof _ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);
      }
      isConstant() {
        return false;
      }
      visitExpression(visitor, context2) {
        return visitor.visitReadKeyExpr(this, context2);
      }
      set(value) {
        return new BinaryOperatorExpr(BinaryOperator.Assign, this.receiver.key(this.index), value, null, this.sourceSpan);
      }
      clone() {
        return new _ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);
      }
    };
    LiteralArrayExpr = class _LiteralArrayExpr extends Expression {
      entries;
      constructor(entries, type, sourceSpan) {
        super(type, sourceSpan);
        this.entries = entries;
      }
      isConstant() {
        return this.entries.every((e) => e.isConstant());
      }
      isEquivalent(e) {
        return e instanceof _LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
      }
      visitExpression(visitor, context2) {
        return visitor.visitLiteralArrayExpr(this, context2);
      }
      clone() {
        return new _LiteralArrayExpr(this.entries.map((e) => e.clone()), this.type, this.sourceSpan);
      }
    };
    LiteralMapEntry = class _LiteralMapEntry {
      key;
      value;
      quoted;
      constructor(key, value, quoted) {
        this.key = key;
        this.value = value;
        this.quoted = quoted;
      }
      isEquivalent(e) {
        return this.key === e.key && this.value.isEquivalent(e.value);
      }
      clone() {
        return new _LiteralMapEntry(this.key, this.value.clone(), this.quoted);
      }
    };
    LiteralMapExpr = class _LiteralMapExpr extends Expression {
      entries;
      valueType = null;
      constructor(entries, type, sourceSpan) {
        super(type, sourceSpan);
        this.entries = entries;
        if (type) {
          this.valueType = type.valueType;
        }
      }
      isEquivalent(e) {
        return e instanceof _LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
      }
      isConstant() {
        return this.entries.every((e) => e.value.isConstant());
      }
      visitExpression(visitor, context2) {
        return visitor.visitLiteralMapExpr(this, context2);
      }
      clone() {
        const entriesClone = this.entries.map((entry) => entry.clone());
        return new _LiteralMapExpr(entriesClone, this.type, this.sourceSpan);
      }
    };
    NULL_EXPR = new LiteralExpr(null, null, null);
    TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
    (function(StmtModifier2) {
      StmtModifier2[StmtModifier2["None"] = 0] = "None";
      StmtModifier2[StmtModifier2["Final"] = 1] = "Final";
      StmtModifier2[StmtModifier2["Private"] = 2] = "Private";
      StmtModifier2[StmtModifier2["Exported"] = 4] = "Exported";
      StmtModifier2[StmtModifier2["Static"] = 8] = "Static";
    })(StmtModifier || (StmtModifier = {}));
    LeadingComment = class {
      text;
      multiline;
      trailingNewline;
      constructor(text2, multiline, trailingNewline) {
        this.text = text2;
        this.multiline = multiline;
        this.trailingNewline = trailingNewline;
      }
      toString() {
        return this.multiline ? ` ${this.text} ` : this.text;
      }
    };
    JSDocComment = class extends LeadingComment {
      tags;
      constructor(tags) {
        super(
          "",
          /* multiline */
          true,
          /* trailingNewline */
          true
        );
        this.tags = tags;
      }
      toString() {
        return serializeTags(this.tags);
      }
    };
    Statement = class {
      modifiers;
      sourceSpan;
      leadingComments;
      constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {
        this.modifiers = modifiers;
        this.sourceSpan = sourceSpan;
        this.leadingComments = leadingComments;
      }
      hasModifier(modifier) {
        return (this.modifiers & modifier) !== 0;
      }
      addLeadingComment(leadingComment) {
        this.leadingComments = this.leadingComments ?? [];
        this.leadingComments.push(leadingComment);
      }
    };
    DeclareVarStmt = class _DeclareVarStmt extends Statement {
      name;
      value;
      type;
      constructor(name, value, type, modifiers, sourceSpan, leadingComments) {
        super(modifiers, sourceSpan, leadingComments);
        this.name = name;
        this.value = value;
        this.type = type || value && value.type || null;
      }
      isEquivalent(stmt) {
        return stmt instanceof _DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
      }
      visitStatement(visitor, context2) {
        return visitor.visitDeclareVarStmt(this, context2);
      }
    };
    DeclareFunctionStmt = class _DeclareFunctionStmt extends Statement {
      name;
      params;
      statements;
      type;
      constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
        super(modifiers, sourceSpan, leadingComments);
        this.name = name;
        this.params = params;
        this.statements = statements;
        this.type = type || null;
      }
      isEquivalent(stmt) {
        return stmt instanceof _DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);
      }
      visitStatement(visitor, context2) {
        return visitor.visitDeclareFunctionStmt(this, context2);
      }
    };
    ExpressionStatement = class _ExpressionStatement extends Statement {
      expr;
      constructor(expr, sourceSpan, leadingComments) {
        super(StmtModifier.None, sourceSpan, leadingComments);
        this.expr = expr;
      }
      isEquivalent(stmt) {
        return stmt instanceof _ExpressionStatement && this.expr.isEquivalent(stmt.expr);
      }
      visitStatement(visitor, context2) {
        return visitor.visitExpressionStmt(this, context2);
      }
    };
    ReturnStatement = class _ReturnStatement extends Statement {
      value;
      constructor(value, sourceSpan = null, leadingComments) {
        super(StmtModifier.None, sourceSpan, leadingComments);
        this.value = value;
      }
      isEquivalent(stmt) {
        return stmt instanceof _ReturnStatement && this.value.isEquivalent(stmt.value);
      }
      visitStatement(visitor, context2) {
        return visitor.visitReturnStmt(this, context2);
      }
    };
    IfStmt = class _IfStmt extends Statement {
      condition;
      trueCase;
      falseCase;
      constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {
        super(StmtModifier.None, sourceSpan, leadingComments);
        this.condition = condition;
        this.trueCase = trueCase;
        this.falseCase = falseCase;
      }
      isEquivalent(stmt) {
        return stmt instanceof _IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);
      }
      visitStatement(visitor, context2) {
        return visitor.visitIfStmt(this, context2);
      }
    };
    CONSTANT_PREFIX = "_c";
    UNKNOWN_VALUE_KEY = variable("<unknown>");
    KEY_CONTEXT = {};
    POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
    FixupExpression = class _FixupExpression extends Expression {
      resolved;
      original;
      shared = false;
      constructor(resolved2) {
        super(resolved2.type);
        this.resolved = resolved2;
        this.original = resolved2;
      }
      visitExpression(visitor, context2) {
        if (context2 === KEY_CONTEXT) {
          return this.original.visitExpression(visitor, context2);
        } else {
          return this.resolved.visitExpression(visitor, context2);
        }
      }
      isEquivalent(e) {
        return e instanceof _FixupExpression && this.resolved.isEquivalent(e.resolved);
      }
      isConstant() {
        return true;
      }
      clone() {
        throw new Error(`Not supported.`);
      }
      fixup(expression) {
        this.resolved = expression;
        this.shared = true;
      }
    };
    ConstantPool = class {
      isClosureCompilerEnabled;
      statements = [];
      literals = /* @__PURE__ */ new Map();
      literalFactories = /* @__PURE__ */ new Map();
      sharedConstants = /* @__PURE__ */ new Map();
      /**
       * Constant pool also tracks claimed names from {@link uniqueName}.
       * This is useful to avoid collisions if variables are intended to be
       * named a certain way- but may conflict. We wouldn't want to always suffix
       * them with unique numbers.
       */
      _claimedNames = /* @__PURE__ */ new Map();
      nextNameIndex = 0;
      constructor(isClosureCompilerEnabled = false) {
        this.isClosureCompilerEnabled = isClosureCompilerEnabled;
      }
      getConstLiteral(literal2, forceShared) {
        if (literal2 instanceof LiteralExpr && !isLongStringLiteral(literal2) || literal2 instanceof FixupExpression) {
          return literal2;
        }
        const key = GenericKeyFn.INSTANCE.keyOf(literal2);
        let fixup = this.literals.get(key);
        let newValue = false;
        if (!fixup) {
          fixup = new FixupExpression(literal2);
          this.literals.set(key, fixup);
          newValue = true;
        }
        if (!newValue && !fixup.shared || newValue && forceShared) {
          const name = this.freshName();
          let value;
          let usage;
          if (this.isClosureCompilerEnabled && isLongStringLiteral(literal2)) {
            value = new FunctionExpr(
              [],
              // Params.
              [
                // Statements.
                new ReturnStatement(literal2)
              ]
            );
            usage = variable(name).callFn([]);
          } else {
            value = literal2;
            usage = variable(name);
          }
          this.statements.push(new DeclareVarStmt(name, value, INFERRED_TYPE, StmtModifier.Final));
          fixup.fixup(usage);
        }
        return fixup;
      }
      getSharedConstant(def, expr) {
        const key = def.keyOf(expr);
        if (!this.sharedConstants.has(key)) {
          const id = this.freshName();
          this.sharedConstants.set(key, variable(id));
          this.statements.push(def.toSharedConstantDeclaration(id, expr));
        }
        return this.sharedConstants.get(key);
      }
      getLiteralFactory(literal2) {
        if (literal2 instanceof LiteralArrayExpr) {
          const argumentsForKey = literal2.entries.map((e) => e.isConstant() ? e : UNKNOWN_VALUE_KEY);
          const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));
          return this._getLiteralFactory(key, literal2.entries, (entries) => literalArr(entries));
        } else {
          const expressionForKey = literalMap(literal2.entries.map((e) => ({
            key: e.key,
            value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
            quoted: e.quoted
          })));
          const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);
          return this._getLiteralFactory(key, literal2.entries.map((e) => e.value), (entries) => literalMap(entries.map((value, index) => ({
            key: literal2.entries[index].key,
            value,
            quoted: literal2.entries[index].quoted
          }))));
        }
      }
      // TODO: useUniqueName(false) is necessary for naming compatibility with
      // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.
      getSharedFunctionReference(fn2, prefix, useUniqueName = true) {
        const isArrow = fn2 instanceof ArrowFunctionExpr;
        for (const current of this.statements) {
          if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn2)) {
            return variable(current.name);
          }
          if (!isArrow && current instanceof DeclareFunctionStmt && fn2 instanceof FunctionExpr && fn2.isEquivalent(current)) {
            return variable(current.name);
          }
        }
        const name = useUniqueName ? this.uniqueName(prefix) : prefix;
        this.statements.push(fn2 instanceof FunctionExpr ? fn2.toDeclStmt(name, StmtModifier.Final) : new DeclareVarStmt(name, fn2, INFERRED_TYPE, StmtModifier.Final, fn2.sourceSpan));
        return variable(name);
      }
      _getLiteralFactory(key, values, resultMap) {
        let literalFactory = this.literalFactories.get(key);
        const literalFactoryArguments = values.filter((e) => !e.isConstant());
        if (!literalFactory) {
          const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));
          const parameters = resultExpressions.filter(isVariable).map((e) => new FnParam(e.name, DYNAMIC_TYPE));
          const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);
          const name = this.freshName();
          this.statements.push(new DeclareVarStmt(name, pureFunctionDeclaration, INFERRED_TYPE, StmtModifier.Final));
          literalFactory = variable(name);
          this.literalFactories.set(key, literalFactory);
        }
        return { literalFactory, literalFactoryArguments };
      }
      /**
       * Produce a unique name in the context of this pool.
       *
       * The name might be unique among different prefixes if any of the prefixes end in
       * a digit so the prefix should be a constant string (not based on user input) and
       * must not end in a digit.
       */
      uniqueName(name, alwaysIncludeSuffix = true) {
        const count = this._claimedNames.get(name) ?? 0;
        const result = count === 0 && !alwaysIncludeSuffix ? `${name}` : `${name}${count}`;
        this._claimedNames.set(name, count + 1);
        return result;
      }
      freshName() {
        return this.uniqueName(CONSTANT_PREFIX);
      }
    };
    GenericKeyFn = class _GenericKeyFn {
      static INSTANCE = new _GenericKeyFn();
      keyOf(expr) {
        if (expr instanceof LiteralExpr && typeof expr.value === "string") {
          return `"${expr.value}"`;
        } else if (expr instanceof LiteralExpr) {
          return String(expr.value);
        } else if (expr instanceof LiteralArrayExpr) {
          const entries = [];
          for (const entry of expr.entries) {
            entries.push(this.keyOf(entry));
          }
          return `[${entries.join(",")}]`;
        } else if (expr instanceof LiteralMapExpr) {
          const entries = [];
          for (const entry of expr.entries) {
            let key = entry.key;
            if (entry.quoted) {
              key = `"${key}"`;
            }
            entries.push(key + ":" + this.keyOf(entry.value));
          }
          return `{${entries.join(",")}}`;
        } else if (expr instanceof ExternalExpr) {
          return `import("${expr.value.moduleName}", ${expr.value.name})`;
        } else if (expr instanceof ReadVarExpr) {
          return `read(${expr.name})`;
        } else if (expr instanceof TypeofExpr) {
          return `typeof(${this.keyOf(expr.expr)})`;
        } else {
          throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);
        }
      }
    };
    CORE = "@angular/core";
    Identifiers = class {
      /* Methods */
      static NEW_METHOD = "factory";
      static TRANSFORM_METHOD = "transform";
      static PATCH_DEPS = "patchedDeps";
      static core = { name: null, moduleName: CORE };
      /* Instructions */
      static namespaceHTML = { name: "\u0275\u0275namespaceHTML", moduleName: CORE };
      static namespaceMathML = { name: "\u0275\u0275namespaceMathML", moduleName: CORE };
      static namespaceSVG = { name: "\u0275\u0275namespaceSVG", moduleName: CORE };
      static element = { name: "\u0275\u0275element", moduleName: CORE };
      static elementStart = { name: "\u0275\u0275elementStart", moduleName: CORE };
      static elementEnd = { name: "\u0275\u0275elementEnd", moduleName: CORE };
      static domElement = { name: "\u0275\u0275domElement", moduleName: CORE };
      static domElementStart = { name: "\u0275\u0275domElementStart", moduleName: CORE };
      static domElementEnd = { name: "\u0275\u0275domElementEnd", moduleName: CORE };
      static domElementContainer = {
        name: "\u0275\u0275domElementContainer",
        moduleName: CORE
      };
      static domElementContainerStart = {
        name: "\u0275\u0275domElementContainerStart",
        moduleName: CORE
      };
      static domElementContainerEnd = {
        name: "\u0275\u0275domElementContainerEnd",
        moduleName: CORE
      };
      static domTemplate = { name: "\u0275\u0275domTemplate", moduleName: CORE };
      static domListener = { name: "\u0275\u0275domListener", moduleName: CORE };
      static advance = { name: "\u0275\u0275advance", moduleName: CORE };
      static syntheticHostProperty = {
        name: "\u0275\u0275syntheticHostProperty",
        moduleName: CORE
      };
      static syntheticHostListener = {
        name: "\u0275\u0275syntheticHostListener",
        moduleName: CORE
      };
      static attribute = { name: "\u0275\u0275attribute", moduleName: CORE };
      static classProp = { name: "\u0275\u0275classProp", moduleName: CORE };
      static elementContainerStart = {
        name: "\u0275\u0275elementContainerStart",
        moduleName: CORE
      };
      static elementContainerEnd = {
        name: "\u0275\u0275elementContainerEnd",
        moduleName: CORE
      };
      static elementContainer = { name: "\u0275\u0275elementContainer", moduleName: CORE };
      static styleMap = { name: "\u0275\u0275styleMap", moduleName: CORE };
      static classMap = { name: "\u0275\u0275classMap", moduleName: CORE };
      static styleProp = { name: "\u0275\u0275styleProp", moduleName: CORE };
      static interpolate = {
        name: "\u0275\u0275interpolate",
        moduleName: CORE
      };
      static interpolate1 = {
        name: "\u0275\u0275interpolate1",
        moduleName: CORE
      };
      static interpolate2 = {
        name: "\u0275\u0275interpolate2",
        moduleName: CORE
      };
      static interpolate3 = {
        name: "\u0275\u0275interpolate3",
        moduleName: CORE
      };
      static interpolate4 = {
        name: "\u0275\u0275interpolate4",
        moduleName: CORE
      };
      static interpolate5 = {
        name: "\u0275\u0275interpolate5",
        moduleName: CORE
      };
      static interpolate6 = {
        name: "\u0275\u0275interpolate6",
        moduleName: CORE
      };
      static interpolate7 = {
        name: "\u0275\u0275interpolate7",
        moduleName: CORE
      };
      static interpolate8 = {
        name: "\u0275\u0275interpolate8",
        moduleName: CORE
      };
      static interpolateV = {
        name: "\u0275\u0275interpolateV",
        moduleName: CORE
      };
      static nextContext = { name: "\u0275\u0275nextContext", moduleName: CORE };
      static resetView = { name: "\u0275\u0275resetView", moduleName: CORE };
      static templateCreate = { name: "\u0275\u0275template", moduleName: CORE };
      static defer = { name: "\u0275\u0275defer", moduleName: CORE };
      static deferWhen = { name: "\u0275\u0275deferWhen", moduleName: CORE };
      static deferOnIdle = { name: "\u0275\u0275deferOnIdle", moduleName: CORE };
      static deferOnImmediate = { name: "\u0275\u0275deferOnImmediate", moduleName: CORE };
      static deferOnTimer = { name: "\u0275\u0275deferOnTimer", moduleName: CORE };
      static deferOnHover = { name: "\u0275\u0275deferOnHover", moduleName: CORE };
      static deferOnInteraction = { name: "\u0275\u0275deferOnInteraction", moduleName: CORE };
      static deferOnViewport = { name: "\u0275\u0275deferOnViewport", moduleName: CORE };
      static deferPrefetchWhen = { name: "\u0275\u0275deferPrefetchWhen", moduleName: CORE };
      static deferPrefetchOnIdle = {
        name: "\u0275\u0275deferPrefetchOnIdle",
        moduleName: CORE
      };
      static deferPrefetchOnImmediate = {
        name: "\u0275\u0275deferPrefetchOnImmediate",
        moduleName: CORE
      };
      static deferPrefetchOnTimer = {
        name: "\u0275\u0275deferPrefetchOnTimer",
        moduleName: CORE
      };
      static deferPrefetchOnHover = {
        name: "\u0275\u0275deferPrefetchOnHover",
        moduleName: CORE
      };
      static deferPrefetchOnInteraction = {
        name: "\u0275\u0275deferPrefetchOnInteraction",
        moduleName: CORE
      };
      static deferPrefetchOnViewport = {
        name: "\u0275\u0275deferPrefetchOnViewport",
        moduleName: CORE
      };
      static deferHydrateWhen = { name: "\u0275\u0275deferHydrateWhen", moduleName: CORE };
      static deferHydrateNever = { name: "\u0275\u0275deferHydrateNever", moduleName: CORE };
      static deferHydrateOnIdle = {
        name: "\u0275\u0275deferHydrateOnIdle",
        moduleName: CORE
      };
      static deferHydrateOnImmediate = {
        name: "\u0275\u0275deferHydrateOnImmediate",
        moduleName: CORE
      };
      static deferHydrateOnTimer = {
        name: "\u0275\u0275deferHydrateOnTimer",
        moduleName: CORE
      };
      static deferHydrateOnHover = {
        name: "\u0275\u0275deferHydrateOnHover",
        moduleName: CORE
      };
      static deferHydrateOnInteraction = {
        name: "\u0275\u0275deferHydrateOnInteraction",
        moduleName: CORE
      };
      static deferHydrateOnViewport = {
        name: "\u0275\u0275deferHydrateOnViewport",
        moduleName: CORE
      };
      static deferEnableTimerScheduling = {
        name: "\u0275\u0275deferEnableTimerScheduling",
        moduleName: CORE
      };
      static conditionalCreate = { name: "\u0275\u0275conditionalCreate", moduleName: CORE };
      static conditionalBranchCreate = {
        name: "\u0275\u0275conditionalBranchCreate",
        moduleName: CORE
      };
      static conditional = { name: "\u0275\u0275conditional", moduleName: CORE };
      static repeater = { name: "\u0275\u0275repeater", moduleName: CORE };
      static repeaterCreate = { name: "\u0275\u0275repeaterCreate", moduleName: CORE };
      static repeaterTrackByIndex = {
        name: "\u0275\u0275repeaterTrackByIndex",
        moduleName: CORE
      };
      static repeaterTrackByIdentity = {
        name: "\u0275\u0275repeaterTrackByIdentity",
        moduleName: CORE
      };
      static componentInstance = { name: "\u0275\u0275componentInstance", moduleName: CORE };
      static text = { name: "\u0275\u0275text", moduleName: CORE };
      static enableBindings = { name: "\u0275\u0275enableBindings", moduleName: CORE };
      static disableBindings = { name: "\u0275\u0275disableBindings", moduleName: CORE };
      static getCurrentView = { name: "\u0275\u0275getCurrentView", moduleName: CORE };
      static textInterpolate = { name: "\u0275\u0275textInterpolate", moduleName: CORE };
      static textInterpolate1 = { name: "\u0275\u0275textInterpolate1", moduleName: CORE };
      static textInterpolate2 = { name: "\u0275\u0275textInterpolate2", moduleName: CORE };
      static textInterpolate3 = { name: "\u0275\u0275textInterpolate3", moduleName: CORE };
      static textInterpolate4 = { name: "\u0275\u0275textInterpolate4", moduleName: CORE };
      static textInterpolate5 = { name: "\u0275\u0275textInterpolate5", moduleName: CORE };
      static textInterpolate6 = { name: "\u0275\u0275textInterpolate6", moduleName: CORE };
      static textInterpolate7 = { name: "\u0275\u0275textInterpolate7", moduleName: CORE };
      static textInterpolate8 = { name: "\u0275\u0275textInterpolate8", moduleName: CORE };
      static textInterpolateV = { name: "\u0275\u0275textInterpolateV", moduleName: CORE };
      static restoreView = { name: "\u0275\u0275restoreView", moduleName: CORE };
      static pureFunction0 = { name: "\u0275\u0275pureFunction0", moduleName: CORE };
      static pureFunction1 = { name: "\u0275\u0275pureFunction1", moduleName: CORE };
      static pureFunction2 = { name: "\u0275\u0275pureFunction2", moduleName: CORE };
      static pureFunction3 = { name: "\u0275\u0275pureFunction3", moduleName: CORE };
      static pureFunction4 = { name: "\u0275\u0275pureFunction4", moduleName: CORE };
      static pureFunction5 = { name: "\u0275\u0275pureFunction5", moduleName: CORE };
      static pureFunction6 = { name: "\u0275\u0275pureFunction6", moduleName: CORE };
      static pureFunction7 = { name: "\u0275\u0275pureFunction7", moduleName: CORE };
      static pureFunction8 = { name: "\u0275\u0275pureFunction8", moduleName: CORE };
      static pureFunctionV = { name: "\u0275\u0275pureFunctionV", moduleName: CORE };
      static pipeBind1 = { name: "\u0275\u0275pipeBind1", moduleName: CORE };
      static pipeBind2 = { name: "\u0275\u0275pipeBind2", moduleName: CORE };
      static pipeBind3 = { name: "\u0275\u0275pipeBind3", moduleName: CORE };
      static pipeBind4 = { name: "\u0275\u0275pipeBind4", moduleName: CORE };
      static pipeBindV = { name: "\u0275\u0275pipeBindV", moduleName: CORE };
      static domProperty = { name: "\u0275\u0275domProperty", moduleName: CORE };
      static property = { name: "\u0275\u0275property", moduleName: CORE };
      static i18n = { name: "\u0275\u0275i18n", moduleName: CORE };
      static i18nAttributes = { name: "\u0275\u0275i18nAttributes", moduleName: CORE };
      static i18nExp = { name: "\u0275\u0275i18nExp", moduleName: CORE };
      static i18nStart = { name: "\u0275\u0275i18nStart", moduleName: CORE };
      static i18nEnd = { name: "\u0275\u0275i18nEnd", moduleName: CORE };
      static i18nApply = { name: "\u0275\u0275i18nApply", moduleName: CORE };
      static i18nPostprocess = { name: "\u0275\u0275i18nPostprocess", moduleName: CORE };
      static pipe = { name: "\u0275\u0275pipe", moduleName: CORE };
      static projection = { name: "\u0275\u0275projection", moduleName: CORE };
      static projectionDef = { name: "\u0275\u0275projectionDef", moduleName: CORE };
      static reference = { name: "\u0275\u0275reference", moduleName: CORE };
      static inject = { name: "\u0275\u0275inject", moduleName: CORE };
      static injectAttribute = { name: "\u0275\u0275injectAttribute", moduleName: CORE };
      static directiveInject = { name: "\u0275\u0275directiveInject", moduleName: CORE };
      static invalidFactory = { name: "\u0275\u0275invalidFactory", moduleName: CORE };
      static invalidFactoryDep = { name: "\u0275\u0275invalidFactoryDep", moduleName: CORE };
      static templateRefExtractor = {
        name: "\u0275\u0275templateRefExtractor",
        moduleName: CORE
      };
      static forwardRef = { name: "forwardRef", moduleName: CORE };
      static resolveForwardRef = { name: "resolveForwardRef", moduleName: CORE };
      static replaceMetadata = { name: "\u0275\u0275replaceMetadata", moduleName: CORE };
      static getReplaceMetadataURL = {
        name: "\u0275\u0275getReplaceMetadataURL",
        moduleName: CORE
      };
      static \u0275\u0275defineInjectable = { name: "\u0275\u0275defineInjectable", moduleName: CORE };
      static declareInjectable = { name: "\u0275\u0275ngDeclareInjectable", moduleName: CORE };
      static InjectableDeclaration = {
        name: "\u0275\u0275InjectableDeclaration",
        moduleName: CORE
      };
      static resolveWindow = { name: "\u0275\u0275resolveWindow", moduleName: CORE };
      static resolveDocument = { name: "\u0275\u0275resolveDocument", moduleName: CORE };
      static resolveBody = { name: "\u0275\u0275resolveBody", moduleName: CORE };
      static getComponentDepsFactory = {
        name: "\u0275\u0275getComponentDepsFactory",
        moduleName: CORE
      };
      static defineComponent = { name: "\u0275\u0275defineComponent", moduleName: CORE };
      static declareComponent = { name: "\u0275\u0275ngDeclareComponent", moduleName: CORE };
      static setComponentScope = { name: "\u0275\u0275setComponentScope", moduleName: CORE };
      static ChangeDetectionStrategy = {
        name: "ChangeDetectionStrategy",
        moduleName: CORE
      };
      static ViewEncapsulation = {
        name: "ViewEncapsulation",
        moduleName: CORE
      };
      static ComponentDeclaration = {
        name: "\u0275\u0275ComponentDeclaration",
        moduleName: CORE
      };
      static FactoryDeclaration = {
        name: "\u0275\u0275FactoryDeclaration",
        moduleName: CORE
      };
      static declareFactory = { name: "\u0275\u0275ngDeclareFactory", moduleName: CORE };
      static FactoryTarget = { name: "\u0275\u0275FactoryTarget", moduleName: CORE };
      static defineDirective = { name: "\u0275\u0275defineDirective", moduleName: CORE };
      static declareDirective = { name: "\u0275\u0275ngDeclareDirective", moduleName: CORE };
      static DirectiveDeclaration = {
        name: "\u0275\u0275DirectiveDeclaration",
        moduleName: CORE
      };
      static InjectorDef = { name: "\u0275\u0275InjectorDef", moduleName: CORE };
      static InjectorDeclaration = {
        name: "\u0275\u0275InjectorDeclaration",
        moduleName: CORE
      };
      static defineInjector = { name: "\u0275\u0275defineInjector", moduleName: CORE };
      static declareInjector = { name: "\u0275\u0275ngDeclareInjector", moduleName: CORE };
      static NgModuleDeclaration = {
        name: "\u0275\u0275NgModuleDeclaration",
        moduleName: CORE
      };
      static ModuleWithProviders = {
        name: "ModuleWithProviders",
        moduleName: CORE
      };
      static defineNgModule = { name: "\u0275\u0275defineNgModule", moduleName: CORE };
      static declareNgModule = { name: "\u0275\u0275ngDeclareNgModule", moduleName: CORE };
      static setNgModuleScope = { name: "\u0275\u0275setNgModuleScope", moduleName: CORE };
      static registerNgModuleType = {
        name: "\u0275\u0275registerNgModuleType",
        moduleName: CORE
      };
      static PipeDeclaration = { name: "\u0275\u0275PipeDeclaration", moduleName: CORE };
      static definePipe = { name: "\u0275\u0275definePipe", moduleName: CORE };
      static declarePipe = { name: "\u0275\u0275ngDeclarePipe", moduleName: CORE };
      static declareClassMetadata = {
        name: "\u0275\u0275ngDeclareClassMetadata",
        moduleName: CORE
      };
      static declareClassMetadataAsync = {
        name: "\u0275\u0275ngDeclareClassMetadataAsync",
        moduleName: CORE
      };
      static setClassMetadata = { name: "\u0275setClassMetadata", moduleName: CORE };
      static setClassMetadataAsync = {
        name: "\u0275setClassMetadataAsync",
        moduleName: CORE
      };
      static setClassDebugInfo = { name: "\u0275setClassDebugInfo", moduleName: CORE };
      static queryRefresh = { name: "\u0275\u0275queryRefresh", moduleName: CORE };
      static viewQuery = { name: "\u0275\u0275viewQuery", moduleName: CORE };
      static loadQuery = { name: "\u0275\u0275loadQuery", moduleName: CORE };
      static contentQuery = { name: "\u0275\u0275contentQuery", moduleName: CORE };
      // Signal queries
      static viewQuerySignal = { name: "\u0275\u0275viewQuerySignal", moduleName: CORE };
      static contentQuerySignal = { name: "\u0275\u0275contentQuerySignal", moduleName: CORE };
      static queryAdvance = { name: "\u0275\u0275queryAdvance", moduleName: CORE };
      // Two-way bindings
      static twoWayProperty = { name: "\u0275\u0275twoWayProperty", moduleName: CORE };
      static twoWayBindingSet = { name: "\u0275\u0275twoWayBindingSet", moduleName: CORE };
      static twoWayListener = { name: "\u0275\u0275twoWayListener", moduleName: CORE };
      static declareLet = { name: "\u0275\u0275declareLet", moduleName: CORE };
      static storeLet = { name: "\u0275\u0275storeLet", moduleName: CORE };
      static readContextLet = { name: "\u0275\u0275readContextLet", moduleName: CORE };
      static attachSourceLocations = {
        name: "\u0275\u0275attachSourceLocations",
        moduleName: CORE
      };
      static NgOnChangesFeature = { name: "\u0275\u0275NgOnChangesFeature", moduleName: CORE };
      static InheritDefinitionFeature = {
        name: "\u0275\u0275InheritDefinitionFeature",
        moduleName: CORE
      };
      static CopyDefinitionFeature = {
        name: "\u0275\u0275CopyDefinitionFeature",
        moduleName: CORE
      };
      static ProvidersFeature = { name: "\u0275\u0275ProvidersFeature", moduleName: CORE };
      static HostDirectivesFeature = {
        name: "\u0275\u0275HostDirectivesFeature",
        moduleName: CORE
      };
      static ExternalStylesFeature = {
        name: "\u0275\u0275ExternalStylesFeature",
        moduleName: CORE
      };
      static listener = { name: "\u0275\u0275listener", moduleName: CORE };
      static getInheritedFactory = {
        name: "\u0275\u0275getInheritedFactory",
        moduleName: CORE
      };
      // sanitization-related functions
      static sanitizeHtml = { name: "\u0275\u0275sanitizeHtml", moduleName: CORE };
      static sanitizeStyle = { name: "\u0275\u0275sanitizeStyle", moduleName: CORE };
      static sanitizeResourceUrl = {
        name: "\u0275\u0275sanitizeResourceUrl",
        moduleName: CORE
      };
      static sanitizeScript = { name: "\u0275\u0275sanitizeScript", moduleName: CORE };
      static sanitizeUrl = { name: "\u0275\u0275sanitizeUrl", moduleName: CORE };
      static sanitizeUrlOrResourceUrl = {
        name: "\u0275\u0275sanitizeUrlOrResourceUrl",
        moduleName: CORE
      };
      static trustConstantHtml = { name: "\u0275\u0275trustConstantHtml", moduleName: CORE };
      static trustConstantResourceUrl = {
        name: "\u0275\u0275trustConstantResourceUrl",
        moduleName: CORE
      };
      static validateIframeAttribute = {
        name: "\u0275\u0275validateIframeAttribute",
        moduleName: CORE
      };
      // type-checking
      static InputSignalBrandWriteType = { name: "\u0275INPUT_SIGNAL_BRAND_WRITE_TYPE", moduleName: CORE };
      static UnwrapDirectiveSignalInputs = { name: "\u0275UnwrapDirectiveSignalInputs", moduleName: CORE };
      static unwrapWritableSignal = { name: "\u0275unwrapWritableSignal", moduleName: CORE };
      static assertType = { name: "\u0275assertType", moduleName: CORE };
    };
    DASH_CASE_REGEXP = /-+([a-z0-9])/g;
    Version2 = class {
      full;
      major;
      minor;
      patch;
      constructor(full) {
        this.full = full;
        const splits = full.split(".");
        this.major = splits[0];
        this.minor = splits[1];
        this.patch = splits.slice(2).join(".");
      }
    };
    _global2 = globalThis;
    V1_TO_18 = /^([1-9]|1[0-8])\./;
    VERSION$1 = 3;
    JS_B64_PREFIX = "# sourceMappingURL=data:application/json;base64,";
    SourceMapGenerator = class {
      file;
      sourcesContent = /* @__PURE__ */ new Map();
      lines = [];
      lastCol0 = 0;
      hasMappings = false;
      constructor(file = null) {
        this.file = file;
      }
      // The content is `null` when the content is expected to be loaded using the URL
      addSource(url, content = null) {
        if (!this.sourcesContent.has(url)) {
          this.sourcesContent.set(url, content);
        }
        return this;
      }
      addLine() {
        this.lines.push([]);
        this.lastCol0 = 0;
        return this;
      }
      addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
        if (!this.currentLine) {
          throw new Error(`A line must be added before mappings can be added`);
        }
        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
          throw new Error(`Unknown source file "${sourceUrl}"`);
        }
        if (col0 == null) {
          throw new Error(`The column in the generated code must be provided`);
        }
        if (col0 < this.lastCol0) {
          throw new Error(`Mapping should be added in output order`);
        }
        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
          throw new Error(`The source location must be provided when a source url is provided`);
        }
        this.hasMappings = true;
        this.lastCol0 = col0;
        this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });
        return this;
      }
      /**
       * @internal strip this from published d.ts files due to
       * https://github.com/microsoft/TypeScript/issues/36216
       */
      get currentLine() {
        return this.lines.slice(-1)[0];
      }
      toJSON() {
        if (!this.hasMappings) {
          return null;
        }
        const sourcesIndex = /* @__PURE__ */ new Map();
        const sources = [];
        const sourcesContent = [];
        Array.from(this.sourcesContent.keys()).forEach((url, i) => {
          sourcesIndex.set(url, i);
          sources.push(url);
          sourcesContent.push(this.sourcesContent.get(url) || null);
        });
        let mappings = "";
        let lastCol0 = 0;
        let lastSourceIndex = 0;
        let lastSourceLine0 = 0;
        let lastSourceCol0 = 0;
        this.lines.forEach((segments) => {
          lastCol0 = 0;
          mappings += segments.map((segment) => {
            let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
            lastCol0 = segment.col0;
            if (segment.sourceUrl != null) {
              segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
              lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
              segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
              lastSourceLine0 = segment.sourceLine0;
              segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
              lastSourceCol0 = segment.sourceCol0;
            }
            return segAsStr;
          }).join(",");
          mappings += ";";
        });
        mappings = mappings.slice(0, -1);
        return {
          "file": this.file || "",
          "version": VERSION$1,
          "sourceRoot": "",
          "sources": sources,
          "sourcesContent": sourcesContent,
          "mappings": mappings
        };
      }
      toJsComment() {
        return this.hasMappings ? "//" + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : "";
      }
    };
    B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
    _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
    _INDENT_WITH = "  ";
    _EmittedLine = class {
      indent;
      partsLength = 0;
      parts = [];
      srcSpans = [];
      constructor(indent) {
        this.indent = indent;
      }
    };
    BINARY_OPERATORS$1 = /* @__PURE__ */ new Map([
      [BinaryOperator.And, "&&"],
      [BinaryOperator.Bigger, ">"],
      [BinaryOperator.BiggerEquals, ">="],
      [BinaryOperator.BitwiseOr, "|"],
      [BinaryOperator.BitwiseAnd, "&"],
      [BinaryOperator.Divide, "/"],
      [BinaryOperator.Assign, "="],
      [BinaryOperator.Equals, "=="],
      [BinaryOperator.Identical, "==="],
      [BinaryOperator.Lower, "<"],
      [BinaryOperator.LowerEquals, "<="],
      [BinaryOperator.Minus, "-"],
      [BinaryOperator.Modulo, "%"],
      [BinaryOperator.Exponentiation, "**"],
      [BinaryOperator.Multiply, "*"],
      [BinaryOperator.NotEquals, "!="],
      [BinaryOperator.NotIdentical, "!=="],
      [BinaryOperator.NullishCoalesce, "??"],
      [BinaryOperator.Or, "||"],
      [BinaryOperator.Plus, "+"],
      [BinaryOperator.In, "in"],
      [BinaryOperator.AdditionAssignment, "+="],
      [BinaryOperator.SubtractionAssignment, "-="],
      [BinaryOperator.MultiplicationAssignment, "*="],
      [BinaryOperator.DivisionAssignment, "/="],
      [BinaryOperator.RemainderAssignment, "%="],
      [BinaryOperator.ExponentiationAssignment, "**="],
      [BinaryOperator.AndAssignment, "&&="],
      [BinaryOperator.OrAssignment, "||="],
      [BinaryOperator.NullishCoalesceAssignment, "??="]
    ]);
    EmitterVisitorContext = class _EmitterVisitorContext {
      _indent;
      static createRoot() {
        return new _EmitterVisitorContext(0);
      }
      _lines;
      constructor(_indent) {
        this._indent = _indent;
        this._lines = [new _EmittedLine(_indent)];
      }
      /**
       * @internal strip this from published d.ts files due to
       * https://github.com/microsoft/TypeScript/issues/36216
       */
      get _currentLine() {
        return this._lines[this._lines.length - 1];
      }
      println(from2, lastPart = "") {
        this.print(from2 || null, lastPart, true);
      }
      lineIsEmpty() {
        return this._currentLine.parts.length === 0;
      }
      lineLength() {
        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
      }
      print(from2, part, newLine = false) {
        if (part.length > 0) {
          this._currentLine.parts.push(part);
          this._currentLine.partsLength += part.length;
          this._currentLine.srcSpans.push(from2 && from2.sourceSpan || null);
        }
        if (newLine) {
          this._lines.push(new _EmittedLine(this._indent));
        }
      }
      removeEmptyLastLine() {
        if (this.lineIsEmpty()) {
          this._lines.pop();
        }
      }
      incIndent() {
        this._indent++;
        if (this.lineIsEmpty()) {
          this._currentLine.indent = this._indent;
        }
      }
      decIndent() {
        this._indent--;
        if (this.lineIsEmpty()) {
          this._currentLine.indent = this._indent;
        }
      }
      toSource() {
        return this.sourceLines.map((l) => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join("") : "").join("\n");
      }
      toSourceMapGenerator(genFilePath, startsAtLine = 0) {
        const map2 = new SourceMapGenerator(genFilePath);
        let firstOffsetMapped = false;
        const mapFirstOffsetIfNeeded = () => {
          if (!firstOffsetMapped) {
            map2.addSource(genFilePath, " ").addMapping(0, genFilePath, 0, 0);
            firstOffsetMapped = true;
          }
        };
        for (let i = 0; i < startsAtLine; i++) {
          map2.addLine();
          mapFirstOffsetIfNeeded();
        }
        this.sourceLines.forEach((line, lineIdx) => {
          map2.addLine();
          const spans = line.srcSpans;
          const parts = line.parts;
          let col0 = line.indent * _INDENT_WITH.length;
          let spanIdx = 0;
          while (spanIdx < spans.length && !spans[spanIdx]) {
            col0 += parts[spanIdx].length;
            spanIdx++;
          }
          if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
            firstOffsetMapped = true;
          } else {
            mapFirstOffsetIfNeeded();
          }
          while (spanIdx < spans.length) {
            const span = spans[spanIdx];
            const source = span.start.file;
            const sourceLine = span.start.line;
            const sourceCol = span.start.col;
            map2.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
            col0 += parts[spanIdx].length;
            spanIdx++;
            while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
              col0 += parts[spanIdx].length;
              spanIdx++;
            }
          }
        });
        return map2;
      }
      spanOf(line, column) {
        const emittedLine = this._lines[line];
        if (emittedLine) {
          let columnsLeft = column - _createIndent(emittedLine.indent).length;
          for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
            const part = emittedLine.parts[partIndex];
            if (part.length > columnsLeft) {
              return emittedLine.srcSpans[partIndex];
            }
            columnsLeft -= part.length;
          }
        }
        return null;
      }
      /**
       * @internal strip this from published d.ts files due to
       * https://github.com/microsoft/TypeScript/issues/36216
       */
      get sourceLines() {
        if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
          return this._lines.slice(0, -1);
        }
        return this._lines;
      }
    };
    AbstractEmitterVisitor = class {
      _escapeDollarInStrings;
      lastIfCondition = null;
      constructor(_escapeDollarInStrings) {
        this._escapeDollarInStrings = _escapeDollarInStrings;
      }
      printLeadingComments(stmt, ctx) {
        if (stmt.leadingComments === void 0) {
          return;
        }
        for (const comment of stmt.leadingComments) {
          if (comment instanceof JSDocComment) {
            ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);
          } else {
            if (comment.multiline) {
              ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);
            } else {
              comment.text.split("\n").forEach((line) => {
                ctx.println(stmt, `// ${line}`);
              });
            }
          }
        }
      }
      visitExpressionStmt(stmt, ctx) {
        this.printLeadingComments(stmt, ctx);
        stmt.expr.visitExpression(this, ctx);
        ctx.println(stmt, ";");
        return null;
      }
      visitReturnStmt(stmt, ctx) {
        this.printLeadingComments(stmt, ctx);
        ctx.print(stmt, `return `);
        stmt.value.visitExpression(this, ctx);
        ctx.println(stmt, ";");
        return null;
      }
      visitIfStmt(stmt, ctx) {
        this.printLeadingComments(stmt, ctx);
        ctx.print(stmt, `if (`);
        this.lastIfCondition = stmt.condition;
        stmt.condition.visitExpression(this, ctx);
        this.lastIfCondition = null;
        ctx.print(stmt, `) {`);
        const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
        if (stmt.trueCase.length <= 1 && !hasElseCase) {
          ctx.print(stmt, ` `);
          this.visitAllStatements(stmt.trueCase, ctx);
          ctx.removeEmptyLastLine();
          ctx.print(stmt, ` `);
        } else {
          ctx.println();
          ctx.incIndent();
          this.visitAllStatements(stmt.trueCase, ctx);
          ctx.decIndent();
          if (hasElseCase) {
            ctx.println(stmt, `} else {`);
            ctx.incIndent();
            this.visitAllStatements(stmt.falseCase, ctx);
            ctx.decIndent();
          }
        }
        ctx.println(stmt, `}`);
        return null;
      }
      visitInvokeFunctionExpr(expr, ctx) {
        const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;
        if (shouldParenthesize) {
          ctx.print(expr.fn, "(");
        }
        expr.fn.visitExpression(this, ctx);
        if (shouldParenthesize) {
          ctx.print(expr.fn, ")");
        }
        ctx.print(expr, `(`);
        this.visitAllExpressions(expr.args, ctx, ",");
        ctx.print(expr, `)`);
        return null;
      }
      visitTaggedTemplateLiteralExpr(expr, ctx) {
        expr.tag.visitExpression(this, ctx);
        expr.template.visitExpression(this, ctx);
        return null;
      }
      visitTemplateLiteralExpr(expr, ctx) {
        ctx.print(expr, "`");
        for (let i = 0; i < expr.elements.length; i++) {
          expr.elements[i].visitExpression(this, ctx);
          const expression = i < expr.expressions.length ? expr.expressions[i] : null;
          if (expression !== null) {
            ctx.print(expression, "${");
            expression.visitExpression(this, ctx);
            ctx.print(expression, "}");
          }
        }
        ctx.print(expr, "`");
      }
      visitTemplateLiteralElementExpr(expr, ctx) {
        ctx.print(expr, expr.rawText);
      }
      visitWrappedNodeExpr(ast, ctx) {
        throw new Error("Abstract emitter cannot visit WrappedNodeExpr.");
      }
      visitTypeofExpr(expr, ctx) {
        ctx.print(expr, "typeof ");
        expr.expr.visitExpression(this, ctx);
      }
      visitVoidExpr(expr, ctx) {
        ctx.print(expr, "void ");
        expr.expr.visitExpression(this, ctx);
      }
      visitReadVarExpr(ast, ctx) {
        ctx.print(ast, ast.name);
        return null;
      }
      visitInstantiateExpr(ast, ctx) {
        ctx.print(ast, `new `);
        ast.classExpr.visitExpression(this, ctx);
        ctx.print(ast, `(`);
        this.visitAllExpressions(ast.args, ctx, ",");
        ctx.print(ast, `)`);
        return null;
      }
      visitLiteralExpr(ast, ctx) {
        const value = ast.value;
        if (typeof value === "string") {
          ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
        } else {
          ctx.print(ast, `${value}`);
        }
        return null;
      }
      visitLocalizedString(ast, ctx) {
        const head = ast.serializeI18nHead();
        ctx.print(ast, "$localize `" + head.raw);
        for (let i = 1; i < ast.messageParts.length; i++) {
          ctx.print(ast, "${");
          ast.expressions[i - 1].visitExpression(this, ctx);
          ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);
        }
        ctx.print(ast, "`");
        return null;
      }
      visitConditionalExpr(ast, ctx) {
        ctx.print(ast, `(`);
        ast.condition.visitExpression(this, ctx);
        ctx.print(ast, "? ");
        ast.trueCase.visitExpression(this, ctx);
        ctx.print(ast, ": ");
        ast.falseCase.visitExpression(this, ctx);
        ctx.print(ast, `)`);
        return null;
      }
      visitDynamicImportExpr(ast, ctx) {
        ctx.print(ast, `import(${ast.url})`);
      }
      visitNotExpr(ast, ctx) {
        ctx.print(ast, "!");
        ast.condition.visitExpression(this, ctx);
        return null;
      }
      visitUnaryOperatorExpr(ast, ctx) {
        let opStr;
        switch (ast.operator) {
          case UnaryOperator.Plus:
            opStr = "+";
            break;
          case UnaryOperator.Minus:
            opStr = "-";
            break;
          default:
            throw new Error(`Unknown operator ${ast.operator}`);
        }
        const parens = ast !== this.lastIfCondition;
        if (parens)
          ctx.print(ast, `(`);
        ctx.print(ast, opStr);
        ast.expr.visitExpression(this, ctx);
        if (parens)
          ctx.print(ast, `)`);
        return null;
      }
      visitBinaryOperatorExpr(ast, ctx) {
        const operator = BINARY_OPERATORS$1.get(ast.operator);
        if (!operator) {
          throw new Error(`Unknown operator ${ast.operator}`);
        }
        const parens = ast !== this.lastIfCondition;
        if (parens)
          ctx.print(ast, `(`);
        ast.lhs.visitExpression(this, ctx);
        ctx.print(ast, ` ${operator} `);
        ast.rhs.visitExpression(this, ctx);
        if (parens)
          ctx.print(ast, `)`);
        return null;
      }
      visitReadPropExpr(ast, ctx) {
        ast.receiver.visitExpression(this, ctx);
        ctx.print(ast, `.`);
        ctx.print(ast, ast.name);
        return null;
      }
      visitReadKeyExpr(ast, ctx) {
        ast.receiver.visitExpression(this, ctx);
        ctx.print(ast, `[`);
        ast.index.visitExpression(this, ctx);
        ctx.print(ast, `]`);
        return null;
      }
      visitLiteralArrayExpr(ast, ctx) {
        ctx.print(ast, `[`);
        this.visitAllExpressions(ast.entries, ctx, ",");
        ctx.print(ast, `]`);
        return null;
      }
      visitLiteralMapExpr(ast, ctx) {
        ctx.print(ast, `{`);
        this.visitAllObjects((entry) => {
          ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);
          entry.value.visitExpression(this, ctx);
        }, ast.entries, ctx, ",");
        ctx.print(ast, `}`);
        return null;
      }
      visitCommaExpr(ast, ctx) {
        ctx.print(ast, "(");
        this.visitAllExpressions(ast.parts, ctx, ",");
        ctx.print(ast, ")");
        return null;
      }
      visitParenthesizedExpr(ast, ctx) {
        ast.expr.visitExpression(this, ctx);
      }
      visitAllExpressions(expressions, ctx, separator) {
        this.visitAllObjects((expr) => expr.visitExpression(this, ctx), expressions, ctx, separator);
      }
      visitAllObjects(handler, expressions, ctx, separator) {
        let incrementedIndent = false;
        for (let i = 0; i < expressions.length; i++) {
          if (i > 0) {
            if (ctx.lineLength() > 80) {
              ctx.print(null, separator, true);
              if (!incrementedIndent) {
                ctx.incIndent();
                ctx.incIndent();
                incrementedIndent = true;
              }
            } else {
              ctx.print(null, separator, false);
            }
          }
          handler(expressions[i]);
        }
        if (incrementedIndent) {
          ctx.decIndent();
          ctx.decIndent();
        }
      }
      visitAllStatements(statements, ctx) {
        statements.forEach((stmt) => stmt.visitStatement(this, ctx));
      }
    };
    (function(R3FactoryDelegateType2) {
      R3FactoryDelegateType2[R3FactoryDelegateType2["Class"] = 0] = "Class";
      R3FactoryDelegateType2[R3FactoryDelegateType2["Function"] = 1] = "Function";
    })(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
    ParseSpan = class {
      start;
      end;
      constructor(start, end) {
        this.start = start;
        this.end = end;
      }
      toAbsolute(absoluteOffset) {
        return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
      }
    };
    AST = class {
      span;
      sourceSpan;
      constructor(span, sourceSpan) {
        this.span = span;
        this.sourceSpan = sourceSpan;
      }
      toString() {
        return "AST";
      }
    };
    ASTWithName = class extends AST {
      nameSpan;
      constructor(span, sourceSpan, nameSpan) {
        super(span, sourceSpan);
        this.nameSpan = nameSpan;
      }
    };
    EmptyExpr$1 = class EmptyExpr extends AST {
      visit(visitor, context2 = null) {
      }
    };
    ImplicitReceiver = class extends AST {
      visit(visitor, context2 = null) {
        return visitor.visitImplicitReceiver(this, context2);
      }
    };
    ThisReceiver = class extends ImplicitReceiver {
      visit(visitor, context2 = null) {
        return visitor.visitThisReceiver?.(this, context2);
      }
    };
    Chain = class extends AST {
      expressions;
      constructor(span, sourceSpan, expressions) {
        super(span, sourceSpan);
        this.expressions = expressions;
      }
      visit(visitor, context2 = null) {
        return visitor.visitChain(this, context2);
      }
    };
    Conditional = class extends AST {
      condition;
      trueExp;
      falseExp;
      constructor(span, sourceSpan, condition, trueExp, falseExp) {
        super(span, sourceSpan);
        this.condition = condition;
        this.trueExp = trueExp;
        this.falseExp = falseExp;
      }
      visit(visitor, context2 = null) {
        return visitor.visitConditional(this, context2);
      }
    };
    PropertyRead = class extends ASTWithName {
      receiver;
      name;
      constructor(span, sourceSpan, nameSpan, receiver, name) {
        super(span, sourceSpan, nameSpan);
        this.receiver = receiver;
        this.name = name;
      }
      visit(visitor, context2 = null) {
        return visitor.visitPropertyRead(this, context2);
      }
    };
    SafePropertyRead = class extends ASTWithName {
      receiver;
      name;
      constructor(span, sourceSpan, nameSpan, receiver, name) {
        super(span, sourceSpan, nameSpan);
        this.receiver = receiver;
        this.name = name;
      }
      visit(visitor, context2 = null) {
        return visitor.visitSafePropertyRead(this, context2);
      }
    };
    KeyedRead = class extends AST {
      receiver;
      key;
      constructor(span, sourceSpan, receiver, key) {
        super(span, sourceSpan);
        this.receiver = receiver;
        this.key = key;
      }
      visit(visitor, context2 = null) {
        return visitor.visitKeyedRead(this, context2);
      }
    };
    SafeKeyedRead = class extends AST {
      receiver;
      key;
      constructor(span, sourceSpan, receiver, key) {
        super(span, sourceSpan);
        this.receiver = receiver;
        this.key = key;
      }
      visit(visitor, context2 = null) {
        return visitor.visitSafeKeyedRead(this, context2);
      }
    };
    (function(BindingPipeType2) {
      BindingPipeType2[BindingPipeType2["ReferencedByName"] = 0] = "ReferencedByName";
      BindingPipeType2[BindingPipeType2["ReferencedDirectly"] = 1] = "ReferencedDirectly";
    })(BindingPipeType || (BindingPipeType = {}));
    BindingPipe = class extends ASTWithName {
      exp;
      name;
      args;
      type;
      constructor(span, sourceSpan, exp, name, args, type, nameSpan) {
        super(span, sourceSpan, nameSpan);
        this.exp = exp;
        this.name = name;
        this.args = args;
        this.type = type;
      }
      visit(visitor, context2 = null) {
        return visitor.visitPipe(this, context2);
      }
    };
    LiteralPrimitive = class extends AST {
      value;
      constructor(span, sourceSpan, value) {
        super(span, sourceSpan);
        this.value = value;
      }
      visit(visitor, context2 = null) {
        return visitor.visitLiteralPrimitive(this, context2);
      }
    };
    LiteralArray = class extends AST {
      expressions;
      constructor(span, sourceSpan, expressions) {
        super(span, sourceSpan);
        this.expressions = expressions;
      }
      visit(visitor, context2 = null) {
        return visitor.visitLiteralArray(this, context2);
      }
    };
    LiteralMap = class extends AST {
      keys;
      values;
      constructor(span, sourceSpan, keys, values) {
        super(span, sourceSpan);
        this.keys = keys;
        this.values = values;
      }
      visit(visitor, context2 = null) {
        return visitor.visitLiteralMap(this, context2);
      }
    };
    Interpolation$1 = class Interpolation extends AST {
      strings;
      expressions;
      constructor(span, sourceSpan, strings, expressions) {
        super(span, sourceSpan);
        this.strings = strings;
        this.expressions = expressions;
      }
      visit(visitor, context2 = null) {
        return visitor.visitInterpolation(this, context2);
      }
    };
    Binary = class extends AST {
      operation;
      left;
      right;
      constructor(span, sourceSpan, operation, left, right) {
        super(span, sourceSpan);
        this.operation = operation;
        this.left = left;
        this.right = right;
      }
      visit(visitor, context2 = null) {
        return visitor.visitBinary(this, context2);
      }
      static isAssignmentOperation(op) {
        return op === "=" || op === "+=" || op === "-=" || op === "*=" || op === "/=" || op === "%=" || op === "**=" || op === "&&=" || op === "||=" || op === "??=";
      }
    };
    Unary = class _Unary extends Binary {
      operator;
      expr;
      // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not
      // depend on these fields when operating on `Unary`.
      left = null;
      right = null;
      operation = null;
      /**
       * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
       */
      static createMinus(span, sourceSpan, expr) {
        return new _Unary(span, sourceSpan, "-", expr, "-", new LiteralPrimitive(span, sourceSpan, 0), expr);
      }
      /**
       * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
       */
      static createPlus(span, sourceSpan, expr) {
        return new _Unary(span, sourceSpan, "+", expr, "-", expr, new LiteralPrimitive(span, sourceSpan, 0));
      }
      /**
       * During the deprecation period this constructor is private, to avoid consumers from creating
       * a `Unary` with the fallback properties for `Binary`.
       */
      constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
        super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);
        this.operator = operator;
        this.expr = expr;
      }
      visit(visitor, context2 = null) {
        if (visitor.visitUnary !== void 0) {
          return visitor.visitUnary(this, context2);
        }
        return visitor.visitBinary(this, context2);
      }
    };
    PrefixNot = class extends AST {
      expression;
      constructor(span, sourceSpan, expression) {
        super(span, sourceSpan);
        this.expression = expression;
      }
      visit(visitor, context2 = null) {
        return visitor.visitPrefixNot(this, context2);
      }
    };
    TypeofExpression = class extends AST {
      expression;
      constructor(span, sourceSpan, expression) {
        super(span, sourceSpan);
        this.expression = expression;
      }
      visit(visitor, context2 = null) {
        return visitor.visitTypeofExpression(this, context2);
      }
    };
    VoidExpression = class extends AST {
      expression;
      constructor(span, sourceSpan, expression) {
        super(span, sourceSpan);
        this.expression = expression;
      }
      visit(visitor, context2 = null) {
        return visitor.visitVoidExpression(this, context2);
      }
    };
    NonNullAssert = class extends AST {
      expression;
      constructor(span, sourceSpan, expression) {
        super(span, sourceSpan);
        this.expression = expression;
      }
      visit(visitor, context2 = null) {
        return visitor.visitNonNullAssert(this, context2);
      }
    };
    Call = class extends AST {
      receiver;
      args;
      argumentSpan;
      constructor(span, sourceSpan, receiver, args, argumentSpan) {
        super(span, sourceSpan);
        this.receiver = receiver;
        this.args = args;
        this.argumentSpan = argumentSpan;
      }
      visit(visitor, context2 = null) {
        return visitor.visitCall(this, context2);
      }
    };
    SafeCall = class extends AST {
      receiver;
      args;
      argumentSpan;
      constructor(span, sourceSpan, receiver, args, argumentSpan) {
        super(span, sourceSpan);
        this.receiver = receiver;
        this.args = args;
        this.argumentSpan = argumentSpan;
      }
      visit(visitor, context2 = null) {
        return visitor.visitSafeCall(this, context2);
      }
    };
    TaggedTemplateLiteral = class extends AST {
      tag;
      template;
      constructor(span, sourceSpan, tag, template2) {
        super(span, sourceSpan);
        this.tag = tag;
        this.template = template2;
      }
      visit(visitor, context2) {
        return visitor.visitTaggedTemplateLiteral(this, context2);
      }
    };
    TemplateLiteral = class extends AST {
      elements;
      expressions;
      constructor(span, sourceSpan, elements, expressions) {
        super(span, sourceSpan);
        this.elements = elements;
        this.expressions = expressions;
      }
      visit(visitor, context2) {
        return visitor.visitTemplateLiteral(this, context2);
      }
    };
    TemplateLiteralElement = class extends AST {
      text;
      constructor(span, sourceSpan, text2) {
        super(span, sourceSpan);
        this.text = text2;
      }
      visit(visitor, context2) {
        return visitor.visitTemplateLiteralElement(this, context2);
      }
    };
    ParenthesizedExpression = class extends AST {
      expression;
      constructor(span, sourceSpan, expression) {
        super(span, sourceSpan);
        this.expression = expression;
      }
      visit(visitor, context2) {
        return visitor.visitParenthesizedExpression(this, context2);
      }
    };
    AbsoluteSourceSpan = class {
      start;
      end;
      constructor(start, end) {
        this.start = start;
        this.end = end;
      }
    };
    ASTWithSource = class extends AST {
      ast;
      source;
      location;
      errors;
      constructor(ast, source, location2, absoluteOffset, errors) {
        super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
        this.ast = ast;
        this.source = source;
        this.location = location2;
        this.errors = errors;
      }
      visit(visitor, context2 = null) {
        if (visitor.visitASTWithSource) {
          return visitor.visitASTWithSource(this, context2);
        }
        return this.ast.visit(visitor, context2);
      }
      toString() {
        return `${this.source} in ${this.location}`;
      }
    };
    VariableBinding = class {
      sourceSpan;
      key;
      value;
      /**
       * @param sourceSpan entire span of the binding.
       * @param key name of the LHS along with its span.
       * @param value optional value for the RHS along with its span.
       */
      constructor(sourceSpan, key, value) {
        this.sourceSpan = sourceSpan;
        this.key = key;
        this.value = value;
      }
    };
    ExpressionBinding = class {
      sourceSpan;
      key;
      value;
      /**
       * @param sourceSpan entire span of the binding.
       * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
       * span. Note that the length of the span may not be the same as
       * `key.source.length`. For example,
       * 1. key.source = ngFor, key.span is for "ngFor"
       * 2. key.source = ngForOf, key.span is for "of"
       * 3. key.source = ngForTrackBy, key.span is for "trackBy"
       * @param value optional expression for the RHS.
       */
      constructor(sourceSpan, key, value) {
        this.sourceSpan = sourceSpan;
        this.key = key;
        this.value = value;
      }
    };
    RecursiveAstVisitor = class {
      visit(ast, context2) {
        ast.visit(this, context2);
      }
      visitUnary(ast, context2) {
        this.visit(ast.expr, context2);
      }
      visitBinary(ast, context2) {
        this.visit(ast.left, context2);
        this.visit(ast.right, context2);
      }
      visitChain(ast, context2) {
        this.visitAll(ast.expressions, context2);
      }
      visitConditional(ast, context2) {
        this.visit(ast.condition, context2);
        this.visit(ast.trueExp, context2);
        this.visit(ast.falseExp, context2);
      }
      visitPipe(ast, context2) {
        this.visit(ast.exp, context2);
        this.visitAll(ast.args, context2);
      }
      visitImplicitReceiver(ast, context2) {
      }
      visitThisReceiver(ast, context2) {
      }
      visitInterpolation(ast, context2) {
        this.visitAll(ast.expressions, context2);
      }
      visitKeyedRead(ast, context2) {
        this.visit(ast.receiver, context2);
        this.visit(ast.key, context2);
      }
      visitLiteralArray(ast, context2) {
        this.visitAll(ast.expressions, context2);
      }
      visitLiteralMap(ast, context2) {
        this.visitAll(ast.values, context2);
      }
      visitLiteralPrimitive(ast, context2) {
      }
      visitPrefixNot(ast, context2) {
        this.visit(ast.expression, context2);
      }
      visitTypeofExpression(ast, context2) {
        this.visit(ast.expression, context2);
      }
      visitVoidExpression(ast, context2) {
        this.visit(ast.expression, context2);
      }
      visitNonNullAssert(ast, context2) {
        this.visit(ast.expression, context2);
      }
      visitPropertyRead(ast, context2) {
        this.visit(ast.receiver, context2);
      }
      visitSafePropertyRead(ast, context2) {
        this.visit(ast.receiver, context2);
      }
      visitSafeKeyedRead(ast, context2) {
        this.visit(ast.receiver, context2);
        this.visit(ast.key, context2);
      }
      visitCall(ast, context2) {
        this.visit(ast.receiver, context2);
        this.visitAll(ast.args, context2);
      }
      visitSafeCall(ast, context2) {
        this.visit(ast.receiver, context2);
        this.visitAll(ast.args, context2);
      }
      visitTemplateLiteral(ast, context2) {
        for (let i = 0; i < ast.elements.length; i++) {
          this.visit(ast.elements[i], context2);
          const expression = i < ast.expressions.length ? ast.expressions[i] : null;
          if (expression !== null) {
            this.visit(expression, context2);
          }
        }
      }
      visitTemplateLiteralElement(ast, context2) {
      }
      visitTaggedTemplateLiteral(ast, context2) {
        this.visit(ast.tag, context2);
        this.visit(ast.template, context2);
      }
      visitParenthesizedExpression(ast, context2) {
        this.visit(ast.expression, context2);
      }
      // This is not part of the AstVisitor interface, just a helper method
      visitAll(asts, context2) {
        for (const ast of asts) {
          this.visit(ast, context2);
        }
      }
    };
    ParsedProperty = class {
      name;
      expression;
      type;
      sourceSpan;
      keySpan;
      valueSpan;
      isLiteral;
      isLegacyAnimation;
      constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.expression = expression;
        this.type = type;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
        this.isLegacyAnimation = this.type === ParsedPropertyType.LEGACY_ANIMATION;
      }
    };
    (function(ParsedPropertyType2) {
      ParsedPropertyType2[ParsedPropertyType2["DEFAULT"] = 0] = "DEFAULT";
      ParsedPropertyType2[ParsedPropertyType2["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
      ParsedPropertyType2[ParsedPropertyType2["LEGACY_ANIMATION"] = 2] = "LEGACY_ANIMATION";
      ParsedPropertyType2[ParsedPropertyType2["TWO_WAY"] = 3] = "TWO_WAY";
    })(ParsedPropertyType || (ParsedPropertyType = {}));
    (function(ParsedEventType2) {
      ParsedEventType2[ParsedEventType2["Regular"] = 0] = "Regular";
      ParsedEventType2[ParsedEventType2["LegacyAnimation"] = 1] = "LegacyAnimation";
      ParsedEventType2[ParsedEventType2["TwoWay"] = 2] = "TwoWay";
    })(ParsedEventType || (ParsedEventType = {}));
    ParsedEvent = class {
      name;
      targetOrPhase;
      type;
      handler;
      sourceSpan;
      handlerSpan;
      keySpan;
      constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {
        this.name = name;
        this.targetOrPhase = targetOrPhase;
        this.type = type;
        this.handler = handler;
        this.sourceSpan = sourceSpan;
        this.handlerSpan = handlerSpan;
        this.keySpan = keySpan;
      }
    };
    ParsedVariable = class {
      name;
      value;
      sourceSpan;
      keySpan;
      valueSpan;
      constructor(name, value, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      }
    };
    (function(BindingType2) {
      BindingType2[BindingType2["Property"] = 0] = "Property";
      BindingType2[BindingType2["Attribute"] = 1] = "Attribute";
      BindingType2[BindingType2["Class"] = 2] = "Class";
      BindingType2[BindingType2["Style"] = 3] = "Style";
      BindingType2[BindingType2["LegacyAnimation"] = 4] = "LegacyAnimation";
      BindingType2[BindingType2["TwoWay"] = 5] = "TwoWay";
    })(BindingType || (BindingType = {}));
    BoundElementProperty = class {
      name;
      type;
      securityContext;
      value;
      unit;
      sourceSpan;
      keySpan;
      valueSpan;
      constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.type = type;
        this.securityContext = securityContext;
        this.value = value;
        this.unit = unit;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      }
    };
    (function(TagContentType2) {
      TagContentType2[TagContentType2["RAW_TEXT"] = 0] = "RAW_TEXT";
      TagContentType2[TagContentType2["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
      TagContentType2[TagContentType2["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
    })(TagContentType || (TagContentType = {}));
    Comment$1 = class Comment {
      value;
      sourceSpan;
      constructor(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
      }
      visit(_visitor2) {
        throw new Error("visit() not implemented for Comment");
      }
    };
    Text$3 = class Text2 {
      value;
      sourceSpan;
      constructor(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor) {
        return visitor.visitText(this);
      }
    };
    BoundText = class {
      value;
      sourceSpan;
      i18n;
      constructor(value, sourceSpan, i18n2) {
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitBoundText(this);
      }
    };
    TextAttribute = class {
      name;
      value;
      sourceSpan;
      keySpan;
      valueSpan;
      i18n;
      constructor(name, value, sourceSpan, keySpan, valueSpan, i18n2) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitTextAttribute(this);
      }
    };
    BoundAttribute = class _BoundAttribute {
      name;
      type;
      securityContext;
      value;
      unit;
      sourceSpan;
      keySpan;
      valueSpan;
      i18n;
      constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n2) {
        this.name = name;
        this.type = type;
        this.securityContext = securityContext;
        this.value = value;
        this.unit = unit;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.i18n = i18n2;
      }
      static fromBoundElementProperty(prop, i18n2) {
        if (prop.keySpan === void 0) {
          throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);
        }
        return new _BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2);
      }
      visit(visitor) {
        return visitor.visitBoundAttribute(this);
      }
    };
    BoundEvent = class _BoundEvent {
      name;
      type;
      handler;
      target;
      phase;
      sourceSpan;
      handlerSpan;
      keySpan;
      constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
        this.name = name;
        this.type = type;
        this.handler = handler;
        this.target = target;
        this.phase = phase;
        this.sourceSpan = sourceSpan;
        this.handlerSpan = handlerSpan;
        this.keySpan = keySpan;
      }
      static fromParsedEvent(event) {
        const target = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;
        const phase = event.type === ParsedEventType.LegacyAnimation ? event.targetOrPhase : null;
        if (event.keySpan === void 0) {
          throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);
        }
        return new _BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
      }
      visit(visitor) {
        return visitor.visitBoundEvent(this);
      }
    };
    Element$1 = class Element2 {
      name;
      attributes;
      inputs;
      outputs;
      directives;
      children;
      references;
      isSelfClosing;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      isVoid;
      i18n;
      constructor(name, attributes, inputs, outputs, directives, children, references, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan, isVoid, i18n2) {
        this.name = name;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.directives = directives;
        this.children = children;
        this.references = references;
        this.isSelfClosing = isSelfClosing;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.isVoid = isVoid;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitElement(this);
      }
    };
    DeferredTrigger = class {
      nameSpan;
      sourceSpan;
      prefetchSpan;
      whenOrOnSourceSpan;
      hydrateSpan;
      constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan, hydrateSpan) {
        this.nameSpan = nameSpan;
        this.sourceSpan = sourceSpan;
        this.prefetchSpan = prefetchSpan;
        this.whenOrOnSourceSpan = whenOrOnSourceSpan;
        this.hydrateSpan = hydrateSpan;
      }
      visit(visitor) {
        return visitor.visitDeferredTrigger(this);
      }
    };
    BoundDeferredTrigger = class extends DeferredTrigger {
      value;
      constructor(value, sourceSpan, prefetchSpan, whenSourceSpan, hydrateSpan) {
        super(
          /** nameSpan */
          null,
          sourceSpan,
          prefetchSpan,
          whenSourceSpan,
          hydrateSpan
        );
        this.value = value;
      }
    };
    NeverDeferredTrigger = class extends DeferredTrigger {
    };
    IdleDeferredTrigger = class extends DeferredTrigger {
    };
    ImmediateDeferredTrigger = class extends DeferredTrigger {
    };
    HoverDeferredTrigger = class extends DeferredTrigger {
      reference;
      constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
        this.reference = reference2;
      }
    };
    TimerDeferredTrigger = class extends DeferredTrigger {
      delay;
      constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
        this.delay = delay;
      }
    };
    InteractionDeferredTrigger = class extends DeferredTrigger {
      reference;
      constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
        this.reference = reference2;
      }
    };
    ViewportDeferredTrigger = class extends DeferredTrigger {
      reference;
      constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
        this.reference = reference2;
      }
    };
    BlockNode = class {
      nameSpan;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {
        this.nameSpan = nameSpan;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
    };
    DeferredBlockPlaceholder = class extends BlockNode {
      children;
      minimumTime;
      i18n;
      constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.children = children;
        this.minimumTime = minimumTime;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitDeferredBlockPlaceholder(this);
      }
    };
    DeferredBlockLoading = class extends BlockNode {
      children;
      afterTime;
      minimumTime;
      i18n;
      constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.children = children;
        this.afterTime = afterTime;
        this.minimumTime = minimumTime;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitDeferredBlockLoading(this);
      }
    };
    DeferredBlockError = class extends BlockNode {
      children;
      i18n;
      constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.children = children;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitDeferredBlockError(this);
      }
    };
    DeferredBlock = class extends BlockNode {
      children;
      placeholder;
      loading;
      error;
      mainBlockSpan;
      i18n;
      triggers;
      prefetchTriggers;
      hydrateTriggers;
      definedTriggers;
      definedPrefetchTriggers;
      definedHydrateTriggers;
      constructor(children, triggers, prefetchTriggers, hydrateTriggers, placeholder, loading, error, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.children = children;
        this.placeholder = placeholder;
        this.loading = loading;
        this.error = error;
        this.mainBlockSpan = mainBlockSpan;
        this.i18n = i18n2;
        this.triggers = triggers;
        this.prefetchTriggers = prefetchTriggers;
        this.hydrateTriggers = hydrateTriggers;
        this.definedTriggers = Object.keys(triggers);
        this.definedPrefetchTriggers = Object.keys(prefetchTriggers);
        this.definedHydrateTriggers = Object.keys(hydrateTriggers);
      }
      visit(visitor) {
        return visitor.visitDeferredBlock(this);
      }
      visitAll(visitor) {
        this.visitTriggers(this.definedHydrateTriggers, this.hydrateTriggers, visitor);
        this.visitTriggers(this.definedTriggers, this.triggers, visitor);
        this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);
        visitAll$1(visitor, this.children);
        const remainingBlocks = [this.placeholder, this.loading, this.error].filter((x) => x !== null);
        visitAll$1(visitor, remainingBlocks);
      }
      visitTriggers(keys, triggers, visitor) {
        visitAll$1(visitor, keys.map((k) => triggers[k]));
      }
    };
    SwitchBlock = class extends BlockNode {
      expression;
      cases;
      unknownBlocks;
      constructor(expression, cases, unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.expression = expression;
        this.cases = cases;
        this.unknownBlocks = unknownBlocks;
      }
      visit(visitor) {
        return visitor.visitSwitchBlock(this);
      }
    };
    SwitchBlockCase = class extends BlockNode {
      expression;
      children;
      i18n;
      constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.expression = expression;
        this.children = children;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitSwitchBlockCase(this);
      }
    };
    ForLoopBlock = class extends BlockNode {
      item;
      expression;
      trackBy;
      trackKeywordSpan;
      contextVariables;
      children;
      empty;
      mainBlockSpan;
      i18n;
      constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.item = item;
        this.expression = expression;
        this.trackBy = trackBy;
        this.trackKeywordSpan = trackKeywordSpan;
        this.contextVariables = contextVariables;
        this.children = children;
        this.empty = empty;
        this.mainBlockSpan = mainBlockSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitForLoopBlock(this);
      }
    };
    ForLoopBlockEmpty = class extends BlockNode {
      children;
      i18n;
      constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.children = children;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitForLoopBlockEmpty(this);
      }
    };
    IfBlock = class extends BlockNode {
      branches;
      constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.branches = branches;
      }
      visit(visitor) {
        return visitor.visitIfBlock(this);
      }
    };
    IfBlockBranch = class extends BlockNode {
      expression;
      children;
      expressionAlias;
      i18n;
      constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
        this.expression = expression;
        this.children = children;
        this.expressionAlias = expressionAlias;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitIfBlockBranch(this);
      }
    };
    UnknownBlock = class {
      name;
      sourceSpan;
      nameSpan;
      constructor(name, sourceSpan, nameSpan) {
        this.name = name;
        this.sourceSpan = sourceSpan;
        this.nameSpan = nameSpan;
      }
      visit(visitor) {
        return visitor.visitUnknownBlock(this);
      }
    };
    LetDeclaration$1 = class LetDeclaration {
      name;
      value;
      sourceSpan;
      nameSpan;
      valueSpan;
      constructor(name, value, sourceSpan, nameSpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.nameSpan = nameSpan;
        this.valueSpan = valueSpan;
      }
      visit(visitor) {
        return visitor.visitLetDeclaration(this);
      }
    };
    Component$1 = class Component2 {
      componentName;
      tagName;
      fullName;
      attributes;
      inputs;
      outputs;
      directives;
      children;
      references;
      isSelfClosing;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      i18n;
      constructor(componentName, tagName, fullName, attributes, inputs, outputs, directives, children, references, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        this.componentName = componentName;
        this.tagName = tagName;
        this.fullName = fullName;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.directives = directives;
        this.children = children;
        this.references = references;
        this.isSelfClosing = isSelfClosing;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitComponent(this);
      }
    };
    Directive$1 = class Directive2 {
      name;
      attributes;
      inputs;
      outputs;
      references;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      i18n;
      constructor(name, attributes, inputs, outputs, references, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        this.name = name;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.references = references;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitDirective(this);
      }
    };
    Template = class {
      tagName;
      attributes;
      inputs;
      outputs;
      directives;
      templateAttrs;
      children;
      references;
      variables;
      isSelfClosing;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      i18n;
      constructor(tagName, attributes, inputs, outputs, directives, templateAttrs, children, references, variables, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        this.tagName = tagName;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.directives = directives;
        this.templateAttrs = templateAttrs;
        this.children = children;
        this.references = references;
        this.variables = variables;
        this.isSelfClosing = isSelfClosing;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitTemplate(this);
      }
    };
    Content = class {
      selector;
      attributes;
      children;
      isSelfClosing;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      i18n;
      name = "ng-content";
      constructor(selector, attributes, children, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
        this.selector = selector;
        this.attributes = attributes;
        this.children = children;
        this.isSelfClosing = isSelfClosing;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitContent(this);
      }
    };
    Variable = class {
      name;
      value;
      sourceSpan;
      keySpan;
      valueSpan;
      constructor(name, value, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      }
      visit(visitor) {
        return visitor.visitVariable(this);
      }
    };
    Reference = class {
      name;
      value;
      sourceSpan;
      keySpan;
      valueSpan;
      constructor(name, value, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
      }
      visit(visitor) {
        return visitor.visitReference(this);
      }
    };
    Icu$1 = class Icu {
      vars;
      placeholders;
      sourceSpan;
      i18n;
      constructor(vars, placeholders, sourceSpan, i18n2) {
        this.vars = vars;
        this.placeholders = placeholders;
        this.sourceSpan = sourceSpan;
        this.i18n = i18n2;
      }
      visit(visitor) {
        return visitor.visitIcu(this);
      }
    };
    HostElement = class {
      tagNames;
      bindings;
      listeners;
      sourceSpan;
      constructor(tagNames, bindings, listeners, sourceSpan) {
        this.tagNames = tagNames;
        this.bindings = bindings;
        this.listeners = listeners;
        this.sourceSpan = sourceSpan;
        if (tagNames.length === 0) {
          throw new Error("HostElement must have at least one tag name.");
        }
      }
      visit() {
        throw new Error(`HostElement cannot be visited`);
      }
    };
    Message = class {
      nodes;
      placeholders;
      placeholderToMessage;
      meaning;
      description;
      customId;
      sources;
      id;
      /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */
      legacyIds = [];
      messageString;
      /**
       * @param nodes message AST
       * @param placeholders maps placeholder names to static content and their source spans
       * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
       * @param meaning
       * @param description
       * @param customId
       */
      constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
        this.nodes = nodes;
        this.placeholders = placeholders;
        this.placeholderToMessage = placeholderToMessage;
        this.meaning = meaning;
        this.description = description;
        this.customId = customId;
        this.id = this.customId;
        this.messageString = serializeMessage(this.nodes);
        if (nodes.length) {
          this.sources = [
            {
              filePath: nodes[0].sourceSpan.start.file.url,
              startLine: nodes[0].sourceSpan.start.line + 1,
              startCol: nodes[0].sourceSpan.start.col + 1,
              endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
              endCol: nodes[0].sourceSpan.start.col + 1
            }
          ];
        } else {
          this.sources = [];
        }
      }
    };
    Text$2 = class Text3 {
      value;
      sourceSpan;
      constructor(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitText(this, context2);
      }
    };
    Container = class {
      children;
      sourceSpan;
      constructor(children, sourceSpan) {
        this.children = children;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitContainer(this, context2);
      }
    };
    Icu2 = class {
      expression;
      type;
      cases;
      sourceSpan;
      expressionPlaceholder;
      constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {
        this.expression = expression;
        this.type = type;
        this.cases = cases;
        this.sourceSpan = sourceSpan;
        this.expressionPlaceholder = expressionPlaceholder;
      }
      visit(visitor, context2) {
        return visitor.visitIcu(this, context2);
      }
    };
    TagPlaceholder = class {
      tag;
      attrs;
      startName;
      closeName;
      children;
      isVoid;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan, startSourceSpan, endSourceSpan) {
        this.tag = tag;
        this.attrs = attrs;
        this.startName = startName;
        this.closeName = closeName;
        this.children = children;
        this.isVoid = isVoid;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitTagPlaceholder(this, context2);
      }
    };
    Placeholder = class {
      value;
      name;
      sourceSpan;
      constructor(value, name, sourceSpan) {
        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitPlaceholder(this, context2);
      }
    };
    IcuPlaceholder = class {
      value;
      name;
      sourceSpan;
      /** Used to capture a message computed from a previous processing pass (see `setI18nRefs()`). */
      previousMessage;
      constructor(value, name, sourceSpan) {
        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitIcuPlaceholder(this, context2);
      }
    };
    BlockPlaceholder = class {
      name;
      parameters;
      startName;
      closeName;
      children;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {
        this.name = name;
        this.parameters = parameters;
        this.startName = startName;
        this.closeName = closeName;
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitBlockPlaceholder(this, context2);
      }
    };
    LocalizeMessageStringVisitor = class {
      visitText(text2) {
        return text2.value;
      }
      visitContainer(container) {
        return container.children.map((child) => child.visit(this)).join("");
      }
      visitIcu(icu) {
        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
        return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
      }
      visitTagPlaceholder(ph) {
        const children = ph.children.map((child) => child.visit(this)).join("");
        return `{$${ph.startName}}${children}{$${ph.closeName}}`;
      }
      visitPlaceholder(ph) {
        return `{$${ph.name}}`;
      }
      visitIcuPlaceholder(ph) {
        return `{$${ph.name}}`;
      }
      visitBlockPlaceholder(ph) {
        const children = ph.children.map((child) => child.visit(this)).join("");
        return `{$${ph.startName}}${children}{$${ph.closeName}}`;
      }
    };
    _Visitor$2 = class _Visitor {
      visitTag(tag) {
        const strAttrs = this._serializeAttributes(tag.attrs);
        if (tag.children.length == 0) {
          return `<${tag.name}${strAttrs}/>`;
        }
        const strChildren = tag.children.map((node) => node.visit(this));
        return `<${tag.name}${strAttrs}>${strChildren.join("")}</${tag.name}>`;
      }
      visitText(text2) {
        return text2.value;
      }
      visitDeclaration(decl) {
        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
      }
      _serializeAttributes(attrs) {
        const strAttrs = Object.keys(attrs).map((name) => `${name}="${attrs[name]}"`).join(" ");
        return strAttrs.length > 0 ? " " + strAttrs : "";
      }
      visitDoctype(doctype) {
        return `<!DOCTYPE ${doctype.rootTag} [
${doctype.dtd}
]>`;
      }
    };
    _visitor = new _Visitor$2();
    I18N_ATTR = "i18n";
    I18N_ATTR_PREFIX = "i18n-";
    I18N_ICU_VAR_PREFIX = "VAR_";
    UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
    TEMPORARY_NAME = "_t";
    CONTEXT_NAME = "ctx";
    RENDER_FLAGS = "rf";
    DefinitionMap = class {
      values = [];
      set(key, value) {
        if (value) {
          const existing = this.values.find((value2) => value2.key === key);
          if (existing) {
            existing.value = value;
          } else {
            this.values.push({ key, value, quoted: false });
          }
        }
      }
      toLiteralMap() {
        return literalMap(this.values);
      }
    };
    UNUSABLE_INTERPOLATION_REGEXPS = [
      /@/,
      // control flow reserved symbol
      /^\s*$/,
      // empty
      /[<>]/,
      // html tag
      /^[{}]$/,
      // i18n expansion
      /&(#|[a-z])/i,
      // character reference,
      /^\/\//
      // comment
    ];
    InterpolationConfig = class _InterpolationConfig {
      start;
      end;
      static fromArray(markers) {
        if (!markers) {
          return DEFAULT_INTERPOLATION_CONFIG;
        }
        assertInterpolationSymbols("interpolation", markers);
        return new _InterpolationConfig(markers[0], markers[1]);
      }
      constructor(start, end) {
        this.start = start;
        this.end = end;
      }
    };
    DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");
    DEFAULT_CONTAINER_BLOCKS = /* @__PURE__ */ new Set(["switch"]);
    $EOF = 0;
    $BSPACE = 8;
    $TAB = 9;
    $LF = 10;
    $VTAB = 11;
    $FF = 12;
    $CR = 13;
    $SPACE = 32;
    $BANG = 33;
    $DQ = 34;
    $HASH = 35;
    $$ = 36;
    $PERCENT = 37;
    $AMPERSAND = 38;
    $SQ = 39;
    $LPAREN = 40;
    $RPAREN = 41;
    $STAR = 42;
    $PLUS = 43;
    $COMMA = 44;
    $MINUS = 45;
    $PERIOD = 46;
    $SLASH = 47;
    $COLON = 58;
    $SEMICOLON = 59;
    $LT = 60;
    $EQ = 61;
    $GT = 62;
    $QUESTION = 63;
    $0 = 48;
    $7 = 55;
    $9 = 57;
    $A = 65;
    $E = 69;
    $F = 70;
    $X = 88;
    $Z = 90;
    $LBRACKET = 91;
    $BACKSLASH = 92;
    $RBRACKET = 93;
    $CARET = 94;
    $_ = 95;
    $a = 97;
    $b = 98;
    $e = 101;
    $f = 102;
    $n = 110;
    $r = 114;
    $t = 116;
    $u = 117;
    $v = 118;
    $x = 120;
    $z = 122;
    $LBRACE = 123;
    $BAR = 124;
    $RBRACE = 125;
    $NBSP = 160;
    $AT = 64;
    $BT = 96;
    ParseLocation = class _ParseLocation {
      file;
      offset;
      line;
      col;
      constructor(file, offset, line, col) {
        this.file = file;
        this.offset = offset;
        this.line = line;
        this.col = col;
      }
      toString() {
        return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
      }
      moveBy(delta) {
        const source = this.file.content;
        const len = source.length;
        let offset = this.offset;
        let line = this.line;
        let col = this.col;
        while (offset > 0 && delta < 0) {
          offset--;
          delta++;
          const ch = source.charCodeAt(offset);
          if (ch == $LF) {
            line--;
            const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
            col = priorLine > 0 ? offset - priorLine : offset;
          } else {
            col--;
          }
        }
        while (offset < len && delta > 0) {
          const ch = source.charCodeAt(offset);
          offset++;
          delta--;
          if (ch == $LF) {
            line++;
            col = 0;
          } else {
            col++;
          }
        }
        return new _ParseLocation(this.file, offset, line, col);
      }
      // Return the source around the location
      // Up to `maxChars` or `maxLines` on each side of the location
      getContext(maxChars, maxLines) {
        const content = this.file.content;
        let startOffset = this.offset;
        if (startOffset != null) {
          if (startOffset > content.length - 1) {
            startOffset = content.length - 1;
          }
          let endOffset = startOffset;
          let ctxChars = 0;
          let ctxLines = 0;
          while (ctxChars < maxChars && startOffset > 0) {
            startOffset--;
            ctxChars++;
            if (content[startOffset] == "\n") {
              if (++ctxLines == maxLines) {
                break;
              }
            }
          }
          ctxChars = 0;
          ctxLines = 0;
          while (ctxChars < maxChars && endOffset < content.length - 1) {
            endOffset++;
            ctxChars++;
            if (content[endOffset] == "\n") {
              if (++ctxLines == maxLines) {
                break;
              }
            }
          }
          return {
            before: content.substring(startOffset, this.offset),
            after: content.substring(this.offset, endOffset + 1)
          };
        }
        return null;
      }
    };
    ParseSourceFile = class {
      content;
      url;
      constructor(content, url) {
        this.content = content;
        this.url = url;
      }
    };
    ParseSourceSpan = class {
      start;
      end;
      fullStart;
      details;
      /**
       * Create an object that holds information about spans of tokens/nodes captured during
       * lexing/parsing of text.
       *
       * @param start
       * The location of the start of the span (having skipped leading trivia).
       * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
       * elements will appear to begin at the start of the opening tag, rather than at the start of any
       * leading trivia, which could include newlines.
       *
       * @param end
       * The location of the end of the span.
       *
       * @param fullStart
       * The start of the token without skipping the leading trivia.
       * This is used by tooling that splits tokens further, such as extracting Angular interpolations
       * from text tokens. Such tooling creates new source-spans relative to the original token's
       * source-span. If leading trivia characters have been skipped then the new source-spans may be
       * incorrectly offset.
       *
       * @param details
       * Additional information (such as identifier names) that should be associated with the span.
       */
      constructor(start, end, fullStart = start, details = null) {
        this.start = start;
        this.end = end;
        this.fullStart = fullStart;
        this.details = details;
      }
      toString() {
        return this.start.file.content.substring(this.start.offset, this.end.offset);
      }
    };
    (function(ParseErrorLevel2) {
      ParseErrorLevel2[ParseErrorLevel2["WARNING"] = 0] = "WARNING";
      ParseErrorLevel2[ParseErrorLevel2["ERROR"] = 1] = "ERROR";
    })(ParseErrorLevel || (ParseErrorLevel = {}));
    ParseError = class extends Error {
      span;
      msg;
      level;
      relatedError;
      constructor(span, msg, level = ParseErrorLevel.ERROR, relatedError) {
        super(msg);
        this.span = span;
        this.msg = msg;
        this.level = level;
        this.relatedError = relatedError;
        Object.setPrototypeOf(this, new.target.prototype);
      }
      contextualMessage() {
        const ctx = this.span.start.getContext(100, 3);
        return ctx ? `${this.msg} ("${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}")` : this.msg;
      }
      toString() {
        const details = this.span.details ? `, ${this.span.details}` : "";
        return `${this.contextualMessage()}: ${this.span.start}${details}`;
      }
    };
    _anonymousTypeIndex = 0;
    makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';
    AbstractJsEmitterVisitor = class extends AbstractEmitterVisitor {
      constructor() {
        super(false);
      }
      visitWrappedNodeExpr(ast, ctx) {
        throw new Error("Cannot emit a WrappedNodeExpr in Javascript.");
      }
      visitDeclareVarStmt(stmt, ctx) {
        ctx.print(stmt, `var ${stmt.name}`);
        if (stmt.value) {
          ctx.print(stmt, " = ");
          stmt.value.visitExpression(this, ctx);
        }
        ctx.println(stmt, `;`);
        return null;
      }
      visitTaggedTemplateLiteralExpr(ast, ctx) {
        const elements = ast.template.elements;
        ast.tag.visitExpression(this, ctx);
        ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);
        ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.text, false)).join(", ")}], `);
        ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.rawText, false)).join(", ")}])`);
        ast.template.expressions.forEach((expression) => {
          ctx.print(ast, ", ");
          expression.visitExpression(this, ctx);
        });
        ctx.print(ast, ")");
        return null;
      }
      visitTemplateLiteralExpr(expr, ctx) {
        ctx.print(expr, "`");
        for (let i = 0; i < expr.elements.length; i++) {
          expr.elements[i].visitExpression(this, ctx);
          const expression = i < expr.expressions.length ? expr.expressions[i] : null;
          if (expression !== null) {
            ctx.print(expression, "${");
            expression.visitExpression(this, ctx);
            ctx.print(expression, "}");
          }
        }
        ctx.print(expr, "`");
      }
      visitTemplateLiteralElementExpr(expr, ctx) {
        ctx.print(expr, expr.rawText);
        return null;
      }
      visitFunctionExpr(ast, ctx) {
        ctx.print(ast, `function${ast.name ? " " + ast.name : ""}(`);
        this._visitParams(ast.params, ctx);
        ctx.println(ast, `) {`);
        ctx.incIndent();
        this.visitAllStatements(ast.statements, ctx);
        ctx.decIndent();
        ctx.print(ast, `}`);
        return null;
      }
      visitArrowFunctionExpr(ast, ctx) {
        ctx.print(ast, "(");
        this._visitParams(ast.params, ctx);
        ctx.print(ast, ") =>");
        if (Array.isArray(ast.body)) {
          ctx.println(ast, `{`);
          ctx.incIndent();
          this.visitAllStatements(ast.body, ctx);
          ctx.decIndent();
          ctx.print(ast, `}`);
        } else {
          const isObjectLiteral = ast.body instanceof LiteralMapExpr;
          if (isObjectLiteral) {
            ctx.print(ast, "(");
          }
          ast.body.visitExpression(this, ctx);
          if (isObjectLiteral) {
            ctx.print(ast, ")");
          }
        }
        return null;
      }
      visitDeclareFunctionStmt(stmt, ctx) {
        ctx.print(stmt, `function ${stmt.name}(`);
        this._visitParams(stmt.params, ctx);
        ctx.println(stmt, `) {`);
        ctx.incIndent();
        this.visitAllStatements(stmt.statements, ctx);
        ctx.decIndent();
        ctx.println(stmt, `}`);
        return null;
      }
      visitLocalizedString(ast, ctx) {
        ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);
        const parts = [ast.serializeI18nHead()];
        for (let i = 1; i < ast.messageParts.length; i++) {
          parts.push(ast.serializeI18nTemplatePart(i));
        }
        ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.cooked, false)).join(", ")}], `);
        ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.raw, false)).join(", ")}])`);
        ast.expressions.forEach((expression) => {
          ctx.print(ast, ", ");
          expression.visitExpression(this, ctx);
        });
        ctx.print(ast, ")");
        return null;
      }
      _visitParams(params, ctx) {
        this.visitAllObjects((param) => ctx.print(null, param.name), params, ctx, ",");
      }
    };
    JitEvaluator = class {
      /**
       *
       * @param sourceUrl The URL of the generated code.
       * @param statements An array of Angular statement AST nodes to be evaluated.
       * @param refResolver Resolves `o.ExternalReference`s into values.
       * @param createSourceMaps If true then create a source-map for the generated code and include it
       * inline as a source-map comment.
       * @returns A map of all the variables in the generated code.
       */
      evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {
        const converter = new JitEmitterVisitor(refResolver);
        const ctx = EmitterVisitorContext.createRoot();
        if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
          statements = [literal("use strict").toStmt(), ...statements];
        }
        converter.visitAllStatements(statements, ctx);
        converter.createReturnStmt(ctx);
        return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
      }
      /**
       * Evaluate a piece of JIT generated code.
       * @param sourceUrl The URL of this generated code.
       * @param ctx A context object that contains an AST of the code to be evaluated.
       * @param vars A map containing the names and values of variables that the evaluated code might
       * reference.
       * @param createSourceMap If true then create a source-map for the generated code and include it
       * inline as a source-map comment.
       * @returns The result of evaluating the code.
       */
      evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
        let fnBody = `"use strict";${ctx.toSource()}
//# sourceURL=${sourceUrl}`;
        const fnArgNames = [];
        const fnArgValues = [];
        for (const argName in vars) {
          fnArgValues.push(vars[argName]);
          fnArgNames.push(argName);
        }
        if (createSourceMap) {
          const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat("return null;")).toString();
          const headerLines = emptyFn.slice(0, emptyFn.indexOf("return null;")).split("\n").length - 1;
          fnBody += `
${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;
        }
        const fn2 = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));
        return this.executeFunction(fn2, fnArgValues);
      }
      /**
       * Execute a JIT generated function by calling it.
       *
       * This method can be overridden in tests to capture the functions that are generated
       * by this `JitEvaluator` class.
       *
       * @param fn A function to execute.
       * @param args The arguments to pass to the function being executed.
       * @returns The return value of the executed function.
       */
      executeFunction(fn2, args) {
        return fn2(...args);
      }
    };
    JitEmitterVisitor = class extends AbstractJsEmitterVisitor {
      refResolver;
      _evalArgNames = [];
      _evalArgValues = [];
      _evalExportedVars = [];
      constructor(refResolver) {
        super();
        this.refResolver = refResolver;
      }
      createReturnStmt(ctx) {
        const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map((resultVar) => new LiteralMapEntry(resultVar, variable(resultVar), false))));
        stmt.visitStatement(this, ctx);
      }
      getArgs() {
        const result = {};
        for (let i = 0; i < this._evalArgNames.length; i++) {
          result[this._evalArgNames[i]] = this._evalArgValues[i];
        }
        return result;
      }
      visitExternalExpr(ast, ctx) {
        this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);
        return null;
      }
      visitWrappedNodeExpr(ast, ctx) {
        this._emitReferenceToExternal(ast, ast.node, ctx);
        return null;
      }
      visitDeclareVarStmt(stmt, ctx) {
        if (stmt.hasModifier(StmtModifier.Exported)) {
          this._evalExportedVars.push(stmt.name);
        }
        return super.visitDeclareVarStmt(stmt, ctx);
      }
      visitDeclareFunctionStmt(stmt, ctx) {
        if (stmt.hasModifier(StmtModifier.Exported)) {
          this._evalExportedVars.push(stmt.name);
        }
        return super.visitDeclareFunctionStmt(stmt, ctx);
      }
      _emitReferenceToExternal(ast, value, ctx) {
        let id = this._evalArgValues.indexOf(value);
        if (id === -1) {
          id = this._evalArgValues.length;
          this._evalArgValues.push(value);
          const name = identifierName({ reference: value }) || "val";
          this._evalArgNames.push(`jit_${name}_${id}`);
        }
        ctx.print(ast, this._evalArgNames[id]);
      }
    };
    R3JitReflector = class {
      context;
      constructor(context2) {
        this.context = context2;
      }
      resolveExternalReference(ref) {
        if (ref.moduleName !== "@angular/core") {
          throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);
        }
        if (!this.context.hasOwnProperty(ref.name)) {
          throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);
        }
        return this.context[ref.name];
      }
    };
    (function(R3SelectorScopeMode2) {
      R3SelectorScopeMode2[R3SelectorScopeMode2["Inline"] = 0] = "Inline";
      R3SelectorScopeMode2[R3SelectorScopeMode2["SideEffect"] = 1] = "SideEffect";
      R3SelectorScopeMode2[R3SelectorScopeMode2["Omit"] = 2] = "Omit";
    })(R3SelectorScopeMode || (R3SelectorScopeMode = {}));
    (function(R3NgModuleMetadataKind2) {
      R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Global"] = 0] = "Global";
      R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Local"] = 1] = "Local";
    })(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));
    (function(R3TemplateDependencyKind3) {
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Directive"] = 0] = "Directive";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["Pipe"] = 1] = "Pipe";
      R3TemplateDependencyKind3[R3TemplateDependencyKind3["NgModule"] = 2] = "NgModule";
    })(R3TemplateDependencyKind2 || (R3TemplateDependencyKind2 = {}));
    animationKeywords = /* @__PURE__ */ new Set([
      // global values
      "inherit",
      "initial",
      "revert",
      "unset",
      // animation-direction
      "alternate",
      "alternate-reverse",
      "normal",
      "reverse",
      // animation-fill-mode
      "backwards",
      "both",
      "forwards",
      "none",
      // animation-play-state
      "paused",
      "running",
      // animation-timing-function
      "ease",
      "ease-in",
      "ease-in-out",
      "ease-out",
      "linear",
      "step-start",
      "step-end",
      // `steps()` function
      "end",
      "jump-both",
      "jump-end",
      "jump-none",
      "jump-start",
      "start"
    ]);
    scopedAtRuleIdentifiers = [
      "@media",
      "@supports",
      "@document",
      "@layer",
      "@container",
      "@scope",
      "@starting-style"
    ];
    ShadowCss = class {
      /*
       * Shim some cssText with the given selector. Returns cssText that can be included in the document
       *
       * The selector is the attribute added to all elements inside the host,
       * The hostSelector is the attribute added to the host itself.
       */
      shimCssText(cssText, selector, hostSelector = "") {
        const comments = [];
        cssText = cssText.replace(_commentRe, (m) => {
          if (m.match(_commentWithHashRe)) {
            comments.push(m);
          } else {
            const newLinesMatches = m.match(_newLinesRe);
            comments.push((newLinesMatches?.join("") ?? "") + "\n");
          }
          return COMMENT_PLACEHOLDER;
        });
        cssText = this._insertDirectives(cssText);
        const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
        let commentIdx = 0;
        return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);
      }
      _insertDirectives(cssText) {
        cssText = this._insertPolyfillDirectivesInCssText(cssText);
        return this._insertPolyfillRulesInCssText(cssText);
      }
      /**
       * Process styles to add scope to keyframes.
       *
       * Modify both the names of the keyframes defined in the component styles and also the css
       * animation rules using them.
       *
       * Animation rules using keyframes defined elsewhere are not modified to allow for globally
       * defined keyframes.
       *
       * For example, we convert this css:
       *
       * ```scss
       * .box {
       *   animation: box-animation 1s forwards;
       * }
       *
       * @keyframes box-animation {
       *   to {
       *     background-color: green;
       *   }
       * }
       * ```
       *
       * to this:
       *
       * ```scss
       * .box {
       *   animation: scopeName_box-animation 1s forwards;
       * }
       *
       * @keyframes scopeName_box-animation {
       *   to {
       *     background-color: green;
       *   }
       * }
       * ```
       *
       * @param cssText the component's css text that needs to be scoped.
       * @param scopeSelector the component's scope selector.
       *
       * @returns the scoped css text.
       */
      _scopeKeyframesRelatedCss(cssText, scopeSelector) {
        const unscopedKeyframesSet = /* @__PURE__ */ new Set();
        const scopedKeyframesCssText = processRules(cssText, (rule) => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));
        return processRules(scopedKeyframesCssText, (rule) => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));
      }
      /**
       * Scopes local keyframes names, returning the updated css rule and it also
       * adds the original keyframe name to a provided set to collect all keyframes names
       * so that it can later be used to scope the animation rules.
       *
       * For example, it takes a rule such as:
       *
       * ```scss
       * @keyframes box-animation {
       *   to {
       *     background-color: green;
       *   }
       * }
       * ```
       *
       * and returns:
       *
       * ```scss
       * @keyframes scopeName_box-animation {
       *   to {
       *     background-color: green;
       *   }
       * }
       * ```
       * and as a side effect it adds "box-animation" to the `unscopedKeyframesSet` set
       *
       * @param cssRule the css rule to process.
       * @param scopeSelector the component's scope selector.
       * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be
       * modified as a side effect)
       *
       * @returns the css rule modified with the scoped keyframes name.
       */
      _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {
        return __spreadProps(__spreadValues({}, rule), {
          selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, (_, start, quote, keyframeName, endSpaces) => {
            unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
            return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;
          })
        });
      }
      /**
       * Function used to scope a keyframes name (obtained from an animation declaration)
       * using an existing set of unscopedKeyframes names to discern if the scoping needs to be
       * performed (keyframes names of keyframes not defined in the component's css need not to be
       * scoped).
       *
       * @param keyframe the keyframes name to check.
       * @param scopeSelector the component's scope selector.
       * @param unscopedKeyframesSet the set of unscoped keyframes names.
       *
       * @returns the scoped name of the keyframe, or the original name is the name need not to be
       * scoped.
       */
      _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {
        return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, (_, spaces1, quote, name, spaces2) => {
          name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + "_" : ""}${name}`;
          return `${spaces1}${quote}${name}${quote}${spaces2}`;
        });
      }
      /**
       * Regular expression used to extrapolate the possible keyframes from an
       * animation declaration (with possibly multiple animation definitions)
       *
       * The regular expression can be divided in three parts
       *  - (^|\s+|,)
       *    captures how many (if any) leading whitespaces are present or a comma
       *  - (?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))
       *    captures two different possible keyframes, ones which are quoted or ones which are valid css
       * indents (custom properties excluded)
       *  - (?=[,\s;]|$)
       *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a
       * semicolon or the end of the string
       */
      _animationDeclarationKeyframesRe = /(^|\s+|,)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
      /**
       * Scope an animation rule so that the keyframes mentioned in such rule
       * are scoped if defined in the component's css and left untouched otherwise.
       *
       * It can scope values of both the 'animation' and 'animation-name' properties.
       *
       * @param rule css rule to scope.
       * @param scopeSelector the component's scope selector.
       * @param unscopedKeyframesSet the set of unscoped keyframes names.
       *
       * @returns the updated css rule.
       **/
      _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {
        let content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation\s*:\s*),*([^;]+)/g, (_, start, animationDeclarations) => start + animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = "", quotedName, nonQuotedName) => {
          if (quotedName) {
            return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;
          } else {
            return animationKeywords.has(nonQuotedName) ? original : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;
          }
        }));
        content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(",").map((keyframe) => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet)).join(",")}`);
        return __spreadProps(__spreadValues({}, rule), { content });
      }
      /*
       * Process styles to convert native ShadowDOM rules that will trip
       * up the css parser; we rely on decorating the stylesheet with inert rules.
       *
       * For example, we convert this rule:
       *
       * polyfill-next-selector { content: ':host menu-item'; }
       * ::content menu-item {
       *
       * to this:
       *
       * scopeName menu-item {
       *
       **/
      _insertPolyfillDirectivesInCssText(cssText) {
        return cssText.replace(_cssContentNextSelectorRe, function(...m) {
          return m[2] + "{";
        });
      }
      /*
       * Process styles to add rules which will only apply under the polyfill
       *
       * For example, we convert this rule:
       *
       * polyfill-rule {
       *   content: ':host menu-item';
       * ...
       * }
       *
       * to this:
       *
       * scopeName menu-item {...}
       *
       **/
      _insertPolyfillRulesInCssText(cssText) {
        return cssText.replace(_cssContentRuleRe, (...m) => {
          const rule = m[0].replace(m[1], "").replace(m[2], "");
          return m[4] + rule;
        });
      }
      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
       *
       *  .foo {... }
       *
       *  and converts this to
       *
       *  scopeName .foo { ... }
       */
      _scopeCssText(cssText, scopeSelector, hostSelector) {
        const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
        cssText = this._insertPolyfillHostInCssText(cssText);
        cssText = this._convertColonHost(cssText);
        cssText = this._convertColonHostContext(cssText);
        cssText = this._convertShadowDOMSelectors(cssText);
        if (scopeSelector) {
          cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
          cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
        }
        cssText = cssText + "\n" + unscopedRules;
        return cssText.trim();
      }
      /*
       * Process styles to add rules which will only apply under the polyfill
       * and do not process via CSSOM. (CSSOM is destructive to rules on rare
       * occasions, e.g. -webkit-calc on Safari.)
       * For example, we convert this rule:
       *
       * @polyfill-unscoped-rule {
       *   content: 'menu-item';
       * ... }
       *
       * to this:
       *
       * menu-item {...}
       *
       **/
      _extractUnscopedRulesFromCssText(cssText) {
        let r = "";
        let m;
        _cssContentUnscopedRuleRe.lastIndex = 0;
        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
          const rule = m[0].replace(m[2], "").replace(m[1], m[4]);
          r += rule + "\n\n";
        }
        return r;
      }
      /*
       * convert a rule like :host(.foo) > .bar { }
       *
       * to
       *
       * .foo<scopeName> > .bar
       */
      _convertColonHost(cssText) {
        return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {
          if (hostSelectors) {
            const convertedSelectors = [];
            const hostSelectorArray = hostSelectors.split(",").map((p) => p.trim());
            for (const hostSelector of hostSelectorArray) {
              if (!hostSelector)
                break;
              const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, "") + otherSelectors;
              convertedSelectors.push(convertedSelector);
            }
            return convertedSelectors.join(",");
          } else {
            return _polyfillHostNoCombinator + otherSelectors;
          }
        });
      }
      /*
       * convert a rule like :host-context(.foo) > .bar { }
       *
       * to
       *
       * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
       *
       * and
       *
       * :host-context(.foo:host) .bar { ... }
       *
       * to
       *
       * .foo<scopeName> .bar { ... }
       */
      _convertColonHostContext(cssText) {
        const length = cssText.length;
        let parens = 0;
        let prev = 0;
        let result = "";
        for (let i = 0; i < length; i++) {
          const char = cssText[i];
          if (char === "," && parens === 0) {
            result += this._convertColonHostContextInSelectorPart(cssText.slice(prev, i)) + ",";
            prev = i + 1;
            continue;
          }
          if (i === length - 1) {
            result += this._convertColonHostContextInSelectorPart(cssText.slice(prev));
            break;
          }
          if (char === "(") {
            parens++;
          } else if (char === ")") {
            parens--;
          }
        }
        return result;
      }
      _convertColonHostContextInSelectorPart(cssText) {
        return cssText.replace(_cssColonHostContextReGlobal, (selectorText, pseudoPrefix) => {
          const contextSelectorGroups = [[]];
          let match;
          while (match = _cssColonHostContextRe.exec(selectorText)) {
            const newContextSelectors = (match[1] ?? "").trim().split(",").map((m) => m.trim()).filter((m) => m !== "");
            const contextSelectorGroupsLength = contextSelectorGroups.length;
            repeatGroups(contextSelectorGroups, newContextSelectors.length);
            for (let i = 0; i < newContextSelectors.length; i++) {
              for (let j = 0; j < contextSelectorGroupsLength; j++) {
                contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
              }
            }
            selectorText = match[2];
          }
          return contextSelectorGroups.map((contextSelectors) => _combineHostContextSelectors(contextSelectors, selectorText, pseudoPrefix)).join(", ");
        });
      }
      /*
       * Convert combinators like ::shadow and pseudo-elements like ::content
       * by replacing with space.
       */
      _convertShadowDOMSelectors(cssText) {
        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, " "), cssText);
      }
      // change a selector like 'div' to 'name div'
      _scopeSelectors(cssText, scopeSelector, hostSelector) {
        return processRules(cssText, (rule) => {
          let selector = rule.selector;
          let content = rule.content;
          if (rule.selector[0] !== "@") {
            selector = this._scopeSelector({
              selector,
              scopeSelector,
              hostSelector,
              isParentSelector: true
            });
          } else if (scopedAtRuleIdentifiers.some((atRule) => rule.selector.startsWith(atRule))) {
            content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
          } else if (rule.selector.startsWith("@font-face") || rule.selector.startsWith("@page")) {
            content = this._stripScopingSelectors(rule.content);
          }
          return new CssRule(selector, content);
        });
      }
      /**
       * Handle a css text that is within a rule that should not contain scope selectors by simply
       * removing them! An example of such a rule is `@font-face`.
       *
       * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.
       * Normally this would be a syntax error by the author of the styles. But in some rare cases, such
       * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we
       * can end up with broken css if the imported styles happen to contain @font-face rules.
       *
       * For example:
       *
       * ```
       * :host ::ng-deep {
       *   import 'some/lib/containing/font-face';
       * }
       *
       * Similar logic applies to `@page` rules which can contain a particular set of properties,
       * as well as some specific at-rules. Since they can't be encapsulated, we have to strip
       * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3
       * ```
       */
      _stripScopingSelectors(cssText) {
        return processRules(cssText, (rule) => {
          const selector = rule.selector.replace(_shadowDeepSelectors, " ").replace(_polyfillHostNoCombinatorRe, " ");
          return new CssRule(selector, rule.content);
        });
      }
      _safeSelector;
      _shouldScopeIndicator;
      // `isParentSelector` is used to distinguish the selectors which are coming from
      // the initial selector string and any nested selectors, parsed recursively,
      // for example `selector = 'a:where(.one)'` could be the parent, while recursive call
      // would have `selector = '.one'`.
      _scopeSelector({ selector, scopeSelector, hostSelector, isParentSelector = false }) {
        const selectorSplitRe = / ?,(?!(?:[^)(]*(?:\([^)(]*(?:\([^)(]*(?:\([^)(]*\)[^)(]*)*\)[^)(]*)*\)[^)(]*)*\))) ?/;
        return selector.split(selectorSplitRe).map((part) => part.split(_shadowDeepSelectors)).map((deepParts) => {
          const [shallowPart, ...otherParts] = deepParts;
          const applyScope = (shallowPart2) => {
            if (this._selectorNeedsScoping(shallowPart2, scopeSelector)) {
              return this._applySelectorScope({
                selector: shallowPart2,
                scopeSelector,
                hostSelector,
                isParentSelector
              });
            } else {
              return shallowPart2;
            }
          };
          return [applyScope(shallowPart), ...otherParts].join(" ");
        }).join(", ");
      }
      _selectorNeedsScoping(selector, scopeSelector) {
        const re = this._makeScopeMatcher(scopeSelector);
        return !re.test(selector);
      }
      _makeScopeMatcher(scopeSelector) {
        const lre = /\[/g;
        const rre = /\]/g;
        scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]");
        return new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
      }
      // scope via name and [is=name]
      _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
        _polyfillHostRe.lastIndex = 0;
        if (_polyfillHostRe.test(selector)) {
          const replaceBy = `[${hostSelector}]`;
          let result = selector;
          while (result.match(_polyfillHostNoCombinatorRe)) {
            result = result.replace(_polyfillHostNoCombinatorRe, (_hnc, selector2) => {
              return selector2.replace(/([^:\)]*)(:*)(.*)/, (_, before, colon, after) => {
                return before + replaceBy + colon + after;
              });
            });
          }
          return result.replace(_polyfillHostRe, replaceBy);
        }
        return scopeSelector + " " + selector;
      }
      // return a selector with [name] suffix on each simple selector
      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
      _applySelectorScope({ selector, scopeSelector, hostSelector, isParentSelector }) {
        const isRe = /\[is=([^\]]*)\]/g;
        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
        const attrName = `[${scopeSelector}]`;
        const _scopeSelectorPart = (p) => {
          let scopedP = p.trim();
          if (!scopedP) {
            return p;
          }
          if (p.includes(_polyfillHostNoCombinator)) {
            scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
            if (!p.match(_polyfillHostNoCombinatorOutsidePseudoFunction)) {
              const [_, before, colon, after] = scopedP.match(/([^:]*)(:*)([\s\S]*)/);
              scopedP = before + attrName + colon + after;
            }
          } else {
            const t = p.replace(_polyfillHostRe, "");
            if (t.length > 0) {
              const matches = t.match(/([^:]*)(:*)([\s\S]*)/);
              if (matches) {
                scopedP = matches[1] + attrName + matches[2] + matches[3];
              }
            }
          }
          return scopedP;
        };
        const _pseudoFunctionAwareScopeSelectorPart = (selectorPart) => {
          let scopedPart = "";
          const pseudoSelectorParts = [];
          let pseudoSelectorMatch;
          while ((pseudoSelectorMatch = _cssPrefixWithPseudoSelectorFunction.exec(selectorPart)) !== null) {
            let openedBrackets = 1;
            let index = _cssPrefixWithPseudoSelectorFunction.lastIndex;
            while (index < selectorPart.length) {
              const currentSymbol = selectorPart[index];
              index++;
              if (currentSymbol === "(") {
                openedBrackets++;
                continue;
              }
              if (currentSymbol === ")") {
                openedBrackets--;
                if (openedBrackets === 0) {
                  break;
                }
                continue;
              }
            }
            pseudoSelectorParts.push(`${pseudoSelectorMatch[0]}${selectorPart.slice(_cssPrefixWithPseudoSelectorFunction.lastIndex, index)}`);
            _cssPrefixWithPseudoSelectorFunction.lastIndex = index;
          }
          if (pseudoSelectorParts.join("") === selectorPart) {
            scopedPart = pseudoSelectorParts.map((selectorPart2) => {
              const [cssPseudoSelectorFunction] = selectorPart2.match(_cssPrefixWithPseudoSelectorFunction) ?? [];
              const selectorToScope = selectorPart2.slice(cssPseudoSelectorFunction?.length, -1);
              if (selectorToScope.includes(_polyfillHostNoCombinator)) {
                this._shouldScopeIndicator = true;
              }
              const scopedInnerPart = this._scopeSelector({
                selector: selectorToScope,
                scopeSelector,
                hostSelector
              });
              return `${cssPseudoSelectorFunction}${scopedInnerPart})`;
            }).join("");
          } else {
            this._shouldScopeIndicator = this._shouldScopeIndicator || selectorPart.includes(_polyfillHostNoCombinator);
            scopedPart = this._shouldScopeIndicator ? _scopeSelectorPart(selectorPart) : selectorPart;
          }
          return scopedPart;
        };
        if (isParentSelector) {
          this._safeSelector = new SafeSelector(selector);
          selector = this._safeSelector.content();
        }
        let scopedSelector = "";
        let startIndex = 0;
        let res;
        const sep = /( |>|\+|~(?!=))(?!([^)(]*(?:\([^)(]*(?:\([^)(]*(?:\([^)(]*\)[^)(]*)*\)[^)(]*)*\)[^)(]*)*\)))\s*/g;
        const hasHost = selector.includes(_polyfillHostNoCombinator);
        if (isParentSelector || this._shouldScopeIndicator) {
          this._shouldScopeIndicator = !hasHost;
        }
        while ((res = sep.exec(selector)) !== null) {
          const separator = res[1];
          const part2 = selector.slice(startIndex, res.index);
          if (part2.match(/__esc-ph-(\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\d]/)) {
            continue;
          }
          const scopedPart = _pseudoFunctionAwareScopeSelectorPart(part2);
          scopedSelector += `${scopedPart} ${separator} `;
          startIndex = sep.lastIndex;
        }
        const part = selector.substring(startIndex);
        scopedSelector += _pseudoFunctionAwareScopeSelectorPart(part);
        return this._safeSelector.restore(scopedSelector);
      }
      _insertPolyfillHostInCssText(selector) {
        return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
      }
    };
    SafeSelector = class {
      placeholders = [];
      index = 0;
      _content;
      constructor(selector) {
        selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
        selector = selector.replace(/(\\.)/g, (_, keep) => {
          const replaceBy = `__esc-ph-${this.index}__`;
          this.placeholders.push(keep);
          this.index++;
          return replaceBy;
        });
        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
          const replaceBy = `__ph-${this.index}__`;
          this.placeholders.push(exp);
          this.index++;
          return pseudo + replaceBy;
        });
      }
      restore(content) {
        return content.replace(/__(?:ph|esc-ph)-(\d+)__/g, (_ph, index) => this.placeholders[+index]);
      }
      content() {
        return this._content;
      }
      /**
       * Replaces all of the substrings that match a regex within a
       * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
       */
      _escapeRegexMatches(content, pattern) {
        return content.replace(pattern, (_, keep) => {
          const replaceBy = `__ph-${this.index}__`;
          this.placeholders.push(keep);
          this.index++;
          return replaceBy;
        });
      }
    };
    _cssScopedPseudoFunctionPrefix = "(:(where|is)\\()?";
    _cssPrefixWithPseudoSelectorFunction = /:(where|is)\(/gi;
    _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
    _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
    _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
    _polyfillHost = "-shadowcsshost";
    _polyfillHostContext = "-shadowcsscontext";
    _parenSuffix = "(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))";
    _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix + "?([^,{]*)", "gim");
    _hostContextPattern = _polyfillHostContext + _parenSuffix + "?([^{]*)";
    _cssColonHostContextReGlobal = new RegExp(`${_cssScopedPseudoFunctionPrefix}(${_hostContextPattern})`, "gim");
    _cssColonHostContextRe = new RegExp(_hostContextPattern, "im");
    _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
    _polyfillHostNoCombinatorOutsidePseudoFunction = new RegExp(`${_polyfillHostNoCombinator}(?![^(]*\\))`, "g");
    _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s,]*)/;
    _shadowDOMSelectorsRe = [
      /::shadow/g,
      /::content/g,
      // Deprecated selectors
      /\/shadow-deep\//g,
      /\/shadow\//g
    ];
    _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
    _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
    _polyfillHostRe = /-shadowcsshost/gim;
    _colonHostRe = /:host/gim;
    _colonHostContextRe = /:host-context/gim;
    _newLinesRe = /\r?\n/g;
    _commentRe = /\/\*[\s\S]*?\*\//g;
    _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=/g;
    COMMENT_PLACEHOLDER = "%COMMENT%";
    _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, "g");
    BLOCK_PLACEHOLDER = "%BLOCK%";
    _ruleRe = new RegExp(`(\\s*(?:${COMMENT_PLACEHOLDER}\\s*)*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))`, "g");
    CONTENT_PAIRS = /* @__PURE__ */ new Map([["{", "}"]]);
    COMMA_IN_PLACEHOLDER = "%COMMA_IN_PLACEHOLDER%";
    SEMI_IN_PLACEHOLDER = "%SEMI_IN_PLACEHOLDER%";
    COLON_IN_PLACEHOLDER = "%COLON_IN_PLACEHOLDER%";
    _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, "g");
    _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, "g");
    _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, "g");
    CssRule = class {
      selector;
      content;
      constructor(selector, content) {
        this.selector = selector;
        this.content = content;
      }
    };
    StringWithEscapedBlocks = class {
      escapedString;
      blocks;
      constructor(escapedString, blocks) {
        this.escapedString = escapedString;
        this.blocks = blocks;
      }
    };
    ESCAPE_IN_STRING_MAP = {
      ";": SEMI_IN_PLACEHOLDER,
      ",": COMMA_IN_PLACEHOLDER,
      ":": COLON_IN_PLACEHOLDER
    };
    (function(OpKind2) {
      OpKind2[OpKind2["ListEnd"] = 0] = "ListEnd";
      OpKind2[OpKind2["Statement"] = 1] = "Statement";
      OpKind2[OpKind2["Variable"] = 2] = "Variable";
      OpKind2[OpKind2["ElementStart"] = 3] = "ElementStart";
      OpKind2[OpKind2["Element"] = 4] = "Element";
      OpKind2[OpKind2["Template"] = 5] = "Template";
      OpKind2[OpKind2["ElementEnd"] = 6] = "ElementEnd";
      OpKind2[OpKind2["ContainerStart"] = 7] = "ContainerStart";
      OpKind2[OpKind2["Container"] = 8] = "Container";
      OpKind2[OpKind2["ContainerEnd"] = 9] = "ContainerEnd";
      OpKind2[OpKind2["DisableBindings"] = 10] = "DisableBindings";
      OpKind2[OpKind2["ConditionalCreate"] = 11] = "ConditionalCreate";
      OpKind2[OpKind2["ConditionalBranchCreate"] = 12] = "ConditionalBranchCreate";
      OpKind2[OpKind2["Conditional"] = 13] = "Conditional";
      OpKind2[OpKind2["EnableBindings"] = 14] = "EnableBindings";
      OpKind2[OpKind2["Text"] = 15] = "Text";
      OpKind2[OpKind2["Listener"] = 16] = "Listener";
      OpKind2[OpKind2["InterpolateText"] = 17] = "InterpolateText";
      OpKind2[OpKind2["Binding"] = 18] = "Binding";
      OpKind2[OpKind2["Property"] = 19] = "Property";
      OpKind2[OpKind2["StyleProp"] = 20] = "StyleProp";
      OpKind2[OpKind2["ClassProp"] = 21] = "ClassProp";
      OpKind2[OpKind2["StyleMap"] = 22] = "StyleMap";
      OpKind2[OpKind2["ClassMap"] = 23] = "ClassMap";
      OpKind2[OpKind2["Advance"] = 24] = "Advance";
      OpKind2[OpKind2["Pipe"] = 25] = "Pipe";
      OpKind2[OpKind2["Attribute"] = 26] = "Attribute";
      OpKind2[OpKind2["ExtractedAttribute"] = 27] = "ExtractedAttribute";
      OpKind2[OpKind2["Defer"] = 28] = "Defer";
      OpKind2[OpKind2["DeferOn"] = 29] = "DeferOn";
      OpKind2[OpKind2["DeferWhen"] = 30] = "DeferWhen";
      OpKind2[OpKind2["I18nMessage"] = 31] = "I18nMessage";
      OpKind2[OpKind2["DomProperty"] = 32] = "DomProperty";
      OpKind2[OpKind2["Namespace"] = 33] = "Namespace";
      OpKind2[OpKind2["ProjectionDef"] = 34] = "ProjectionDef";
      OpKind2[OpKind2["Projection"] = 35] = "Projection";
      OpKind2[OpKind2["RepeaterCreate"] = 36] = "RepeaterCreate";
      OpKind2[OpKind2["Repeater"] = 37] = "Repeater";
      OpKind2[OpKind2["TwoWayProperty"] = 38] = "TwoWayProperty";
      OpKind2[OpKind2["TwoWayListener"] = 39] = "TwoWayListener";
      OpKind2[OpKind2["DeclareLet"] = 40] = "DeclareLet";
      OpKind2[OpKind2["StoreLet"] = 41] = "StoreLet";
      OpKind2[OpKind2["I18nStart"] = 42] = "I18nStart";
      OpKind2[OpKind2["I18n"] = 43] = "I18n";
      OpKind2[OpKind2["I18nEnd"] = 44] = "I18nEnd";
      OpKind2[OpKind2["I18nExpression"] = 45] = "I18nExpression";
      OpKind2[OpKind2["I18nApply"] = 46] = "I18nApply";
      OpKind2[OpKind2["IcuStart"] = 47] = "IcuStart";
      OpKind2[OpKind2["IcuEnd"] = 48] = "IcuEnd";
      OpKind2[OpKind2["IcuPlaceholder"] = 49] = "IcuPlaceholder";
      OpKind2[OpKind2["I18nContext"] = 50] = "I18nContext";
      OpKind2[OpKind2["I18nAttributes"] = 51] = "I18nAttributes";
      OpKind2[OpKind2["SourceLocation"] = 52] = "SourceLocation";
    })(OpKind || (OpKind = {}));
    (function(ExpressionKind2) {
      ExpressionKind2[ExpressionKind2["LexicalRead"] = 0] = "LexicalRead";
      ExpressionKind2[ExpressionKind2["Context"] = 1] = "Context";
      ExpressionKind2[ExpressionKind2["TrackContext"] = 2] = "TrackContext";
      ExpressionKind2[ExpressionKind2["ReadVariable"] = 3] = "ReadVariable";
      ExpressionKind2[ExpressionKind2["NextContext"] = 4] = "NextContext";
      ExpressionKind2[ExpressionKind2["Reference"] = 5] = "Reference";
      ExpressionKind2[ExpressionKind2["StoreLet"] = 6] = "StoreLet";
      ExpressionKind2[ExpressionKind2["ContextLetReference"] = 7] = "ContextLetReference";
      ExpressionKind2[ExpressionKind2["GetCurrentView"] = 8] = "GetCurrentView";
      ExpressionKind2[ExpressionKind2["RestoreView"] = 9] = "RestoreView";
      ExpressionKind2[ExpressionKind2["ResetView"] = 10] = "ResetView";
      ExpressionKind2[ExpressionKind2["PureFunctionExpr"] = 11] = "PureFunctionExpr";
      ExpressionKind2[ExpressionKind2["PureFunctionParameterExpr"] = 12] = "PureFunctionParameterExpr";
      ExpressionKind2[ExpressionKind2["PipeBinding"] = 13] = "PipeBinding";
      ExpressionKind2[ExpressionKind2["PipeBindingVariadic"] = 14] = "PipeBindingVariadic";
      ExpressionKind2[ExpressionKind2["SafePropertyRead"] = 15] = "SafePropertyRead";
      ExpressionKind2[ExpressionKind2["SafeKeyedRead"] = 16] = "SafeKeyedRead";
      ExpressionKind2[ExpressionKind2["SafeInvokeFunction"] = 17] = "SafeInvokeFunction";
      ExpressionKind2[ExpressionKind2["SafeTernaryExpr"] = 18] = "SafeTernaryExpr";
      ExpressionKind2[ExpressionKind2["EmptyExpr"] = 19] = "EmptyExpr";
      ExpressionKind2[ExpressionKind2["AssignTemporaryExpr"] = 20] = "AssignTemporaryExpr";
      ExpressionKind2[ExpressionKind2["ReadTemporaryExpr"] = 21] = "ReadTemporaryExpr";
      ExpressionKind2[ExpressionKind2["SlotLiteralExpr"] = 22] = "SlotLiteralExpr";
      ExpressionKind2[ExpressionKind2["ConditionalCase"] = 23] = "ConditionalCase";
      ExpressionKind2[ExpressionKind2["ConstCollected"] = 24] = "ConstCollected";
      ExpressionKind2[ExpressionKind2["TwoWayBindingSet"] = 25] = "TwoWayBindingSet";
    })(ExpressionKind || (ExpressionKind = {}));
    (function(VariableFlags2) {
      VariableFlags2[VariableFlags2["None"] = 0] = "None";
      VariableFlags2[VariableFlags2["AlwaysInline"] = 1] = "AlwaysInline";
    })(VariableFlags || (VariableFlags = {}));
    (function(SemanticVariableKind2) {
      SemanticVariableKind2[SemanticVariableKind2["Context"] = 0] = "Context";
      SemanticVariableKind2[SemanticVariableKind2["Identifier"] = 1] = "Identifier";
      SemanticVariableKind2[SemanticVariableKind2["SavedView"] = 2] = "SavedView";
      SemanticVariableKind2[SemanticVariableKind2["Alias"] = 3] = "Alias";
    })(SemanticVariableKind || (SemanticVariableKind = {}));
    (function(CompatibilityMode2) {
      CompatibilityMode2[CompatibilityMode2["Normal"] = 0] = "Normal";
      CompatibilityMode2[CompatibilityMode2["TemplateDefinitionBuilder"] = 1] = "TemplateDefinitionBuilder";
    })(CompatibilityMode || (CompatibilityMode = {}));
    (function(BindingKind2) {
      BindingKind2[BindingKind2["Attribute"] = 0] = "Attribute";
      BindingKind2[BindingKind2["ClassName"] = 1] = "ClassName";
      BindingKind2[BindingKind2["StyleProperty"] = 2] = "StyleProperty";
      BindingKind2[BindingKind2["Property"] = 3] = "Property";
      BindingKind2[BindingKind2["Template"] = 4] = "Template";
      BindingKind2[BindingKind2["I18n"] = 5] = "I18n";
      BindingKind2[BindingKind2["LegacyAnimation"] = 6] = "LegacyAnimation";
      BindingKind2[BindingKind2["TwoWayProperty"] = 7] = "TwoWayProperty";
    })(BindingKind || (BindingKind = {}));
    (function(I18nParamResolutionTime2) {
      I18nParamResolutionTime2[I18nParamResolutionTime2["Creation"] = 0] = "Creation";
      I18nParamResolutionTime2[I18nParamResolutionTime2["Postproccessing"] = 1] = "Postproccessing";
    })(I18nParamResolutionTime || (I18nParamResolutionTime = {}));
    (function(I18nExpressionFor2) {
      I18nExpressionFor2[I18nExpressionFor2["I18nText"] = 0] = "I18nText";
      I18nExpressionFor2[I18nExpressionFor2["I18nAttribute"] = 1] = "I18nAttribute";
    })(I18nExpressionFor || (I18nExpressionFor = {}));
    (function(I18nParamValueFlags2) {
      I18nParamValueFlags2[I18nParamValueFlags2["None"] = 0] = "None";
      I18nParamValueFlags2[I18nParamValueFlags2["ElementTag"] = 1] = "ElementTag";
      I18nParamValueFlags2[I18nParamValueFlags2["TemplateTag"] = 2] = "TemplateTag";
      I18nParamValueFlags2[I18nParamValueFlags2["OpenTag"] = 4] = "OpenTag";
      I18nParamValueFlags2[I18nParamValueFlags2["CloseTag"] = 8] = "CloseTag";
      I18nParamValueFlags2[I18nParamValueFlags2["ExpressionIndex"] = 16] = "ExpressionIndex";
    })(I18nParamValueFlags || (I18nParamValueFlags = {}));
    (function(Namespace2) {
      Namespace2[Namespace2["HTML"] = 0] = "HTML";
      Namespace2[Namespace2["SVG"] = 1] = "SVG";
      Namespace2[Namespace2["Math"] = 2] = "Math";
    })(Namespace || (Namespace = {}));
    (function(DeferTriggerKind2) {
      DeferTriggerKind2[DeferTriggerKind2["Idle"] = 0] = "Idle";
      DeferTriggerKind2[DeferTriggerKind2["Immediate"] = 1] = "Immediate";
      DeferTriggerKind2[DeferTriggerKind2["Timer"] = 2] = "Timer";
      DeferTriggerKind2[DeferTriggerKind2["Hover"] = 3] = "Hover";
      DeferTriggerKind2[DeferTriggerKind2["Interaction"] = 4] = "Interaction";
      DeferTriggerKind2[DeferTriggerKind2["Viewport"] = 5] = "Viewport";
      DeferTriggerKind2[DeferTriggerKind2["Never"] = 6] = "Never";
    })(DeferTriggerKind || (DeferTriggerKind = {}));
    (function(I18nContextKind2) {
      I18nContextKind2[I18nContextKind2["RootI18n"] = 0] = "RootI18n";
      I18nContextKind2[I18nContextKind2["Icu"] = 1] = "Icu";
      I18nContextKind2[I18nContextKind2["Attr"] = 2] = "Attr";
    })(I18nContextKind || (I18nContextKind = {}));
    (function(TemplateKind2) {
      TemplateKind2[TemplateKind2["NgTemplate"] = 0] = "NgTemplate";
      TemplateKind2[TemplateKind2["Structural"] = 1] = "Structural";
      TemplateKind2[TemplateKind2["Block"] = 2] = "Block";
    })(TemplateKind || (TemplateKind = {}));
    ConsumesSlot = Symbol("ConsumesSlot");
    DependsOnSlotContext = Symbol("DependsOnSlotContext");
    ConsumesVarsTrait = Symbol("ConsumesVars");
    UsesVarOffset = Symbol("UsesVarOffset");
    TRAIT_CONSUMES_SLOT = {
      [ConsumesSlot]: true,
      numSlotsUsed: 1
    };
    TRAIT_DEPENDS_ON_SLOT_CONTEXT = {
      [DependsOnSlotContext]: true
    };
    TRAIT_CONSUMES_VARS = {
      [ConsumesVarsTrait]: true
    };
    NEW_OP = {
      debugListId: null,
      prev: null,
      next: null
    };
    Interpolation2 = class {
      strings;
      expressions;
      i18nPlaceholders;
      constructor(strings, expressions, i18nPlaceholders) {
        this.strings = strings;
        this.expressions = expressions;
        this.i18nPlaceholders = i18nPlaceholders;
        if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {
          throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);
        }
      }
    };
    ExpressionBase = class extends Expression {
      constructor(sourceSpan = null) {
        super(null, sourceSpan);
      }
    };
    LexicalReadExpr = class _LexicalReadExpr extends ExpressionBase {
      name;
      kind = ExpressionKind.LexicalRead;
      constructor(name) {
        super();
        this.name = name;
      }
      visitExpression(visitor, context2) {
      }
      isEquivalent(other) {
        return this.name === other.name;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _LexicalReadExpr(this.name);
      }
    };
    ReferenceExpr = class _ReferenceExpr extends ExpressionBase {
      target;
      targetSlot;
      offset;
      kind = ExpressionKind.Reference;
      constructor(target, targetSlot, offset) {
        super();
        this.target = target;
        this.targetSlot = targetSlot;
        this.offset = offset;
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _ReferenceExpr && e.target === this.target;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _ReferenceExpr(this.target, this.targetSlot, this.offset);
      }
    };
    StoreLetExpr = class _StoreLetExpr extends ExpressionBase {
      target;
      value;
      sourceSpan;
      kind = ExpressionKind.StoreLet;
      [ConsumesVarsTrait] = true;
      [DependsOnSlotContext] = true;
      constructor(target, value, sourceSpan) {
        super();
        this.target = target;
        this.value = value;
        this.sourceSpan = sourceSpan;
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _StoreLetExpr && e.target === this.target && e.value.isEquivalent(this.value);
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.value = transformExpressionsInExpression(this.value, transform2, flags);
      }
      clone() {
        return new _StoreLetExpr(this.target, this.value, this.sourceSpan);
      }
    };
    ContextLetReferenceExpr = class _ContextLetReferenceExpr extends ExpressionBase {
      target;
      targetSlot;
      kind = ExpressionKind.ContextLetReference;
      constructor(target, targetSlot) {
        super();
        this.target = target;
        this.targetSlot = targetSlot;
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _ContextLetReferenceExpr && e.target === this.target;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _ContextLetReferenceExpr(this.target, this.targetSlot);
      }
    };
    ContextExpr = class _ContextExpr extends ExpressionBase {
      view;
      kind = ExpressionKind.Context;
      constructor(view) {
        super();
        this.view = view;
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _ContextExpr && e.view === this.view;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _ContextExpr(this.view);
      }
    };
    TrackContextExpr = class _TrackContextExpr extends ExpressionBase {
      view;
      kind = ExpressionKind.TrackContext;
      constructor(view) {
        super();
        this.view = view;
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _TrackContextExpr && e.view === this.view;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _TrackContextExpr(this.view);
      }
    };
    NextContextExpr = class _NextContextExpr extends ExpressionBase {
      kind = ExpressionKind.NextContext;
      steps = 1;
      constructor() {
        super();
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _NextContextExpr && e.steps === this.steps;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        const expr = new _NextContextExpr();
        expr.steps = this.steps;
        return expr;
      }
    };
    GetCurrentViewExpr = class _GetCurrentViewExpr extends ExpressionBase {
      kind = ExpressionKind.GetCurrentView;
      constructor() {
        super();
      }
      visitExpression() {
      }
      isEquivalent(e) {
        return e instanceof _GetCurrentViewExpr;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _GetCurrentViewExpr();
      }
    };
    RestoreViewExpr = class _RestoreViewExpr extends ExpressionBase {
      view;
      kind = ExpressionKind.RestoreView;
      constructor(view) {
        super();
        this.view = view;
      }
      visitExpression(visitor, context2) {
        if (typeof this.view !== "number") {
          this.view.visitExpression(visitor, context2);
        }
      }
      isEquivalent(e) {
        if (!(e instanceof _RestoreViewExpr) || typeof e.view !== typeof this.view) {
          return false;
        }
        if (typeof this.view === "number") {
          return this.view === e.view;
        } else {
          return this.view.isEquivalent(e.view);
        }
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        if (typeof this.view !== "number") {
          this.view = transformExpressionsInExpression(this.view, transform2, flags);
        }
      }
      clone() {
        return new _RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);
      }
    };
    ResetViewExpr = class _ResetViewExpr extends ExpressionBase {
      expr;
      kind = ExpressionKind.ResetView;
      constructor(expr) {
        super();
        this.expr = expr;
      }
      visitExpression(visitor, context2) {
        this.expr.visitExpression(visitor, context2);
      }
      isEquivalent(e) {
        return e instanceof _ResetViewExpr && this.expr.isEquivalent(e.expr);
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
      }
      clone() {
        return new _ResetViewExpr(this.expr.clone());
      }
    };
    TwoWayBindingSetExpr = class _TwoWayBindingSetExpr extends ExpressionBase {
      target;
      value;
      kind = ExpressionKind.TwoWayBindingSet;
      constructor(target, value) {
        super();
        this.target = target;
        this.value = value;
      }
      visitExpression(visitor, context2) {
        this.target.visitExpression(visitor, context2);
        this.value.visitExpression(visitor, context2);
      }
      isEquivalent(other) {
        return this.target.isEquivalent(other.target) && this.value.isEquivalent(other.value);
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.target = transformExpressionsInExpression(this.target, transform2, flags);
        this.value = transformExpressionsInExpression(this.value, transform2, flags);
      }
      clone() {
        return new _TwoWayBindingSetExpr(this.target, this.value);
      }
    };
    ReadVariableExpr = class _ReadVariableExpr extends ExpressionBase {
      xref;
      kind = ExpressionKind.ReadVariable;
      name = null;
      constructor(xref) {
        super();
        this.xref = xref;
      }
      visitExpression() {
      }
      isEquivalent(other) {
        return other instanceof _ReadVariableExpr && other.xref === this.xref;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions() {
      }
      clone() {
        const expr = new _ReadVariableExpr(this.xref);
        expr.name = this.name;
        return expr;
      }
    };
    PureFunctionExpr = class _PureFunctionExpr extends ExpressionBase {
      kind = ExpressionKind.PureFunctionExpr;
      [ConsumesVarsTrait] = true;
      [UsesVarOffset] = true;
      varOffset = null;
      /**
       * The expression which should be memoized as a pure computation.
       *
       * This expression contains internal `PureFunctionParameterExpr`s, which are placeholders for the
       * positional argument expressions in `args.
       */
      body;
      /**
       * Positional arguments to the pure function which will memoize the `body` expression, which act
       * as memoization keys.
       */
      args;
      /**
       * Once extracted to the `ConstantPool`, a reference to the function which defines the computation
       * of `body`.
       */
      fn = null;
      constructor(expression, args) {
        super();
        this.body = expression;
        this.args = args;
      }
      visitExpression(visitor, context2) {
        this.body?.visitExpression(visitor, context2);
        for (const arg of this.args) {
          arg.visitExpression(visitor, context2);
        }
      }
      isEquivalent(other) {
        if (!(other instanceof _PureFunctionExpr) || other.args.length !== this.args.length) {
          return false;
        }
        return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) && other.args.every((arg, idx) => arg.isEquivalent(this.args[idx]));
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        if (this.body !== null) {
          this.body = transformExpressionsInExpression(this.body, transform2, flags | VisitorContextFlag.InChildOperation);
        } else if (this.fn !== null) {
          this.fn = transformExpressionsInExpression(this.fn, transform2, flags);
        }
        for (let i = 0; i < this.args.length; i++) {
          this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
        }
      }
      clone() {
        const expr = new _PureFunctionExpr(this.body?.clone() ?? null, this.args.map((arg) => arg.clone()));
        expr.fn = this.fn?.clone() ?? null;
        expr.varOffset = this.varOffset;
        return expr;
      }
    };
    PureFunctionParameterExpr = class _PureFunctionParameterExpr extends ExpressionBase {
      index;
      kind = ExpressionKind.PureFunctionParameterExpr;
      constructor(index) {
        super();
        this.index = index;
      }
      visitExpression() {
      }
      isEquivalent(other) {
        return other instanceof _PureFunctionParameterExpr && other.index === this.index;
      }
      isConstant() {
        return true;
      }
      transformInternalExpressions() {
      }
      clone() {
        return new _PureFunctionParameterExpr(this.index);
      }
    };
    PipeBindingExpr = class _PipeBindingExpr extends ExpressionBase {
      target;
      targetSlot;
      name;
      args;
      kind = ExpressionKind.PipeBinding;
      [ConsumesVarsTrait] = true;
      [UsesVarOffset] = true;
      varOffset = null;
      constructor(target, targetSlot, name, args) {
        super();
        this.target = target;
        this.targetSlot = targetSlot;
        this.name = name;
        this.args = args;
      }
      visitExpression(visitor, context2) {
        for (const arg of this.args) {
          arg.visitExpression(visitor, context2);
        }
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        for (let idx = 0; idx < this.args.length; idx++) {
          this.args[idx] = transformExpressionsInExpression(this.args[idx], transform2, flags);
        }
      }
      clone() {
        const r = new _PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map((a) => a.clone()));
        r.varOffset = this.varOffset;
        return r;
      }
    };
    PipeBindingVariadicExpr = class _PipeBindingVariadicExpr extends ExpressionBase {
      target;
      targetSlot;
      name;
      args;
      numArgs;
      kind = ExpressionKind.PipeBindingVariadic;
      [ConsumesVarsTrait] = true;
      [UsesVarOffset] = true;
      varOffset = null;
      constructor(target, targetSlot, name, args, numArgs) {
        super();
        this.target = target;
        this.targetSlot = targetSlot;
        this.name = name;
        this.args = args;
        this.numArgs = numArgs;
      }
      visitExpression(visitor, context2) {
        this.args.visitExpression(visitor, context2);
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.args = transformExpressionsInExpression(this.args, transform2, flags);
      }
      clone() {
        const r = new _PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);
        r.varOffset = this.varOffset;
        return r;
      }
    };
    SafePropertyReadExpr = class _SafePropertyReadExpr extends ExpressionBase {
      receiver;
      name;
      kind = ExpressionKind.SafePropertyRead;
      constructor(receiver, name) {
        super();
        this.receiver = receiver;
        this.name = name;
      }
      // An alias for name, which allows other logic to handle property reads and keyed reads together.
      get index() {
        return this.name;
      }
      visitExpression(visitor, context2) {
        this.receiver.visitExpression(visitor, context2);
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
      }
      clone() {
        return new _SafePropertyReadExpr(this.receiver.clone(), this.name);
      }
    };
    SafeKeyedReadExpr = class _SafeKeyedReadExpr extends ExpressionBase {
      receiver;
      index;
      kind = ExpressionKind.SafeKeyedRead;
      constructor(receiver, index, sourceSpan) {
        super(sourceSpan);
        this.receiver = receiver;
        this.index = index;
      }
      visitExpression(visitor, context2) {
        this.receiver.visitExpression(visitor, context2);
        this.index.visitExpression(visitor, context2);
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
        this.index = transformExpressionsInExpression(this.index, transform2, flags);
      }
      clone() {
        return new _SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);
      }
    };
    SafeInvokeFunctionExpr = class _SafeInvokeFunctionExpr extends ExpressionBase {
      receiver;
      args;
      kind = ExpressionKind.SafeInvokeFunction;
      constructor(receiver, args) {
        super();
        this.receiver = receiver;
        this.args = args;
      }
      visitExpression(visitor, context2) {
        this.receiver.visitExpression(visitor, context2);
        for (const a of this.args) {
          a.visitExpression(visitor, context2);
        }
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
        for (let i = 0; i < this.args.length; i++) {
          this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
        }
      }
      clone() {
        return new _SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map((a) => a.clone()));
      }
    };
    SafeTernaryExpr = class _SafeTernaryExpr extends ExpressionBase {
      guard;
      expr;
      kind = ExpressionKind.SafeTernaryExpr;
      constructor(guard, expr) {
        super();
        this.guard = guard;
        this.expr = expr;
      }
      visitExpression(visitor, context2) {
        this.guard.visitExpression(visitor, context2);
        this.expr.visitExpression(visitor, context2);
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.guard = transformExpressionsInExpression(this.guard, transform2, flags);
        this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
      }
      clone() {
        return new _SafeTernaryExpr(this.guard.clone(), this.expr.clone());
      }
    };
    EmptyExpr2 = class _EmptyExpr extends ExpressionBase {
      kind = ExpressionKind.EmptyExpr;
      visitExpression(visitor, context2) {
      }
      isEquivalent(e) {
        return e instanceof _EmptyExpr;
      }
      isConstant() {
        return true;
      }
      clone() {
        return new _EmptyExpr();
      }
      transformInternalExpressions() {
      }
    };
    AssignTemporaryExpr = class _AssignTemporaryExpr extends ExpressionBase {
      expr;
      xref;
      kind = ExpressionKind.AssignTemporaryExpr;
      name = null;
      constructor(expr, xref) {
        super();
        this.expr = expr;
        this.xref = xref;
      }
      visitExpression(visitor, context2) {
        this.expr.visitExpression(visitor, context2);
      }
      isEquivalent() {
        return false;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
        this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
      }
      clone() {
        const a = new _AssignTemporaryExpr(this.expr.clone(), this.xref);
        a.name = this.name;
        return a;
      }
    };
    ReadTemporaryExpr = class _ReadTemporaryExpr extends ExpressionBase {
      xref;
      kind = ExpressionKind.ReadTemporaryExpr;
      name = null;
      constructor(xref) {
        super();
        this.xref = xref;
      }
      visitExpression(visitor, context2) {
      }
      isEquivalent() {
        return this.xref === this.xref;
      }
      isConstant() {
        return false;
      }
      transformInternalExpressions(transform2, flags) {
      }
      clone() {
        const r = new _ReadTemporaryExpr(this.xref);
        r.name = this.name;
        return r;
      }
    };
    SlotLiteralExpr = class _SlotLiteralExpr extends ExpressionBase {
      slot;
      kind = ExpressionKind.SlotLiteralExpr;
      constructor(slot) {
        super();
        this.slot = slot;
      }
      visitExpression(visitor, context2) {
      }
      isEquivalent(e) {
        return e instanceof _SlotLiteralExpr && e.slot === this.slot;
      }
      isConstant() {
        return true;
      }
      clone() {
        return new _SlotLiteralExpr(this.slot);
      }
      transformInternalExpressions() {
      }
    };
    ConditionalCaseExpr = class _ConditionalCaseExpr extends ExpressionBase {
      expr;
      target;
      targetSlot;
      alias;
      kind = ExpressionKind.ConditionalCase;
      /**
       * Create an expression for one branch of a conditional.
       * @param expr The expression to be tested for this case. Might be null, as in an `else` case.
       * @param target The Xref of the view to be displayed if this condition is true.
       */
      constructor(expr, target, targetSlot, alias = null) {
        super();
        this.expr = expr;
        this.target = target;
        this.targetSlot = targetSlot;
        this.alias = alias;
      }
      visitExpression(visitor, context2) {
        if (this.expr !== null) {
          this.expr.visitExpression(visitor, context2);
        }
      }
      isEquivalent(e) {
        return e instanceof _ConditionalCaseExpr && e.expr === this.expr;
      }
      isConstant() {
        return true;
      }
      clone() {
        return new _ConditionalCaseExpr(this.expr, this.target, this.targetSlot);
      }
      transformInternalExpressions(transform2, flags) {
        if (this.expr !== null) {
          this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
        }
      }
    };
    ConstCollectedExpr = class _ConstCollectedExpr extends ExpressionBase {
      expr;
      kind = ExpressionKind.ConstCollected;
      constructor(expr) {
        super();
        this.expr = expr;
      }
      transformInternalExpressions(transform2, flags) {
        this.expr = transform2(this.expr, flags);
      }
      visitExpression(visitor, context2) {
        this.expr.visitExpression(visitor, context2);
      }
      isEquivalent(e) {
        if (!(e instanceof _ConstCollectedExpr)) {
          return false;
        }
        return this.expr.isEquivalent(e.expr);
      }
      isConstant() {
        return this.expr.isConstant();
      }
      clone() {
        return new _ConstCollectedExpr(this.expr);
      }
    };
    (function(VisitorContextFlag2) {
      VisitorContextFlag2[VisitorContextFlag2["None"] = 0] = "None";
      VisitorContextFlag2[VisitorContextFlag2["InChildOperation"] = 1] = "InChildOperation";
    })(VisitorContextFlag || (VisitorContextFlag = {}));
    OpList = class _OpList {
      static nextListId = 0;
      /**
       * Debug ID of this `OpList` instance.
       */
      debugListId = _OpList.nextListId++;
      // OpList uses static head/tail nodes of a special `ListEnd` type.
      // This avoids the need for special casing of the first and last list
      // elements in all list operations.
      head = {
        kind: OpKind.ListEnd,
        next: null,
        prev: null,
        debugListId: this.debugListId
      };
      tail = {
        kind: OpKind.ListEnd,
        next: null,
        prev: null,
        debugListId: this.debugListId
      };
      constructor() {
        this.head.next = this.tail;
        this.tail.prev = this.head;
      }
      /**
       * Push a new operation to the tail of the list.
       */
      push(op) {
        if (Array.isArray(op)) {
          for (const o of op) {
            this.push(o);
          }
          return;
        }
        _OpList.assertIsNotEnd(op);
        _OpList.assertIsUnowned(op);
        op.debugListId = this.debugListId;
        const oldLast = this.tail.prev;
        op.prev = oldLast;
        oldLast.next = op;
        op.next = this.tail;
        this.tail.prev = op;
      }
      /**
       * Prepend one or more nodes to the start of the list.
       */
      prepend(ops) {
        if (ops.length === 0) {
          return;
        }
        for (const op of ops) {
          _OpList.assertIsNotEnd(op);
          _OpList.assertIsUnowned(op);
          op.debugListId = this.debugListId;
        }
        const first2 = this.head.next;
        let prev = this.head;
        for (const op of ops) {
          prev.next = op;
          op.prev = prev;
          prev = op;
        }
        prev.next = first2;
        first2.prev = prev;
      }
      /**
       * `OpList` is iterable via the iteration protocol.
       *
       * It's safe to mutate the part of the list that has already been returned by the iterator, up to
       * and including the last operation returned. Mutations beyond that point _may_ be safe, but may
       * also corrupt the iteration position and should be avoided.
       */
      *[Symbol.iterator]() {
        let current = this.head.next;
        while (current !== this.tail) {
          _OpList.assertIsOwned(current, this.debugListId);
          const next = current.next;
          yield current;
          current = next;
        }
      }
      *reversed() {
        let current = this.tail.prev;
        while (current !== this.head) {
          _OpList.assertIsOwned(current, this.debugListId);
          const prev = current.prev;
          yield current;
          current = prev;
        }
      }
      /**
       * Replace `oldOp` with `newOp` in the list.
       */
      static replace(oldOp, newOp) {
        _OpList.assertIsNotEnd(oldOp);
        _OpList.assertIsNotEnd(newOp);
        _OpList.assertIsOwned(oldOp);
        _OpList.assertIsUnowned(newOp);
        newOp.debugListId = oldOp.debugListId;
        if (oldOp.prev !== null) {
          oldOp.prev.next = newOp;
          newOp.prev = oldOp.prev;
        }
        if (oldOp.next !== null) {
          oldOp.next.prev = newOp;
          newOp.next = oldOp.next;
        }
        oldOp.debugListId = null;
        oldOp.prev = null;
        oldOp.next = null;
      }
      /**
       * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).
       */
      static replaceWithMany(oldOp, newOps) {
        if (newOps.length === 0) {
          _OpList.remove(oldOp);
          return;
        }
        _OpList.assertIsNotEnd(oldOp);
        _OpList.assertIsOwned(oldOp);
        const listId = oldOp.debugListId;
        oldOp.debugListId = null;
        for (const newOp of newOps) {
          _OpList.assertIsNotEnd(newOp);
          _OpList.assertIsUnowned(newOp);
        }
        const { prev: oldPrev, next: oldNext } = oldOp;
        oldOp.prev = null;
        oldOp.next = null;
        let prev = oldPrev;
        for (const newOp of newOps) {
          _OpList.assertIsUnowned(newOp);
          newOp.debugListId = listId;
          prev.next = newOp;
          newOp.prev = prev;
          newOp.next = null;
          prev = newOp;
        }
        const first2 = newOps[0];
        const last3 = prev;
        if (oldPrev !== null) {
          oldPrev.next = first2;
          first2.prev = oldPrev;
        }
        if (oldNext !== null) {
          oldNext.prev = last3;
          last3.next = oldNext;
        }
      }
      /**
       * Remove the given node from the list which contains it.
       */
      static remove(op) {
        _OpList.assertIsNotEnd(op);
        _OpList.assertIsOwned(op);
        op.prev.next = op.next;
        op.next.prev = op.prev;
        op.debugListId = null;
        op.prev = null;
        op.next = null;
      }
      /**
       * Insert `op` before `target`.
       */
      static insertBefore(op, target) {
        if (Array.isArray(op)) {
          for (const o of op) {
            _OpList.insertBefore(o, target);
          }
          return;
        }
        _OpList.assertIsOwned(target);
        if (target.prev === null) {
          throw new Error(`AssertionError: illegal operation on list start`);
        }
        _OpList.assertIsNotEnd(op);
        _OpList.assertIsUnowned(op);
        op.debugListId = target.debugListId;
        op.prev = null;
        target.prev.next = op;
        op.prev = target.prev;
        op.next = target;
        target.prev = op;
      }
      /**
       * Insert `op` after `target`.
       */
      static insertAfter(op, target) {
        _OpList.assertIsOwned(target);
        if (target.next === null) {
          throw new Error(`AssertionError: illegal operation on list end`);
        }
        _OpList.assertIsNotEnd(op);
        _OpList.assertIsUnowned(op);
        op.debugListId = target.debugListId;
        target.next.prev = op;
        op.next = target.next;
        op.prev = target;
        target.next = op;
      }
      /**
       * Asserts that `op` does not currently belong to a list.
       */
      static assertIsUnowned(op) {
        if (op.debugListId !== null) {
          throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op.kind]}`);
        }
      }
      /**
       * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to
       * specifically belong to that list.
       */
      static assertIsOwned(op, byList) {
        if (op.debugListId === null) {
          throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op.kind]}`);
        } else if (byList !== void 0 && op.debugListId !== byList) {
          throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op.debugListId})`);
        }
      }
      /**
       * Asserts that `op` is not a special `ListEnd` node.
       */
      static assertIsNotEnd(op) {
        if (op.kind === OpKind.ListEnd) {
          throw new Error(`AssertionError: illegal operation on list head or tail`);
        }
      }
    };
    SlotHandle = class {
      slot = null;
    };
    elementContainerOpKinds = /* @__PURE__ */ new Set([
      OpKind.Element,
      OpKind.ElementStart,
      OpKind.Container,
      OpKind.ContainerStart,
      OpKind.Template,
      OpKind.RepeaterCreate,
      OpKind.ConditionalCreate,
      OpKind.ConditionalBranchCreate
    ]);
    CTX_REF = "CTX_REF_MARKER";
    (function(CompilationJobKind2) {
      CompilationJobKind2[CompilationJobKind2["Tmpl"] = 0] = "Tmpl";
      CompilationJobKind2[CompilationJobKind2["Host"] = 1] = "Host";
      CompilationJobKind2[CompilationJobKind2["Both"] = 2] = "Both";
    })(CompilationJobKind || (CompilationJobKind = {}));
    (function(TemplateCompilationMode2) {
      TemplateCompilationMode2[TemplateCompilationMode2["Full"] = 0] = "Full";
      TemplateCompilationMode2[TemplateCompilationMode2["DomOnly"] = 1] = "DomOnly";
    })(TemplateCompilationMode || (TemplateCompilationMode = {}));
    CompilationJob = class {
      componentName;
      pool;
      compatibility;
      mode;
      constructor(componentName, pool, compatibility, mode) {
        this.componentName = componentName;
        this.pool = pool;
        this.compatibility = compatibility;
        this.mode = mode;
      }
      kind = CompilationJobKind.Both;
      /**
       * Generate a new unique `ir.XrefId` in this job.
       */
      allocateXrefId() {
        return this.nextXrefId++;
      }
      /**
       * Tracks the next `ir.XrefId` which can be assigned as template structures are ingested.
       */
      nextXrefId = 0;
    };
    ComponentCompilationJob = class extends CompilationJob {
      relativeContextFilePath;
      i18nUseExternalIds;
      deferMeta;
      allDeferrableDepsFn;
      relativeTemplatePath;
      enableDebugLocations;
      constructor(componentName, pool, compatibility, mode, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations) {
        super(componentName, pool, compatibility, mode);
        this.relativeContextFilePath = relativeContextFilePath;
        this.i18nUseExternalIds = i18nUseExternalIds;
        this.deferMeta = deferMeta;
        this.allDeferrableDepsFn = allDeferrableDepsFn;
        this.relativeTemplatePath = relativeTemplatePath;
        this.enableDebugLocations = enableDebugLocations;
        this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);
        this.views.set(this.root.xref, this.root);
      }
      kind = CompilationJobKind.Tmpl;
      fnSuffix = "Template";
      /**
       * The root view, representing the component's template.
       */
      root;
      views = /* @__PURE__ */ new Map();
      /**
       * Causes ngContentSelectors to be emitted, for content projection slots in the view. Possibly a
       * reference into the constant pool.
       */
      contentSelectors = null;
      /**
       * Add a `ViewCompilation` for a new embedded view to this compilation.
       */
      allocateView(parent) {
        const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);
        this.views.set(view.xref, view);
        return view;
      }
      get units() {
        return this.views.values();
      }
      /**
       * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.
       */
      addConst(newConst, initializers) {
        for (let idx2 = 0; idx2 < this.consts.length; idx2++) {
          if (this.consts[idx2].isEquivalent(newConst)) {
            return idx2;
          }
        }
        const idx = this.consts.length;
        this.consts.push(newConst);
        if (initializers) {
          this.constsInitializers.push(...initializers);
        }
        return idx;
      }
      /**
       * Constant expressions used by operations within this component's compilation.
       *
       * This will eventually become the `consts` array in the component definition.
       */
      consts = [];
      /**
       * Initialization statements needed to set up the consts.
       */
      constsInitializers = [];
    };
    CompilationUnit = class {
      xref;
      constructor(xref) {
        this.xref = xref;
      }
      /**
       * List of creation operations for this view.
       *
       * Creation operations may internally contain other operations, including update operations.
       */
      create = new OpList();
      /**
       * List of update operations for this view.
       */
      update = new OpList();
      /**
       * Name of the function which will be generated for this unit.
       *
       * May be `null` if not yet determined.
       */
      fnName = null;
      /**
       * Number of variable slots used within this view, or `null` if variables have not yet been
       * counted.
       */
      vars = null;
      /**
       * Iterate over all `ir.Op`s within this view.
       *
       * Some operations may have child operations, which this iterator will visit.
       */
      *ops() {
        for (const op of this.create) {
          yield op;
          if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
            for (const listenerOp of op.handlerOps) {
              yield listenerOp;
            }
          } else if (op.kind === OpKind.RepeaterCreate && op.trackByOps !== null) {
            for (const trackOp of op.trackByOps) {
              yield trackOp;
            }
          }
        }
        for (const op of this.update) {
          yield op;
        }
      }
    };
    ViewCompilationUnit = class extends CompilationUnit {
      job;
      parent;
      constructor(job, xref, parent) {
        super(xref);
        this.job = job;
        this.parent = parent;
      }
      /**
       * Map of declared variables available within this view to the property on the context object
       * which they alias.
       */
      contextVariables = /* @__PURE__ */ new Map();
      /**
       * Set of aliases available within this view. An alias is a variable whose provided expression is
       * inlined at every location it is used. It may also depend on context variables, by name.
       */
      aliases = /* @__PURE__ */ new Set();
      /**
       * Number of declaration slots used within this view, or `null` if slots have not yet been
       * allocated.
       */
      decls = null;
    };
    HostBindingCompilationJob = class extends CompilationJob {
      constructor(componentName, pool, compatibility, mode) {
        super(componentName, pool, compatibility, mode);
        this.root = new HostBindingCompilationUnit(this);
      }
      kind = CompilationJobKind.Host;
      fnSuffix = "HostBindings";
      root;
      get units() {
        return [this.root];
      }
    };
    HostBindingCompilationUnit = class extends CompilationUnit {
      job;
      constructor(job) {
        super(0);
        this.job = job;
      }
      /**
       * Much like an element can have attributes, so can a host binding function.
       */
      attributes = null;
    };
    CHAIN_COMPATIBILITY = /* @__PURE__ */ new Map([
      [Identifiers.attribute, Identifiers.attribute],
      [Identifiers.classProp, Identifiers.classProp],
      [Identifiers.element, Identifiers.element],
      [Identifiers.elementContainer, Identifiers.elementContainer],
      [Identifiers.elementContainerEnd, Identifiers.elementContainerEnd],
      [Identifiers.elementContainerStart, Identifiers.elementContainerStart],
      [Identifiers.elementEnd, Identifiers.elementEnd],
      [Identifiers.elementStart, Identifiers.elementStart],
      [Identifiers.domProperty, Identifiers.domProperty],
      [Identifiers.i18nExp, Identifiers.i18nExp],
      [Identifiers.listener, Identifiers.listener],
      [Identifiers.listener, Identifiers.listener],
      [Identifiers.property, Identifiers.property],
      [Identifiers.styleProp, Identifiers.styleProp],
      [Identifiers.syntheticHostListener, Identifiers.syntheticHostListener],
      [Identifiers.syntheticHostProperty, Identifiers.syntheticHostProperty],
      [Identifiers.templateCreate, Identifiers.templateCreate],
      [Identifiers.twoWayProperty, Identifiers.twoWayProperty],
      [Identifiers.twoWayListener, Identifiers.twoWayListener],
      [Identifiers.declareLet, Identifiers.declareLet],
      [Identifiers.conditionalCreate, Identifiers.conditionalBranchCreate],
      [Identifiers.conditionalBranchCreate, Identifiers.conditionalBranchCreate],
      [Identifiers.domElement, Identifiers.domElement],
      [Identifiers.domElementStart, Identifiers.domElementStart],
      [Identifiers.domElementEnd, Identifiers.domElementEnd],
      [Identifiers.domElementContainer, Identifiers.domElementContainer],
      [Identifiers.domElementContainerStart, Identifiers.domElementContainerStart],
      [Identifiers.domElementContainerEnd, Identifiers.domElementContainerEnd],
      [Identifiers.domListener, Identifiers.domListener],
      [Identifiers.domTemplate, Identifiers.domTemplate]
    ]);
    MAX_CHAIN_LENGTH = 256;
    BINARY_OPERATORS = /* @__PURE__ */ new Map([
      ["&&", BinaryOperator.And],
      [">", BinaryOperator.Bigger],
      [">=", BinaryOperator.BiggerEquals],
      ["|", BinaryOperator.BitwiseOr],
      ["&", BinaryOperator.BitwiseAnd],
      ["/", BinaryOperator.Divide],
      ["=", BinaryOperator.Assign],
      ["==", BinaryOperator.Equals],
      ["===", BinaryOperator.Identical],
      ["<", BinaryOperator.Lower],
      ["<=", BinaryOperator.LowerEquals],
      ["-", BinaryOperator.Minus],
      ["%", BinaryOperator.Modulo],
      ["**", BinaryOperator.Exponentiation],
      ["*", BinaryOperator.Multiply],
      ["!=", BinaryOperator.NotEquals],
      ["!==", BinaryOperator.NotIdentical],
      ["??", BinaryOperator.NullishCoalesce],
      ["||", BinaryOperator.Or],
      ["+", BinaryOperator.Plus],
      ["in", BinaryOperator.In],
      ["+=", BinaryOperator.AdditionAssignment],
      ["-=", BinaryOperator.SubtractionAssignment],
      ["*=", BinaryOperator.MultiplicationAssignment],
      ["/=", BinaryOperator.DivisionAssignment],
      ["%=", BinaryOperator.RemainderAssignment],
      ["**=", BinaryOperator.ExponentiationAssignment],
      ["&&=", BinaryOperator.AndAssignment],
      ["||=", BinaryOperator.OrAssignment],
      ["??=", BinaryOperator.NullishCoalesceAssignment]
    ]);
    FLYWEIGHT_ARRAY = Object.freeze([]);
    ElementAttributes = class {
      compatibility;
      known = /* @__PURE__ */ new Map();
      byKind = /* @__PURE__ */ new Map();
      propertyBindings = null;
      projectAs = null;
      get attributes() {
        return this.byKind.get(BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;
      }
      get classes() {
        return this.byKind.get(BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;
      }
      get styles() {
        return this.byKind.get(BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;
      }
      get bindings() {
        return this.propertyBindings ?? FLYWEIGHT_ARRAY;
      }
      get template() {
        return this.byKind.get(BindingKind.Template) ?? FLYWEIGHT_ARRAY;
      }
      get i18n() {
        return this.byKind.get(BindingKind.I18n) ?? FLYWEIGHT_ARRAY;
      }
      constructor(compatibility) {
        this.compatibility = compatibility;
      }
      isKnown(kind, name) {
        const nameToValue = this.known.get(kind) ?? /* @__PURE__ */ new Set();
        this.known.set(kind, nameToValue);
        if (nameToValue.has(name)) {
          return true;
        }
        nameToValue.add(name);
        return false;
      }
      add(kind, name, value, namespace, trustedValueFn) {
        const allowDuplicates = this.compatibility === CompatibilityMode.TemplateDefinitionBuilder && (kind === BindingKind.Attribute || kind === BindingKind.ClassName || kind === BindingKind.StyleProperty);
        if (!allowDuplicates && this.isKnown(kind, name)) {
          return;
        }
        if (name === "ngProjectAs") {
          if (value === null || !(value instanceof LiteralExpr) || value.value == null || typeof value.value?.toString() !== "string") {
            throw Error("ngProjectAs must have a string literal value");
          }
          this.projectAs = value.value.toString();
        }
        const array = this.arrayFor(kind);
        array.push(...getAttributeNameLiterals(namespace, name));
        if (kind === BindingKind.Attribute || kind === BindingKind.StyleProperty) {
          if (value === null) {
            throw Error("Attribute, i18n attribute, & style element attributes must have a value");
          }
          if (trustedValueFn !== null) {
            if (!isStringLiteral(value)) {
              throw Error("AssertionError: extracted attribute value should be string literal");
            }
            array.push(taggedTemplate(trustedValueFn, new TemplateLiteralExpr([new TemplateLiteralElementExpr(value.value)], []), void 0, value.sourceSpan));
          } else {
            array.push(value);
          }
        }
      }
      arrayFor(kind) {
        if (kind === BindingKind.Property || kind === BindingKind.TwoWayProperty) {
          this.propertyBindings ??= [];
          return this.propertyBindings;
        } else {
          if (!this.byKind.has(kind)) {
            this.byKind.set(kind, []);
          }
          return this.byKind.get(kind);
        }
      }
    };
    Scope$1 = class Scope {
      targets = /* @__PURE__ */ new Map();
    };
    REPLACEMENTS = /* @__PURE__ */ new Map([
      [OpKind.ElementEnd, [OpKind.ElementStart, OpKind.Element]],
      [OpKind.ContainerEnd, [OpKind.ContainerStart, OpKind.Container]],
      [OpKind.I18nEnd, [OpKind.I18nStart, OpKind.I18n]]
    ]);
    IGNORED_OP_KINDS = /* @__PURE__ */ new Set([OpKind.Pipe]);
    ESCAPE$1 = "\uFFFD";
    ELEMENT_MARKER2 = "#";
    TEMPLATE_MARKER = "*";
    TAG_CLOSE_MARKER = "/";
    CONTEXT_MARKER = ":";
    LIST_START_MARKER = "[";
    LIST_END_MARKER = "]";
    LIST_DELIMITER = "|";
    STYLE_DOT = "style.";
    CLASS_DOT = "class.";
    STYLE_BANG = "style!";
    CLASS_BANG = "class!";
    BANG_IMPORTANT = "!important";
    IcuSerializerVisitor = class {
      visitText(text2) {
        return text2.value;
      }
      visitContainer(container) {
        return container.children.map((child) => child.visit(this)).join("");
      }
      visitIcu(icu) {
        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
        const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
        return result;
      }
      visitTagPlaceholder(ph) {
        return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
      }
      visitPlaceholder(ph) {
        return this.formatPh(ph.name);
      }
      visitBlockPlaceholder(ph) {
        return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
      }
      visitIcuPlaceholder(ph, context2) {
        return this.formatPh(ph.name);
      }
      formatPh(value) {
        return `{${formatI18nPlaceholderName(
          value,
          /* useCamelCase */
          false
        )}}`;
      }
    };
    serializer = new IcuSerializerVisitor();
    NodeWithI18n = class {
      sourceSpan;
      i18n;
      constructor(sourceSpan, i18n2) {
        this.sourceSpan = sourceSpan;
        this.i18n = i18n2;
      }
    };
    Text4 = class extends NodeWithI18n {
      value;
      tokens;
      constructor(value, sourceSpan, tokens, i18n2) {
        super(sourceSpan, i18n2);
        this.value = value;
        this.tokens = tokens;
      }
      visit(visitor, context2) {
        return visitor.visitText(this, context2);
      }
    };
    Expansion = class extends NodeWithI18n {
      switchValue;
      type;
      cases;
      switchValueSourceSpan;
      constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n2) {
        super(sourceSpan, i18n2);
        this.switchValue = switchValue;
        this.type = type;
        this.cases = cases;
        this.switchValueSourceSpan = switchValueSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitExpansion(this, context2);
      }
    };
    ExpansionCase = class {
      value;
      expression;
      sourceSpan;
      valueSourceSpan;
      expSourceSpan;
      constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
        this.value = value;
        this.expression = expression;
        this.sourceSpan = sourceSpan;
        this.valueSourceSpan = valueSourceSpan;
        this.expSourceSpan = expSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitExpansionCase(this, context2);
      }
    };
    Attribute3 = class extends NodeWithI18n {
      name;
      value;
      keySpan;
      valueSpan;
      valueTokens;
      constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n2) {
        super(sourceSpan, i18n2);
        this.name = name;
        this.value = value;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.valueTokens = valueTokens;
      }
      visit(visitor, context2) {
        return visitor.visitAttribute(this, context2);
      }
    };
    Element3 = class extends NodeWithI18n {
      name;
      attrs;
      directives;
      children;
      isSelfClosing;
      startSourceSpan;
      endSourceSpan;
      isVoid;
      constructor(name, attrs, directives, children, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan = null, isVoid, i18n2) {
        super(sourceSpan, i18n2);
        this.name = name;
        this.attrs = attrs;
        this.directives = directives;
        this.children = children;
        this.isSelfClosing = isSelfClosing;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.isVoid = isVoid;
      }
      visit(visitor, context2) {
        return visitor.visitElement(this, context2);
      }
    };
    Comment2 = class {
      value;
      sourceSpan;
      constructor(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitComment(this, context2);
      }
    };
    Block = class extends NodeWithI18n {
      name;
      parameters;
      children;
      nameSpan;
      startSourceSpan;
      endSourceSpan;
      constructor(name, parameters, children, sourceSpan, nameSpan, startSourceSpan, endSourceSpan = null, i18n2) {
        super(sourceSpan, i18n2);
        this.name = name;
        this.parameters = parameters;
        this.children = children;
        this.nameSpan = nameSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitBlock(this, context2);
      }
    };
    Component3 = class extends NodeWithI18n {
      componentName;
      tagName;
      fullName;
      attrs;
      directives;
      children;
      isSelfClosing;
      startSourceSpan;
      endSourceSpan;
      constructor(componentName, tagName, fullName, attrs, directives, children, isSelfClosing, sourceSpan, startSourceSpan, endSourceSpan = null, i18n2) {
        super(sourceSpan, i18n2);
        this.componentName = componentName;
        this.tagName = tagName;
        this.fullName = fullName;
        this.attrs = attrs;
        this.directives = directives;
        this.children = children;
        this.isSelfClosing = isSelfClosing;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitComponent(this, context2);
      }
    };
    Directive3 = class {
      name;
      attrs;
      sourceSpan;
      startSourceSpan;
      endSourceSpan;
      constructor(name, attrs, sourceSpan, startSourceSpan, endSourceSpan = null) {
        this.name = name;
        this.attrs = attrs;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitDirective(this, context2);
      }
    };
    BlockParameter = class {
      expression;
      sourceSpan;
      constructor(expression, sourceSpan) {
        this.expression = expression;
        this.sourceSpan = sourceSpan;
      }
      visit(visitor, context2) {
        return visitor.visitBlockParameter(this, context2);
      }
    };
    LetDeclaration2 = class {
      name;
      value;
      sourceSpan;
      nameSpan;
      valueSpan;
      constructor(name, value, sourceSpan, nameSpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.nameSpan = nameSpan;
        this.valueSpan = valueSpan;
      }
      visit(visitor, context2) {
        return visitor.visitLetDeclaration(this, context2);
      }
    };
    NAMED_ENTITIES = {
      "AElig": "\xC6",
      "AMP": "&",
      "amp": "&",
      "Aacute": "\xC1",
      "Abreve": "\u0102",
      "Acirc": "\xC2",
      "Acy": "\u0410",
      "Afr": "\u{1D504}",
      "Agrave": "\xC0",
      "Alpha": "\u0391",
      "Amacr": "\u0100",
      "And": "\u2A53",
      "Aogon": "\u0104",
      "Aopf": "\u{1D538}",
      "ApplyFunction": "\u2061",
      "af": "\u2061",
      "Aring": "\xC5",
      "angst": "\xC5",
      "Ascr": "\u{1D49C}",
      "Assign": "\u2254",
      "colone": "\u2254",
      "coloneq": "\u2254",
      "Atilde": "\xC3",
      "Auml": "\xC4",
      "Backslash": "\u2216",
      "setminus": "\u2216",
      "setmn": "\u2216",
      "smallsetminus": "\u2216",
      "ssetmn": "\u2216",
      "Barv": "\u2AE7",
      "Barwed": "\u2306",
      "doublebarwedge": "\u2306",
      "Bcy": "\u0411",
      "Because": "\u2235",
      "becaus": "\u2235",
      "because": "\u2235",
      "Bernoullis": "\u212C",
      "Bscr": "\u212C",
      "bernou": "\u212C",
      "Beta": "\u0392",
      "Bfr": "\u{1D505}",
      "Bopf": "\u{1D539}",
      "Breve": "\u02D8",
      "breve": "\u02D8",
      "Bumpeq": "\u224E",
      "HumpDownHump": "\u224E",
      "bump": "\u224E",
      "CHcy": "\u0427",
      "COPY": "\xA9",
      "copy": "\xA9",
      "Cacute": "\u0106",
      "Cap": "\u22D2",
      "CapitalDifferentialD": "\u2145",
      "DD": "\u2145",
      "Cayleys": "\u212D",
      "Cfr": "\u212D",
      "Ccaron": "\u010C",
      "Ccedil": "\xC7",
      "Ccirc": "\u0108",
      "Cconint": "\u2230",
      "Cdot": "\u010A",
      "Cedilla": "\xB8",
      "cedil": "\xB8",
      "CenterDot": "\xB7",
      "centerdot": "\xB7",
      "middot": "\xB7",
      "Chi": "\u03A7",
      "CircleDot": "\u2299",
      "odot": "\u2299",
      "CircleMinus": "\u2296",
      "ominus": "\u2296",
      "CirclePlus": "\u2295",
      "oplus": "\u2295",
      "CircleTimes": "\u2297",
      "otimes": "\u2297",
      "ClockwiseContourIntegral": "\u2232",
      "cwconint": "\u2232",
      "CloseCurlyDoubleQuote": "\u201D",
      "rdquo": "\u201D",
      "rdquor": "\u201D",
      "CloseCurlyQuote": "\u2019",
      "rsquo": "\u2019",
      "rsquor": "\u2019",
      "Colon": "\u2237",
      "Proportion": "\u2237",
      "Colone": "\u2A74",
      "Congruent": "\u2261",
      "equiv": "\u2261",
      "Conint": "\u222F",
      "DoubleContourIntegral": "\u222F",
      "ContourIntegral": "\u222E",
      "conint": "\u222E",
      "oint": "\u222E",
      "Copf": "\u2102",
      "complexes": "\u2102",
      "Coproduct": "\u2210",
      "coprod": "\u2210",
      "CounterClockwiseContourIntegral": "\u2233",
      "awconint": "\u2233",
      "Cross": "\u2A2F",
      "Cscr": "\u{1D49E}",
      "Cup": "\u22D3",
      "CupCap": "\u224D",
      "asympeq": "\u224D",
      "DDotrahd": "\u2911",
      "DJcy": "\u0402",
      "DScy": "\u0405",
      "DZcy": "\u040F",
      "Dagger": "\u2021",
      "ddagger": "\u2021",
      "Darr": "\u21A1",
      "Dashv": "\u2AE4",
      "DoubleLeftTee": "\u2AE4",
      "Dcaron": "\u010E",
      "Dcy": "\u0414",
      "Del": "\u2207",
      "nabla": "\u2207",
      "Delta": "\u0394",
      "Dfr": "\u{1D507}",
      "DiacriticalAcute": "\xB4",
      "acute": "\xB4",
      "DiacriticalDot": "\u02D9",
      "dot": "\u02D9",
      "DiacriticalDoubleAcute": "\u02DD",
      "dblac": "\u02DD",
      "DiacriticalGrave": "`",
      "grave": "`",
      "DiacriticalTilde": "\u02DC",
      "tilde": "\u02DC",
      "Diamond": "\u22C4",
      "diam": "\u22C4",
      "diamond": "\u22C4",
      "DifferentialD": "\u2146",
      "dd": "\u2146",
      "Dopf": "\u{1D53B}",
      "Dot": "\xA8",
      "DoubleDot": "\xA8",
      "die": "\xA8",
      "uml": "\xA8",
      "DotDot": "\u20DC",
      "DotEqual": "\u2250",
      "doteq": "\u2250",
      "esdot": "\u2250",
      "DoubleDownArrow": "\u21D3",
      "Downarrow": "\u21D3",
      "dArr": "\u21D3",
      "DoubleLeftArrow": "\u21D0",
      "Leftarrow": "\u21D0",
      "lArr": "\u21D0",
      "DoubleLeftRightArrow": "\u21D4",
      "Leftrightarrow": "\u21D4",
      "hArr": "\u21D4",
      "iff": "\u21D4",
      "DoubleLongLeftArrow": "\u27F8",
      "Longleftarrow": "\u27F8",
      "xlArr": "\u27F8",
      "DoubleLongLeftRightArrow": "\u27FA",
      "Longleftrightarrow": "\u27FA",
      "xhArr": "\u27FA",
      "DoubleLongRightArrow": "\u27F9",
      "Longrightarrow": "\u27F9",
      "xrArr": "\u27F9",
      "DoubleRightArrow": "\u21D2",
      "Implies": "\u21D2",
      "Rightarrow": "\u21D2",
      "rArr": "\u21D2",
      "DoubleRightTee": "\u22A8",
      "vDash": "\u22A8",
      "DoubleUpArrow": "\u21D1",
      "Uparrow": "\u21D1",
      "uArr": "\u21D1",
      "DoubleUpDownArrow": "\u21D5",
      "Updownarrow": "\u21D5",
      "vArr": "\u21D5",
      "DoubleVerticalBar": "\u2225",
      "par": "\u2225",
      "parallel": "\u2225",
      "shortparallel": "\u2225",
      "spar": "\u2225",
      "DownArrow": "\u2193",
      "ShortDownArrow": "\u2193",
      "darr": "\u2193",
      "downarrow": "\u2193",
      "DownArrowBar": "\u2913",
      "DownArrowUpArrow": "\u21F5",
      "duarr": "\u21F5",
      "DownBreve": "\u0311",
      "DownLeftRightVector": "\u2950",
      "DownLeftTeeVector": "\u295E",
      "DownLeftVector": "\u21BD",
      "leftharpoondown": "\u21BD",
      "lhard": "\u21BD",
      "DownLeftVectorBar": "\u2956",
      "DownRightTeeVector": "\u295F",
      "DownRightVector": "\u21C1",
      "rhard": "\u21C1",
      "rightharpoondown": "\u21C1",
      "DownRightVectorBar": "\u2957",
      "DownTee": "\u22A4",
      "top": "\u22A4",
      "DownTeeArrow": "\u21A7",
      "mapstodown": "\u21A7",
      "Dscr": "\u{1D49F}",
      "Dstrok": "\u0110",
      "ENG": "\u014A",
      "ETH": "\xD0",
      "Eacute": "\xC9",
      "Ecaron": "\u011A",
      "Ecirc": "\xCA",
      "Ecy": "\u042D",
      "Edot": "\u0116",
      "Efr": "\u{1D508}",
      "Egrave": "\xC8",
      "Element": "\u2208",
      "in": "\u2208",
      "isin": "\u2208",
      "isinv": "\u2208",
      "Emacr": "\u0112",
      "EmptySmallSquare": "\u25FB",
      "EmptyVerySmallSquare": "\u25AB",
      "Eogon": "\u0118",
      "Eopf": "\u{1D53C}",
      "Epsilon": "\u0395",
      "Equal": "\u2A75",
      "EqualTilde": "\u2242",
      "eqsim": "\u2242",
      "esim": "\u2242",
      "Equilibrium": "\u21CC",
      "rightleftharpoons": "\u21CC",
      "rlhar": "\u21CC",
      "Escr": "\u2130",
      "expectation": "\u2130",
      "Esim": "\u2A73",
      "Eta": "\u0397",
      "Euml": "\xCB",
      "Exists": "\u2203",
      "exist": "\u2203",
      "ExponentialE": "\u2147",
      "ee": "\u2147",
      "exponentiale": "\u2147",
      "Fcy": "\u0424",
      "Ffr": "\u{1D509}",
      "FilledSmallSquare": "\u25FC",
      "FilledVerySmallSquare": "\u25AA",
      "blacksquare": "\u25AA",
      "squarf": "\u25AA",
      "squf": "\u25AA",
      "Fopf": "\u{1D53D}",
      "ForAll": "\u2200",
      "forall": "\u2200",
      "Fouriertrf": "\u2131",
      "Fscr": "\u2131",
      "GJcy": "\u0403",
      "GT": ">",
      "gt": ">",
      "Gamma": "\u0393",
      "Gammad": "\u03DC",
      "Gbreve": "\u011E",
      "Gcedil": "\u0122",
      "Gcirc": "\u011C",
      "Gcy": "\u0413",
      "Gdot": "\u0120",
      "Gfr": "\u{1D50A}",
      "Gg": "\u22D9",
      "ggg": "\u22D9",
      "Gopf": "\u{1D53E}",
      "GreaterEqual": "\u2265",
      "ge": "\u2265",
      "geq": "\u2265",
      "GreaterEqualLess": "\u22DB",
      "gel": "\u22DB",
      "gtreqless": "\u22DB",
      "GreaterFullEqual": "\u2267",
      "gE": "\u2267",
      "geqq": "\u2267",
      "GreaterGreater": "\u2AA2",
      "GreaterLess": "\u2277",
      "gl": "\u2277",
      "gtrless": "\u2277",
      "GreaterSlantEqual": "\u2A7E",
      "geqslant": "\u2A7E",
      "ges": "\u2A7E",
      "GreaterTilde": "\u2273",
      "gsim": "\u2273",
      "gtrsim": "\u2273",
      "Gscr": "\u{1D4A2}",
      "Gt": "\u226B",
      "NestedGreaterGreater": "\u226B",
      "gg": "\u226B",
      "HARDcy": "\u042A",
      "Hacek": "\u02C7",
      "caron": "\u02C7",
      "Hat": "^",
      "Hcirc": "\u0124",
      "Hfr": "\u210C",
      "Poincareplane": "\u210C",
      "HilbertSpace": "\u210B",
      "Hscr": "\u210B",
      "hamilt": "\u210B",
      "Hopf": "\u210D",
      "quaternions": "\u210D",
      "HorizontalLine": "\u2500",
      "boxh": "\u2500",
      "Hstrok": "\u0126",
      "HumpEqual": "\u224F",
      "bumpe": "\u224F",
      "bumpeq": "\u224F",
      "IEcy": "\u0415",
      "IJlig": "\u0132",
      "IOcy": "\u0401",
      "Iacute": "\xCD",
      "Icirc": "\xCE",
      "Icy": "\u0418",
      "Idot": "\u0130",
      "Ifr": "\u2111",
      "Im": "\u2111",
      "image": "\u2111",
      "imagpart": "\u2111",
      "Igrave": "\xCC",
      "Imacr": "\u012A",
      "ImaginaryI": "\u2148",
      "ii": "\u2148",
      "Int": "\u222C",
      "Integral": "\u222B",
      "int": "\u222B",
      "Intersection": "\u22C2",
      "bigcap": "\u22C2",
      "xcap": "\u22C2",
      "InvisibleComma": "\u2063",
      "ic": "\u2063",
      "InvisibleTimes": "\u2062",
      "it": "\u2062",
      "Iogon": "\u012E",
      "Iopf": "\u{1D540}",
      "Iota": "\u0399",
      "Iscr": "\u2110",
      "imagline": "\u2110",
      "Itilde": "\u0128",
      "Iukcy": "\u0406",
      "Iuml": "\xCF",
      "Jcirc": "\u0134",
      "Jcy": "\u0419",
      "Jfr": "\u{1D50D}",
      "Jopf": "\u{1D541}",
      "Jscr": "\u{1D4A5}",
      "Jsercy": "\u0408",
      "Jukcy": "\u0404",
      "KHcy": "\u0425",
      "KJcy": "\u040C",
      "Kappa": "\u039A",
      "Kcedil": "\u0136",
      "Kcy": "\u041A",
      "Kfr": "\u{1D50E}",
      "Kopf": "\u{1D542}",
      "Kscr": "\u{1D4A6}",
      "LJcy": "\u0409",
      "LT": "<",
      "lt": "<",
      "Lacute": "\u0139",
      "Lambda": "\u039B",
      "Lang": "\u27EA",
      "Laplacetrf": "\u2112",
      "Lscr": "\u2112",
      "lagran": "\u2112",
      "Larr": "\u219E",
      "twoheadleftarrow": "\u219E",
      "Lcaron": "\u013D",
      "Lcedil": "\u013B",
      "Lcy": "\u041B",
      "LeftAngleBracket": "\u27E8",
      "lang": "\u27E8",
      "langle": "\u27E8",
      "LeftArrow": "\u2190",
      "ShortLeftArrow": "\u2190",
      "larr": "\u2190",
      "leftarrow": "\u2190",
      "slarr": "\u2190",
      "LeftArrowBar": "\u21E4",
      "larrb": "\u21E4",
      "LeftArrowRightArrow": "\u21C6",
      "leftrightarrows": "\u21C6",
      "lrarr": "\u21C6",
      "LeftCeiling": "\u2308",
      "lceil": "\u2308",
      "LeftDoubleBracket": "\u27E6",
      "lobrk": "\u27E6",
      "LeftDownTeeVector": "\u2961",
      "LeftDownVector": "\u21C3",
      "dharl": "\u21C3",
      "downharpoonleft": "\u21C3",
      "LeftDownVectorBar": "\u2959",
      "LeftFloor": "\u230A",
      "lfloor": "\u230A",
      "LeftRightArrow": "\u2194",
      "harr": "\u2194",
      "leftrightarrow": "\u2194",
      "LeftRightVector": "\u294E",
      "LeftTee": "\u22A3",
      "dashv": "\u22A3",
      "LeftTeeArrow": "\u21A4",
      "mapstoleft": "\u21A4",
      "LeftTeeVector": "\u295A",
      "LeftTriangle": "\u22B2",
      "vartriangleleft": "\u22B2",
      "vltri": "\u22B2",
      "LeftTriangleBar": "\u29CF",
      "LeftTriangleEqual": "\u22B4",
      "ltrie": "\u22B4",
      "trianglelefteq": "\u22B4",
      "LeftUpDownVector": "\u2951",
      "LeftUpTeeVector": "\u2960",
      "LeftUpVector": "\u21BF",
      "uharl": "\u21BF",
      "upharpoonleft": "\u21BF",
      "LeftUpVectorBar": "\u2958",
      "LeftVector": "\u21BC",
      "leftharpoonup": "\u21BC",
      "lharu": "\u21BC",
      "LeftVectorBar": "\u2952",
      "LessEqualGreater": "\u22DA",
      "leg": "\u22DA",
      "lesseqgtr": "\u22DA",
      "LessFullEqual": "\u2266",
      "lE": "\u2266",
      "leqq": "\u2266",
      "LessGreater": "\u2276",
      "lessgtr": "\u2276",
      "lg": "\u2276",
      "LessLess": "\u2AA1",
      "LessSlantEqual": "\u2A7D",
      "leqslant": "\u2A7D",
      "les": "\u2A7D",
      "LessTilde": "\u2272",
      "lesssim": "\u2272",
      "lsim": "\u2272",
      "Lfr": "\u{1D50F}",
      "Ll": "\u22D8",
      "Lleftarrow": "\u21DA",
      "lAarr": "\u21DA",
      "Lmidot": "\u013F",
      "LongLeftArrow": "\u27F5",
      "longleftarrow": "\u27F5",
      "xlarr": "\u27F5",
      "LongLeftRightArrow": "\u27F7",
      "longleftrightarrow": "\u27F7",
      "xharr": "\u27F7",
      "LongRightArrow": "\u27F6",
      "longrightarrow": "\u27F6",
      "xrarr": "\u27F6",
      "Lopf": "\u{1D543}",
      "LowerLeftArrow": "\u2199",
      "swarr": "\u2199",
      "swarrow": "\u2199",
      "LowerRightArrow": "\u2198",
      "searr": "\u2198",
      "searrow": "\u2198",
      "Lsh": "\u21B0",
      "lsh": "\u21B0",
      "Lstrok": "\u0141",
      "Lt": "\u226A",
      "NestedLessLess": "\u226A",
      "ll": "\u226A",
      "Map": "\u2905",
      "Mcy": "\u041C",
      "MediumSpace": "\u205F",
      "Mellintrf": "\u2133",
      "Mscr": "\u2133",
      "phmmat": "\u2133",
      "Mfr": "\u{1D510}",
      "MinusPlus": "\u2213",
      "mnplus": "\u2213",
      "mp": "\u2213",
      "Mopf": "\u{1D544}",
      "Mu": "\u039C",
      "NJcy": "\u040A",
      "Nacute": "\u0143",
      "Ncaron": "\u0147",
      "Ncedil": "\u0145",
      "Ncy": "\u041D",
      "NegativeMediumSpace": "\u200B",
      "NegativeThickSpace": "\u200B",
      "NegativeThinSpace": "\u200B",
      "NegativeVeryThinSpace": "\u200B",
      "ZeroWidthSpace": "\u200B",
      "NewLine": "\n",
      "Nfr": "\u{1D511}",
      "NoBreak": "\u2060",
      "NonBreakingSpace": "\xA0",
      "nbsp": "\xA0",
      "Nopf": "\u2115",
      "naturals": "\u2115",
      "Not": "\u2AEC",
      "NotCongruent": "\u2262",
      "nequiv": "\u2262",
      "NotCupCap": "\u226D",
      "NotDoubleVerticalBar": "\u2226",
      "npar": "\u2226",
      "nparallel": "\u2226",
      "nshortparallel": "\u2226",
      "nspar": "\u2226",
      "NotElement": "\u2209",
      "notin": "\u2209",
      "notinva": "\u2209",
      "NotEqual": "\u2260",
      "ne": "\u2260",
      "NotEqualTilde": "\u2242\u0338",
      "nesim": "\u2242\u0338",
      "NotExists": "\u2204",
      "nexist": "\u2204",
      "nexists": "\u2204",
      "NotGreater": "\u226F",
      "ngt": "\u226F",
      "ngtr": "\u226F",
      "NotGreaterEqual": "\u2271",
      "nge": "\u2271",
      "ngeq": "\u2271",
      "NotGreaterFullEqual": "\u2267\u0338",
      "ngE": "\u2267\u0338",
      "ngeqq": "\u2267\u0338",
      "NotGreaterGreater": "\u226B\u0338",
      "nGtv": "\u226B\u0338",
      "NotGreaterLess": "\u2279",
      "ntgl": "\u2279",
      "NotGreaterSlantEqual": "\u2A7E\u0338",
      "ngeqslant": "\u2A7E\u0338",
      "nges": "\u2A7E\u0338",
      "NotGreaterTilde": "\u2275",
      "ngsim": "\u2275",
      "NotHumpDownHump": "\u224E\u0338",
      "nbump": "\u224E\u0338",
      "NotHumpEqual": "\u224F\u0338",
      "nbumpe": "\u224F\u0338",
      "NotLeftTriangle": "\u22EA",
      "nltri": "\u22EA",
      "ntriangleleft": "\u22EA",
      "NotLeftTriangleBar": "\u29CF\u0338",
      "NotLeftTriangleEqual": "\u22EC",
      "nltrie": "\u22EC",
      "ntrianglelefteq": "\u22EC",
      "NotLess": "\u226E",
      "nless": "\u226E",
      "nlt": "\u226E",
      "NotLessEqual": "\u2270",
      "nle": "\u2270",
      "nleq": "\u2270",
      "NotLessGreater": "\u2278",
      "ntlg": "\u2278",
      "NotLessLess": "\u226A\u0338",
      "nLtv": "\u226A\u0338",
      "NotLessSlantEqual": "\u2A7D\u0338",
      "nleqslant": "\u2A7D\u0338",
      "nles": "\u2A7D\u0338",
      "NotLessTilde": "\u2274",
      "nlsim": "\u2274",
      "NotNestedGreaterGreater": "\u2AA2\u0338",
      "NotNestedLessLess": "\u2AA1\u0338",
      "NotPrecedes": "\u2280",
      "npr": "\u2280",
      "nprec": "\u2280",
      "NotPrecedesEqual": "\u2AAF\u0338",
      "npre": "\u2AAF\u0338",
      "npreceq": "\u2AAF\u0338",
      "NotPrecedesSlantEqual": "\u22E0",
      "nprcue": "\u22E0",
      "NotReverseElement": "\u220C",
      "notni": "\u220C",
      "notniva": "\u220C",
      "NotRightTriangle": "\u22EB",
      "nrtri": "\u22EB",
      "ntriangleright": "\u22EB",
      "NotRightTriangleBar": "\u29D0\u0338",
      "NotRightTriangleEqual": "\u22ED",
      "nrtrie": "\u22ED",
      "ntrianglerighteq": "\u22ED",
      "NotSquareSubset": "\u228F\u0338",
      "NotSquareSubsetEqual": "\u22E2",
      "nsqsube": "\u22E2",
      "NotSquareSuperset": "\u2290\u0338",
      "NotSquareSupersetEqual": "\u22E3",
      "nsqsupe": "\u22E3",
      "NotSubset": "\u2282\u20D2",
      "nsubset": "\u2282\u20D2",
      "vnsub": "\u2282\u20D2",
      "NotSubsetEqual": "\u2288",
      "nsube": "\u2288",
      "nsubseteq": "\u2288",
      "NotSucceeds": "\u2281",
      "nsc": "\u2281",
      "nsucc": "\u2281",
      "NotSucceedsEqual": "\u2AB0\u0338",
      "nsce": "\u2AB0\u0338",
      "nsucceq": "\u2AB0\u0338",
      "NotSucceedsSlantEqual": "\u22E1",
      "nsccue": "\u22E1",
      "NotSucceedsTilde": "\u227F\u0338",
      "NotSuperset": "\u2283\u20D2",
      "nsupset": "\u2283\u20D2",
      "vnsup": "\u2283\u20D2",
      "NotSupersetEqual": "\u2289",
      "nsupe": "\u2289",
      "nsupseteq": "\u2289",
      "NotTilde": "\u2241",
      "nsim": "\u2241",
      "NotTildeEqual": "\u2244",
      "nsime": "\u2244",
      "nsimeq": "\u2244",
      "NotTildeFullEqual": "\u2247",
      "ncong": "\u2247",
      "NotTildeTilde": "\u2249",
      "nap": "\u2249",
      "napprox": "\u2249",
      "NotVerticalBar": "\u2224",
      "nmid": "\u2224",
      "nshortmid": "\u2224",
      "nsmid": "\u2224",
      "Nscr": "\u{1D4A9}",
      "Ntilde": "\xD1",
      "Nu": "\u039D",
      "OElig": "\u0152",
      "Oacute": "\xD3",
      "Ocirc": "\xD4",
      "Ocy": "\u041E",
      "Odblac": "\u0150",
      "Ofr": "\u{1D512}",
      "Ograve": "\xD2",
      "Omacr": "\u014C",
      "Omega": "\u03A9",
      "ohm": "\u03A9",
      "Omicron": "\u039F",
      "Oopf": "\u{1D546}",
      "OpenCurlyDoubleQuote": "\u201C",
      "ldquo": "\u201C",
      "OpenCurlyQuote": "\u2018",
      "lsquo": "\u2018",
      "Or": "\u2A54",
      "Oscr": "\u{1D4AA}",
      "Oslash": "\xD8",
      "Otilde": "\xD5",
      "Otimes": "\u2A37",
      "Ouml": "\xD6",
      "OverBar": "\u203E",
      "oline": "\u203E",
      "OverBrace": "\u23DE",
      "OverBracket": "\u23B4",
      "tbrk": "\u23B4",
      "OverParenthesis": "\u23DC",
      "PartialD": "\u2202",
      "part": "\u2202",
      "Pcy": "\u041F",
      "Pfr": "\u{1D513}",
      "Phi": "\u03A6",
      "Pi": "\u03A0",
      "PlusMinus": "\xB1",
      "plusmn": "\xB1",
      "pm": "\xB1",
      "Popf": "\u2119",
      "primes": "\u2119",
      "Pr": "\u2ABB",
      "Precedes": "\u227A",
      "pr": "\u227A",
      "prec": "\u227A",
      "PrecedesEqual": "\u2AAF",
      "pre": "\u2AAF",
      "preceq": "\u2AAF",
      "PrecedesSlantEqual": "\u227C",
      "prcue": "\u227C",
      "preccurlyeq": "\u227C",
      "PrecedesTilde": "\u227E",
      "precsim": "\u227E",
      "prsim": "\u227E",
      "Prime": "\u2033",
      "Product": "\u220F",
      "prod": "\u220F",
      "Proportional": "\u221D",
      "prop": "\u221D",
      "propto": "\u221D",
      "varpropto": "\u221D",
      "vprop": "\u221D",
      "Pscr": "\u{1D4AB}",
      "Psi": "\u03A8",
      "QUOT": '"',
      "quot": '"',
      "Qfr": "\u{1D514}",
      "Qopf": "\u211A",
      "rationals": "\u211A",
      "Qscr": "\u{1D4AC}",
      "RBarr": "\u2910",
      "drbkarow": "\u2910",
      "REG": "\xAE",
      "circledR": "\xAE",
      "reg": "\xAE",
      "Racute": "\u0154",
      "Rang": "\u27EB",
      "Rarr": "\u21A0",
      "twoheadrightarrow": "\u21A0",
      "Rarrtl": "\u2916",
      "Rcaron": "\u0158",
      "Rcedil": "\u0156",
      "Rcy": "\u0420",
      "Re": "\u211C",
      "Rfr": "\u211C",
      "real": "\u211C",
      "realpart": "\u211C",
      "ReverseElement": "\u220B",
      "SuchThat": "\u220B",
      "ni": "\u220B",
      "niv": "\u220B",
      "ReverseEquilibrium": "\u21CB",
      "leftrightharpoons": "\u21CB",
      "lrhar": "\u21CB",
      "ReverseUpEquilibrium": "\u296F",
      "duhar": "\u296F",
      "Rho": "\u03A1",
      "RightAngleBracket": "\u27E9",
      "rang": "\u27E9",
      "rangle": "\u27E9",
      "RightArrow": "\u2192",
      "ShortRightArrow": "\u2192",
      "rarr": "\u2192",
      "rightarrow": "\u2192",
      "srarr": "\u2192",
      "RightArrowBar": "\u21E5",
      "rarrb": "\u21E5",
      "RightArrowLeftArrow": "\u21C4",
      "rightleftarrows": "\u21C4",
      "rlarr": "\u21C4",
      "RightCeiling": "\u2309",
      "rceil": "\u2309",
      "RightDoubleBracket": "\u27E7",
      "robrk": "\u27E7",
      "RightDownTeeVector": "\u295D",
      "RightDownVector": "\u21C2",
      "dharr": "\u21C2",
      "downharpoonright": "\u21C2",
      "RightDownVectorBar": "\u2955",
      "RightFloor": "\u230B",
      "rfloor": "\u230B",
      "RightTee": "\u22A2",
      "vdash": "\u22A2",
      "RightTeeArrow": "\u21A6",
      "map": "\u21A6",
      "mapsto": "\u21A6",
      "RightTeeVector": "\u295B",
      "RightTriangle": "\u22B3",
      "vartriangleright": "\u22B3",
      "vrtri": "\u22B3",
      "RightTriangleBar": "\u29D0",
      "RightTriangleEqual": "\u22B5",
      "rtrie": "\u22B5",
      "trianglerighteq": "\u22B5",
      "RightUpDownVector": "\u294F",
      "RightUpTeeVector": "\u295C",
      "RightUpVector": "\u21BE",
      "uharr": "\u21BE",
      "upharpoonright": "\u21BE",
      "RightUpVectorBar": "\u2954",
      "RightVector": "\u21C0",
      "rharu": "\u21C0",
      "rightharpoonup": "\u21C0",
      "RightVectorBar": "\u2953",
      "Ropf": "\u211D",
      "reals": "\u211D",
      "RoundImplies": "\u2970",
      "Rrightarrow": "\u21DB",
      "rAarr": "\u21DB",
      "Rscr": "\u211B",
      "realine": "\u211B",
      "Rsh": "\u21B1",
      "rsh": "\u21B1",
      "RuleDelayed": "\u29F4",
      "SHCHcy": "\u0429",
      "SHcy": "\u0428",
      "SOFTcy": "\u042C",
      "Sacute": "\u015A",
      "Sc": "\u2ABC",
      "Scaron": "\u0160",
      "Scedil": "\u015E",
      "Scirc": "\u015C",
      "Scy": "\u0421",
      "Sfr": "\u{1D516}",
      "ShortUpArrow": "\u2191",
      "UpArrow": "\u2191",
      "uarr": "\u2191",
      "uparrow": "\u2191",
      "Sigma": "\u03A3",
      "SmallCircle": "\u2218",
      "compfn": "\u2218",
      "Sopf": "\u{1D54A}",
      "Sqrt": "\u221A",
      "radic": "\u221A",
      "Square": "\u25A1",
      "squ": "\u25A1",
      "square": "\u25A1",
      "SquareIntersection": "\u2293",
      "sqcap": "\u2293",
      "SquareSubset": "\u228F",
      "sqsub": "\u228F",
      "sqsubset": "\u228F",
      "SquareSubsetEqual": "\u2291",
      "sqsube": "\u2291",
      "sqsubseteq": "\u2291",
      "SquareSuperset": "\u2290",
      "sqsup": "\u2290",
      "sqsupset": "\u2290",
      "SquareSupersetEqual": "\u2292",
      "sqsupe": "\u2292",
      "sqsupseteq": "\u2292",
      "SquareUnion": "\u2294",
      "sqcup": "\u2294",
      "Sscr": "\u{1D4AE}",
      "Star": "\u22C6",
      "sstarf": "\u22C6",
      "Sub": "\u22D0",
      "Subset": "\u22D0",
      "SubsetEqual": "\u2286",
      "sube": "\u2286",
      "subseteq": "\u2286",
      "Succeeds": "\u227B",
      "sc": "\u227B",
      "succ": "\u227B",
      "SucceedsEqual": "\u2AB0",
      "sce": "\u2AB0",
      "succeq": "\u2AB0",
      "SucceedsSlantEqual": "\u227D",
      "sccue": "\u227D",
      "succcurlyeq": "\u227D",
      "SucceedsTilde": "\u227F",
      "scsim": "\u227F",
      "succsim": "\u227F",
      "Sum": "\u2211",
      "sum": "\u2211",
      "Sup": "\u22D1",
      "Supset": "\u22D1",
      "Superset": "\u2283",
      "sup": "\u2283",
      "supset": "\u2283",
      "SupersetEqual": "\u2287",
      "supe": "\u2287",
      "supseteq": "\u2287",
      "THORN": "\xDE",
      "TRADE": "\u2122",
      "trade": "\u2122",
      "TSHcy": "\u040B",
      "TScy": "\u0426",
      "Tab": "	",
      "Tau": "\u03A4",
      "Tcaron": "\u0164",
      "Tcedil": "\u0162",
      "Tcy": "\u0422",
      "Tfr": "\u{1D517}",
      "Therefore": "\u2234",
      "there4": "\u2234",
      "therefore": "\u2234",
      "Theta": "\u0398",
      "ThickSpace": "\u205F\u200A",
      "ThinSpace": "\u2009",
      "thinsp": "\u2009",
      "Tilde": "\u223C",
      "sim": "\u223C",
      "thicksim": "\u223C",
      "thksim": "\u223C",
      "TildeEqual": "\u2243",
      "sime": "\u2243",
      "simeq": "\u2243",
      "TildeFullEqual": "\u2245",
      "cong": "\u2245",
      "TildeTilde": "\u2248",
      "ap": "\u2248",
      "approx": "\u2248",
      "asymp": "\u2248",
      "thickapprox": "\u2248",
      "thkap": "\u2248",
      "Topf": "\u{1D54B}",
      "TripleDot": "\u20DB",
      "tdot": "\u20DB",
      "Tscr": "\u{1D4AF}",
      "Tstrok": "\u0166",
      "Uacute": "\xDA",
      "Uarr": "\u219F",
      "Uarrocir": "\u2949",
      "Ubrcy": "\u040E",
      "Ubreve": "\u016C",
      "Ucirc": "\xDB",
      "Ucy": "\u0423",
      "Udblac": "\u0170",
      "Ufr": "\u{1D518}",
      "Ugrave": "\xD9",
      "Umacr": "\u016A",
      "UnderBar": "_",
      "lowbar": "_",
      "UnderBrace": "\u23DF",
      "UnderBracket": "\u23B5",
      "bbrk": "\u23B5",
      "UnderParenthesis": "\u23DD",
      "Union": "\u22C3",
      "bigcup": "\u22C3",
      "xcup": "\u22C3",
      "UnionPlus": "\u228E",
      "uplus": "\u228E",
      "Uogon": "\u0172",
      "Uopf": "\u{1D54C}",
      "UpArrowBar": "\u2912",
      "UpArrowDownArrow": "\u21C5",
      "udarr": "\u21C5",
      "UpDownArrow": "\u2195",
      "updownarrow": "\u2195",
      "varr": "\u2195",
      "UpEquilibrium": "\u296E",
      "udhar": "\u296E",
      "UpTee": "\u22A5",
      "bot": "\u22A5",
      "bottom": "\u22A5",
      "perp": "\u22A5",
      "UpTeeArrow": "\u21A5",
      "mapstoup": "\u21A5",
      "UpperLeftArrow": "\u2196",
      "nwarr": "\u2196",
      "nwarrow": "\u2196",
      "UpperRightArrow": "\u2197",
      "nearr": "\u2197",
      "nearrow": "\u2197",
      "Upsi": "\u03D2",
      "upsih": "\u03D2",
      "Upsilon": "\u03A5",
      "Uring": "\u016E",
      "Uscr": "\u{1D4B0}",
      "Utilde": "\u0168",
      "Uuml": "\xDC",
      "VDash": "\u22AB",
      "Vbar": "\u2AEB",
      "Vcy": "\u0412",
      "Vdash": "\u22A9",
      "Vdashl": "\u2AE6",
      "Vee": "\u22C1",
      "bigvee": "\u22C1",
      "xvee": "\u22C1",
      "Verbar": "\u2016",
      "Vert": "\u2016",
      "VerticalBar": "\u2223",
      "mid": "\u2223",
      "shortmid": "\u2223",
      "smid": "\u2223",
      "VerticalLine": "|",
      "verbar": "|",
      "vert": "|",
      "VerticalSeparator": "\u2758",
      "VerticalTilde": "\u2240",
      "wr": "\u2240",
      "wreath": "\u2240",
      "VeryThinSpace": "\u200A",
      "hairsp": "\u200A",
      "Vfr": "\u{1D519}",
      "Vopf": "\u{1D54D}",
      "Vscr": "\u{1D4B1}",
      "Vvdash": "\u22AA",
      "Wcirc": "\u0174",
      "Wedge": "\u22C0",
      "bigwedge": "\u22C0",
      "xwedge": "\u22C0",
      "Wfr": "\u{1D51A}",
      "Wopf": "\u{1D54E}",
      "Wscr": "\u{1D4B2}",
      "Xfr": "\u{1D51B}",
      "Xi": "\u039E",
      "Xopf": "\u{1D54F}",
      "Xscr": "\u{1D4B3}",
      "YAcy": "\u042F",
      "YIcy": "\u0407",
      "YUcy": "\u042E",
      "Yacute": "\xDD",
      "Ycirc": "\u0176",
      "Ycy": "\u042B",
      "Yfr": "\u{1D51C}",
      "Yopf": "\u{1D550}",
      "Yscr": "\u{1D4B4}",
      "Yuml": "\u0178",
      "ZHcy": "\u0416",
      "Zacute": "\u0179",
      "Zcaron": "\u017D",
      "Zcy": "\u0417",
      "Zdot": "\u017B",
      "Zeta": "\u0396",
      "Zfr": "\u2128",
      "zeetrf": "\u2128",
      "Zopf": "\u2124",
      "integers": "\u2124",
      "Zscr": "\u{1D4B5}",
      "aacute": "\xE1",
      "abreve": "\u0103",
      "ac": "\u223E",
      "mstpos": "\u223E",
      "acE": "\u223E\u0333",
      "acd": "\u223F",
      "acirc": "\xE2",
      "acy": "\u0430",
      "aelig": "\xE6",
      "afr": "\u{1D51E}",
      "agrave": "\xE0",
      "alefsym": "\u2135",
      "aleph": "\u2135",
      "alpha": "\u03B1",
      "amacr": "\u0101",
      "amalg": "\u2A3F",
      "and": "\u2227",
      "wedge": "\u2227",
      "andand": "\u2A55",
      "andd": "\u2A5C",
      "andslope": "\u2A58",
      "andv": "\u2A5A",
      "ang": "\u2220",
      "angle": "\u2220",
      "ange": "\u29A4",
      "angmsd": "\u2221",
      "measuredangle": "\u2221",
      "angmsdaa": "\u29A8",
      "angmsdab": "\u29A9",
      "angmsdac": "\u29AA",
      "angmsdad": "\u29AB",
      "angmsdae": "\u29AC",
      "angmsdaf": "\u29AD",
      "angmsdag": "\u29AE",
      "angmsdah": "\u29AF",
      "angrt": "\u221F",
      "angrtvb": "\u22BE",
      "angrtvbd": "\u299D",
      "angsph": "\u2222",
      "angzarr": "\u237C",
      "aogon": "\u0105",
      "aopf": "\u{1D552}",
      "apE": "\u2A70",
      "apacir": "\u2A6F",
      "ape": "\u224A",
      "approxeq": "\u224A",
      "apid": "\u224B",
      "apos": "'",
      "aring": "\xE5",
      "ascr": "\u{1D4B6}",
      "ast": "*",
      "midast": "*",
      "atilde": "\xE3",
      "auml": "\xE4",
      "awint": "\u2A11",
      "bNot": "\u2AED",
      "backcong": "\u224C",
      "bcong": "\u224C",
      "backepsilon": "\u03F6",
      "bepsi": "\u03F6",
      "backprime": "\u2035",
      "bprime": "\u2035",
      "backsim": "\u223D",
      "bsim": "\u223D",
      "backsimeq": "\u22CD",
      "bsime": "\u22CD",
      "barvee": "\u22BD",
      "barwed": "\u2305",
      "barwedge": "\u2305",
      "bbrktbrk": "\u23B6",
      "bcy": "\u0431",
      "bdquo": "\u201E",
      "ldquor": "\u201E",
      "bemptyv": "\u29B0",
      "beta": "\u03B2",
      "beth": "\u2136",
      "between": "\u226C",
      "twixt": "\u226C",
      "bfr": "\u{1D51F}",
      "bigcirc": "\u25EF",
      "xcirc": "\u25EF",
      "bigodot": "\u2A00",
      "xodot": "\u2A00",
      "bigoplus": "\u2A01",
      "xoplus": "\u2A01",
      "bigotimes": "\u2A02",
      "xotime": "\u2A02",
      "bigsqcup": "\u2A06",
      "xsqcup": "\u2A06",
      "bigstar": "\u2605",
      "starf": "\u2605",
      "bigtriangledown": "\u25BD",
      "xdtri": "\u25BD",
      "bigtriangleup": "\u25B3",
      "xutri": "\u25B3",
      "biguplus": "\u2A04",
      "xuplus": "\u2A04",
      "bkarow": "\u290D",
      "rbarr": "\u290D",
      "blacklozenge": "\u29EB",
      "lozf": "\u29EB",
      "blacktriangle": "\u25B4",
      "utrif": "\u25B4",
      "blacktriangledown": "\u25BE",
      "dtrif": "\u25BE",
      "blacktriangleleft": "\u25C2",
      "ltrif": "\u25C2",
      "blacktriangleright": "\u25B8",
      "rtrif": "\u25B8",
      "blank": "\u2423",
      "blk12": "\u2592",
      "blk14": "\u2591",
      "blk34": "\u2593",
      "block": "\u2588",
      "bne": "=\u20E5",
      "bnequiv": "\u2261\u20E5",
      "bnot": "\u2310",
      "bopf": "\u{1D553}",
      "bowtie": "\u22C8",
      "boxDL": "\u2557",
      "boxDR": "\u2554",
      "boxDl": "\u2556",
      "boxDr": "\u2553",
      "boxH": "\u2550",
      "boxHD": "\u2566",
      "boxHU": "\u2569",
      "boxHd": "\u2564",
      "boxHu": "\u2567",
      "boxUL": "\u255D",
      "boxUR": "\u255A",
      "boxUl": "\u255C",
      "boxUr": "\u2559",
      "boxV": "\u2551",
      "boxVH": "\u256C",
      "boxVL": "\u2563",
      "boxVR": "\u2560",
      "boxVh": "\u256B",
      "boxVl": "\u2562",
      "boxVr": "\u255F",
      "boxbox": "\u29C9",
      "boxdL": "\u2555",
      "boxdR": "\u2552",
      "boxdl": "\u2510",
      "boxdr": "\u250C",
      "boxhD": "\u2565",
      "boxhU": "\u2568",
      "boxhd": "\u252C",
      "boxhu": "\u2534",
      "boxminus": "\u229F",
      "minusb": "\u229F",
      "boxplus": "\u229E",
      "plusb": "\u229E",
      "boxtimes": "\u22A0",
      "timesb": "\u22A0",
      "boxuL": "\u255B",
      "boxuR": "\u2558",
      "boxul": "\u2518",
      "boxur": "\u2514",
      "boxv": "\u2502",
      "boxvH": "\u256A",
      "boxvL": "\u2561",
      "boxvR": "\u255E",
      "boxvh": "\u253C",
      "boxvl": "\u2524",
      "boxvr": "\u251C",
      "brvbar": "\xA6",
      "bscr": "\u{1D4B7}",
      "bsemi": "\u204F",
      "bsol": "\\",
      "bsolb": "\u29C5",
      "bsolhsub": "\u27C8",
      "bull": "\u2022",
      "bullet": "\u2022",
      "bumpE": "\u2AAE",
      "cacute": "\u0107",
      "cap": "\u2229",
      "capand": "\u2A44",
      "capbrcup": "\u2A49",
      "capcap": "\u2A4B",
      "capcup": "\u2A47",
      "capdot": "\u2A40",
      "caps": "\u2229\uFE00",
      "caret": "\u2041",
      "ccaps": "\u2A4D",
      "ccaron": "\u010D",
      "ccedil": "\xE7",
      "ccirc": "\u0109",
      "ccups": "\u2A4C",
      "ccupssm": "\u2A50",
      "cdot": "\u010B",
      "cemptyv": "\u29B2",
      "cent": "\xA2",
      "cfr": "\u{1D520}",
      "chcy": "\u0447",
      "check": "\u2713",
      "checkmark": "\u2713",
      "chi": "\u03C7",
      "cir": "\u25CB",
      "cirE": "\u29C3",
      "circ": "\u02C6",
      "circeq": "\u2257",
      "cire": "\u2257",
      "circlearrowleft": "\u21BA",
      "olarr": "\u21BA",
      "circlearrowright": "\u21BB",
      "orarr": "\u21BB",
      "circledS": "\u24C8",
      "oS": "\u24C8",
      "circledast": "\u229B",
      "oast": "\u229B",
      "circledcirc": "\u229A",
      "ocir": "\u229A",
      "circleddash": "\u229D",
      "odash": "\u229D",
      "cirfnint": "\u2A10",
      "cirmid": "\u2AEF",
      "cirscir": "\u29C2",
      "clubs": "\u2663",
      "clubsuit": "\u2663",
      "colon": ":",
      "comma": ",",
      "commat": "@",
      "comp": "\u2201",
      "complement": "\u2201",
      "congdot": "\u2A6D",
      "copf": "\u{1D554}",
      "copysr": "\u2117",
      "crarr": "\u21B5",
      "cross": "\u2717",
      "cscr": "\u{1D4B8}",
      "csub": "\u2ACF",
      "csube": "\u2AD1",
      "csup": "\u2AD0",
      "csupe": "\u2AD2",
      "ctdot": "\u22EF",
      "cudarrl": "\u2938",
      "cudarrr": "\u2935",
      "cuepr": "\u22DE",
      "curlyeqprec": "\u22DE",
      "cuesc": "\u22DF",
      "curlyeqsucc": "\u22DF",
      "cularr": "\u21B6",
      "curvearrowleft": "\u21B6",
      "cularrp": "\u293D",
      "cup": "\u222A",
      "cupbrcap": "\u2A48",
      "cupcap": "\u2A46",
      "cupcup": "\u2A4A",
      "cupdot": "\u228D",
      "cupor": "\u2A45",
      "cups": "\u222A\uFE00",
      "curarr": "\u21B7",
      "curvearrowright": "\u21B7",
      "curarrm": "\u293C",
      "curlyvee": "\u22CE",
      "cuvee": "\u22CE",
      "curlywedge": "\u22CF",
      "cuwed": "\u22CF",
      "curren": "\xA4",
      "cwint": "\u2231",
      "cylcty": "\u232D",
      "dHar": "\u2965",
      "dagger": "\u2020",
      "daleth": "\u2138",
      "dash": "\u2010",
      "hyphen": "\u2010",
      "dbkarow": "\u290F",
      "rBarr": "\u290F",
      "dcaron": "\u010F",
      "dcy": "\u0434",
      "ddarr": "\u21CA",
      "downdownarrows": "\u21CA",
      "ddotseq": "\u2A77",
      "eDDot": "\u2A77",
      "deg": "\xB0",
      "delta": "\u03B4",
      "demptyv": "\u29B1",
      "dfisht": "\u297F",
      "dfr": "\u{1D521}",
      "diamondsuit": "\u2666",
      "diams": "\u2666",
      "digamma": "\u03DD",
      "gammad": "\u03DD",
      "disin": "\u22F2",
      "div": "\xF7",
      "divide": "\xF7",
      "divideontimes": "\u22C7",
      "divonx": "\u22C7",
      "djcy": "\u0452",
      "dlcorn": "\u231E",
      "llcorner": "\u231E",
      "dlcrop": "\u230D",
      "dollar": "$",
      "dopf": "\u{1D555}",
      "doteqdot": "\u2251",
      "eDot": "\u2251",
      "dotminus": "\u2238",
      "minusd": "\u2238",
      "dotplus": "\u2214",
      "plusdo": "\u2214",
      "dotsquare": "\u22A1",
      "sdotb": "\u22A1",
      "drcorn": "\u231F",
      "lrcorner": "\u231F",
      "drcrop": "\u230C",
      "dscr": "\u{1D4B9}",
      "dscy": "\u0455",
      "dsol": "\u29F6",
      "dstrok": "\u0111",
      "dtdot": "\u22F1",
      "dtri": "\u25BF",
      "triangledown": "\u25BF",
      "dwangle": "\u29A6",
      "dzcy": "\u045F",
      "dzigrarr": "\u27FF",
      "eacute": "\xE9",
      "easter": "\u2A6E",
      "ecaron": "\u011B",
      "ecir": "\u2256",
      "eqcirc": "\u2256",
      "ecirc": "\xEA",
      "ecolon": "\u2255",
      "eqcolon": "\u2255",
      "ecy": "\u044D",
      "edot": "\u0117",
      "efDot": "\u2252",
      "fallingdotseq": "\u2252",
      "efr": "\u{1D522}",
      "eg": "\u2A9A",
      "egrave": "\xE8",
      "egs": "\u2A96",
      "eqslantgtr": "\u2A96",
      "egsdot": "\u2A98",
      "el": "\u2A99",
      "elinters": "\u23E7",
      "ell": "\u2113",
      "els": "\u2A95",
      "eqslantless": "\u2A95",
      "elsdot": "\u2A97",
      "emacr": "\u0113",
      "empty": "\u2205",
      "emptyset": "\u2205",
      "emptyv": "\u2205",
      "varnothing": "\u2205",
      "emsp13": "\u2004",
      "emsp14": "\u2005",
      "emsp": "\u2003",
      "eng": "\u014B",
      "ensp": "\u2002",
      "eogon": "\u0119",
      "eopf": "\u{1D556}",
      "epar": "\u22D5",
      "eparsl": "\u29E3",
      "eplus": "\u2A71",
      "epsi": "\u03B5",
      "epsilon": "\u03B5",
      "epsiv": "\u03F5",
      "straightepsilon": "\u03F5",
      "varepsilon": "\u03F5",
      "equals": "=",
      "equest": "\u225F",
      "questeq": "\u225F",
      "equivDD": "\u2A78",
      "eqvparsl": "\u29E5",
      "erDot": "\u2253",
      "risingdotseq": "\u2253",
      "erarr": "\u2971",
      "escr": "\u212F",
      "eta": "\u03B7",
      "eth": "\xF0",
      "euml": "\xEB",
      "euro": "\u20AC",
      "excl": "!",
      "fcy": "\u0444",
      "female": "\u2640",
      "ffilig": "\uFB03",
      "fflig": "\uFB00",
      "ffllig": "\uFB04",
      "ffr": "\u{1D523}",
      "filig": "\uFB01",
      "fjlig": "fj",
      "flat": "\u266D",
      "fllig": "\uFB02",
      "fltns": "\u25B1",
      "fnof": "\u0192",
      "fopf": "\u{1D557}",
      "fork": "\u22D4",
      "pitchfork": "\u22D4",
      "forkv": "\u2AD9",
      "fpartint": "\u2A0D",
      "frac12": "\xBD",
      "half": "\xBD",
      "frac13": "\u2153",
      "frac14": "\xBC",
      "frac15": "\u2155",
      "frac16": "\u2159",
      "frac18": "\u215B",
      "frac23": "\u2154",
      "frac25": "\u2156",
      "frac34": "\xBE",
      "frac35": "\u2157",
      "frac38": "\u215C",
      "frac45": "\u2158",
      "frac56": "\u215A",
      "frac58": "\u215D",
      "frac78": "\u215E",
      "frasl": "\u2044",
      "frown": "\u2322",
      "sfrown": "\u2322",
      "fscr": "\u{1D4BB}",
      "gEl": "\u2A8C",
      "gtreqqless": "\u2A8C",
      "gacute": "\u01F5",
      "gamma": "\u03B3",
      "gap": "\u2A86",
      "gtrapprox": "\u2A86",
      "gbreve": "\u011F",
      "gcirc": "\u011D",
      "gcy": "\u0433",
      "gdot": "\u0121",
      "gescc": "\u2AA9",
      "gesdot": "\u2A80",
      "gesdoto": "\u2A82",
      "gesdotol": "\u2A84",
      "gesl": "\u22DB\uFE00",
      "gesles": "\u2A94",
      "gfr": "\u{1D524}",
      "gimel": "\u2137",
      "gjcy": "\u0453",
      "glE": "\u2A92",
      "gla": "\u2AA5",
      "glj": "\u2AA4",
      "gnE": "\u2269",
      "gneqq": "\u2269",
      "gnap": "\u2A8A",
      "gnapprox": "\u2A8A",
      "gne": "\u2A88",
      "gneq": "\u2A88",
      "gnsim": "\u22E7",
      "gopf": "\u{1D558}",
      "gscr": "\u210A",
      "gsime": "\u2A8E",
      "gsiml": "\u2A90",
      "gtcc": "\u2AA7",
      "gtcir": "\u2A7A",
      "gtdot": "\u22D7",
      "gtrdot": "\u22D7",
      "gtlPar": "\u2995",
      "gtquest": "\u2A7C",
      "gtrarr": "\u2978",
      "gvertneqq": "\u2269\uFE00",
      "gvnE": "\u2269\uFE00",
      "hardcy": "\u044A",
      "harrcir": "\u2948",
      "harrw": "\u21AD",
      "leftrightsquigarrow": "\u21AD",
      "hbar": "\u210F",
      "hslash": "\u210F",
      "planck": "\u210F",
      "plankv": "\u210F",
      "hcirc": "\u0125",
      "hearts": "\u2665",
      "heartsuit": "\u2665",
      "hellip": "\u2026",
      "mldr": "\u2026",
      "hercon": "\u22B9",
      "hfr": "\u{1D525}",
      "hksearow": "\u2925",
      "searhk": "\u2925",
      "hkswarow": "\u2926",
      "swarhk": "\u2926",
      "hoarr": "\u21FF",
      "homtht": "\u223B",
      "hookleftarrow": "\u21A9",
      "larrhk": "\u21A9",
      "hookrightarrow": "\u21AA",
      "rarrhk": "\u21AA",
      "hopf": "\u{1D559}",
      "horbar": "\u2015",
      "hscr": "\u{1D4BD}",
      "hstrok": "\u0127",
      "hybull": "\u2043",
      "iacute": "\xED",
      "icirc": "\xEE",
      "icy": "\u0438",
      "iecy": "\u0435",
      "iexcl": "\xA1",
      "ifr": "\u{1D526}",
      "igrave": "\xEC",
      "iiiint": "\u2A0C",
      "qint": "\u2A0C",
      "iiint": "\u222D",
      "tint": "\u222D",
      "iinfin": "\u29DC",
      "iiota": "\u2129",
      "ijlig": "\u0133",
      "imacr": "\u012B",
      "imath": "\u0131",
      "inodot": "\u0131",
      "imof": "\u22B7",
      "imped": "\u01B5",
      "incare": "\u2105",
      "infin": "\u221E",
      "infintie": "\u29DD",
      "intcal": "\u22BA",
      "intercal": "\u22BA",
      "intlarhk": "\u2A17",
      "intprod": "\u2A3C",
      "iprod": "\u2A3C",
      "iocy": "\u0451",
      "iogon": "\u012F",
      "iopf": "\u{1D55A}",
      "iota": "\u03B9",
      "iquest": "\xBF",
      "iscr": "\u{1D4BE}",
      "isinE": "\u22F9",
      "isindot": "\u22F5",
      "isins": "\u22F4",
      "isinsv": "\u22F3",
      "itilde": "\u0129",
      "iukcy": "\u0456",
      "iuml": "\xEF",
      "jcirc": "\u0135",
      "jcy": "\u0439",
      "jfr": "\u{1D527}",
      "jmath": "\u0237",
      "jopf": "\u{1D55B}",
      "jscr": "\u{1D4BF}",
      "jsercy": "\u0458",
      "jukcy": "\u0454",
      "kappa": "\u03BA",
      "kappav": "\u03F0",
      "varkappa": "\u03F0",
      "kcedil": "\u0137",
      "kcy": "\u043A",
      "kfr": "\u{1D528}",
      "kgreen": "\u0138",
      "khcy": "\u0445",
      "kjcy": "\u045C",
      "kopf": "\u{1D55C}",
      "kscr": "\u{1D4C0}",
      "lAtail": "\u291B",
      "lBarr": "\u290E",
      "lEg": "\u2A8B",
      "lesseqqgtr": "\u2A8B",
      "lHar": "\u2962",
      "lacute": "\u013A",
      "laemptyv": "\u29B4",
      "lambda": "\u03BB",
      "langd": "\u2991",
      "lap": "\u2A85",
      "lessapprox": "\u2A85",
      "laquo": "\xAB",
      "larrbfs": "\u291F",
      "larrfs": "\u291D",
      "larrlp": "\u21AB",
      "looparrowleft": "\u21AB",
      "larrpl": "\u2939",
      "larrsim": "\u2973",
      "larrtl": "\u21A2",
      "leftarrowtail": "\u21A2",
      "lat": "\u2AAB",
      "latail": "\u2919",
      "late": "\u2AAD",
      "lates": "\u2AAD\uFE00",
      "lbarr": "\u290C",
      "lbbrk": "\u2772",
      "lbrace": "{",
      "lcub": "{",
      "lbrack": "[",
      "lsqb": "[",
      "lbrke": "\u298B",
      "lbrksld": "\u298F",
      "lbrkslu": "\u298D",
      "lcaron": "\u013E",
      "lcedil": "\u013C",
      "lcy": "\u043B",
      "ldca": "\u2936",
      "ldrdhar": "\u2967",
      "ldrushar": "\u294B",
      "ldsh": "\u21B2",
      "le": "\u2264",
      "leq": "\u2264",
      "leftleftarrows": "\u21C7",
      "llarr": "\u21C7",
      "leftthreetimes": "\u22CB",
      "lthree": "\u22CB",
      "lescc": "\u2AA8",
      "lesdot": "\u2A7F",
      "lesdoto": "\u2A81",
      "lesdotor": "\u2A83",
      "lesg": "\u22DA\uFE00",
      "lesges": "\u2A93",
      "lessdot": "\u22D6",
      "ltdot": "\u22D6",
      "lfisht": "\u297C",
      "lfr": "\u{1D529}",
      "lgE": "\u2A91",
      "lharul": "\u296A",
      "lhblk": "\u2584",
      "ljcy": "\u0459",
      "llhard": "\u296B",
      "lltri": "\u25FA",
      "lmidot": "\u0140",
      "lmoust": "\u23B0",
      "lmoustache": "\u23B0",
      "lnE": "\u2268",
      "lneqq": "\u2268",
      "lnap": "\u2A89",
      "lnapprox": "\u2A89",
      "lne": "\u2A87",
      "lneq": "\u2A87",
      "lnsim": "\u22E6",
      "loang": "\u27EC",
      "loarr": "\u21FD",
      "longmapsto": "\u27FC",
      "xmap": "\u27FC",
      "looparrowright": "\u21AC",
      "rarrlp": "\u21AC",
      "lopar": "\u2985",
      "lopf": "\u{1D55D}",
      "loplus": "\u2A2D",
      "lotimes": "\u2A34",
      "lowast": "\u2217",
      "loz": "\u25CA",
      "lozenge": "\u25CA",
      "lpar": "(",
      "lparlt": "\u2993",
      "lrhard": "\u296D",
      "lrm": "\u200E",
      "lrtri": "\u22BF",
      "lsaquo": "\u2039",
      "lscr": "\u{1D4C1}",
      "lsime": "\u2A8D",
      "lsimg": "\u2A8F",
      "lsquor": "\u201A",
      "sbquo": "\u201A",
      "lstrok": "\u0142",
      "ltcc": "\u2AA6",
      "ltcir": "\u2A79",
      "ltimes": "\u22C9",
      "ltlarr": "\u2976",
      "ltquest": "\u2A7B",
      "ltrPar": "\u2996",
      "ltri": "\u25C3",
      "triangleleft": "\u25C3",
      "lurdshar": "\u294A",
      "luruhar": "\u2966",
      "lvertneqq": "\u2268\uFE00",
      "lvnE": "\u2268\uFE00",
      "mDDot": "\u223A",
      "macr": "\xAF",
      "strns": "\xAF",
      "male": "\u2642",
      "malt": "\u2720",
      "maltese": "\u2720",
      "marker": "\u25AE",
      "mcomma": "\u2A29",
      "mcy": "\u043C",
      "mdash": "\u2014",
      "mfr": "\u{1D52A}",
      "mho": "\u2127",
      "micro": "\xB5",
      "midcir": "\u2AF0",
      "minus": "\u2212",
      "minusdu": "\u2A2A",
      "mlcp": "\u2ADB",
      "models": "\u22A7",
      "mopf": "\u{1D55E}",
      "mscr": "\u{1D4C2}",
      "mu": "\u03BC",
      "multimap": "\u22B8",
      "mumap": "\u22B8",
      "nGg": "\u22D9\u0338",
      "nGt": "\u226B\u20D2",
      "nLeftarrow": "\u21CD",
      "nlArr": "\u21CD",
      "nLeftrightarrow": "\u21CE",
      "nhArr": "\u21CE",
      "nLl": "\u22D8\u0338",
      "nLt": "\u226A\u20D2",
      "nRightarrow": "\u21CF",
      "nrArr": "\u21CF",
      "nVDash": "\u22AF",
      "nVdash": "\u22AE",
      "nacute": "\u0144",
      "nang": "\u2220\u20D2",
      "napE": "\u2A70\u0338",
      "napid": "\u224B\u0338",
      "napos": "\u0149",
      "natur": "\u266E",
      "natural": "\u266E",
      "ncap": "\u2A43",
      "ncaron": "\u0148",
      "ncedil": "\u0146",
      "ncongdot": "\u2A6D\u0338",
      "ncup": "\u2A42",
      "ncy": "\u043D",
      "ndash": "\u2013",
      "neArr": "\u21D7",
      "nearhk": "\u2924",
      "nedot": "\u2250\u0338",
      "nesear": "\u2928",
      "toea": "\u2928",
      "nfr": "\u{1D52B}",
      "nharr": "\u21AE",
      "nleftrightarrow": "\u21AE",
      "nhpar": "\u2AF2",
      "nis": "\u22FC",
      "nisd": "\u22FA",
      "njcy": "\u045A",
      "nlE": "\u2266\u0338",
      "nleqq": "\u2266\u0338",
      "nlarr": "\u219A",
      "nleftarrow": "\u219A",
      "nldr": "\u2025",
      "nopf": "\u{1D55F}",
      "not": "\xAC",
      "notinE": "\u22F9\u0338",
      "notindot": "\u22F5\u0338",
      "notinvb": "\u22F7",
      "notinvc": "\u22F6",
      "notnivb": "\u22FE",
      "notnivc": "\u22FD",
      "nparsl": "\u2AFD\u20E5",
      "npart": "\u2202\u0338",
      "npolint": "\u2A14",
      "nrarr": "\u219B",
      "nrightarrow": "\u219B",
      "nrarrc": "\u2933\u0338",
      "nrarrw": "\u219D\u0338",
      "nscr": "\u{1D4C3}",
      "nsub": "\u2284",
      "nsubE": "\u2AC5\u0338",
      "nsubseteqq": "\u2AC5\u0338",
      "nsup": "\u2285",
      "nsupE": "\u2AC6\u0338",
      "nsupseteqq": "\u2AC6\u0338",
      "ntilde": "\xF1",
      "nu": "\u03BD",
      "num": "#",
      "numero": "\u2116",
      "numsp": "\u2007",
      "nvDash": "\u22AD",
      "nvHarr": "\u2904",
      "nvap": "\u224D\u20D2",
      "nvdash": "\u22AC",
      "nvge": "\u2265\u20D2",
      "nvgt": ">\u20D2",
      "nvinfin": "\u29DE",
      "nvlArr": "\u2902",
      "nvle": "\u2264\u20D2",
      "nvlt": "<\u20D2",
      "nvltrie": "\u22B4\u20D2",
      "nvrArr": "\u2903",
      "nvrtrie": "\u22B5\u20D2",
      "nvsim": "\u223C\u20D2",
      "nwArr": "\u21D6",
      "nwarhk": "\u2923",
      "nwnear": "\u2927",
      "oacute": "\xF3",
      "ocirc": "\xF4",
      "ocy": "\u043E",
      "odblac": "\u0151",
      "odiv": "\u2A38",
      "odsold": "\u29BC",
      "oelig": "\u0153",
      "ofcir": "\u29BF",
      "ofr": "\u{1D52C}",
      "ogon": "\u02DB",
      "ograve": "\xF2",
      "ogt": "\u29C1",
      "ohbar": "\u29B5",
      "olcir": "\u29BE",
      "olcross": "\u29BB",
      "olt": "\u29C0",
      "omacr": "\u014D",
      "omega": "\u03C9",
      "omicron": "\u03BF",
      "omid": "\u29B6",
      "oopf": "\u{1D560}",
      "opar": "\u29B7",
      "operp": "\u29B9",
      "or": "\u2228",
      "vee": "\u2228",
      "ord": "\u2A5D",
      "order": "\u2134",
      "orderof": "\u2134",
      "oscr": "\u2134",
      "ordf": "\xAA",
      "ordm": "\xBA",
      "origof": "\u22B6",
      "oror": "\u2A56",
      "orslope": "\u2A57",
      "orv": "\u2A5B",
      "oslash": "\xF8",
      "osol": "\u2298",
      "otilde": "\xF5",
      "otimesas": "\u2A36",
      "ouml": "\xF6",
      "ovbar": "\u233D",
      "para": "\xB6",
      "parsim": "\u2AF3",
      "parsl": "\u2AFD",
      "pcy": "\u043F",
      "percnt": "%",
      "period": ".",
      "permil": "\u2030",
      "pertenk": "\u2031",
      "pfr": "\u{1D52D}",
      "phi": "\u03C6",
      "phiv": "\u03D5",
      "straightphi": "\u03D5",
      "varphi": "\u03D5",
      "phone": "\u260E",
      "pi": "\u03C0",
      "piv": "\u03D6",
      "varpi": "\u03D6",
      "planckh": "\u210E",
      "plus": "+",
      "plusacir": "\u2A23",
      "pluscir": "\u2A22",
      "plusdu": "\u2A25",
      "pluse": "\u2A72",
      "plussim": "\u2A26",
      "plustwo": "\u2A27",
      "pointint": "\u2A15",
      "popf": "\u{1D561}",
      "pound": "\xA3",
      "prE": "\u2AB3",
      "prap": "\u2AB7",
      "precapprox": "\u2AB7",
      "precnapprox": "\u2AB9",
      "prnap": "\u2AB9",
      "precneqq": "\u2AB5",
      "prnE": "\u2AB5",
      "precnsim": "\u22E8",
      "prnsim": "\u22E8",
      "prime": "\u2032",
      "profalar": "\u232E",
      "profline": "\u2312",
      "profsurf": "\u2313",
      "prurel": "\u22B0",
      "pscr": "\u{1D4C5}",
      "psi": "\u03C8",
      "puncsp": "\u2008",
      "qfr": "\u{1D52E}",
      "qopf": "\u{1D562}",
      "qprime": "\u2057",
      "qscr": "\u{1D4C6}",
      "quatint": "\u2A16",
      "quest": "?",
      "rAtail": "\u291C",
      "rHar": "\u2964",
      "race": "\u223D\u0331",
      "racute": "\u0155",
      "raemptyv": "\u29B3",
      "rangd": "\u2992",
      "range": "\u29A5",
      "raquo": "\xBB",
      "rarrap": "\u2975",
      "rarrbfs": "\u2920",
      "rarrc": "\u2933",
      "rarrfs": "\u291E",
      "rarrpl": "\u2945",
      "rarrsim": "\u2974",
      "rarrtl": "\u21A3",
      "rightarrowtail": "\u21A3",
      "rarrw": "\u219D",
      "rightsquigarrow": "\u219D",
      "ratail": "\u291A",
      "ratio": "\u2236",
      "rbbrk": "\u2773",
      "rbrace": "}",
      "rcub": "}",
      "rbrack": "]",
      "rsqb": "]",
      "rbrke": "\u298C",
      "rbrksld": "\u298E",
      "rbrkslu": "\u2990",
      "rcaron": "\u0159",
      "rcedil": "\u0157",
      "rcy": "\u0440",
      "rdca": "\u2937",
      "rdldhar": "\u2969",
      "rdsh": "\u21B3",
      "rect": "\u25AD",
      "rfisht": "\u297D",
      "rfr": "\u{1D52F}",
      "rharul": "\u296C",
      "rho": "\u03C1",
      "rhov": "\u03F1",
      "varrho": "\u03F1",
      "rightrightarrows": "\u21C9",
      "rrarr": "\u21C9",
      "rightthreetimes": "\u22CC",
      "rthree": "\u22CC",
      "ring": "\u02DA",
      "rlm": "\u200F",
      "rmoust": "\u23B1",
      "rmoustache": "\u23B1",
      "rnmid": "\u2AEE",
      "roang": "\u27ED",
      "roarr": "\u21FE",
      "ropar": "\u2986",
      "ropf": "\u{1D563}",
      "roplus": "\u2A2E",
      "rotimes": "\u2A35",
      "rpar": ")",
      "rpargt": "\u2994",
      "rppolint": "\u2A12",
      "rsaquo": "\u203A",
      "rscr": "\u{1D4C7}",
      "rtimes": "\u22CA",
      "rtri": "\u25B9",
      "triangleright": "\u25B9",
      "rtriltri": "\u29CE",
      "ruluhar": "\u2968",
      "rx": "\u211E",
      "sacute": "\u015B",
      "scE": "\u2AB4",
      "scap": "\u2AB8",
      "succapprox": "\u2AB8",
      "scaron": "\u0161",
      "scedil": "\u015F",
      "scirc": "\u015D",
      "scnE": "\u2AB6",
      "succneqq": "\u2AB6",
      "scnap": "\u2ABA",
      "succnapprox": "\u2ABA",
      "scnsim": "\u22E9",
      "succnsim": "\u22E9",
      "scpolint": "\u2A13",
      "scy": "\u0441",
      "sdot": "\u22C5",
      "sdote": "\u2A66",
      "seArr": "\u21D8",
      "sect": "\xA7",
      "semi": ";",
      "seswar": "\u2929",
      "tosa": "\u2929",
      "sext": "\u2736",
      "sfr": "\u{1D530}",
      "sharp": "\u266F",
      "shchcy": "\u0449",
      "shcy": "\u0448",
      "shy": "\xAD",
      "sigma": "\u03C3",
      "sigmaf": "\u03C2",
      "sigmav": "\u03C2",
      "varsigma": "\u03C2",
      "simdot": "\u2A6A",
      "simg": "\u2A9E",
      "simgE": "\u2AA0",
      "siml": "\u2A9D",
      "simlE": "\u2A9F",
      "simne": "\u2246",
      "simplus": "\u2A24",
      "simrarr": "\u2972",
      "smashp": "\u2A33",
      "smeparsl": "\u29E4",
      "smile": "\u2323",
      "ssmile": "\u2323",
      "smt": "\u2AAA",
      "smte": "\u2AAC",
      "smtes": "\u2AAC\uFE00",
      "softcy": "\u044C",
      "sol": "/",
      "solb": "\u29C4",
      "solbar": "\u233F",
      "sopf": "\u{1D564}",
      "spades": "\u2660",
      "spadesuit": "\u2660",
      "sqcaps": "\u2293\uFE00",
      "sqcups": "\u2294\uFE00",
      "sscr": "\u{1D4C8}",
      "star": "\u2606",
      "sub": "\u2282",
      "subset": "\u2282",
      "subE": "\u2AC5",
      "subseteqq": "\u2AC5",
      "subdot": "\u2ABD",
      "subedot": "\u2AC3",
      "submult": "\u2AC1",
      "subnE": "\u2ACB",
      "subsetneqq": "\u2ACB",
      "subne": "\u228A",
      "subsetneq": "\u228A",
      "subplus": "\u2ABF",
      "subrarr": "\u2979",
      "subsim": "\u2AC7",
      "subsub": "\u2AD5",
      "subsup": "\u2AD3",
      "sung": "\u266A",
      "sup1": "\xB9",
      "sup2": "\xB2",
      "sup3": "\xB3",
      "supE": "\u2AC6",
      "supseteqq": "\u2AC6",
      "supdot": "\u2ABE",
      "supdsub": "\u2AD8",
      "supedot": "\u2AC4",
      "suphsol": "\u27C9",
      "suphsub": "\u2AD7",
      "suplarr": "\u297B",
      "supmult": "\u2AC2",
      "supnE": "\u2ACC",
      "supsetneqq": "\u2ACC",
      "supne": "\u228B",
      "supsetneq": "\u228B",
      "supplus": "\u2AC0",
      "supsim": "\u2AC8",
      "supsub": "\u2AD4",
      "supsup": "\u2AD6",
      "swArr": "\u21D9",
      "swnwar": "\u292A",
      "szlig": "\xDF",
      "target": "\u2316",
      "tau": "\u03C4",
      "tcaron": "\u0165",
      "tcedil": "\u0163",
      "tcy": "\u0442",
      "telrec": "\u2315",
      "tfr": "\u{1D531}",
      "theta": "\u03B8",
      "thetasym": "\u03D1",
      "thetav": "\u03D1",
      "vartheta": "\u03D1",
      "thorn": "\xFE",
      "times": "\xD7",
      "timesbar": "\u2A31",
      "timesd": "\u2A30",
      "topbot": "\u2336",
      "topcir": "\u2AF1",
      "topf": "\u{1D565}",
      "topfork": "\u2ADA",
      "tprime": "\u2034",
      "triangle": "\u25B5",
      "utri": "\u25B5",
      "triangleq": "\u225C",
      "trie": "\u225C",
      "tridot": "\u25EC",
      "triminus": "\u2A3A",
      "triplus": "\u2A39",
      "trisb": "\u29CD",
      "tritime": "\u2A3B",
      "trpezium": "\u23E2",
      "tscr": "\u{1D4C9}",
      "tscy": "\u0446",
      "tshcy": "\u045B",
      "tstrok": "\u0167",
      "uHar": "\u2963",
      "uacute": "\xFA",
      "ubrcy": "\u045E",
      "ubreve": "\u016D",
      "ucirc": "\xFB",
      "ucy": "\u0443",
      "udblac": "\u0171",
      "ufisht": "\u297E",
      "ufr": "\u{1D532}",
      "ugrave": "\xF9",
      "uhblk": "\u2580",
      "ulcorn": "\u231C",
      "ulcorner": "\u231C",
      "ulcrop": "\u230F",
      "ultri": "\u25F8",
      "umacr": "\u016B",
      "uogon": "\u0173",
      "uopf": "\u{1D566}",
      "upsi": "\u03C5",
      "upsilon": "\u03C5",
      "upuparrows": "\u21C8",
      "uuarr": "\u21C8",
      "urcorn": "\u231D",
      "urcorner": "\u231D",
      "urcrop": "\u230E",
      "uring": "\u016F",
      "urtri": "\u25F9",
      "uscr": "\u{1D4CA}",
      "utdot": "\u22F0",
      "utilde": "\u0169",
      "uuml": "\xFC",
      "uwangle": "\u29A7",
      "vBar": "\u2AE8",
      "vBarv": "\u2AE9",
      "vangrt": "\u299C",
      "varsubsetneq": "\u228A\uFE00",
      "vsubne": "\u228A\uFE00",
      "varsubsetneqq": "\u2ACB\uFE00",
      "vsubnE": "\u2ACB\uFE00",
      "varsupsetneq": "\u228B\uFE00",
      "vsupne": "\u228B\uFE00",
      "varsupsetneqq": "\u2ACC\uFE00",
      "vsupnE": "\u2ACC\uFE00",
      "vcy": "\u0432",
      "veebar": "\u22BB",
      "veeeq": "\u225A",
      "vellip": "\u22EE",
      "vfr": "\u{1D533}",
      "vopf": "\u{1D567}",
      "vscr": "\u{1D4CB}",
      "vzigzag": "\u299A",
      "wcirc": "\u0175",
      "wedbar": "\u2A5F",
      "wedgeq": "\u2259",
      "weierp": "\u2118",
      "wp": "\u2118",
      "wfr": "\u{1D534}",
      "wopf": "\u{1D568}",
      "wscr": "\u{1D4CC}",
      "xfr": "\u{1D535}",
      "xi": "\u03BE",
      "xnis": "\u22FB",
      "xopf": "\u{1D569}",
      "xscr": "\u{1D4CD}",
      "yacute": "\xFD",
      "yacy": "\u044F",
      "ycirc": "\u0177",
      "ycy": "\u044B",
      "yen": "\xA5",
      "yfr": "\u{1D536}",
      "yicy": "\u0457",
      "yopf": "\u{1D56A}",
      "yscr": "\u{1D4CE}",
      "yucy": "\u044E",
      "yuml": "\xFF",
      "zacute": "\u017A",
      "zcaron": "\u017E",
      "zcy": "\u0437",
      "zdot": "\u017C",
      "zeta": "\u03B6",
      "zfr": "\u{1D537}",
      "zhcy": "\u0436",
      "zigrarr": "\u21DD",
      "zopf": "\u{1D56B}",
      "zscr": "\u{1D4CF}",
      "zwj": "\u200D",
      "zwnj": "\u200C"
    };
    NGSP_UNICODE = "\uE500";
    NAMED_ENTITIES["ngsp"] = NGSP_UNICODE;
    TokenizeResult = class {
      tokens;
      errors;
      nonNormalizedIcuExpressions;
      constructor(tokens, errors, nonNormalizedIcuExpressions) {
        this.tokens = tokens;
        this.errors = errors;
        this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;
      }
    };
    _CR_OR_CRLF_REGEXP = /\r\n?/g;
    (function(CharacterReferenceType2) {
      CharacterReferenceType2["HEX"] = "hexadecimal";
      CharacterReferenceType2["DEC"] = "decimal";
    })(CharacterReferenceType || (CharacterReferenceType = {}));
    SUPPORTED_BLOCKS = [
      "@if",
      "@else",
      // Covers `@else if` as well
      "@for",
      "@switch",
      "@case",
      "@default",
      "@empty",
      "@defer",
      "@placeholder",
      "@loading",
      "@error"
    ];
    _Tokenizer = class {
      _getTagDefinition;
      _cursor;
      _tokenizeIcu;
      _interpolationConfig;
      _leadingTriviaCodePoints;
      _currentTokenStart = null;
      _currentTokenType = null;
      _expansionCaseStack = [];
      _openDirectiveCount = 0;
      _inInterpolation = false;
      _preserveLineEndings;
      _i18nNormalizeLineEndingsInICUs;
      _tokenizeBlocks;
      _tokenizeLet;
      _selectorlessEnabled;
      tokens = [];
      errors = [];
      nonNormalizedIcuExpressions = [];
      /**
       * @param _file The html source file being tokenized.
       * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
       * @param options Configuration of the tokenization.
       */
      constructor(_file, _getTagDefinition, options) {
        this._getTagDefinition = _getTagDefinition;
        this._tokenizeIcu = options.tokenizeExpansionForms || false;
        this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
        this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map((c) => c.codePointAt(0) || 0);
        const range = options.range || {
          endPos: _file.content.length,
          startPos: 0,
          startLine: 0,
          startCol: 0
        };
        this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);
        this._preserveLineEndings = options.preserveLineEndings || false;
        this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;
        this._tokenizeBlocks = options.tokenizeBlocks ?? true;
        this._tokenizeLet = options.tokenizeLet ?? true;
        this._selectorlessEnabled = options.selectorlessEnabled ?? false;
        try {
          this._cursor.init();
        } catch (e) {
          this.handleError(e);
        }
      }
      _processCarriageReturns(content) {
        if (this._preserveLineEndings) {
          return content;
        }
        return content.replace(_CR_OR_CRLF_REGEXP, "\n");
      }
      tokenize() {
        while (this._cursor.peek() !== $EOF) {
          const start = this._cursor.clone();
          try {
            if (this._attemptCharCode($LT)) {
              if (this._attemptCharCode($BANG)) {
                if (this._attemptCharCode($LBRACKET)) {
                  this._consumeCdata(start);
                } else if (this._attemptCharCode($MINUS)) {
                  this._consumeComment(start);
                } else {
                  this._consumeDocType(start);
                }
              } else if (this._attemptCharCode($SLASH)) {
                this._consumeTagClose(start);
              } else {
                this._consumeTagOpen(start);
              }
            } else if (this._tokenizeLet && // Use `peek` instead of `attempCharCode` since we
            // don't want to advance in case it's not `@let`.
            this._cursor.peek() === $AT && !this._inInterpolation && this._isLetStart()) {
              this._consumeLetDeclaration(start);
            } else if (this._tokenizeBlocks && this._isBlockStart()) {
              this._consumeBlockStart(start);
            } else if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode($RBRACE)) {
              this._consumeBlockEnd(start);
            } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
              this._consumeWithInterpolation(5, 8, () => this._isTextEnd(), () => this._isTagStart());
            }
          } catch (e) {
            this.handleError(e);
          }
        }
        this._beginToken(
          41
          /* TokenType.EOF */
        );
        this._endToken([]);
      }
      _getBlockName() {
        let spacesInNameAllowed = false;
        const nameCursor = this._cursor.clone();
        this._attemptCharCodeUntilFn((code) => {
          if (isWhitespace(code)) {
            return !spacesInNameAllowed;
          }
          if (isBlockNameChar(code)) {
            spacesInNameAllowed = true;
            return false;
          }
          return true;
        });
        return this._cursor.getChars(nameCursor).trim();
      }
      _consumeBlockStart(start) {
        this._requireCharCode($AT);
        this._beginToken(24, start);
        const startToken = this._endToken([this._getBlockName()]);
        if (this._cursor.peek() === $LPAREN) {
          this._cursor.advance();
          this._consumeBlockParameters();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (this._attemptCharCode($RPAREN)) {
            this._attemptCharCodeUntilFn(isNotWhitespace);
          } else {
            startToken.type = 28;
            return;
          }
        }
        if (this._attemptCharCode($LBRACE)) {
          this._beginToken(
            25
            /* TokenType.BLOCK_OPEN_END */
          );
          this._endToken([]);
        } else {
          startToken.type = 28;
        }
      }
      _consumeBlockEnd(start) {
        this._beginToken(26, start);
        this._endToken([]);
      }
      _consumeBlockParameters() {
        this._attemptCharCodeUntilFn(isBlockParameterChar);
        while (this._cursor.peek() !== $RPAREN && this._cursor.peek() !== $EOF) {
          this._beginToken(
            27
            /* TokenType.BLOCK_PARAMETER */
          );
          const start = this._cursor.clone();
          let inQuote = null;
          let openParens = 0;
          while (this._cursor.peek() !== $SEMICOLON && this._cursor.peek() !== $EOF || inQuote !== null) {
            const char = this._cursor.peek();
            if (char === $BACKSLASH) {
              this._cursor.advance();
            } else if (char === inQuote) {
              inQuote = null;
            } else if (inQuote === null && isQuote(char)) {
              inQuote = char;
            } else if (char === $LPAREN && inQuote === null) {
              openParens++;
            } else if (char === $RPAREN && inQuote === null) {
              if (openParens === 0) {
                break;
              } else if (openParens > 0) {
                openParens--;
              }
            }
            this._cursor.advance();
          }
          this._endToken([this._cursor.getChars(start)]);
          this._attemptCharCodeUntilFn(isBlockParameterChar);
        }
      }
      _consumeLetDeclaration(start) {
        this._requireStr("@let");
        this._beginToken(29, start);
        if (isWhitespace(this._cursor.peek())) {
          this._attemptCharCodeUntilFn(isNotWhitespace);
        } else {
          const token = this._endToken([this._cursor.getChars(start)]);
          token.type = 32;
          return;
        }
        const startToken = this._endToken([this._getLetDeclarationName()]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (!this._attemptCharCode($EQ)) {
          startToken.type = 32;
          return;
        }
        this._attemptCharCodeUntilFn((code) => isNotWhitespace(code) && !isNewLine(code));
        this._consumeLetDeclarationValue();
        const endChar = this._cursor.peek();
        if (endChar === $SEMICOLON) {
          this._beginToken(
            31
            /* TokenType.LET_END */
          );
          this._endToken([]);
          this._cursor.advance();
        } else {
          startToken.type = 32;
          startToken.sourceSpan = this._cursor.getSpan(start);
        }
      }
      _getLetDeclarationName() {
        const nameCursor = this._cursor.clone();
        let allowDigit = false;
        this._attemptCharCodeUntilFn((code) => {
          if (isAsciiLetter(code) || code === $$ || code === $_ || // `@let` names can't start with a digit, but digits are valid anywhere else in the name.
          allowDigit && isDigit(code)) {
            allowDigit = true;
            return false;
          }
          return true;
        });
        return this._cursor.getChars(nameCursor).trim();
      }
      _consumeLetDeclarationValue() {
        const start = this._cursor.clone();
        this._beginToken(30, start);
        while (this._cursor.peek() !== $EOF) {
          const char = this._cursor.peek();
          if (char === $SEMICOLON) {
            break;
          }
          if (isQuote(char)) {
            this._cursor.advance();
            this._attemptCharCodeUntilFn((inner) => {
              if (inner === $BACKSLASH) {
                this._cursor.advance();
                return false;
              }
              return inner === char;
            });
          }
          this._cursor.advance();
        }
        this._endToken([this._cursor.getChars(start)]);
      }
      /**
       * @returns whether an ICU token has been created
       * @internal
       */
      _tokenizeExpansionForm() {
        if (this.isExpansionFormStart()) {
          this._consumeExpansionFormStart();
          return true;
        }
        if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
          this._consumeExpansionCaseStart();
          return true;
        }
        if (this._cursor.peek() === $RBRACE) {
          if (this._isInExpansionCase()) {
            this._consumeExpansionCaseEnd();
            return true;
          }
          if (this._isInExpansionForm()) {
            this._consumeExpansionFormEnd();
            return true;
          }
        }
        return false;
      }
      _beginToken(type, start = this._cursor.clone()) {
        this._currentTokenStart = start;
        this._currentTokenType = type;
      }
      _endToken(parts, end) {
        if (this._currentTokenStart === null) {
          throw new ParseError(this._cursor.getSpan(end), "Programming error - attempted to end a token when there was no start to the token");
        }
        if (this._currentTokenType === null) {
          throw new ParseError(this._cursor.getSpan(this._currentTokenStart), "Programming error - attempted to end a token which has no token type");
        }
        const token = {
          type: this._currentTokenType,
          parts,
          sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)
        };
        this.tokens.push(token);
        this._currentTokenStart = null;
        this._currentTokenType = null;
        return token;
      }
      _createError(msg, span) {
        if (this._isInExpansionForm()) {
          msg += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`;
        }
        const error = new ParseError(span, msg);
        this._currentTokenStart = null;
        this._currentTokenType = null;
        return error;
      }
      handleError(e) {
        if (e instanceof CursorError) {
          e = this._createError(e.msg, this._cursor.getSpan(e.cursor));
        }
        if (e instanceof ParseError) {
          this.errors.push(e);
        } else {
          throw e;
        }
      }
      _attemptCharCode(charCode) {
        if (this._cursor.peek() === charCode) {
          this._cursor.advance();
          return true;
        }
        return false;
      }
      _attemptCharCodeCaseInsensitive(charCode) {
        if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
          this._cursor.advance();
          return true;
        }
        return false;
      }
      _requireCharCode(charCode) {
        const location2 = this._cursor.clone();
        if (!this._attemptCharCode(charCode)) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
        }
      }
      _attemptStr(chars) {
        const len = chars.length;
        if (this._cursor.charsLeft() < len) {
          return false;
        }
        const initialPosition = this._cursor.clone();
        for (let i = 0; i < len; i++) {
          if (!this._attemptCharCode(chars.charCodeAt(i))) {
            this._cursor = initialPosition;
            return false;
          }
        }
        return true;
      }
      _attemptStrCaseInsensitive(chars) {
        for (let i = 0; i < chars.length; i++) {
          if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
            return false;
          }
        }
        return true;
      }
      _requireStr(chars) {
        const location2 = this._cursor.clone();
        if (!this._attemptStr(chars)) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
        }
      }
      _attemptCharCodeUntilFn(predicate) {
        while (!predicate(this._cursor.peek())) {
          this._cursor.advance();
        }
      }
      _requireCharCodeUntilFn(predicate, len) {
        const start = this._cursor.clone();
        this._attemptCharCodeUntilFn(predicate);
        if (this._cursor.diff(start) < len) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
        }
      }
      _attemptUntilChar(char) {
        while (this._cursor.peek() !== char) {
          this._cursor.advance();
        }
      }
      _readChar() {
        const char = String.fromCodePoint(this._cursor.peek());
        this._cursor.advance();
        return char;
      }
      _peekStr(chars) {
        const len = chars.length;
        if (this._cursor.charsLeft() < len) {
          return false;
        }
        const cursor = this._cursor.clone();
        for (let i = 0; i < len; i++) {
          if (cursor.peek() !== chars.charCodeAt(i)) {
            return false;
          }
          cursor.advance();
        }
        return true;
      }
      _isBlockStart() {
        return this._cursor.peek() === $AT && SUPPORTED_BLOCKS.some((blockName) => this._peekStr(blockName));
      }
      _isLetStart() {
        return this._cursor.peek() === $AT && this._peekStr("@let");
      }
      _consumeEntity(textTokenType) {
        this._beginToken(
          9
          /* TokenType.ENCODED_ENTITY */
        );
        const start = this._cursor.clone();
        this._cursor.advance();
        if (this._attemptCharCode($HASH)) {
          const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
          const codeStart = this._cursor.clone();
          this._attemptCharCodeUntilFn(isDigitEntityEnd);
          if (this._cursor.peek() != $SEMICOLON) {
            this._cursor.advance();
            const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;
            throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());
          }
          const strNum = this._cursor.getChars(codeStart);
          this._cursor.advance();
          try {
            const charCode = parseInt(strNum, isHex ? 16 : 10);
            this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);
          } catch {
            throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
          }
        } else {
          const nameStart = this._cursor.clone();
          this._attemptCharCodeUntilFn(isNamedEntityEnd);
          if (this._cursor.peek() != $SEMICOLON) {
            this._beginToken(textTokenType, start);
            this._cursor = nameStart;
            this._endToken(["&"]);
          } else {
            const name = this._cursor.getChars(nameStart);
            this._cursor.advance();
            const char = NAMED_ENTITIES.hasOwnProperty(name) && NAMED_ENTITIES[name];
            if (!char) {
              throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));
            }
            this._endToken([char, `&${name};`]);
          }
        }
      }
      _consumeRawText(consumeEntities, endMarkerPredicate) {
        this._beginToken(
          consumeEntities ? 6 : 7
          /* TokenType.RAW_TEXT */
        );
        const parts = [];
        while (true) {
          const tagCloseStart = this._cursor.clone();
          const foundEndMarker = endMarkerPredicate();
          this._cursor = tagCloseStart;
          if (foundEndMarker) {
            break;
          }
          if (consumeEntities && this._cursor.peek() === $AMPERSAND) {
            this._endToken([this._processCarriageReturns(parts.join(""))]);
            parts.length = 0;
            this._consumeEntity(
              6
              /* TokenType.ESCAPABLE_RAW_TEXT */
            );
            this._beginToken(
              6
              /* TokenType.ESCAPABLE_RAW_TEXT */
            );
          } else {
            parts.push(this._readChar());
          }
        }
        this._endToken([this._processCarriageReturns(parts.join(""))]);
      }
      _consumeComment(start) {
        this._beginToken(10, start);
        this._requireCharCode($MINUS);
        this._endToken([]);
        this._consumeRawText(false, () => this._attemptStr("-->"));
        this._beginToken(
          11
          /* TokenType.COMMENT_END */
        );
        this._requireStr("-->");
        this._endToken([]);
      }
      _consumeCdata(start) {
        this._beginToken(12, start);
        this._requireStr("CDATA[");
        this._endToken([]);
        this._consumeRawText(false, () => this._attemptStr("]]>"));
        this._beginToken(
          13
          /* TokenType.CDATA_END */
        );
        this._requireStr("]]>");
        this._endToken([]);
      }
      _consumeDocType(start) {
        this._beginToken(18, start);
        const contentStart = this._cursor.clone();
        this._attemptUntilChar($GT);
        const content = this._cursor.getChars(contentStart);
        this._cursor.advance();
        this._endToken([content]);
      }
      _consumePrefixAndName(endPredicate) {
        const nameOrPrefixStart = this._cursor.clone();
        let prefix = "";
        while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
          this._cursor.advance();
        }
        let nameStart;
        if (this._cursor.peek() === $COLON) {
          prefix = this._cursor.getChars(nameOrPrefixStart);
          this._cursor.advance();
          nameStart = this._cursor.clone();
        } else {
          nameStart = nameOrPrefixStart;
        }
        this._requireCharCodeUntilFn(endPredicate, prefix === "" ? 0 : 1);
        const name = this._cursor.getChars(nameStart);
        return [prefix, name];
      }
      _consumeTagOpen(start) {
        let tagName;
        let prefix;
        let closingTagName;
        let openToken;
        try {
          if (this._selectorlessEnabled && isSelectorlessNameStart(this._cursor.peek())) {
            openToken = this._consumeComponentOpenStart(start);
            [closingTagName, prefix, tagName] = openToken.parts;
            if (prefix) {
              closingTagName += `:${prefix}`;
            }
            if (tagName) {
              closingTagName += `:${tagName}`;
            }
            this._attemptCharCodeUntilFn(isNotWhitespace);
          } else {
            if (!isAsciiLetter(this._cursor.peek())) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
            }
            openToken = this._consumeTagOpenStart(start);
            prefix = openToken.parts[0];
            tagName = closingTagName = openToken.parts[1];
            this._attemptCharCodeUntilFn(isNotWhitespace);
          }
          while (!isAttributeTerminator(this._cursor.peek())) {
            if (this._selectorlessEnabled && this._cursor.peek() === $AT) {
              const start2 = this._cursor.clone();
              const nameStart = start2.clone();
              nameStart.advance();
              if (isSelectorlessNameStart(nameStart.peek())) {
                this._consumeDirective(start2, nameStart);
              }
            } else {
              this._consumeAttribute();
            }
          }
          if (openToken.type === 33) {
            this._consumeComponentOpenEnd();
          } else {
            this._consumeTagOpenEnd();
          }
        } catch (e) {
          if (e instanceof ParseError) {
            if (openToken) {
              openToken.type = openToken.type === 33 ? 37 : 4;
            } else {
              this._beginToken(5, start);
              this._endToken(["<"]);
            }
            return;
          }
          throw e;
        }
        const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);
        if (contentTokenType === TagContentType.RAW_TEXT) {
          this._consumeRawTextWithTagClose(openToken, closingTagName, false);
        } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
          this._consumeRawTextWithTagClose(openToken, closingTagName, true);
        }
      }
      _consumeRawTextWithTagClose(openToken, tagName, consumeEntities) {
        this._consumeRawText(consumeEntities, () => {
          if (!this._attemptCharCode($LT))
            return false;
          if (!this._attemptCharCode($SLASH))
            return false;
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (!this._attemptStrCaseInsensitive(tagName))
            return false;
          this._attemptCharCodeUntilFn(isNotWhitespace);
          return this._attemptCharCode($GT);
        });
        this._beginToken(
          openToken.type === 33 ? 36 : 3
          /* TokenType.TAG_CLOSE */
        );
        this._requireCharCodeUntilFn((code) => code === $GT, 3);
        this._cursor.advance();
        this._endToken(openToken.parts);
      }
      _consumeTagOpenStart(start) {
        this._beginToken(0, start);
        const parts = this._consumePrefixAndName(isNameEnd);
        return this._endToken(parts);
      }
      _consumeComponentOpenStart(start) {
        this._beginToken(33, start);
        const parts = this._consumeComponentName();
        return this._endToken(parts);
      }
      _consumeComponentName() {
        const nameStart = this._cursor.clone();
        while (isSelectorlessNameChar(this._cursor.peek())) {
          this._cursor.advance();
        }
        const name = this._cursor.getChars(nameStart);
        let prefix = "";
        let tagName = "";
        if (this._cursor.peek() === $COLON) {
          this._cursor.advance();
          [prefix, tagName] = this._consumePrefixAndName(isNameEnd);
        }
        return [name, prefix, tagName];
      }
      _consumeAttribute() {
        this._consumeAttributeName();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (this._attemptCharCode($EQ)) {
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._consumeAttributeValue();
        }
        this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      _consumeAttributeName() {
        const attrNameStart = this._cursor.peek();
        if (attrNameStart === $SQ || attrNameStart === $DQ) {
          throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
        }
        this._beginToken(
          14
          /* TokenType.ATTR_NAME */
        );
        let nameEndPredicate;
        if (this._openDirectiveCount > 0) {
          let openParens = 0;
          nameEndPredicate = (code) => {
            if (this._openDirectiveCount > 0) {
              if (code === $LPAREN) {
                openParens++;
              } else if (code === $RPAREN) {
                if (openParens === 0) {
                  return true;
                }
                openParens--;
              }
            }
            return isNameEnd(code);
          };
        } else {
          nameEndPredicate = isNameEnd;
        }
        const prefixAndName = this._consumePrefixAndName(nameEndPredicate);
        this._endToken(prefixAndName);
      }
      _consumeAttributeValue() {
        if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
          const quoteChar = this._cursor.peek();
          this._consumeQuote(quoteChar);
          const endPredicate = () => this._cursor.peek() === quoteChar;
          this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
          this._consumeQuote(quoteChar);
        } else {
          const endPredicate = () => isNameEnd(this._cursor.peek());
          this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
        }
      }
      _consumeQuote(quoteChar) {
        this._beginToken(
          15
          /* TokenType.ATTR_QUOTE */
        );
        this._requireCharCode(quoteChar);
        this._endToken([String.fromCodePoint(quoteChar)]);
      }
      _consumeTagOpenEnd() {
        const tokenType = this._attemptCharCode($SLASH) ? 2 : 1;
        this._beginToken(tokenType);
        this._requireCharCode($GT);
        this._endToken([]);
      }
      _consumeComponentOpenEnd() {
        const tokenType = this._attemptCharCode($SLASH) ? 35 : 34;
        this._beginToken(tokenType);
        this._requireCharCode($GT);
        this._endToken([]);
      }
      _consumeTagClose(start) {
        if (this._selectorlessEnabled) {
          const clone = start.clone();
          while (clone.peek() !== $GT && !isSelectorlessNameStart(clone.peek())) {
            clone.advance();
          }
          if (isSelectorlessNameStart(clone.peek())) {
            this._beginToken(36, start);
            const parts = this._consumeComponentName();
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._requireCharCode($GT);
            this._endToken(parts);
            return;
          }
        }
        this._beginToken(3, start);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        const prefixAndName = this._consumePrefixAndName(isNameEnd);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._requireCharCode($GT);
        this._endToken(prefixAndName);
      }
      _consumeExpansionFormStart() {
        this._beginToken(
          19
          /* TokenType.EXPANSION_FORM_START */
        );
        this._requireCharCode($LBRACE);
        this._endToken([]);
        this._expansionCaseStack.push(
          19
          /* TokenType.EXPANSION_FORM_START */
        );
        this._beginToken(
          7
          /* TokenType.RAW_TEXT */
        );
        const condition = this._readUntil($COMMA);
        const normalizedCondition = this._processCarriageReturns(condition);
        if (this._i18nNormalizeLineEndingsInICUs) {
          this._endToken([normalizedCondition]);
        } else {
          const conditionToken = this._endToken([condition]);
          if (normalizedCondition !== condition) {
            this.nonNormalizedIcuExpressions.push(conditionToken);
          }
        }
        this._requireCharCode($COMMA);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._beginToken(
          7
          /* TokenType.RAW_TEXT */
        );
        const type = this._readUntil($COMMA);
        this._endToken([type]);
        this._requireCharCode($COMMA);
        this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      _consumeExpansionCaseStart() {
        this._beginToken(
          20
          /* TokenType.EXPANSION_CASE_VALUE */
        );
        const value = this._readUntil($LBRACE).trim();
        this._endToken([value]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._beginToken(
          21
          /* TokenType.EXPANSION_CASE_EXP_START */
        );
        this._requireCharCode($LBRACE);
        this._endToken([]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._expansionCaseStack.push(
          21
          /* TokenType.EXPANSION_CASE_EXP_START */
        );
      }
      _consumeExpansionCaseEnd() {
        this._beginToken(
          22
          /* TokenType.EXPANSION_CASE_EXP_END */
        );
        this._requireCharCode($RBRACE);
        this._endToken([]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._expansionCaseStack.pop();
      }
      _consumeExpansionFormEnd() {
        this._beginToken(
          23
          /* TokenType.EXPANSION_FORM_END */
        );
        this._requireCharCode($RBRACE);
        this._endToken([]);
        this._expansionCaseStack.pop();
      }
      /**
       * Consume a string that may contain interpolation expressions.
       *
       * The first token consumed will be of `tokenType` and then there will be alternating
       * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.
       *
       * If an interpolation token ends prematurely it will have no end marker in its `parts` array.
       *
       * @param textTokenType the kind of tokens to interleave around interpolation tokens.
       * @param interpolationTokenType the kind of tokens that contain interpolation.
       * @param endPredicate a function that should return true when we should stop consuming.
       * @param endInterpolation a function that should return true if there is a premature end to an
       *     interpolation expression - i.e. before we get to the normal interpolation closing marker.
       */
      _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {
        this._beginToken(textTokenType);
        const parts = [];
        while (!endPredicate()) {
          const current = this._cursor.clone();
          if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
            this._endToken([this._processCarriageReturns(parts.join(""))], current);
            parts.length = 0;
            this._consumeInterpolation(interpolationTokenType, current, endInterpolation);
            this._beginToken(textTokenType);
          } else if (this._cursor.peek() === $AMPERSAND) {
            this._endToken([this._processCarriageReturns(parts.join(""))]);
            parts.length = 0;
            this._consumeEntity(textTokenType);
            this._beginToken(textTokenType);
          } else {
            parts.push(this._readChar());
          }
        }
        this._inInterpolation = false;
        this._endToken([this._processCarriageReturns(parts.join(""))]);
      }
      /**
       * Consume a block of text that has been interpreted as an Angular interpolation.
       *
       * @param interpolationTokenType the type of the interpolation token to generate.
       * @param interpolationStart a cursor that points to the start of this interpolation.
       * @param prematureEndPredicate a function that should return true if the next characters indicate
       *     an end to the interpolation before its normal closing marker.
       */
      _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {
        const parts = [];
        this._beginToken(interpolationTokenType, interpolationStart);
        parts.push(this._interpolationConfig.start);
        const expressionStart = this._cursor.clone();
        let inQuote = null;
        let inComment = false;
        while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {
          const current = this._cursor.clone();
          if (this._isTagStart()) {
            this._cursor = current;
            parts.push(this._getProcessedChars(expressionStart, current));
            this._endToken(parts);
            return;
          }
          if (inQuote === null) {
            if (this._attemptStr(this._interpolationConfig.end)) {
              parts.push(this._getProcessedChars(expressionStart, current));
              parts.push(this._interpolationConfig.end);
              this._endToken(parts);
              return;
            } else if (this._attemptStr("//")) {
              inComment = true;
            }
          }
          const char = this._cursor.peek();
          this._cursor.advance();
          if (char === $BACKSLASH) {
            this._cursor.advance();
          } else if (char === inQuote) {
            inQuote = null;
          } else if (!inComment && inQuote === null && isQuote(char)) {
            inQuote = char;
          }
        }
        parts.push(this._getProcessedChars(expressionStart, this._cursor));
        this._endToken(parts);
      }
      _consumeDirective(start, nameStart) {
        this._requireCharCode($AT);
        this._cursor.advance();
        while (isSelectorlessNameChar(this._cursor.peek())) {
          this._cursor.advance();
        }
        this._beginToken(38, start);
        const name = this._cursor.getChars(nameStart);
        this._endToken([name]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (this._cursor.peek() !== $LPAREN) {
          return;
        }
        this._openDirectiveCount++;
        this._beginToken(
          39
          /* TokenType.DIRECTIVE_OPEN */
        );
        this._cursor.advance();
        this._endToken([]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
        while (!isAttributeTerminator(this._cursor.peek()) && this._cursor.peek() !== $RPAREN) {
          this._consumeAttribute();
        }
        this._attemptCharCodeUntilFn(isNotWhitespace);
        this._openDirectiveCount--;
        if (this._cursor.peek() !== $RPAREN) {
          if (this._cursor.peek() === $GT || this._cursor.peek() === $SLASH) {
            return;
          }
          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
        }
        this._beginToken(
          40
          /* TokenType.DIRECTIVE_CLOSE */
        );
        this._cursor.advance();
        this._endToken([]);
        this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      _getProcessedChars(start, end) {
        return this._processCarriageReturns(end.getChars(start));
      }
      _isTextEnd() {
        if (this._isTagStart() || this._cursor.peek() === $EOF) {
          return true;
        }
        if (this._tokenizeIcu && !this._inInterpolation) {
          if (this.isExpansionFormStart()) {
            return true;
          }
          if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
            return true;
          }
        }
        if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._isBlockStart() || this._isLetStart() || this._cursor.peek() === $RBRACE)) {
          return true;
        }
        return false;
      }
      /**
       * Returns true if the current cursor is pointing to the start of a tag
       * (opening/closing/comments/cdata/etc).
       */
      _isTagStart() {
        if (this._cursor.peek() === $LT) {
          const tmp = this._cursor.clone();
          tmp.advance();
          const code = tmp.peek();
          if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {
            return true;
          }
        }
        return false;
      }
      _readUntil(char) {
        const start = this._cursor.clone();
        this._attemptUntilChar(char);
        return this._cursor.getChars(start);
      }
      _isInExpansion() {
        return this._isInExpansionCase() || this._isInExpansionForm();
      }
      _isInExpansionCase() {
        return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21;
      }
      _isInExpansionForm() {
        return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19;
      }
      isExpansionFormStart() {
        if (this._cursor.peek() !== $LBRACE) {
          return false;
        }
        if (this._interpolationConfig) {
          const start = this._cursor.clone();
          const isInterpolation = this._attemptStr(this._interpolationConfig.start);
          this._cursor = start;
          return !isInterpolation;
        }
        return true;
      }
    };
    PlainCharacterCursor = class _PlainCharacterCursor {
      state;
      file;
      input;
      end;
      constructor(fileOrCursor, range) {
        if (fileOrCursor instanceof _PlainCharacterCursor) {
          this.file = fileOrCursor.file;
          this.input = fileOrCursor.input;
          this.end = fileOrCursor.end;
          const state = fileOrCursor.state;
          this.state = {
            peek: state.peek,
            offset: state.offset,
            line: state.line,
            column: state.column
          };
        } else {
          if (!range) {
            throw new Error("Programming error: the range argument must be provided with a file argument.");
          }
          this.file = fileOrCursor;
          this.input = fileOrCursor.content;
          this.end = range.endPos;
          this.state = {
            peek: -1,
            offset: range.startPos,
            line: range.startLine,
            column: range.startCol
          };
        }
      }
      clone() {
        return new _PlainCharacterCursor(this);
      }
      peek() {
        return this.state.peek;
      }
      charsLeft() {
        return this.end - this.state.offset;
      }
      diff(other) {
        return this.state.offset - other.state.offset;
      }
      advance() {
        this.advanceState(this.state);
      }
      init() {
        this.updatePeek(this.state);
      }
      getSpan(start, leadingTriviaCodePoints) {
        start = start || this;
        let fullStart = start;
        if (leadingTriviaCodePoints) {
          while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
            if (fullStart === start) {
              start = start.clone();
            }
            start.advance();
          }
        }
        const startLocation = this.locationFromCursor(start);
        const endLocation = this.locationFromCursor(this);
        const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;
        return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);
      }
      getChars(start) {
        return this.input.substring(start.state.offset, this.state.offset);
      }
      charAt(pos) {
        return this.input.charCodeAt(pos);
      }
      advanceState(state) {
        if (state.offset >= this.end) {
          this.state = state;
          throw new CursorError('Unexpected character "EOF"', this);
        }
        const currentChar = this.charAt(state.offset);
        if (currentChar === $LF) {
          state.line++;
          state.column = 0;
        } else if (!isNewLine(currentChar)) {
          state.column++;
        }
        state.offset++;
        this.updatePeek(state);
      }
      updatePeek(state) {
        state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
      }
      locationFromCursor(cursor) {
        return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);
      }
    };
    EscapedCharacterCursor = class _EscapedCharacterCursor extends PlainCharacterCursor {
      internalState;
      constructor(fileOrCursor, range) {
        if (fileOrCursor instanceof _EscapedCharacterCursor) {
          super(fileOrCursor);
          this.internalState = __spreadValues({}, fileOrCursor.internalState);
        } else {
          super(fileOrCursor, range);
          this.internalState = this.state;
        }
      }
      advance() {
        this.state = this.internalState;
        super.advance();
        this.processEscapeSequence();
      }
      init() {
        super.init();
        this.processEscapeSequence();
      }
      clone() {
        return new _EscapedCharacterCursor(this);
      }
      getChars(start) {
        const cursor = start.clone();
        let chars = "";
        while (cursor.internalState.offset < this.internalState.offset) {
          chars += String.fromCodePoint(cursor.peek());
          cursor.advance();
        }
        return chars;
      }
      /**
       * Process the escape sequence that starts at the current position in the text.
       *
       * This method is called to ensure that `peek` has the unescaped value of escape sequences.
       */
      processEscapeSequence() {
        const peek = () => this.internalState.peek;
        if (peek() === $BACKSLASH) {
          this.internalState = __spreadValues({}, this.state);
          this.advanceState(this.internalState);
          if (peek() === $n) {
            this.state.peek = $LF;
          } else if (peek() === $r) {
            this.state.peek = $CR;
          } else if (peek() === $v) {
            this.state.peek = $VTAB;
          } else if (peek() === $t) {
            this.state.peek = $TAB;
          } else if (peek() === $b) {
            this.state.peek = $BSPACE;
          } else if (peek() === $f) {
            this.state.peek = $FF;
          } else if (peek() === $u) {
            this.advanceState(this.internalState);
            if (peek() === $LBRACE) {
              this.advanceState(this.internalState);
              const digitStart = this.clone();
              let length = 0;
              while (peek() !== $RBRACE) {
                this.advanceState(this.internalState);
                length++;
              }
              this.state.peek = this.decodeHexDigits(digitStart, length);
            } else {
              const digitStart = this.clone();
              this.advanceState(this.internalState);
              this.advanceState(this.internalState);
              this.advanceState(this.internalState);
              this.state.peek = this.decodeHexDigits(digitStart, 4);
            }
          } else if (peek() === $x) {
            this.advanceState(this.internalState);
            const digitStart = this.clone();
            this.advanceState(this.internalState);
            this.state.peek = this.decodeHexDigits(digitStart, 2);
          } else if (isOctalDigit(peek())) {
            let octal = "";
            let length = 0;
            let previous = this.clone();
            while (isOctalDigit(peek()) && length < 3) {
              previous = this.clone();
              octal += String.fromCodePoint(peek());
              this.advanceState(this.internalState);
              length++;
            }
            this.state.peek = parseInt(octal, 8);
            this.internalState = previous.internalState;
          } else if (isNewLine(this.internalState.peek)) {
            this.advanceState(this.internalState);
            this.state = this.internalState;
          } else {
            this.state.peek = this.internalState.peek;
          }
        }
      }
      decodeHexDigits(start, length) {
        const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);
        const charCode = parseInt(hex, 16);
        if (!isNaN(charCode)) {
          return charCode;
        } else {
          start.state = start.internalState;
          throw new CursorError("Invalid hexadecimal escape sequence", start);
        }
      }
    };
    CursorError = class extends Error {
      msg;
      cursor;
      constructor(msg, cursor) {
        super(msg);
        this.msg = msg;
        this.cursor = cursor;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    TreeError = class _TreeError extends ParseError {
      elementName;
      static create(elementName, span, msg) {
        return new _TreeError(elementName, span, msg);
      }
      constructor(elementName, span, msg) {
        super(span, msg);
        this.elementName = elementName;
      }
    };
    ParseTreeResult = class {
      rootNodes;
      errors;
      constructor(rootNodes, errors) {
        this.rootNodes = rootNodes;
        this.errors = errors;
      }
    };
    Parser$1 = class Parser {
      getTagDefinition;
      constructor(getTagDefinition) {
        this.getTagDefinition = getTagDefinition;
      }
      parse(source, url, options) {
        const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);
        const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);
        parser.build();
        return new ParseTreeResult(parser.rootNodes, [...tokenizeResult.errors, ...parser.errors]);
      }
    };
    _TreeBuilder = class __TreeBuilder {
      tokens;
      tagDefinitionResolver;
      _index = -1;
      // `_peek` will be initialized by the call to `_advance()` in the constructor.
      _peek;
      _containerStack = [];
      rootNodes = [];
      errors = [];
      constructor(tokens, tagDefinitionResolver) {
        this.tokens = tokens;
        this.tagDefinitionResolver = tagDefinitionResolver;
        this._advance();
      }
      build() {
        while (this._peek.type !== 41) {
          if (this._peek.type === 0 || this._peek.type === 4) {
            this._consumeElementStartTag(this._advance());
          } else if (this._peek.type === 3) {
            this._consumeElementEndTag(this._advance());
          } else if (this._peek.type === 12) {
            this._closeVoidElement();
            this._consumeCdata(this._advance());
          } else if (this._peek.type === 10) {
            this._closeVoidElement();
            this._consumeComment(this._advance());
          } else if (this._peek.type === 5 || this._peek.type === 7 || this._peek.type === 6) {
            this._closeVoidElement();
            this._consumeText(this._advance());
          } else if (this._peek.type === 19) {
            this._consumeExpansion(this._advance());
          } else if (this._peek.type === 24) {
            this._closeVoidElement();
            this._consumeBlockOpen(this._advance());
          } else if (this._peek.type === 26) {
            this._closeVoidElement();
            this._consumeBlockClose(this._advance());
          } else if (this._peek.type === 28) {
            this._closeVoidElement();
            this._consumeIncompleteBlock(this._advance());
          } else if (this._peek.type === 29) {
            this._closeVoidElement();
            this._consumeLet(this._advance());
          } else if (this._peek.type === 32) {
            this._closeVoidElement();
            this._consumeIncompleteLet(this._advance());
          } else if (this._peek.type === 33 || this._peek.type === 37) {
            this._consumeComponentStartTag(this._advance());
          } else if (this._peek.type === 36) {
            this._consumeComponentEndTag(this._advance());
          } else {
            this._advance();
          }
        }
        for (const leftoverContainer of this._containerStack) {
          if (leftoverContainer instanceof Block) {
            this.errors.push(TreeError.create(leftoverContainer.name, leftoverContainer.sourceSpan, `Unclosed block "${leftoverContainer.name}"`));
          }
        }
      }
      _advance() {
        const prev = this._peek;
        if (this._index < this.tokens.length - 1) {
          this._index++;
        }
        this._peek = this.tokens[this._index];
        return prev;
      }
      _advanceIf(type) {
        if (this._peek.type === type) {
          return this._advance();
        }
        return null;
      }
      _consumeCdata(_startToken) {
        this._consumeText(this._advance());
        this._advanceIf(
          13
          /* TokenType.CDATA_END */
        );
      }
      _consumeComment(token) {
        const text2 = this._advanceIf(
          7
          /* TokenType.RAW_TEXT */
        );
        const endToken = this._advanceIf(
          11
          /* TokenType.COMMENT_END */
        );
        const value = text2 != null ? text2.parts[0].trim() : null;
        const sourceSpan = endToken == null ? token.sourceSpan : new ParseSourceSpan(token.sourceSpan.start, endToken.sourceSpan.end, token.sourceSpan.fullStart);
        this._addToParent(new Comment2(value, sourceSpan));
      }
      _consumeExpansion(token) {
        const switchValue = this._advance();
        const type = this._advance();
        const cases = [];
        while (this._peek.type === 20) {
          const expCase = this._parseExpansionCase();
          if (!expCase)
            return;
          cases.push(expCase);
        }
        if (this._peek.type !== 23) {
          this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return;
        }
        const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);
        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
        this._advance();
      }
      _parseExpansionCase() {
        const value = this._advance();
        if (this._peek.type !== 21) {
          this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));
          return null;
        }
        const start = this._advance();
        const exp = this._collectExpansionExpTokens(start);
        if (!exp)
          return null;
        const end = this._advance();
        exp.push({ type: 41, parts: [], sourceSpan: end.sourceSpan });
        const expansionCaseParser = new __TreeBuilder(exp, this.tagDefinitionResolver);
        expansionCaseParser.build();
        if (expansionCaseParser.errors.length > 0) {
          this.errors = this.errors.concat(expansionCaseParser.errors);
          return null;
        }
        const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);
        const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);
        return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
      }
      _collectExpansionExpTokens(start) {
        const exp = [];
        const expansionFormStack = [
          21
          /* TokenType.EXPANSION_CASE_EXP_START */
        ];
        while (true) {
          if (this._peek.type === 19 || this._peek.type === 21) {
            expansionFormStack.push(this._peek.type);
          }
          if (this._peek.type === 22) {
            if (lastOnStack(
              expansionFormStack,
              21
              /* TokenType.EXPANSION_CASE_EXP_START */
            )) {
              expansionFormStack.pop();
              if (expansionFormStack.length === 0)
                return exp;
            } else {
              this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
              return null;
            }
          }
          if (this._peek.type === 23) {
            if (lastOnStack(
              expansionFormStack,
              19
              /* TokenType.EXPANSION_FORM_START */
            )) {
              expansionFormStack.pop();
            } else {
              this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
              return null;
            }
          }
          if (this._peek.type === 41) {
            this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
            return null;
          }
          exp.push(this._advance());
        }
      }
      _consumeText(token) {
        const tokens = [token];
        const startSpan = token.sourceSpan;
        let text2 = token.parts[0];
        if (text2.length > 0 && text2[0] === "\n") {
          const parent = this._getContainer();
          if (parent != null && parent.children.length === 0 && this._getTagDefinition(parent)?.ignoreFirstLf) {
            text2 = text2.substring(1);
            tokens[0] = { type: token.type, sourceSpan: token.sourceSpan, parts: [text2] };
          }
        }
        while (this._peek.type === 8 || this._peek.type === 5 || this._peek.type === 9) {
          token = this._advance();
          tokens.push(token);
          if (token.type === 8) {
            text2 += token.parts.join("").replace(/&([^;]+);/g, decodeEntity);
          } else if (token.type === 9) {
            text2 += token.parts[0];
          } else {
            text2 += token.parts.join("");
          }
        }
        if (text2.length > 0) {
          const endSpan = token.sourceSpan;
          this._addToParent(new Text4(text2, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));
        }
      }
      _closeVoidElement() {
        const el = this._getContainer();
        if (el !== null && this._getTagDefinition(el)?.isVoid) {
          this._containerStack.pop();
        }
      }
      _consumeElementStartTag(startTagToken) {
        const attrs = [];
        const directives = [];
        this._consumeAttributesAndDirectives(attrs, directives);
        const fullName = this._getElementFullName(startTagToken, this._getClosestElementLikeParent());
        const tagDef = this._getTagDefinition(fullName);
        let selfClosing = false;
        if (this._peek.type === 2) {
          this._advance();
          selfClosing = true;
          if (!(tagDef?.canSelfClose || getNsPrefix(fullName) !== null || tagDef?.isVoid)) {
            this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed "${startTagToken.parts[1]}"`));
          }
        } else if (this._peek.type === 1) {
          this._advance();
          selfClosing = false;
        }
        const end = this._peek.sourceSpan.fullStart;
        const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
        const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
        const el = new Element3(fullName, attrs, directives, [], selfClosing, span, startSpan, void 0, tagDef?.isVoid ?? false);
        const parent = this._getContainer();
        const isClosedByChild = parent !== null && !!this._getTagDefinition(parent)?.isClosedByChild(el.name);
        this._pushContainer(el, isClosedByChild);
        if (selfClosing) {
          this._popContainer(fullName, Element3, span);
        } else if (startTagToken.type === 4) {
          this._popContainer(fullName, Element3, null);
          this.errors.push(TreeError.create(fullName, span, `Opening tag "${fullName}" not terminated.`));
        }
      }
      _consumeComponentStartTag(startToken) {
        const componentName = startToken.parts[0];
        const attrs = [];
        const directives = [];
        this._consumeAttributesAndDirectives(attrs, directives);
        const closestElement = this._getClosestElementLikeParent();
        const tagName = this._getComponentTagName(startToken, closestElement);
        const fullName = this._getComponentFullName(startToken, closestElement);
        const selfClosing = this._peek.type === 35;
        this._advance();
        const end = this._peek.sourceSpan.fullStart;
        const span = new ParseSourceSpan(startToken.sourceSpan.start, end, startToken.sourceSpan.fullStart);
        const startSpan = new ParseSourceSpan(startToken.sourceSpan.start, end, startToken.sourceSpan.fullStart);
        const node = new Component3(componentName, tagName, fullName, attrs, directives, [], selfClosing, span, startSpan, void 0);
        const parent = this._getContainer();
        const isClosedByChild = parent !== null && node.tagName !== null && !!this._getTagDefinition(parent)?.isClosedByChild(node.tagName);
        this._pushContainer(node, isClosedByChild);
        if (selfClosing) {
          this._popContainer(fullName, Component3, span);
        } else if (startToken.type === 37) {
          this._popContainer(fullName, Component3, null);
          this.errors.push(TreeError.create(fullName, span, `Opening tag "${fullName}" not terminated.`));
        }
      }
      _consumeAttributesAndDirectives(attributesResult, directivesResult) {
        while (this._peek.type === 14 || this._peek.type === 38) {
          if (this._peek.type === 38) {
            directivesResult.push(this._consumeDirective(this._peek));
          } else {
            attributesResult.push(this._consumeAttr(this._advance()));
          }
        }
      }
      _consumeComponentEndTag(endToken) {
        const fullName = this._getComponentFullName(endToken, this._getClosestElementLikeParent());
        if (!this._popContainer(fullName, Component3, endToken.sourceSpan)) {
          const container = this._containerStack[this._containerStack.length - 1];
          let suffix;
          if (container instanceof Component3 && container.componentName === endToken.parts[0]) {
            suffix = `, did you mean "${container.fullName}"?`;
          } else {
            suffix = ". It may happen when the tag has already been closed by another tag.";
          }
          const errMsg = `Unexpected closing tag "${fullName}"${suffix}`;
          this.errors.push(TreeError.create(fullName, endToken.sourceSpan, errMsg));
        }
      }
      _getTagDefinition(nodeOrName) {
        if (typeof nodeOrName === "string") {
          return this.tagDefinitionResolver(nodeOrName);
        } else if (nodeOrName instanceof Element3) {
          return this.tagDefinitionResolver(nodeOrName.name);
        } else if (nodeOrName instanceof Component3 && nodeOrName.tagName !== null) {
          return this.tagDefinitionResolver(nodeOrName.tagName);
        } else {
          return null;
        }
      }
      _pushContainer(node, isClosedByChild) {
        if (isClosedByChild) {
          this._containerStack.pop();
        }
        this._addToParent(node);
        this._containerStack.push(node);
      }
      _consumeElementEndTag(endTagToken) {
        const fullName = this._getElementFullName(endTagToken, this._getClosestElementLikeParent());
        if (this._getTagDefinition(fullName)?.isVoid) {
          this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags "${endTagToken.parts[1]}"`));
        } else if (!this._popContainer(fullName, Element3, endTagToken.sourceSpan)) {
          const errMsg = `Unexpected closing tag "${fullName}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
          this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
        }
      }
      /**
       * Closes the nearest element with the tag name `fullName` in the parse tree.
       * `endSourceSpan` is the span of the closing tag, or null if the element does
       * not have a closing tag (for example, this happens when an incomplete
       * opening tag is recovered).
       */
      _popContainer(expectedName, expectedType, endSourceSpan) {
        let unexpectedCloseTagDetected = false;
        for (let stackIndex = this._containerStack.length - 1; stackIndex >= 0; stackIndex--) {
          const node = this._containerStack[stackIndex];
          const nodeName = node instanceof Component3 ? node.fullName : node.name;
          if ((nodeName === expectedName || expectedName === null) && node instanceof expectedType) {
            node.endSourceSpan = endSourceSpan;
            node.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : node.sourceSpan.end;
            this._containerStack.splice(stackIndex, this._containerStack.length - stackIndex);
            return !unexpectedCloseTagDetected;
          }
          if (node instanceof Block || !this._getTagDefinition(node)?.closedByParent) {
            unexpectedCloseTagDetected = true;
          }
        }
        return false;
      }
      _consumeAttr(attrName) {
        const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
        let attrEnd = attrName.sourceSpan.end;
        if (this._peek.type === 15) {
          this._advance();
        }
        let value = "";
        const valueTokens = [];
        let valueStartSpan = void 0;
        let valueEnd = void 0;
        const nextTokenType = this._peek.type;
        if (nextTokenType === 16) {
          valueStartSpan = this._peek.sourceSpan;
          valueEnd = this._peek.sourceSpan.end;
          while (this._peek.type === 16 || this._peek.type === 17 || this._peek.type === 9) {
            const valueToken = this._advance();
            valueTokens.push(valueToken);
            if (valueToken.type === 17) {
              value += valueToken.parts.join("").replace(/&([^;]+);/g, decodeEntity);
            } else if (valueToken.type === 9) {
              value += valueToken.parts[0];
            } else {
              value += valueToken.parts.join("");
            }
            valueEnd = attrEnd = valueToken.sourceSpan.end;
          }
        }
        if (this._peek.type === 15) {
          const quoteToken = this._advance();
          attrEnd = quoteToken.sourceSpan.end;
        }
        const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);
        return new Attribute3(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : void 0, void 0);
      }
      _consumeDirective(nameToken) {
        const attributes = [];
        let startSourceSpanEnd = nameToken.sourceSpan.end;
        let endSourceSpan = null;
        this._advance();
        if (this._peek.type === 39) {
          startSourceSpanEnd = this._peek.sourceSpan.end;
          this._advance();
          while (this._peek.type === 14) {
            attributes.push(this._consumeAttr(this._advance()));
          }
          if (this._peek.type === 40) {
            endSourceSpan = this._peek.sourceSpan;
            this._advance();
          } else {
            this.errors.push(TreeError.create(null, nameToken.sourceSpan, "Unterminated directive definition"));
          }
        }
        const startSourceSpan = new ParseSourceSpan(nameToken.sourceSpan.start, startSourceSpanEnd, nameToken.sourceSpan.fullStart);
        const sourceSpan = new ParseSourceSpan(startSourceSpan.start, endSourceSpan === null ? nameToken.sourceSpan.end : endSourceSpan.end, startSourceSpan.fullStart);
        return new Directive3(nameToken.parts[0], attributes, sourceSpan, startSourceSpan, endSourceSpan);
      }
      _consumeBlockOpen(token) {
        const parameters = [];
        while (this._peek.type === 27) {
          const paramToken = this._advance();
          parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
        }
        if (this._peek.type === 25) {
          this._advance();
        }
        const end = this._peek.sourceSpan.fullStart;
        const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
        const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
        const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
        this._pushContainer(block, false);
      }
      _consumeBlockClose(token) {
        if (!this._popContainer(null, Block, token.sourceSpan)) {
          this.errors.push(TreeError.create(null, token.sourceSpan, `Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.`));
        }
      }
      _consumeIncompleteBlock(token) {
        const parameters = [];
        while (this._peek.type === 27) {
          const paramToken = this._advance();
          parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
        }
        const end = this._peek.sourceSpan.fullStart;
        const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
        const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
        const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
        this._pushContainer(block, false);
        this._popContainer(null, Block, null);
        this.errors.push(TreeError.create(token.parts[0], span, `Incomplete block "${token.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));
      }
      _consumeLet(startToken) {
        const name = startToken.parts[0];
        let valueToken;
        let endToken;
        if (this._peek.type !== 30) {
          this.errors.push(TreeError.create(startToken.parts[0], startToken.sourceSpan, `Invalid @let declaration "${name}". Declaration must have a value.`));
          return;
        } else {
          valueToken = this._advance();
        }
        if (this._peek.type !== 31) {
          this.errors.push(TreeError.create(startToken.parts[0], startToken.sourceSpan, `Unterminated @let declaration "${name}". Declaration must be terminated with a semicolon.`));
          return;
        } else {
          endToken = this._advance();
        }
        const end = endToken.sourceSpan.fullStart;
        const span = new ParseSourceSpan(startToken.sourceSpan.start, end, startToken.sourceSpan.fullStart);
        const startOffset = startToken.sourceSpan.toString().lastIndexOf(name);
        const nameStart = startToken.sourceSpan.start.moveBy(startOffset);
        const nameSpan = new ParseSourceSpan(nameStart, startToken.sourceSpan.end);
        const node = new LetDeclaration2(name, valueToken.parts[0], span, nameSpan, valueToken.sourceSpan);
        this._addToParent(node);
      }
      _consumeIncompleteLet(token) {
        const name = token.parts[0] ?? "";
        const nameString = name ? ` "${name}"` : "";
        if (name.length > 0) {
          const startOffset = token.sourceSpan.toString().lastIndexOf(name);
          const nameStart = token.sourceSpan.start.moveBy(startOffset);
          const nameSpan = new ParseSourceSpan(nameStart, token.sourceSpan.end);
          const valueSpan = new ParseSourceSpan(token.sourceSpan.start, token.sourceSpan.start.moveBy(0));
          const node = new LetDeclaration2(name, "", token.sourceSpan, nameSpan, valueSpan);
          this._addToParent(node);
        }
        this.errors.push(TreeError.create(token.parts[0], token.sourceSpan, `Incomplete @let declaration${nameString}. @let declarations must be written as \`@let <name> = <value>;\``));
      }
      _getContainer() {
        return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;
      }
      _getClosestElementLikeParent() {
        for (let i = this._containerStack.length - 1; i > -1; i--) {
          const current = this._containerStack[i];
          if (current instanceof Element3 || current instanceof Component3) {
            return current;
          }
        }
        return null;
      }
      _addToParent(node) {
        const parent = this._getContainer();
        if (parent === null) {
          this.rootNodes.push(node);
        } else {
          parent.children.push(node);
        }
      }
      _getElementFullName(token, parent) {
        const prefix = this._getPrefix(token, parent);
        return mergeNsAndName(prefix, token.parts[1]);
      }
      _getComponentFullName(token, parent) {
        const componentName = token.parts[0];
        const tagName = this._getComponentTagName(token, parent);
        if (tagName === null) {
          return componentName;
        }
        return tagName.startsWith(":") ? componentName + tagName : `${componentName}:${tagName}`;
      }
      _getComponentTagName(token, parent) {
        const prefix = this._getPrefix(token, parent);
        const tagName = token.parts[2];
        if (!prefix && !tagName) {
          return null;
        } else if (!prefix && tagName) {
          return tagName;
        } else {
          return mergeNsAndName(prefix, tagName || "ng-component");
        }
      }
      _getPrefix(token, parent) {
        let prefix;
        let tagName;
        if (token.type === 33 || token.type === 37 || token.type === 36) {
          prefix = token.parts[1];
          tagName = token.parts[2];
        } else {
          prefix = token.parts[0];
          tagName = token.parts[1];
        }
        prefix = prefix || this._getTagDefinition(tagName)?.implicitNamespacePrefix || "";
        if (!prefix && parent) {
          const parentName = parent instanceof Element3 ? parent.name : parent.tagName;
          if (parentName !== null) {
            const parentTagName = splitNsName(parentName)[1];
            const parentTagDefinition = this._getTagDefinition(parentTagName);
            if (parentTagDefinition !== null && !parentTagDefinition.preventNamespaceInheritance) {
              prefix = getNsPrefix(parentName);
            }
          }
        }
        return prefix;
      }
    };
    PRESERVE_WS_ATTR_NAME = "ngPreserveWhitespaces";
    SKIP_WS_TRIM_TAGS = /* @__PURE__ */ new Set(["pre", "template", "textarea", "script", "style"]);
    WS_CHARS = " \f\n\r	\v\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF";
    NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);
    WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, "g");
    WhitespaceVisitor = class {
      preserveSignificantWhitespace;
      originalNodeMap;
      requireContext;
      // How many ICU expansions which are currently being visited. ICUs can be nested, so this
      // tracks the current depth of nesting. If this depth is greater than 0, then this visitor is
      // currently processing content inside an ICU expansion.
      icuExpansionDepth = 0;
      constructor(preserveSignificantWhitespace, originalNodeMap, requireContext = true) {
        this.preserveSignificantWhitespace = preserveSignificantWhitespace;
        this.originalNodeMap = originalNodeMap;
        this.requireContext = requireContext;
      }
      visitElement(element2, context2) {
        if (SKIP_WS_TRIM_TAGS.has(element2.name) || hasPreserveWhitespacesAttr(element2.attrs)) {
          const newElement2 = new Element3(element2.name, visitAllWithSiblings(this, element2.attrs), visitAllWithSiblings(this, element2.directives), element2.children, element2.isSelfClosing, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.isVoid, element2.i18n);
          this.originalNodeMap?.set(newElement2, element2);
          return newElement2;
        }
        const newElement = new Element3(element2.name, element2.attrs, element2.directives, visitAllWithSiblings(this, element2.children), element2.isSelfClosing, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.isVoid, element2.i18n);
        this.originalNodeMap?.set(newElement, element2);
        return newElement;
      }
      visitAttribute(attribute2, context2) {
        return attribute2.name !== PRESERVE_WS_ATTR_NAME ? attribute2 : null;
      }
      visitText(text2, context2) {
        const isNotBlank = text2.value.match(NO_WS_REGEXP);
        const hasExpansionSibling = context2 && (context2.prev instanceof Expansion || context2.next instanceof Expansion);
        const inIcuExpansion = this.icuExpansionDepth > 0;
        if (inIcuExpansion && this.preserveSignificantWhitespace)
          return text2;
        if (isNotBlank || hasExpansionSibling) {
          const tokens = text2.tokens.map((token) => token.type === 5 ? createWhitespaceProcessedTextToken(token) : token);
          if (!this.preserveSignificantWhitespace && tokens.length > 0) {
            const firstToken = tokens[0];
            tokens.splice(0, 1, trimLeadingWhitespace(firstToken, context2));
            const lastToken = tokens[tokens.length - 1];
            tokens.splice(tokens.length - 1, 1, trimTrailingWhitespace(lastToken, context2));
          }
          const processed = processWhitespace(text2.value);
          const value = this.preserveSignificantWhitespace ? processed : trimLeadingAndTrailingWhitespace(processed, context2);
          const result = new Text4(value, text2.sourceSpan, tokens, text2.i18n);
          this.originalNodeMap?.set(result, text2);
          return result;
        }
        return null;
      }
      visitComment(comment, context2) {
        return comment;
      }
      visitExpansion(expansion, context2) {
        this.icuExpansionDepth++;
        let newExpansion;
        try {
          newExpansion = new Expansion(expansion.switchValue, expansion.type, visitAllWithSiblings(this, expansion.cases), expansion.sourceSpan, expansion.switchValueSourceSpan, expansion.i18n);
        } finally {
          this.icuExpansionDepth--;
        }
        this.originalNodeMap?.set(newExpansion, expansion);
        return newExpansion;
      }
      visitExpansionCase(expansionCase, context2) {
        const newExpansionCase = new ExpansionCase(expansionCase.value, visitAllWithSiblings(this, expansionCase.expression), expansionCase.sourceSpan, expansionCase.valueSourceSpan, expansionCase.expSourceSpan);
        this.originalNodeMap?.set(newExpansionCase, expansionCase);
        return newExpansionCase;
      }
      visitBlock(block, context2) {
        const newBlock = new Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.nameSpan, block.startSourceSpan, block.endSourceSpan);
        this.originalNodeMap?.set(newBlock, block);
        return newBlock;
      }
      visitBlockParameter(parameter, context2) {
        return parameter;
      }
      visitLetDeclaration(decl, context2) {
        return decl;
      }
      visitComponent(node, context2) {
        if (node.tagName && SKIP_WS_TRIM_TAGS.has(node.tagName) || hasPreserveWhitespacesAttr(node.attrs)) {
          const newElement2 = new Component3(node.componentName, node.tagName, node.fullName, visitAllWithSiblings(this, node.attrs), visitAllWithSiblings(this, node.directives), node.children, node.isSelfClosing, node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.i18n);
          this.originalNodeMap?.set(newElement2, node);
          return newElement2;
        }
        const newElement = new Component3(node.componentName, node.tagName, node.fullName, node.attrs, node.directives, visitAllWithSiblings(this, node.children), node.isSelfClosing, node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.i18n);
        this.originalNodeMap?.set(newElement, node);
        return newElement;
      }
      visitDirective(directive, context2) {
        return directive;
      }
      visit(_node, context2) {
        if (this.requireContext && !context2) {
          throw new Error(`WhitespaceVisitor requires context. Visit via \`visitAllWithSiblings\` to get this context.`);
        }
        return false;
      }
    };
    (function(TokenType2) {
      TokenType2[TokenType2["Character"] = 0] = "Character";
      TokenType2[TokenType2["Identifier"] = 1] = "Identifier";
      TokenType2[TokenType2["PrivateIdentifier"] = 2] = "PrivateIdentifier";
      TokenType2[TokenType2["Keyword"] = 3] = "Keyword";
      TokenType2[TokenType2["String"] = 4] = "String";
      TokenType2[TokenType2["Operator"] = 5] = "Operator";
      TokenType2[TokenType2["Number"] = 6] = "Number";
      TokenType2[TokenType2["Error"] = 7] = "Error";
    })(TokenType || (TokenType = {}));
    (function(StringTokenKind2) {
      StringTokenKind2[StringTokenKind2["Plain"] = 0] = "Plain";
      StringTokenKind2[StringTokenKind2["TemplateLiteralPart"] = 1] = "TemplateLiteralPart";
      StringTokenKind2[StringTokenKind2["TemplateLiteralEnd"] = 2] = "TemplateLiteralEnd";
    })(StringTokenKind || (StringTokenKind = {}));
    KEYWORDS = [
      "var",
      "let",
      "as",
      "null",
      "undefined",
      "true",
      "false",
      "if",
      "else",
      "this",
      "typeof",
      "void",
      "in"
    ];
    Lexer = class {
      tokenize(text2) {
        return new _Scanner(text2).scan();
      }
    };
    Token = class {
      index;
      end;
      type;
      numValue;
      strValue;
      constructor(index, end, type, numValue, strValue) {
        this.index = index;
        this.end = end;
        this.type = type;
        this.numValue = numValue;
        this.strValue = strValue;
      }
      isCharacter(code) {
        return this.type === TokenType.Character && this.numValue === code;
      }
      isNumber() {
        return this.type === TokenType.Number;
      }
      isString() {
        return this.type === TokenType.String;
      }
      isOperator(operator) {
        return this.type === TokenType.Operator && this.strValue === operator;
      }
      isIdentifier() {
        return this.type === TokenType.Identifier;
      }
      isPrivateIdentifier() {
        return this.type === TokenType.PrivateIdentifier;
      }
      isKeyword() {
        return this.type === TokenType.Keyword;
      }
      isKeywordLet() {
        return this.type === TokenType.Keyword && this.strValue === "let";
      }
      isKeywordAs() {
        return this.type === TokenType.Keyword && this.strValue === "as";
      }
      isKeywordNull() {
        return this.type === TokenType.Keyword && this.strValue === "null";
      }
      isKeywordUndefined() {
        return this.type === TokenType.Keyword && this.strValue === "undefined";
      }
      isKeywordTrue() {
        return this.type === TokenType.Keyword && this.strValue === "true";
      }
      isKeywordFalse() {
        return this.type === TokenType.Keyword && this.strValue === "false";
      }
      isKeywordThis() {
        return this.type === TokenType.Keyword && this.strValue === "this";
      }
      isKeywordTypeof() {
        return this.type === TokenType.Keyword && this.strValue === "typeof";
      }
      isKeywordVoid() {
        return this.type === TokenType.Keyword && this.strValue === "void";
      }
      isKeywordIn() {
        return this.type === TokenType.Keyword && this.strValue === "in";
      }
      isError() {
        return this.type === TokenType.Error;
      }
      toNumber() {
        return this.type === TokenType.Number ? this.numValue : -1;
      }
      isTemplateLiteralPart() {
        return this.isString() && this.kind === StringTokenKind.TemplateLiteralPart;
      }
      isTemplateLiteralEnd() {
        return this.isString() && this.kind === StringTokenKind.TemplateLiteralEnd;
      }
      isTemplateLiteralInterpolationStart() {
        return this.isOperator("${");
      }
      isTemplateLiteralInterpolationEnd() {
        return this.isOperator("}");
      }
      toString() {
        switch (this.type) {
          case TokenType.Character:
          case TokenType.Identifier:
          case TokenType.Keyword:
          case TokenType.Operator:
          case TokenType.PrivateIdentifier:
          case TokenType.String:
          case TokenType.Error:
            return this.strValue;
          case TokenType.Number:
            return this.numValue.toString();
          default:
            return null;
        }
      }
    };
    StringToken = class extends Token {
      kind;
      constructor(index, end, strValue, kind) {
        super(index, end, TokenType.String, 0, strValue);
        this.kind = kind;
      }
    };
    EOF = new Token(-1, -1, TokenType.Character, 0, "");
    _Scanner = class {
      input;
      tokens = [];
      length;
      peek = 0;
      index = -1;
      braceStack = [];
      constructor(input2) {
        this.input = input2;
        this.length = input2.length;
        this.advance();
      }
      scan() {
        let token = this.scanToken();
        while (token !== null) {
          this.tokens.push(token);
          token = this.scanToken();
        }
        return this.tokens;
      }
      advance() {
        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
      }
      scanToken() {
        const input2 = this.input;
        const length = this.length;
        let peek = this.peek;
        let index = this.index;
        while (peek <= $SPACE) {
          if (++index >= length) {
            peek = $EOF;
            break;
          } else {
            peek = input2.charCodeAt(index);
          }
        }
        this.peek = peek;
        this.index = index;
        if (index >= length) {
          return null;
        }
        if (isIdentifierStart(peek)) {
          return this.scanIdentifier();
        }
        if (isDigit(peek)) {
          return this.scanNumber(index);
        }
        const start = index;
        switch (peek) {
          case $PERIOD:
            this.advance();
            return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);
          case $LPAREN:
          case $RPAREN:
          case $LBRACKET:
          case $RBRACKET:
          case $COMMA:
          case $COLON:
          case $SEMICOLON:
            return this.scanCharacter(start, peek);
          case $LBRACE:
            return this.scanOpenBrace(start, peek);
          case $RBRACE:
            return this.scanCloseBrace(start, peek);
          case $SQ:
          case $DQ:
            return this.scanString();
          case $BT:
            this.advance();
            return this.scanTemplateLiteralPart(start);
          case $HASH:
            return this.scanPrivateIdentifier();
          case $PLUS:
            return this.scanComplexOperator(start, "+", $EQ, "=");
          case $MINUS:
            return this.scanComplexOperator(start, "-", $EQ, "=");
          case $SLASH:
            return this.scanComplexOperator(start, "/", $EQ, "=");
          case $PERCENT:
            return this.scanComplexOperator(start, "%", $EQ, "=");
          case $CARET:
            return this.scanOperator(start, "^");
          case $STAR:
            return this.scanStar(start);
          case $QUESTION:
            return this.scanQuestion(start);
          case $LT:
          case $GT:
            return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");
          case $BANG:
          case $EQ:
            return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");
          case $AMPERSAND:
            return this.scanComplexOperator(start, "&", $AMPERSAND, "&", $EQ, "=");
          case $BAR:
            return this.scanComplexOperator(start, "|", $BAR, "|", $EQ, "=");
          case $NBSP:
            while (isWhitespace(this.peek))
              this.advance();
            return this.scanToken();
        }
        this.advance();
        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);
      }
      scanCharacter(start, code) {
        this.advance();
        return newCharacterToken(start, this.index, code);
      }
      scanOperator(start, str) {
        this.advance();
        return newOperatorToken(start, this.index, str);
      }
      scanOpenBrace(start, code) {
        this.braceStack.push("expression");
        this.advance();
        return newCharacterToken(start, this.index, code);
      }
      scanCloseBrace(start, code) {
        this.advance();
        const currentBrace = this.braceStack.pop();
        if (currentBrace === "interpolation") {
          this.tokens.push(newOperatorToken(start, this.index, "}"));
          return this.scanTemplateLiteralPart(this.index);
        }
        return newCharacterToken(start, this.index, code);
      }
      /**
       * Tokenize a 2/3 char long operator
       *
       * @param start start index in the expression
       * @param one first symbol (always part of the operator)
       * @param twoCode code point for the second symbol
       * @param two second symbol (part of the operator when the second code point matches)
       * @param threeCode code point for the third symbol
       * @param three third symbol (part of the operator when provided and matches source expression)
       */
      scanComplexOperator(start, one, twoCode, two, threeCode, three) {
        this.advance();
        let str = one;
        if (this.peek == twoCode) {
          this.advance();
          str += two;
        }
        if (threeCode != null && this.peek == threeCode) {
          this.advance();
          str += three;
        }
        return newOperatorToken(start, this.index, str);
      }
      scanIdentifier() {
        const start = this.index;
        this.advance();
        while (isIdentifierPart(this.peek))
          this.advance();
        const str = this.input.substring(start, this.index);
        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);
      }
      /** Scans an ECMAScript private identifier. */
      scanPrivateIdentifier() {
        const start = this.index;
        this.advance();
        if (!isIdentifierStart(this.peek)) {
          return this.error("Invalid character [#]", -1);
        }
        while (isIdentifierPart(this.peek))
          this.advance();
        const identifierName2 = this.input.substring(start, this.index);
        return newPrivateIdentifierToken(start, this.index, identifierName2);
      }
      scanNumber(start) {
        let simple = this.index === start;
        let hasSeparators = false;
        this.advance();
        while (true) {
          if (isDigit(this.peek)) ;
          else if (this.peek === $_) {
            if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {
              return this.error("Invalid numeric separator", 0);
            }
            hasSeparators = true;
          } else if (this.peek === $PERIOD) {
            simple = false;
          } else if (isExponentStart(this.peek)) {
            this.advance();
            if (isExponentSign(this.peek))
              this.advance();
            if (!isDigit(this.peek))
              return this.error("Invalid exponent", -1);
            simple = false;
          } else {
            break;
          }
          this.advance();
        }
        let str = this.input.substring(start, this.index);
        if (hasSeparators) {
          str = str.replace(/_/g, "");
        }
        const value = simple ? parseIntAutoRadix(str) : parseFloat(str);
        return newNumberToken(start, this.index, value);
      }
      scanString() {
        const start = this.index;
        const quote = this.peek;
        this.advance();
        let buffer = "";
        let marker = this.index;
        const input2 = this.input;
        while (this.peek != quote) {
          if (this.peek == $BACKSLASH) {
            const result = this.scanStringBackslash(buffer, marker);
            if (typeof result !== "string") {
              return result;
            }
            buffer = result;
            marker = this.index;
          } else if (this.peek == $EOF) {
            return this.error("Unterminated quote", 0);
          } else {
            this.advance();
          }
        }
        const last3 = input2.substring(marker, this.index);
        this.advance();
        return new StringToken(start, this.index, buffer + last3, StringTokenKind.Plain);
      }
      scanQuestion(start) {
        this.advance();
        let operator = "?";
        if (this.peek === $QUESTION) {
          operator += "?";
          this.advance();
          if (this.peek === $EQ) {
            operator += "=";
            this.advance();
          }
        } else if (this.peek === $PERIOD) {
          operator += ".";
          this.advance();
        }
        return newOperatorToken(start, this.index, operator);
      }
      scanTemplateLiteralPart(start) {
        let buffer = "";
        let marker = this.index;
        while (this.peek !== $BT) {
          if (this.peek === $BACKSLASH) {
            const result = this.scanStringBackslash(buffer, marker);
            if (typeof result !== "string") {
              return result;
            }
            buffer = result;
            marker = this.index;
          } else if (this.peek === $$) {
            const dollar = this.index;
            this.advance();
            if (this.peek === $LBRACE) {
              this.braceStack.push("interpolation");
              this.tokens.push(new StringToken(start, dollar, buffer + this.input.substring(marker, dollar), StringTokenKind.TemplateLiteralPart));
              this.advance();
              return newOperatorToken(dollar, this.index, this.input.substring(dollar, this.index));
            }
          } else if (this.peek === $EOF) {
            return this.error("Unterminated template literal", 0);
          } else {
            this.advance();
          }
        }
        const last3 = this.input.substring(marker, this.index);
        this.advance();
        return new StringToken(start, this.index, buffer + last3, StringTokenKind.TemplateLiteralEnd);
      }
      error(message, offset) {
        const position = this.index + offset;
        return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
      }
      scanStringBackslash(buffer, marker) {
        buffer += this.input.substring(marker, this.index);
        let unescapedCode;
        this.advance();
        if (this.peek === $u) {
          const hex = this.input.substring(this.index + 1, this.index + 5);
          if (/^[0-9a-f]+$/i.test(hex)) {
            unescapedCode = parseInt(hex, 16);
          } else {
            return this.error(`Invalid unicode escape [\\u${hex}]`, 0);
          }
          for (let i = 0; i < 5; i++) {
            this.advance();
          }
        } else {
          unescapedCode = unescape(this.peek);
          this.advance();
        }
        buffer += String.fromCharCode(unescapedCode);
        return buffer;
      }
      scanStar(start) {
        this.advance();
        let operator = "*";
        if (this.peek === $STAR) {
          operator += "*";
          this.advance();
          if (this.peek === $EQ) {
            operator += "=";
            this.advance();
          }
        } else if (this.peek === $EQ) {
          operator += "=";
          this.advance();
        }
        return newOperatorToken(start, this.index, operator);
      }
    };
    SplitInterpolation = class {
      strings;
      expressions;
      offsets;
      constructor(strings, expressions, offsets) {
        this.strings = strings;
        this.expressions = expressions;
        this.offsets = offsets;
      }
    };
    TemplateBindingParseResult = class {
      templateBindings;
      warnings;
      errors;
      constructor(templateBindings, warnings, errors) {
        this.templateBindings = templateBindings;
        this.warnings = warnings;
        this.errors = errors;
      }
    };
    Parser2 = class {
      _lexer;
      _supportsDirectPipeReferences;
      constructor(_lexer, _supportsDirectPipeReferences = false) {
        this._lexer = _lexer;
        this._supportsDirectPipeReferences = _supportsDirectPipeReferences;
      }
      parseAction(input2, parseSourceSpan, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
        const errors = [];
        this._checkNoInterpolation(errors, input2, parseSourceSpan, interpolationConfig);
        const { stripped: sourceToLex } = this._stripComments(input2);
        const tokens = this._lexer.tokenize(sourceToLex);
        const ast = new _ParseAST(input2, parseSourceSpan, absoluteOffset, tokens, 1, errors, 0, this._supportsDirectPipeReferences).parseChain();
        return new ASTWithSource(ast, input2, getLocation(parseSourceSpan), absoluteOffset, errors);
      }
      parseBinding(input2, parseSourceSpan, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
        const errors = [];
        const ast = this._parseBindingAst(input2, parseSourceSpan, absoluteOffset, interpolationConfig, errors);
        return new ASTWithSource(ast, input2, getLocation(parseSourceSpan), absoluteOffset, errors);
      }
      checkSimpleExpression(ast) {
        const checker = new SimpleExpressionChecker();
        ast.visit(checker);
        return checker.errors;
      }
      // Host bindings parsed here
      parseSimpleBinding(input2, parseSourceSpan, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
        const errors = [];
        const ast = this._parseBindingAst(input2, parseSourceSpan, absoluteOffset, interpolationConfig, errors);
        const simplExpressionErrors = this.checkSimpleExpression(ast);
        if (simplExpressionErrors.length > 0) {
          errors.push(getParseError(`Host binding expression cannot contain ${simplExpressionErrors.join(" ")}`, input2, "", parseSourceSpan));
        }
        return new ASTWithSource(ast, input2, getLocation(parseSourceSpan), absoluteOffset, errors);
      }
      _parseBindingAst(input2, parseSourceSpan, absoluteOffset, interpolationConfig, errors) {
        this._checkNoInterpolation(errors, input2, parseSourceSpan, interpolationConfig);
        const { stripped: sourceToLex } = this._stripComments(input2);
        const tokens = this._lexer.tokenize(sourceToLex);
        return new _ParseAST(input2, parseSourceSpan, absoluteOffset, tokens, 0, errors, 0, this._supportsDirectPipeReferences).parseChain();
      }
      /**
       * Parse microsyntax template expression and return a list of bindings or
       * parsing errors in case the given expression is invalid.
       *
       * For example,
       * ```html
       *   <div *ngFor="let item of items">
       *         ^      ^ absoluteValueOffset for `templateValue`
       *         absoluteKeyOffset for `templateKey`
       * ```
       * contains three bindings:
       * 1. ngFor -> null
       * 2. item -> NgForOfContext.$implicit
       * 3. ngForOf -> items
       *
       * This is apparent from the de-sugared template:
       * ```html
       *   <ng-template ngFor let-item [ngForOf]="items">
       * ```
       *
       * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
       * @param templateValue RHS of the microsyntax attribute
       * @param templateUrl template filename if it's external, component filename if it's inline
       * @param absoluteKeyOffset start of the `templateKey`
       * @param absoluteValueOffset start of the `templateValue`
       */
      parseTemplateBindings(templateKey, templateValue, parseSourceSpan, absoluteKeyOffset, absoluteValueOffset) {
        const tokens = this._lexer.tokenize(templateValue);
        const errors = [];
        const parser = new _ParseAST(templateValue, parseSourceSpan, absoluteValueOffset, tokens, 0, errors, 0, this._supportsDirectPipeReferences);
        return parser.parseTemplateBindings({
          source: templateKey,
          span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)
        });
      }
      parseInterpolation(input2, parseSourceSpan, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
        const errors = [];
        const { strings, expressions, offsets } = this.splitInterpolation(input2, parseSourceSpan, errors, interpolatedTokens, interpolationConfig);
        if (expressions.length === 0)
          return null;
        const expressionNodes = [];
        for (let i = 0; i < expressions.length; ++i) {
          const expressionSpan = interpolatedTokens?.[i * 2 + 1]?.sourceSpan;
          const expressionText = expressions[i].text;
          const { stripped: sourceToLex, hasComments } = this._stripComments(expressionText);
          const tokens = this._lexer.tokenize(sourceToLex);
          if (hasComments && sourceToLex.trim().length === 0 && tokens.length === 0) {
            errors.push(getParseError("Interpolation expression cannot only contain a comment", input2, `at column ${expressions[i].start} in`, parseSourceSpan));
            continue;
          }
          const ast = new _ParseAST(expressionSpan ? expressionText : input2, expressionSpan || parseSourceSpan, absoluteOffset, tokens, 0, errors, offsets[i], this._supportsDirectPipeReferences).parseChain();
          expressionNodes.push(ast);
        }
        return this.createInterpolationAst(strings.map((s) => s.text), expressionNodes, input2, getLocation(parseSourceSpan), absoluteOffset, errors);
      }
      /**
       * Similar to `parseInterpolation`, but treats the provided string as a single expression
       * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
       * This is used for parsing the switch expression in ICUs.
       */
      parseInterpolationExpression(expression, parseSourceSpan, absoluteOffset) {
        const { stripped: sourceToLex } = this._stripComments(expression);
        const tokens = this._lexer.tokenize(sourceToLex);
        const errors = [];
        const ast = new _ParseAST(expression, parseSourceSpan, absoluteOffset, tokens, 0, errors, 0, this._supportsDirectPipeReferences).parseChain();
        const strings = ["", ""];
        return this.createInterpolationAst(strings, [ast], expression, getLocation(parseSourceSpan), absoluteOffset, errors);
      }
      createInterpolationAst(strings, expressions, input2, location2, absoluteOffset, errors) {
        const span = new ParseSpan(0, input2.length);
        const interpolation = new Interpolation$1(span, span.toAbsolute(absoluteOffset), strings, expressions);
        return new ASTWithSource(interpolation, input2, location2, absoluteOffset, errors);
      }
      /**
       * Splits a string of text into "raw" text segments and expressions present in interpolations in
       * the string.
       * Returns `null` if there are no interpolations, otherwise a
       * `SplitInterpolation` with splits that look like
       *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>
       */
      splitInterpolation(input2, parseSourceSpan, errors, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
        const strings = [];
        const expressions = [];
        const offsets = [];
        const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;
        let i = 0;
        let atInterpolation = false;
        let extendLastString = false;
        let { start: interpStart, end: interpEnd } = interpolationConfig;
        while (i < input2.length) {
          if (!atInterpolation) {
            const start = i;
            i = input2.indexOf(interpStart, i);
            if (i === -1) {
              i = input2.length;
            }
            const text2 = input2.substring(start, i);
            strings.push({ text: text2, start, end: i });
            atInterpolation = true;
          } else {
            const fullStart = i;
            const exprStart = fullStart + interpStart.length;
            const exprEnd = this._getInterpolationEndIndex(input2, interpEnd, exprStart);
            if (exprEnd === -1) {
              atInterpolation = false;
              extendLastString = true;
              break;
            }
            const fullEnd = exprEnd + interpEnd.length;
            const text2 = input2.substring(exprStart, exprEnd);
            if (text2.trim().length === 0) {
              errors.push(getParseError("Blank expressions are not allowed in interpolated strings", input2, `at column ${i} in`, parseSourceSpan));
            }
            expressions.push({ text: text2, start: fullStart, end: fullEnd });
            const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;
            const offset = startInOriginalTemplate + interpStart.length;
            offsets.push(offset);
            i = fullEnd;
            atInterpolation = false;
          }
        }
        if (!atInterpolation) {
          if (extendLastString) {
            const piece = strings[strings.length - 1];
            piece.text += input2.substring(i);
            piece.end = input2.length;
          } else {
            strings.push({ text: input2.substring(i), start: i, end: input2.length });
          }
        }
        return new SplitInterpolation(strings, expressions, offsets);
      }
      wrapLiteralPrimitive(input2, sourceSpanOrLocation, absoluteOffset) {
        const span = new ParseSpan(0, input2 == null ? 0 : input2.length);
        return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input2), input2, typeof sourceSpanOrLocation === "string" ? sourceSpanOrLocation : getLocation(sourceSpanOrLocation), absoluteOffset, []);
      }
      _stripComments(input2) {
        const i = this._commentStart(input2);
        return i != null ? { stripped: input2.substring(0, i), hasComments: true } : { stripped: input2, hasComments: false };
      }
      _commentStart(input2) {
        let outerQuote = null;
        for (let i = 0; i < input2.length - 1; i++) {
          const char = input2.charCodeAt(i);
          const nextChar = input2.charCodeAt(i + 1);
          if (char === $SLASH && nextChar == $SLASH && outerQuote == null)
            return i;
          if (outerQuote === char) {
            outerQuote = null;
          } else if (outerQuote == null && isQuote(char)) {
            outerQuote = char;
          }
        }
        return null;
      }
      _checkNoInterpolation(errors, input2, parseSourceSpan, { start, end }) {
        let startIndex = -1;
        let endIndex = -1;
        for (const charIndex of this._forEachUnquotedChar(input2, 0)) {
          if (startIndex === -1) {
            if (input2.startsWith(start)) {
              startIndex = charIndex;
            }
          } else {
            endIndex = this._getInterpolationEndIndex(input2, end, charIndex);
            if (endIndex > -1) {
              break;
            }
          }
        }
        if (startIndex > -1 && endIndex > -1) {
          errors.push(getParseError(`Got interpolation (${start}${end}) where expression was expected`, input2, `at column ${startIndex} in`, parseSourceSpan));
        }
      }
      /**
       * Finds the index of the end of an interpolation expression
       * while ignoring comments and quoted content.
       */
      _getInterpolationEndIndex(input2, expressionEnd, start) {
        for (const charIndex of this._forEachUnquotedChar(input2, start)) {
          if (input2.startsWith(expressionEnd, charIndex)) {
            return charIndex;
          }
          if (input2.startsWith("//", charIndex)) {
            return input2.indexOf(expressionEnd, charIndex);
          }
        }
        return -1;
      }
      /**
       * Generator used to iterate over the character indexes of a string that are outside of quotes.
       * @param input String to loop through.
       * @param start Index within the string at which to start.
       */
      *_forEachUnquotedChar(input2, start) {
        let currentQuote = null;
        let escapeCount = 0;
        for (let i = start; i < input2.length; i++) {
          const char = input2[i];
          if (isQuote(input2.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {
            currentQuote = currentQuote === null ? char : null;
          } else if (currentQuote === null) {
            yield i;
          }
          escapeCount = char === "\\" ? escapeCount + 1 : 0;
        }
      }
    };
    (function(ParseContextFlags2) {
      ParseContextFlags2[ParseContextFlags2["None"] = 0] = "None";
      ParseContextFlags2[ParseContextFlags2["Writable"] = 1] = "Writable";
    })(ParseContextFlags || (ParseContextFlags = {}));
    _ParseAST = class {
      input;
      parseSourceSpan;
      absoluteOffset;
      tokens;
      parseFlags;
      errors;
      offset;
      supportsDirectPipeReferences;
      rparensExpected = 0;
      rbracketsExpected = 0;
      rbracesExpected = 0;
      context = ParseContextFlags.None;
      // Cache of expression start and input indeces to the absolute source span they map to, used to
      // prevent creating superfluous source spans in `sourceSpan`.
      // A serial of the expression start and input index is used for mapping because both are stateful
      // and may change for subsequent expressions visited by the parser.
      sourceSpanCache = /* @__PURE__ */ new Map();
      index = 0;
      constructor(input2, parseSourceSpan, absoluteOffset, tokens, parseFlags, errors, offset, supportsDirectPipeReferences) {
        this.input = input2;
        this.parseSourceSpan = parseSourceSpan;
        this.absoluteOffset = absoluteOffset;
        this.tokens = tokens;
        this.parseFlags = parseFlags;
        this.errors = errors;
        this.offset = offset;
        this.supportsDirectPipeReferences = supportsDirectPipeReferences;
      }
      peek(offset) {
        const i = this.index + offset;
        return i < this.tokens.length ? this.tokens[i] : EOF;
      }
      get next() {
        return this.peek(0);
      }
      /** Whether all the parser input has been processed. */
      get atEOF() {
        return this.index >= this.tokens.length;
      }
      /**
       * Index of the next token to be processed, or the end of the last token if all have been
       * processed.
       */
      get inputIndex() {
        return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
      }
      /**
       * End index of the last processed token, or the start of the first token if none have been
       * processed.
       */
      get currentEndIndex() {
        if (this.index > 0) {
          const curToken = this.peek(-1);
          return curToken.end + this.offset;
        }
        if (this.tokens.length === 0) {
          return this.input.length + this.offset;
        }
        return this.next.index + this.offset;
      }
      /**
       * Returns the absolute offset of the start of the current token.
       */
      get currentAbsoluteOffset() {
        return this.absoluteOffset + this.inputIndex;
      }
      /**
       * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if
       * provided).
       *
       * @param start Position from which the `ParseSpan` will start.
       * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the
       *     natural ending index)
       */
      span(start, artificialEndIndex) {
        let endIndex = this.currentEndIndex;
        if (artificialEndIndex !== void 0 && artificialEndIndex > this.currentEndIndex) {
          endIndex = artificialEndIndex;
        }
        if (start > endIndex) {
          const tmp = endIndex;
          endIndex = start;
          start = tmp;
        }
        return new ParseSpan(start, endIndex);
      }
      sourceSpan(start, artificialEndIndex) {
        const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;
        if (!this.sourceSpanCache.has(serial)) {
          this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));
        }
        return this.sourceSpanCache.get(serial);
      }
      advance() {
        this.index++;
      }
      /**
       * Executes a callback in the provided context.
       */
      withContext(context2, cb) {
        this.context |= context2;
        const ret = cb();
        this.context ^= context2;
        return ret;
      }
      consumeOptionalCharacter(code) {
        if (this.next.isCharacter(code)) {
          this.advance();
          return true;
        } else {
          return false;
        }
      }
      peekKeywordLet() {
        return this.next.isKeywordLet();
      }
      peekKeywordAs() {
        return this.next.isKeywordAs();
      }
      /**
       * Consumes an expected character, otherwise emits an error about the missing expected character
       * and skips over the token stream until reaching a recoverable point.
       *
       * See `this.error` and `this.skip` for more details.
       */
      expectCharacter(code) {
        if (this.consumeOptionalCharacter(code))
          return;
        this.error(`Missing expected ${String.fromCharCode(code)}`);
      }
      consumeOptionalOperator(op) {
        if (this.next.isOperator(op)) {
          this.advance();
          return true;
        } else {
          return false;
        }
      }
      isAssignmentOperator(token) {
        return token.type === TokenType.Operator && Binary.isAssignmentOperation(token.strValue);
      }
      expectOperator(operator) {
        if (this.consumeOptionalOperator(operator))
          return;
        this.error(`Missing expected operator ${operator}`);
      }
      prettyPrintToken(tok) {
        return tok === EOF ? "end of input" : `token ${tok}`;
      }
      expectIdentifierOrKeyword() {
        const n = this.next;
        if (!n.isIdentifier() && !n.isKeyword()) {
          if (n.isPrivateIdentifier()) {
            this._reportErrorForPrivateIdentifier(n, "expected identifier or keyword");
          } else {
            this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);
          }
          return null;
        }
        this.advance();
        return n.toString();
      }
      expectIdentifierOrKeywordOrString() {
        const n = this.next;
        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
          if (n.isPrivateIdentifier()) {
            this._reportErrorForPrivateIdentifier(n, "expected identifier, keyword or string");
          } else {
            this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);
          }
          return "";
        }
        this.advance();
        return n.toString();
      }
      parseChain() {
        const exprs = [];
        const start = this.inputIndex;
        while (this.index < this.tokens.length) {
          const expr = this.parsePipe();
          exprs.push(expr);
          if (this.consumeOptionalCharacter($SEMICOLON)) {
            if (!(this.parseFlags & 1)) {
              this.error("Binding expression cannot contain chained expression");
            }
            while (this.consumeOptionalCharacter($SEMICOLON)) {
            }
          } else if (this.index < this.tokens.length) {
            const errorIndex = this.index;
            this.error(`Unexpected token '${this.next}'`);
            if (this.index === errorIndex) {
              break;
            }
          }
        }
        if (exprs.length === 0) {
          const artificialStart = this.offset;
          const artificialEnd = this.offset + this.input.length;
          return new EmptyExpr$1(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));
        }
        if (exprs.length == 1)
          return exprs[0];
        return new Chain(this.span(start), this.sourceSpan(start), exprs);
      }
      parsePipe() {
        const start = this.inputIndex;
        let result = this.parseExpression();
        if (this.consumeOptionalOperator("|")) {
          if (this.parseFlags & 1) {
            this.error(`Cannot have a pipe in an action expression`);
          }
          do {
            const nameStart = this.inputIndex;
            let nameId = this.expectIdentifierOrKeyword();
            let nameSpan;
            let fullSpanEnd = void 0;
            if (nameId !== null) {
              nameSpan = this.sourceSpan(nameStart);
            } else {
              nameId = "";
              fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;
              nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);
            }
            const args = [];
            while (this.consumeOptionalCharacter($COLON)) {
              args.push(this.parseExpression());
            }
            let type;
            if (this.supportsDirectPipeReferences) {
              const charCode = nameId.charCodeAt(0);
              type = charCode === $_ || charCode >= $A && charCode <= $Z ? BindingPipeType.ReferencedDirectly : BindingPipeType.ReferencedByName;
            } else {
              type = BindingPipeType.ReferencedByName;
            }
            result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, type, nameSpan);
          } while (this.consumeOptionalOperator("|"));
        }
        return result;
      }
      parseExpression() {
        return this.parseConditional();
      }
      parseConditional() {
        const start = this.inputIndex;
        const result = this.parseLogicalOr();
        if (this.consumeOptionalOperator("?")) {
          const yes = this.parsePipe();
          let no;
          if (!this.consumeOptionalCharacter($COLON)) {
            const end = this.inputIndex;
            const expression = this.input.substring(start, end);
            this.error(`Conditional expression ${expression} requires all 3 expressions`);
            no = new EmptyExpr$1(this.span(start), this.sourceSpan(start));
          } else {
            no = this.parsePipe();
          }
          return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
        } else {
          return result;
        }
      }
      parseLogicalOr() {
        const start = this.inputIndex;
        let result = this.parseLogicalAnd();
        while (this.consumeOptionalOperator("||")) {
          const right = this.parseLogicalAnd();
          result = new Binary(this.span(start), this.sourceSpan(start), "||", result, right);
        }
        return result;
      }
      parseLogicalAnd() {
        const start = this.inputIndex;
        let result = this.parseNullishCoalescing();
        while (this.consumeOptionalOperator("&&")) {
          const right = this.parseNullishCoalescing();
          result = new Binary(this.span(start), this.sourceSpan(start), "&&", result, right);
        }
        return result;
      }
      parseNullishCoalescing() {
        const start = this.inputIndex;
        let result = this.parseEquality();
        while (this.consumeOptionalOperator("??")) {
          const right = this.parseEquality();
          result = new Binary(this.span(start), this.sourceSpan(start), "??", result, right);
        }
        return result;
      }
      parseEquality() {
        const start = this.inputIndex;
        let result = this.parseRelational();
        while (this.next.type == TokenType.Operator) {
          const operator = this.next.strValue;
          switch (operator) {
            case "==":
            case "===":
            case "!=":
            case "!==":
              this.advance();
              const right = this.parseRelational();
              result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
              continue;
          }
          break;
        }
        return result;
      }
      parseRelational() {
        const start = this.inputIndex;
        let result = this.parseAdditive();
        while (this.next.type == TokenType.Operator || this.next.isKeywordIn) {
          const operator = this.next.strValue;
          switch (operator) {
            case "<":
            case ">":
            case "<=":
            case ">=":
            case "in":
              this.advance();
              const right = this.parseAdditive();
              result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
              continue;
          }
          break;
        }
        return result;
      }
      parseAdditive() {
        const start = this.inputIndex;
        let result = this.parseMultiplicative();
        while (this.next.type == TokenType.Operator) {
          const operator = this.next.strValue;
          switch (operator) {
            case "+":
            case "-":
              this.advance();
              let right = this.parseMultiplicative();
              result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
              continue;
          }
          break;
        }
        return result;
      }
      parseMultiplicative() {
        const start = this.inputIndex;
        let result = this.parseExponentiation();
        while (this.next.type == TokenType.Operator) {
          const operator = this.next.strValue;
          switch (operator) {
            case "*":
            case "%":
            case "/":
              this.advance();
              const right = this.parseExponentiation();
              result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
              continue;
          }
          break;
        }
        return result;
      }
      parseExponentiation() {
        const start = this.inputIndex;
        let result = this.parsePrefix();
        while (this.next.type == TokenType.Operator && this.next.strValue === "**") {
          if (result instanceof Unary || result instanceof PrefixNot || result instanceof TypeofExpression || result instanceof VoidExpression) {
            this.error("Unary operator used immediately before exponentiation expression. Parenthesis must be used to disambiguate operator precedence");
          }
          this.advance();
          const right = this.parseExponentiation();
          result = new Binary(this.span(start), this.sourceSpan(start), "**", result, right);
        }
        return result;
      }
      parsePrefix() {
        if (this.next.type == TokenType.Operator) {
          const start = this.inputIndex;
          const operator = this.next.strValue;
          let result;
          switch (operator) {
            case "+":
              this.advance();
              result = this.parsePrefix();
              return Unary.createPlus(this.span(start), this.sourceSpan(start), result);
            case "-":
              this.advance();
              result = this.parsePrefix();
              return Unary.createMinus(this.span(start), this.sourceSpan(start), result);
            case "!":
              this.advance();
              result = this.parsePrefix();
              return new PrefixNot(this.span(start), this.sourceSpan(start), result);
          }
        } else if (this.next.isKeywordTypeof()) {
          this.advance();
          const start = this.inputIndex;
          let result = this.parsePrefix();
          return new TypeofExpression(this.span(start), this.sourceSpan(start), result);
        } else if (this.next.isKeywordVoid()) {
          this.advance();
          const start = this.inputIndex;
          let result = this.parsePrefix();
          return new VoidExpression(this.span(start), this.sourceSpan(start), result);
        }
        return this.parseCallChain();
      }
      parseCallChain() {
        const start = this.inputIndex;
        let result = this.parsePrimary();
        while (true) {
          if (this.consumeOptionalCharacter($PERIOD)) {
            result = this.parseAccessMember(result, start, false);
          } else if (this.consumeOptionalOperator("?.")) {
            if (this.consumeOptionalCharacter($LPAREN)) {
              result = this.parseCall(result, start, true);
            } else {
              result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMember(result, start, true);
            }
          } else if (this.consumeOptionalCharacter($LBRACKET)) {
            result = this.parseKeyedReadOrWrite(result, start, false);
          } else if (this.consumeOptionalCharacter($LPAREN)) {
            result = this.parseCall(result, start, false);
          } else if (this.consumeOptionalOperator("!")) {
            result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);
          } else if (this.next.isTemplateLiteralEnd()) {
            result = this.parseNoInterpolationTaggedTemplateLiteral(result, start);
          } else if (this.next.isTemplateLiteralPart()) {
            result = this.parseTaggedTemplateLiteral(result, start);
          } else {
            return result;
          }
        }
      }
      parsePrimary() {
        const start = this.inputIndex;
        if (this.consumeOptionalCharacter($LPAREN)) {
          this.rparensExpected++;
          const result = this.parsePipe();
          if (!this.consumeOptionalCharacter($RPAREN)) {
            this.error("Missing closing parentheses");
            this.consumeOptionalCharacter($RPAREN);
          }
          this.rparensExpected--;
          return new ParenthesizedExpression(this.span(start), this.sourceSpan(start), result);
        } else if (this.next.isKeywordNull()) {
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
        } else if (this.next.isKeywordUndefined()) {
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
        } else if (this.next.isKeywordTrue()) {
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
        } else if (this.next.isKeywordFalse()) {
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
        } else if (this.next.isKeywordIn()) {
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), "in");
        } else if (this.next.isKeywordThis()) {
          this.advance();
          return new ThisReceiver(this.span(start), this.sourceSpan(start));
        } else if (this.consumeOptionalCharacter($LBRACKET)) {
          this.rbracketsExpected++;
          const elements = this.parseExpressionList($RBRACKET);
          this.rbracketsExpected--;
          this.expectCharacter($RBRACKET);
          return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
        } else if (this.next.isCharacter($LBRACE)) {
          return this.parseLiteralMap();
        } else if (this.next.isIdentifier()) {
          return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);
        } else if (this.next.isNumber()) {
          const value = this.next.toNumber();
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
        } else if (this.next.isTemplateLiteralEnd()) {
          return this.parseNoInterpolationTemplateLiteral();
        } else if (this.next.isTemplateLiteralPart()) {
          return this.parseTemplateLiteral();
        } else if (this.next.isString() && this.next.kind === StringTokenKind.Plain) {
          const literalValue = this.next.toString();
          this.advance();
          return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
        } else if (this.next.isPrivateIdentifier()) {
          this._reportErrorForPrivateIdentifier(this.next, null);
          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        } else if (this.index >= this.tokens.length) {
          this.error(`Unexpected end of expression: ${this.input}`);
          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        } else {
          this.error(`Unexpected token ${this.next}`);
          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        }
      }
      parseExpressionList(terminator) {
        const result = [];
        do {
          if (!this.next.isCharacter(terminator)) {
            result.push(this.parsePipe());
          } else {
            break;
          }
        } while (this.consumeOptionalCharacter($COMMA));
        return result;
      }
      parseLiteralMap() {
        const keys = [];
        const values = [];
        const start = this.inputIndex;
        this.expectCharacter($LBRACE);
        if (!this.consumeOptionalCharacter($RBRACE)) {
          this.rbracesExpected++;
          do {
            const keyStart = this.inputIndex;
            const quoted = this.next.isString();
            const key = this.expectIdentifierOrKeywordOrString();
            const literalMapKey = { key, quoted };
            keys.push(literalMapKey);
            if (quoted) {
              this.expectCharacter($COLON);
              values.push(this.parsePipe());
            } else if (this.consumeOptionalCharacter($COLON)) {
              values.push(this.parsePipe());
            } else {
              literalMapKey.isShorthandInitialized = true;
              const span = this.span(keyStart);
              const sourceSpan = this.sourceSpan(keyStart);
              values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));
            }
          } while (this.consumeOptionalCharacter($COMMA) && !this.next.isCharacter($RBRACE));
          this.rbracesExpected--;
          this.expectCharacter($RBRACE);
        }
        return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
      }
      parseAccessMember(readReceiver, start, isSafe) {
        const nameStart = this.inputIndex;
        const id = this.withContext(ParseContextFlags.Writable, () => {
          const id2 = this.expectIdentifierOrKeyword() ?? "";
          if (id2.length === 0) {
            this.error(`Expected identifier for property access`, readReceiver.span.end);
          }
          return id2;
        });
        const nameSpan = this.sourceSpan(nameStart);
        if (isSafe) {
          if (this.isAssignmentOperator(this.next)) {
            this.advance();
            this.error("The '?.' operator cannot be used in the assignment");
            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
          } else {
            return new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
          }
        } else {
          if (this.isAssignmentOperator(this.next)) {
            const operation = this.next.strValue;
            if (!(this.parseFlags & 1)) {
              this.advance();
              this.error("Bindings cannot contain assignments");
              return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
            }
            const receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
            this.advance();
            const value = this.parseConditional();
            return new Binary(this.span(start), this.sourceSpan(start), operation, receiver, value);
          } else {
            return new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
          }
        }
      }
      parseCall(receiver, start, isSafe) {
        const argumentStart = this.inputIndex;
        this.rparensExpected++;
        const args = this.parseCallArguments();
        const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);
        this.expectCharacter($RPAREN);
        this.rparensExpected--;
        const span = this.span(start);
        const sourceSpan = this.sourceSpan(start);
        return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) : new Call(span, sourceSpan, receiver, args, argumentSpan);
      }
      parseCallArguments() {
        if (this.next.isCharacter($RPAREN))
          return [];
        const positionals = [];
        do {
          positionals.push(this.parsePipe());
        } while (this.consumeOptionalCharacter($COMMA));
        return positionals;
      }
      /**
       * Parses an identifier, a keyword, a string with an optional `-` in between,
       * and returns the string along with its absolute source span.
       */
      expectTemplateBindingKey() {
        let result = "";
        let operatorFound = false;
        const start = this.currentAbsoluteOffset;
        do {
          result += this.expectIdentifierOrKeywordOrString();
          operatorFound = this.consumeOptionalOperator("-");
          if (operatorFound) {
            result += "-";
          }
        } while (operatorFound);
        return {
          source: result,
          span: new AbsoluteSourceSpan(start, start + result.length)
        };
      }
      /**
       * Parse microsyntax template expression and return a list of bindings or
       * parsing errors in case the given expression is invalid.
       *
       * For example,
       * ```html
       *   <div *ngFor="let item of items; index as i; trackBy: func">
       * ```
       * contains five bindings:
       * 1. ngFor -> null
       * 2. item -> NgForOfContext.$implicit
       * 3. ngForOf -> items
       * 4. i -> NgForOfContext.index
       * 5. ngForTrackBy -> func
       *
       * For a full description of the microsyntax grammar, see
       * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
       *
       * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
       * without the *, along with its absolute span.
       */
      parseTemplateBindings(templateKey) {
        const bindings = [];
        bindings.push(...this.parseDirectiveKeywordBindings(templateKey));
        while (this.index < this.tokens.length) {
          const letBinding = this.parseLetBinding();
          if (letBinding) {
            bindings.push(letBinding);
          } else {
            const key = this.expectTemplateBindingKey();
            const binding = this.parseAsBinding(key);
            if (binding) {
              bindings.push(binding);
            } else {
              key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);
              bindings.push(...this.parseDirectiveKeywordBindings(key));
            }
          }
          this.consumeStatementTerminator();
        }
        return new TemplateBindingParseResult(bindings, [], this.errors);
      }
      parseKeyedReadOrWrite(receiver, start, isSafe) {
        return this.withContext(ParseContextFlags.Writable, () => {
          this.rbracketsExpected++;
          const key = this.parsePipe();
          if (key instanceof EmptyExpr$1) {
            this.error(`Key access cannot be empty`);
          }
          this.rbracketsExpected--;
          this.expectCharacter($RBRACKET);
          if (this.isAssignmentOperator(this.next)) {
            const operation = this.next.strValue;
            if (isSafe) {
              this.advance();
              this.error("The '?.' operator cannot be used in the assignment");
            } else {
              const binaryReceiver = new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);
              this.advance();
              const value = this.parseConditional();
              return new Binary(this.span(start), this.sourceSpan(start), operation, binaryReceiver, value);
            }
          } else {
            return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);
          }
          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        });
      }
      /**
       * Parse a directive keyword, followed by a mandatory expression.
       * For example, "of items", "trackBy: func".
       * The bindings are: ngForOf -> items, ngForTrackBy -> func
       * There could be an optional "as" binding that follows the expression.
       * For example,
       * ```
       *   *ngFor="let item of items | slice:0:1 as collection".
       *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
       *               keyword    bound target   optional 'as' binding
       * ```
       *
       * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
       * absolute span.
       */
      parseDirectiveKeywordBindings(key) {
        const bindings = [];
        this.consumeOptionalCharacter($COLON);
        const value = this.getDirectiveBoundTarget();
        let spanEnd = this.currentAbsoluteOffset;
        const asBinding = this.parseAsBinding(key);
        if (!asBinding) {
          this.consumeStatementTerminator();
          spanEnd = this.currentAbsoluteOffset;
        }
        const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
        bindings.push(new ExpressionBinding(sourceSpan, key, value));
        if (asBinding) {
          bindings.push(asBinding);
        }
        return bindings;
      }
      /**
       * Return the expression AST for the bound target of a directive keyword
       * binding. For example,
       * ```
       *   *ngIf="condition | pipe"
       *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
       *   *ngFor="let item of items"
       *                       ^^^^^ bound target for "ngForOf"
       * ```
       */
      getDirectiveBoundTarget() {
        if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
          return null;
        }
        const ast = this.parsePipe();
        const { start, end } = ast.span;
        const value = this.input.substring(start, end);
        return new ASTWithSource(ast, value, getLocation(this.parseSourceSpan), this.absoluteOffset + start, this.errors);
      }
      /**
       * Return the binding for a variable declared using `as`. Note that the order
       * of the key-value pair in this declaration is reversed. For example,
       * ```
       *   *ngFor="let item of items; index as i"
       *                              ^^^^^    ^
       *                              value    key
       * ```
       *
       * @param value name of the value in the declaration, "ngIf" in the example
       * above, along with its absolute span.
       */
      parseAsBinding(value) {
        if (!this.peekKeywordAs()) {
          return null;
        }
        this.advance();
        const key = this.expectTemplateBindingKey();
        this.consumeStatementTerminator();
        const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
        return new VariableBinding(sourceSpan, key, value);
      }
      /**
       * Return the binding for a variable declared using `let`. For example,
       * ```
       *   *ngFor="let item of items; let i=index;"
       *           ^^^^^^^^           ^^^^^^^^^^^
       * ```
       * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
       * In the second binding, `i` is bound to `NgForOfContext.index`.
       */
      parseLetBinding() {
        if (!this.peekKeywordLet()) {
          return null;
        }
        const spanStart = this.currentAbsoluteOffset;
        this.advance();
        const key = this.expectTemplateBindingKey();
        let value = null;
        if (this.consumeOptionalOperator("=")) {
          value = this.expectTemplateBindingKey();
        }
        this.consumeStatementTerminator();
        const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
        return new VariableBinding(sourceSpan, key, value);
      }
      parseNoInterpolationTaggedTemplateLiteral(tag, start) {
        const template2 = this.parseNoInterpolationTemplateLiteral();
        return new TaggedTemplateLiteral(this.span(start), this.sourceSpan(start), tag, template2);
      }
      parseNoInterpolationTemplateLiteral() {
        const text2 = this.next.strValue;
        const start = this.inputIndex;
        this.advance();
        const span = this.span(start);
        const sourceSpan = this.sourceSpan(start);
        return new TemplateLiteral(span, sourceSpan, [new TemplateLiteralElement(span, sourceSpan, text2)], []);
      }
      parseTaggedTemplateLiteral(tag, start) {
        const template2 = this.parseTemplateLiteral();
        return new TaggedTemplateLiteral(this.span(start), this.sourceSpan(start), tag, template2);
      }
      parseTemplateLiteral() {
        const elements = [];
        const expressions = [];
        const start = this.inputIndex;
        while (this.next !== EOF) {
          const token = this.next;
          if (token.isTemplateLiteralPart() || token.isTemplateLiteralEnd()) {
            const partStart = this.inputIndex;
            this.advance();
            elements.push(new TemplateLiteralElement(this.span(partStart), this.sourceSpan(partStart), token.strValue));
            if (token.isTemplateLiteralEnd()) {
              break;
            }
          } else if (token.isTemplateLiteralInterpolationStart()) {
            this.advance();
            const expression = this.parsePipe();
            if (expression instanceof EmptyExpr$1) {
              this.error("Template literal interpolation cannot be empty");
            } else {
              expressions.push(expression);
            }
          } else {
            this.advance();
          }
        }
        return new TemplateLiteral(this.span(start), this.sourceSpan(start), elements, expressions);
      }
      /**
       * Consume the optional statement terminator: semicolon or comma.
       */
      consumeStatementTerminator() {
        this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
      }
      /**
       * Records an error and skips over the token stream until reaching a recoverable point. See
       * `this.skip` for more details on token skipping.
       */
      error(message, index = this.index) {
        this.errors.push(getParseError(message, this.input, this.getErrorLocationText(index), this.parseSourceSpan));
        this.skip();
      }
      getErrorLocationText(index) {
        return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;
      }
      /**
       * Records an error for an unexpected private identifier being discovered.
       * @param token Token representing a private identifier.
       * @param extraMessage Optional additional message being appended to the error.
       */
      _reportErrorForPrivateIdentifier(token, extraMessage) {
        let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;
        if (extraMessage !== null) {
          errorMessage += `, ${extraMessage}`;
        }
        this.error(errorMessage);
      }
      /**
       * Error recovery should skip tokens until it encounters a recovery point.
       *
       * The following are treated as unconditional recovery points:
       *   - end of input
       *   - ';' (parseChain() is always the root production, and it expects a ';')
       *   - '|' (since pipes may be chained and each pipe expression may be treated independently)
       *
       * The following are conditional recovery points:
       *   - ')', '}', ']' if one of calling productions is expecting one of these symbols
       *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to
       *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins
       *       an '(' <expr> ')' production).
       *       The recovery points of grouping symbols must be conditional as they must be skipped if
       *       none of the calling productions are not expecting the closing token else we will never
       *       make progress in the case of an extraneous group closing symbol (such as a stray ')').
       *       That is, we skip a closing symbol if we are not in a grouping production.
       *   - Assignment in a `Writable` context
       *     - In this context, we are able to recover after seeing the `=` operator, which
       *       signals the presence of an independent rvalue expression following the `=` operator.
       *
       * If a production expects one of these token it increments the corresponding nesting count,
       * and then decrements it just prior to checking if the token is in the input.
       */
      skip() {
        let n = this.next;
        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator("|") && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !this.isAssignmentOperator(n))) {
          if (this.next.isError()) {
            this.errors.push(getParseError(this.next.toString(), this.input, this.getErrorLocationText(this.next.index), this.parseSourceSpan));
          }
          this.advance();
          n = this.next;
        }
      }
    };
    SimpleExpressionChecker = class extends RecursiveAstVisitor {
      errors = [];
      visitPipe() {
        this.errors.push("pipes");
      }
    };
    SerializeExpressionVisitor = class {
      visitUnary(ast, context2) {
        return `${ast.operator}${ast.expr.visit(this, context2)}`;
      }
      visitBinary(ast, context2) {
        return `${ast.left.visit(this, context2)} ${ast.operation} ${ast.right.visit(this, context2)}`;
      }
      visitChain(ast, context2) {
        return ast.expressions.map((e) => e.visit(this, context2)).join("; ");
      }
      visitConditional(ast, context2) {
        return `${ast.condition.visit(this, context2)} ? ${ast.trueExp.visit(this, context2)} : ${ast.falseExp.visit(this, context2)}`;
      }
      visitThisReceiver() {
        return "this";
      }
      visitImplicitReceiver() {
        return "";
      }
      visitInterpolation(ast, context2) {
        return interleave(ast.strings, ast.expressions.map((e) => e.visit(this, context2))).join("");
      }
      visitKeyedRead(ast, context2) {
        return `${ast.receiver.visit(this, context2)}[${ast.key.visit(this, context2)}]`;
      }
      visitLiteralArray(ast, context2) {
        return `[${ast.expressions.map((e) => e.visit(this, context2)).join(", ")}]`;
      }
      visitLiteralMap(ast, context2) {
        return `{${zip(ast.keys.map((literal2) => literal2.quoted ? `'${literal2.key}'` : literal2.key), ast.values.map((value) => value.visit(this, context2))).map(([key, value]) => `${key}: ${value}`).join(", ")}}`;
      }
      visitLiteralPrimitive(ast) {
        if (ast.value === null)
          return "null";
        switch (typeof ast.value) {
          case "number":
          case "boolean":
            return ast.value.toString();
          case "undefined":
            return "undefined";
          case "string":
            return `'${ast.value.replace(/'/g, `\\'`)}'`;
          default:
            throw new Error(`Unsupported primitive type: ${ast.value}`);
        }
      }
      visitPipe(ast, context2) {
        return `${ast.exp.visit(this, context2)} | ${ast.name}`;
      }
      visitPrefixNot(ast, context2) {
        return `!${ast.expression.visit(this, context2)}`;
      }
      visitNonNullAssert(ast, context2) {
        return `${ast.expression.visit(this, context2)}!`;
      }
      visitPropertyRead(ast, context2) {
        if (ast.receiver instanceof ImplicitReceiver) {
          return ast.name;
        } else {
          return `${ast.receiver.visit(this, context2)}.${ast.name}`;
        }
      }
      visitSafePropertyRead(ast, context2) {
        return `${ast.receiver.visit(this, context2)}?.${ast.name}`;
      }
      visitSafeKeyedRead(ast, context2) {
        return `${ast.receiver.visit(this, context2)}?.[${ast.key.visit(this, context2)}]`;
      }
      visitCall(ast, context2) {
        return `${ast.receiver.visit(this, context2)}(${ast.args.map((e) => e.visit(this, context2)).join(", ")})`;
      }
      visitSafeCall(ast, context2) {
        return `${ast.receiver.visit(this, context2)}?.(${ast.args.map((e) => e.visit(this, context2)).join(", ")})`;
      }
      visitTypeofExpression(ast, context2) {
        return `typeof ${ast.expression.visit(this, context2)}`;
      }
      visitVoidExpression(ast, context2) {
        return `void ${ast.expression.visit(this, context2)}`;
      }
      visitASTWithSource(ast, context2) {
        return ast.ast.visit(this, context2);
      }
      visitTemplateLiteral(ast, context2) {
        let result = "";
        for (let i = 0; i < ast.elements.length; i++) {
          result += ast.elements[i].visit(this, context2);
          const expression = i < ast.expressions.length ? ast.expressions[i] : null;
          if (expression !== null) {
            result += "${" + expression.visit(this, context2) + "}";
          }
        }
        return "`" + result + "`";
      }
      visitTemplateLiteralElement(ast, context2) {
        return ast.text;
      }
      visitTaggedTemplateLiteral(ast, context2) {
        return ast.tag.visit(this, context2) + ast.template.visit(this, context2);
      }
      visitParenthesizedExpression(ast, context2) {
        return "(" + ast.expression.visit(this, context2) + ")";
      }
    };
    IFRAME_SECURITY_SENSITIVE_ATTRS = /* @__PURE__ */ new Set([
      "sandbox",
      "allow",
      "allowfullscreen",
      "referrerpolicy",
      "csp",
      "fetchpriority"
    ]);
    ElementSchemaRegistry = class {
    };
    BOOLEAN = "boolean";
    NUMBER = "number";
    STRING = "string";
    OBJECT = "object";
    SCHEMA = [
      "[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored",
      "[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,!inert,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
      "abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,search,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
      "media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume",
      ":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",
      ":svg:graphics^:svg:|",
      ":svg:animation^:svg:|*begin,*end,*repeat",
      ":svg:geometry^:svg:|",
      ":svg:componentTransferFunction^:svg:|",
      ":svg:gradient^:svg:|",
      ":svg:textContent^:svg:graphics|",
      ":svg:textPositioning^:svg:textContent|",
      "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username",
      "area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username",
      "audio^media|",
      "br^[HTMLElement]|clear",
      "base^[HTMLElement]|href,target",
      "body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink",
      "button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value",
      "canvas^[HTMLElement]|#height,#width",
      "content^[HTMLElement]|select",
      "dl^[HTMLElement]|!compact",
      "data^[HTMLElement]|value",
      "datalist^[HTMLElement]|",
      "details^[HTMLElement]|!open",
      "dialog^[HTMLElement]|!open,returnValue",
      "dir^[HTMLElement]|!compact",
      "div^[HTMLElement]|align",
      "embed^[HTMLElement]|align,height,name,src,type,width",
      "fieldset^[HTMLElement]|!disabled,name",
      "font^[HTMLElement]|color,face,size",
      "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target",
      "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src",
      "frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows",
      "hr^[HTMLElement]|align,color,!noShade,size,width",
      "head^[HTMLElement]|",
      "h1,h2,h3,h4,h5,h6^[HTMLElement]|align",
      "html^[HTMLElement]|version",
      "iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width",
      "img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width",
      "input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width",
      "li^[HTMLElement]|type,#value",
      "label^[HTMLElement]|htmlFor",
      "legend^[HTMLElement]|align",
      "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type",
      "map^[HTMLElement]|name",
      "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width",
      "menu^[HTMLElement]|!compact",
      "meta^[HTMLElement]|content,httpEquiv,media,name,scheme",
      "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value",
      "ins,del^[HTMLElement]|cite,dateTime",
      "ol^[HTMLElement]|!compact,!reversed,#start,type",
      "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width",
      "optgroup^[HTMLElement]|!disabled,label",
      "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value",
      "output^[HTMLElement]|defaultValue,%htmlFor,name,value",
      "p^[HTMLElement]|align",
      "param^[HTMLElement]|name,type,value,valueType",
      "picture^[HTMLElement]|",
      "pre^[HTMLElement]|#width",
      "progress^[HTMLElement]|#max,#value",
      "q,blockquote,cite^[HTMLElement]|",
      "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type",
      "select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value",
      "selectedcontent^[HTMLElement]|",
      "slot^[HTMLElement]|name",
      "source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width",
      "span^[HTMLElement]|",
      "style^[HTMLElement]|!disabled,media,type",
      "search^[HTMLELement]|",
      "caption^[HTMLElement]|align",
      "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width",
      "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width",
      "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width",
      "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign",
      "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign",
      "template^[HTMLElement]|",
      "textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap",
      "time^[HTMLElement]|dateTime",
      "title^[HTMLElement]|text",
      "track^[HTMLElement]|!default,kind,label,src,srclang",
      "ul^[HTMLElement]|!compact,type",
      "unknown^[HTMLElement]|",
      "video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width",
      ":svg:a^:svg:graphics|",
      ":svg:animate^:svg:animation|",
      ":svg:animateMotion^:svg:animation|",
      ":svg:animateTransform^:svg:animation|",
      ":svg:circle^:svg:geometry|",
      ":svg:clipPath^:svg:graphics|",
      ":svg:defs^:svg:graphics|",
      ":svg:desc^:svg:|",
      ":svg:discard^:svg:|",
      ":svg:ellipse^:svg:geometry|",
      ":svg:feBlend^:svg:|",
      ":svg:feColorMatrix^:svg:|",
      ":svg:feComponentTransfer^:svg:|",
      ":svg:feComposite^:svg:|",
      ":svg:feConvolveMatrix^:svg:|",
      ":svg:feDiffuseLighting^:svg:|",
      ":svg:feDisplacementMap^:svg:|",
      ":svg:feDistantLight^:svg:|",
      ":svg:feDropShadow^:svg:|",
      ":svg:feFlood^:svg:|",
      ":svg:feFuncA^:svg:componentTransferFunction|",
      ":svg:feFuncB^:svg:componentTransferFunction|",
      ":svg:feFuncG^:svg:componentTransferFunction|",
      ":svg:feFuncR^:svg:componentTransferFunction|",
      ":svg:feGaussianBlur^:svg:|",
      ":svg:feImage^:svg:|",
      ":svg:feMerge^:svg:|",
      ":svg:feMergeNode^:svg:|",
      ":svg:feMorphology^:svg:|",
      ":svg:feOffset^:svg:|",
      ":svg:fePointLight^:svg:|",
      ":svg:feSpecularLighting^:svg:|",
      ":svg:feSpotLight^:svg:|",
      ":svg:feTile^:svg:|",
      ":svg:feTurbulence^:svg:|",
      ":svg:filter^:svg:|",
      ":svg:foreignObject^:svg:graphics|",
      ":svg:g^:svg:graphics|",
      ":svg:image^:svg:graphics|decoding",
      ":svg:line^:svg:geometry|",
      ":svg:linearGradient^:svg:gradient|",
      ":svg:mpath^:svg:|",
      ":svg:marker^:svg:|",
      ":svg:mask^:svg:|",
      ":svg:metadata^:svg:|",
      ":svg:path^:svg:geometry|",
      ":svg:pattern^:svg:|",
      ":svg:polygon^:svg:geometry|",
      ":svg:polyline^:svg:geometry|",
      ":svg:radialGradient^:svg:gradient|",
      ":svg:rect^:svg:geometry|",
      ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan",
      ":svg:script^:svg:|type",
      ":svg:set^:svg:animation|",
      ":svg:stop^:svg:|",
      ":svg:style^:svg:|!disabled,media,title,type",
      ":svg:switch^:svg:graphics|",
      ":svg:symbol^:svg:|",
      ":svg:tspan^:svg:textPositioning|",
      ":svg:text^:svg:textPositioning|",
      ":svg:textPath^:svg:textContent|",
      ":svg:title^:svg:|",
      ":svg:use^:svg:graphics|",
      ":svg:view^:svg:|#zoomAndPan",
      "data^[HTMLElement]|value",
      "keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name",
      "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default",
      "summary^[HTMLElement]|",
      "time^[HTMLElement]|dateTime",
      ":svg:cursor^:svg:|",
      ":math:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforeinput,*beforematch,*beforetoggle,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contentvisibilityautostatechange,*contextlost,*contextmenu,*contextrestored,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*scrollend,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",
      ":math:math^:math:|",
      ":math:maction^:math:|",
      ":math:menclose^:math:|",
      ":math:merror^:math:|",
      ":math:mfenced^:math:|",
      ":math:mfrac^:math:|",
      ":math:mi^:math:|",
      ":math:mmultiscripts^:math:|",
      ":math:mn^:math:|",
      ":math:mo^:math:|",
      ":math:mover^:math:|",
      ":math:mpadded^:math:|",
      ":math:mphantom^:math:|",
      ":math:mroot^:math:|",
      ":math:mrow^:math:|",
      ":math:ms^:math:|",
      ":math:mspace^:math:|",
      ":math:msqrt^:math:|",
      ":math:mstyle^:math:|",
      ":math:msub^:math:|",
      ":math:msubsup^:math:|",
      ":math:msup^:math:|",
      ":math:mtable^:math:|",
      ":math:mtd^:math:|",
      ":math:mtext^:math:|",
      ":math:mtr^:math:|",
      ":math:munder^:math:|",
      ":math:munderover^:math:|",
      ":math:semantics^:math:|"
    ];
    _ATTR_TO_PROP = new Map(Object.entries({
      "class": "className",
      "for": "htmlFor",
      "formaction": "formAction",
      "innerHtml": "innerHTML",
      "readonly": "readOnly",
      "tabindex": "tabIndex"
    }));
    _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {
      inverted.set(propertyName, attributeName);
      return inverted;
    }, /* @__PURE__ */ new Map());
    DomElementSchemaRegistry = class extends ElementSchemaRegistry {
      _schema = /* @__PURE__ */ new Map();
      // We don't allow binding to events for security reasons. Allowing event bindings would almost
      // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.
      _eventSchema = /* @__PURE__ */ new Map();
      constructor() {
        super();
        SCHEMA.forEach((encodedType) => {
          const type = /* @__PURE__ */ new Map();
          const events = /* @__PURE__ */ new Set();
          const [strType, strProperties] = encodedType.split("|");
          const properties = strProperties.split(",");
          const [typeNames, superName] = strType.split("^");
          typeNames.split(",").forEach((tag) => {
            this._schema.set(tag.toLowerCase(), type);
            this._eventSchema.set(tag.toLowerCase(), events);
          });
          const superType = superName && this._schema.get(superName.toLowerCase());
          if (superType) {
            for (const [prop, value] of superType) {
              type.set(prop, value);
            }
            for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {
              events.add(superEvent);
            }
          }
          properties.forEach((property2) => {
            if (property2.length > 0) {
              switch (property2[0]) {
                case "*":
                  events.add(property2.substring(1));
                  break;
                case "!":
                  type.set(property2.substring(1), BOOLEAN);
                  break;
                case "#":
                  type.set(property2.substring(1), NUMBER);
                  break;
                case "%":
                  type.set(property2.substring(1), OBJECT);
                  break;
                default:
                  type.set(property2, STRING);
              }
            }
          });
        });
      }
      hasProperty(tagName, propName, schemaMetas) {
        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA2.name)) {
          return true;
        }
        if (tagName.indexOf("-") > -1) {
          if (isNgContainer(tagName) || isNgContent(tagName)) {
            return false;
          }
          if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA2.name)) {
            return true;
          }
        }
        const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
        return elementProperties.has(propName);
      }
      hasElement(tagName, schemaMetas) {
        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA2.name)) {
          return true;
        }
        if (tagName.indexOf("-") > -1) {
          if (isNgContainer(tagName) || isNgContent(tagName)) {
            return true;
          }
          if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA2.name)) {
            return true;
          }
        }
        return this._schema.has(tagName.toLowerCase());
      }
      /**
       * securityContext returns the security context for the given property on the given DOM tag.
       *
       * Tag and property name are statically known and cannot change at runtime, i.e. it is not
       * possible to bind a value into a changing attribute or tag name.
       *
       * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
       * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
       * string values. Only specific well known attack vectors are assigned their appropriate context.
       */
      securityContext(tagName, propName, isAttribute) {
        if (isAttribute) {
          propName = this.getMappedPropName(propName);
        }
        tagName = tagName.toLowerCase();
        propName = propName.toLowerCase();
        let ctx = SECURITY_SCHEMA()[tagName + "|" + propName];
        if (ctx) {
          return ctx;
        }
        ctx = SECURITY_SCHEMA()["*|" + propName];
        return ctx ? ctx : SecurityContext2.NONE;
      }
      getMappedPropName(propName) {
        return _ATTR_TO_PROP.get(propName) ?? propName;
      }
      getDefaultComponentElementName() {
        return "ng-component";
      }
      validateProperty(name) {
        if (name.toLowerCase().startsWith("on")) {
          const msg = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
          return { error: true, msg };
        } else {
          return { error: false };
        }
      }
      validateAttribute(name) {
        if (name.toLowerCase().startsWith("on")) {
          const msg = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
          return { error: true, msg };
        } else {
          return { error: false };
        }
      }
      allKnownElementNames() {
        return Array.from(this._schema.keys());
      }
      allKnownAttributesOfElement(tagName) {
        const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
        return Array.from(elementProperties.keys()).map((prop) => _PROP_TO_ATTR.get(prop) ?? prop);
      }
      allKnownEventsOfElement(tagName) {
        return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);
      }
      normalizeAnimationStyleProperty(propName) {
        return dashCaseToCamelCase(propName);
      }
      normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
        let unit = "";
        const strVal = val.toString().trim();
        let errorMsg = null;
        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== "0") {
          if (typeof val === "number") {
            unit = "px";
          } else {
            const valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
            if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
              errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;
            }
          }
        }
        return { error: errorMsg, value: strVal + unit };
      }
    };
    HtmlTagDefinition = class {
      closedByChildren = {};
      contentType;
      closedByParent = false;
      implicitNamespacePrefix;
      isVoid;
      ignoreFirstLf;
      canSelfClose;
      preventNamespaceInheritance;
      constructor({ closedByChildren, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false, preventNamespaceInheritance = false, canSelfClose = false } = {}) {
        if (closedByChildren && closedByChildren.length > 0) {
          closedByChildren.forEach((tagName) => this.closedByChildren[tagName] = true);
        }
        this.isVoid = isVoid;
        this.closedByParent = closedByParent || isVoid;
        this.implicitNamespacePrefix = implicitNamespacePrefix || null;
        this.contentType = contentType;
        this.ignoreFirstLf = ignoreFirstLf;
        this.preventNamespaceInheritance = preventNamespaceInheritance;
        this.canSelfClose = canSelfClose ?? isVoid;
      }
      isClosedByChild(name) {
        return this.isVoid || name.toLowerCase() in this.closedByChildren;
      }
      getContentType(prefix) {
        if (typeof this.contentType === "object") {
          const overrideType = prefix === void 0 ? void 0 : this.contentType[prefix];
          return overrideType ?? this.contentType.default;
        }
        return this.contentType;
      }
    };
    TAG_TO_PLACEHOLDER_NAMES = {
      "A": "LINK",
      "B": "BOLD_TEXT",
      "BR": "LINE_BREAK",
      "EM": "EMPHASISED_TEXT",
      "H1": "HEADING_LEVEL1",
      "H2": "HEADING_LEVEL2",
      "H3": "HEADING_LEVEL3",
      "H4": "HEADING_LEVEL4",
      "H5": "HEADING_LEVEL5",
      "H6": "HEADING_LEVEL6",
      "HR": "HORIZONTAL_RULE",
      "I": "ITALIC_TEXT",
      "LI": "LIST_ITEM",
      "LINK": "MEDIA_LINK",
      "OL": "ORDERED_LIST",
      "P": "PARAGRAPH",
      "Q": "QUOTATION",
      "S": "STRIKETHROUGH_TEXT",
      "SMALL": "SMALL_TEXT",
      "SUB": "SUBSTRIPT",
      "SUP": "SUPERSCRIPT",
      "TBODY": "TABLE_BODY",
      "TD": "TABLE_CELL",
      "TFOOT": "TABLE_FOOTER",
      "TH": "TABLE_HEADER_CELL",
      "THEAD": "TABLE_HEADER",
      "TR": "TABLE_ROW",
      "TT": "MONOSPACED_TEXT",
      "U": "UNDERLINED_TEXT",
      "UL": "UNORDERED_LIST"
    };
    PlaceholderRegistry = class {
      // Count the occurrence of the base name top generate a unique name
      _placeHolderNameCounts = {};
      // Maps signature to placeholder names
      _signatureToName = {};
      getStartTagPlaceholderName(tag, attrs, isVoid) {
        const signature = this._hashTag(tag, attrs, isVoid);
        if (this._signatureToName[signature]) {
          return this._signatureToName[signature];
        }
        const upperTag = tag.toUpperCase();
        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
        const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);
        this._signatureToName[signature] = name;
        return name;
      }
      getCloseTagPlaceholderName(tag) {
        const signature = this._hashClosingTag(tag);
        if (this._signatureToName[signature]) {
          return this._signatureToName[signature];
        }
        const upperTag = tag.toUpperCase();
        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
        const name = this._generateUniqueName(`CLOSE_${baseName}`);
        this._signatureToName[signature] = name;
        return name;
      }
      getPlaceholderName(name, content) {
        const upperName = name.toUpperCase();
        const signature = `PH: ${upperName}=${content}`;
        if (this._signatureToName[signature]) {
          return this._signatureToName[signature];
        }
        const uniqueName = this._generateUniqueName(upperName);
        this._signatureToName[signature] = uniqueName;
        return uniqueName;
      }
      getUniquePlaceholder(name) {
        return this._generateUniqueName(name.toUpperCase());
      }
      getStartBlockPlaceholderName(name, parameters) {
        const signature = this._hashBlock(name, parameters);
        if (this._signatureToName[signature]) {
          return this._signatureToName[signature];
        }
        const placeholder = this._generateUniqueName(`START_BLOCK_${this._toSnakeCase(name)}`);
        this._signatureToName[signature] = placeholder;
        return placeholder;
      }
      getCloseBlockPlaceholderName(name) {
        const signature = this._hashClosingBlock(name);
        if (this._signatureToName[signature]) {
          return this._signatureToName[signature];
        }
        const placeholder = this._generateUniqueName(`CLOSE_BLOCK_${this._toSnakeCase(name)}`);
        this._signatureToName[signature] = placeholder;
        return placeholder;
      }
      // Generate a hash for a tag - does not take attribute order into account
      _hashTag(tag, attrs, isVoid) {
        const start = `<${tag}`;
        const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join("");
        const end = isVoid ? "/>" : `></${tag}>`;
        return start + strAttrs + end;
      }
      _hashClosingTag(tag) {
        return this._hashTag(`/${tag}`, {}, false);
      }
      _hashBlock(name, parameters) {
        const params = parameters.length === 0 ? "" : ` (${parameters.sort().join("; ")})`;
        return `@${name}${params} {}`;
      }
      _hashClosingBlock(name) {
        return this._hashBlock(`close_${name}`, []);
      }
      _toSnakeCase(name) {
        return name.toUpperCase().replace(/[^A-Z0-9]/g, "_");
      }
      _generateUniqueName(base) {
        const seen = this._placeHolderNameCounts.hasOwnProperty(base);
        if (!seen) {
          this._placeHolderNameCounts[base] = 1;
          return base;
        }
        const id = this._placeHolderNameCounts[base];
        this._placeHolderNameCounts[base] = id + 1;
        return `${base}_${id}`;
      }
    };
    _expParser = new Parser2(new Lexer());
    _I18nVisitor = class {
      _expressionParser;
      _interpolationConfig;
      _containerBlocks;
      _retainEmptyTokens;
      _preserveExpressionWhitespace;
      constructor(_expressionParser, _interpolationConfig, _containerBlocks, _retainEmptyTokens, _preserveExpressionWhitespace) {
        this._expressionParser = _expressionParser;
        this._interpolationConfig = _interpolationConfig;
        this._containerBlocks = _containerBlocks;
        this._retainEmptyTokens = _retainEmptyTokens;
        this._preserveExpressionWhitespace = _preserveExpressionWhitespace;
      }
      toI18nMessage(nodes, meaning = "", description = "", customId = "", visitNodeFn) {
        const context2 = {
          isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
          icuDepth: 0,
          placeholderRegistry: new PlaceholderRegistry(),
          placeholderToContent: {},
          placeholderToMessage: {},
          visitNodeFn: visitNodeFn || noopVisitNodeFn
        };
        const i18nodes = visitAll(this, nodes, context2);
        return new Message(i18nodes, context2.placeholderToContent, context2.placeholderToMessage, meaning, description, customId);
      }
      visitElement(el, context2) {
        return this._visitElementLike(el, context2);
      }
      visitComponent(component, context2) {
        return this._visitElementLike(component, context2);
      }
      visitDirective(directive, context2) {
        throw new Error("Unreachable code");
      }
      visitAttribute(attribute2, context2) {
        const node = attribute2.valueTokens === void 0 || attribute2.valueTokens.length === 1 ? new Text$2(attribute2.value, attribute2.valueSpan || attribute2.sourceSpan) : this._visitTextWithInterpolation(attribute2.valueTokens, attribute2.valueSpan || attribute2.sourceSpan, context2, attribute2.i18n);
        return context2.visitNodeFn(attribute2, node);
      }
      visitText(text2, context2) {
        const node = text2.tokens.length === 1 ? new Text$2(text2.value, text2.sourceSpan) : this._visitTextWithInterpolation(text2.tokens, text2.sourceSpan, context2, text2.i18n);
        return context2.visitNodeFn(text2, node);
      }
      visitComment(comment, context2) {
        return null;
      }
      visitExpansion(icu, context2) {
        context2.icuDepth++;
        const i18nIcuCases = {};
        const i18nIcu = new Icu2(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
        icu.cases.forEach((caze) => {
          i18nIcuCases[caze.value] = new Container(caze.expression.map((node2) => node2.visit(this, context2)), caze.expSourceSpan);
        });
        context2.icuDepth--;
        if (context2.isIcu || context2.icuDepth > 0) {
          const expPh = context2.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);
          i18nIcu.expressionPlaceholder = expPh;
          context2.placeholderToContent[expPh] = {
            text: icu.switchValue,
            sourceSpan: icu.switchValueSourceSpan
          };
          return context2.visitNodeFn(icu, i18nIcu);
        }
        const phName = context2.placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
        context2.placeholderToMessage[phName] = this.toI18nMessage([icu], "", "", "", void 0);
        const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        return context2.visitNodeFn(icu, node);
      }
      visitExpansionCase(_icuCase, _context) {
        throw new Error("Unreachable code");
      }
      visitBlock(block, context2) {
        const children = visitAll(this, block.children, context2);
        if (this._containerBlocks.has(block.name)) {
          return new Container(children, block.sourceSpan);
        }
        const parameters = block.parameters.map((param) => param.expression);
        const startPhName = context2.placeholderRegistry.getStartBlockPlaceholderName(block.name, parameters);
        const closePhName = context2.placeholderRegistry.getCloseBlockPlaceholderName(block.name);
        context2.placeholderToContent[startPhName] = {
          text: block.startSourceSpan.toString(),
          sourceSpan: block.startSourceSpan
        };
        context2.placeholderToContent[closePhName] = {
          text: block.endSourceSpan ? block.endSourceSpan.toString() : "}",
          sourceSpan: block.endSourceSpan ?? block.sourceSpan
        };
        const node = new BlockPlaceholder(block.name, parameters, startPhName, closePhName, children, block.sourceSpan, block.startSourceSpan, block.endSourceSpan);
        return context2.visitNodeFn(block, node);
      }
      visitBlockParameter(_parameter, _context) {
        throw new Error("Unreachable code");
      }
      visitLetDeclaration(decl, context2) {
        return null;
      }
      _visitElementLike(node, context2) {
        const children = visitAll(this, node.children, context2);
        const attrs = {};
        const visitAttribute = (attr) => {
          attrs[attr.name] = attr.value;
        };
        let nodeName;
        let isVoid;
        if (node instanceof Element3) {
          nodeName = node.name;
          isVoid = getHtmlTagDefinition(node.name).isVoid;
        } else {
          nodeName = node.fullName;
          isVoid = node.tagName ? getHtmlTagDefinition(node.tagName).isVoid : false;
        }
        node.attrs.forEach(visitAttribute);
        node.directives.forEach((dir) => dir.attrs.forEach(visitAttribute));
        const startPhName = context2.placeholderRegistry.getStartTagPlaceholderName(nodeName, attrs, isVoid);
        context2.placeholderToContent[startPhName] = {
          text: node.startSourceSpan.toString(),
          sourceSpan: node.startSourceSpan
        };
        let closePhName = "";
        if (!isVoid) {
          closePhName = context2.placeholderRegistry.getCloseTagPlaceholderName(nodeName);
          context2.placeholderToContent[closePhName] = {
            text: `</${nodeName}>`,
            sourceSpan: node.endSourceSpan ?? node.sourceSpan
          };
        }
        const i18nNode = new TagPlaceholder(nodeName, attrs, startPhName, closePhName, children, isVoid, node.sourceSpan, node.startSourceSpan, node.endSourceSpan);
        return context2.visitNodeFn(node, i18nNode);
      }
      /**
       * Convert, text and interpolated tokens up into text and placeholder pieces.
       *
       * @param tokens The text and interpolated tokens.
       * @param sourceSpan The span of the whole of the `text` string.
       * @param context The current context of the visitor, used to compute and store placeholders.
       * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.
       */
      _visitTextWithInterpolation(tokens, sourceSpan, context2, previousI18n) {
        const nodes = [];
        let hasInterpolation = false;
        for (const token of tokens) {
          switch (token.type) {
            case 8:
            case 17:
              hasInterpolation = true;
              const [startMarker, expression, endMarker] = token.parts;
              const baseName = extractPlaceholderName(expression) || "INTERPOLATION";
              const phName = context2.placeholderRegistry.getPlaceholderName(baseName, expression);
              if (this._preserveExpressionWhitespace) {
                context2.placeholderToContent[phName] = {
                  text: token.parts.join(""),
                  sourceSpan: token.sourceSpan
                };
                nodes.push(new Placeholder(expression, phName, token.sourceSpan));
              } else {
                const normalized = this.normalizeExpression(token);
                context2.placeholderToContent[phName] = {
                  text: `${startMarker}${normalized}${endMarker}`,
                  sourceSpan: token.sourceSpan
                };
                nodes.push(new Placeholder(normalized, phName, token.sourceSpan));
              }
              break;
            default:
              if (token.parts[0].length > 0 || this._retainEmptyTokens) {
                const previous = nodes[nodes.length - 1];
                if (previous instanceof Text$2) {
                  previous.value += token.parts[0];
                  previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);
                } else {
                  nodes.push(new Text$2(token.parts[0], token.sourceSpan));
                }
              } else {
                if (this._retainEmptyTokens) {
                  nodes.push(new Text$2(token.parts[0], token.sourceSpan));
                }
              }
              break;
          }
        }
        if (hasInterpolation) {
          reusePreviousSourceSpans(nodes, previousI18n);
          return new Container(nodes, sourceSpan);
        } else {
          return nodes[0];
        }
      }
      // Normalize expression whitespace by parsing and re-serializing it. This makes
      // message IDs more durable to insignificant whitespace changes.
      normalizeExpression(token) {
        const expression = token.parts[1];
        const expr = this._expressionParser.parseBinding(
          expression,
          /* location */
          token.sourceSpan,
          /* absoluteOffset */
          token.sourceSpan.start.offset,
          this._interpolationConfig
        );
        return serialize(expr);
      }
    };
    _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
    TRUSTED_TYPES_SINKS = /* @__PURE__ */ new Set([
      // NOTE: All strings in this set *must* be lowercase!
      // TrustedHTML
      "iframe|srcdoc",
      "*|innerhtml",
      "*|outerhtml",
      // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.
      // TrustedScriptURL
      "embed|src",
      "object|codebase",
      "object|data"
    ]);
    setI18nRefs = (originalNodeMap) => {
      return (trimmedNode, i18nNode) => {
        const originalNode = originalNodeMap.get(trimmedNode) ?? trimmedNode;
        if (originalNode instanceof NodeWithI18n) {
          if (i18nNode instanceof IcuPlaceholder && originalNode.i18n instanceof Message) {
            i18nNode.previousMessage = originalNode.i18n;
          }
          originalNode.i18n = i18nNode;
        }
        return i18nNode;
      };
    };
    I18nMetaVisitor = class {
      interpolationConfig;
      keepI18nAttrs;
      enableI18nLegacyMessageIdFormat;
      containerBlocks;
      preserveSignificantWhitespace;
      retainEmptyTokens;
      // whether visited nodes contain i18n information
      hasI18nMeta = false;
      _errors = [];
      constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false, containerBlocks = DEFAULT_CONTAINER_BLOCKS, preserveSignificantWhitespace = true, retainEmptyTokens = !preserveSignificantWhitespace) {
        this.interpolationConfig = interpolationConfig;
        this.keepI18nAttrs = keepI18nAttrs;
        this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;
        this.containerBlocks = containerBlocks;
        this.preserveSignificantWhitespace = preserveSignificantWhitespace;
        this.retainEmptyTokens = retainEmptyTokens;
      }
      _generateI18nMessage(nodes, meta = "", visitNodeFn) {
        const { meaning, description, customId } = this._parseMetadata(meta);
        const createI18nMessage2 = createI18nMessageFactory(
          this.interpolationConfig,
          this.containerBlocks,
          this.retainEmptyTokens,
          /* preserveExpressionWhitespace */
          this.preserveSignificantWhitespace
        );
        const message = createI18nMessage2(nodes, meaning, description, customId, visitNodeFn);
        this._setMessageId(message, meta);
        this._setLegacyIds(message, meta);
        return message;
      }
      visitAllWithErrors(nodes) {
        const result = nodes.map((node) => node.visit(this, null));
        return new ParseTreeResult(result, this._errors);
      }
      visitElement(element2) {
        this._visitElementLike(element2);
        return element2;
      }
      visitComponent(component, context2) {
        this._visitElementLike(component);
        return component;
      }
      visitExpansion(expansion, currentMessage) {
        let message;
        const meta = expansion.i18n;
        this.hasI18nMeta = true;
        if (meta instanceof IcuPlaceholder) {
          const name = meta.name;
          message = this._generateI18nMessage([expansion], meta);
          const icu = icuFromI18nMessage(message);
          icu.name = name;
          if (currentMessage !== null) {
            currentMessage.placeholderToMessage[name] = message;
          }
        } else {
          message = this._generateI18nMessage([expansion], currentMessage || meta);
        }
        expansion.i18n = message;
        return expansion;
      }
      visitText(text2) {
        return text2;
      }
      visitAttribute(attribute2) {
        return attribute2;
      }
      visitComment(comment) {
        return comment;
      }
      visitExpansionCase(expansionCase) {
        return expansionCase;
      }
      visitBlock(block, context2) {
        visitAll(this, block.children, context2);
        return block;
      }
      visitBlockParameter(parameter, context2) {
        return parameter;
      }
      visitLetDeclaration(decl, context2) {
        return decl;
      }
      visitDirective(directive, context2) {
        return directive;
      }
      _visitElementLike(node) {
        let message = void 0;
        if (hasI18nAttrs(node)) {
          this.hasI18nMeta = true;
          const attrs = [];
          const attrsMeta = {};
          for (const attr of node.attrs) {
            if (attr.name === I18N_ATTR) {
              const i18n2 = node.i18n || attr.value;
              const originalNodeMap = /* @__PURE__ */ new Map();
              const trimmedNodes = this.preserveSignificantWhitespace ? node.children : visitAllWithSiblings(new WhitespaceVisitor(false, originalNodeMap), node.children);
              message = this._generateI18nMessage(trimmedNodes, i18n2, setI18nRefs(originalNodeMap));
              if (message.nodes.length === 0) {
                message = void 0;
              }
              node.i18n = message;
            } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
              const name = attr.name.slice(I18N_ATTR_PREFIX.length);
              let isTrustedType;
              if (node instanceof Component3) {
                isTrustedType = node.tagName === null ? false : isTrustedTypesSink(node.tagName, name);
              } else {
                isTrustedType = isTrustedTypesSink(node.name, name);
              }
              if (isTrustedType) {
                this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);
              } else {
                attrsMeta[name] = attr.value;
              }
            } else {
              attrs.push(attr);
            }
          }
          if (Object.keys(attrsMeta).length) {
            for (const attr of attrs) {
              const meta = attrsMeta[attr.name];
              if (meta !== void 0 && attr.value) {
                attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
              }
            }
          }
          if (!this.keepI18nAttrs) {
            node.attrs = attrs;
          }
        }
        visitAll(this, node.children, message);
      }
      /**
       * Parse the general form `meta` passed into extract the explicit metadata needed to create a
       * `Message`.
       *
       * There are three possibilities for the `meta` variable
       * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
       * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
       * 4) other: ignore this and just process the message metadata as normal
       *
       * @param meta the bucket that holds information about the message
       * @returns the parsed metadata.
       */
      _parseMetadata(meta) {
        return typeof meta === "string" ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};
      }
      /**
       * Generate (or restore) message id if not specified already.
       */
      _setMessageId(message, meta) {
        if (!message.id) {
          message.id = meta instanceof Message && meta.id || decimalDigest(message);
        }
      }
      /**
       * Update the `message` with a `legacyId` if necessary.
       *
       * @param message the message whose legacy id should be set
       * @param meta information about the message being processed
       */
      _setLegacyIds(message, meta) {
        if (this.enableI18nLegacyMessageIdFormat) {
          message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
        } else if (typeof meta !== "string") {
          const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : void 0;
          message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
        }
      }
      _reportError(node, msg) {
        this._errors.push(new ParseError(node.sourceSpan, msg));
      }
    };
    I18N_MEANING_SEPARATOR = "|";
    I18N_ID_SEPARATOR = "@@";
    GOOG_GET_MSG = "goog.getMsg";
    GetMsgSerializerVisitor = class {
      formatPh(value) {
        return `{$${formatI18nPlaceholderName(value)}}`;
      }
      visitText(text2) {
        return text2.value;
      }
      visitContainer(container) {
        return container.children.map((child) => child.visit(this)).join("");
      }
      visitIcu(icu) {
        return serializeIcuNode(icu);
      }
      visitTagPlaceholder(ph) {
        return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
      }
      visitPlaceholder(ph) {
        return this.formatPh(ph.name);
      }
      visitBlockPlaceholder(ph) {
        return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
      }
      visitIcuPlaceholder(ph, context2) {
        return this.formatPh(ph.name);
      }
    };
    serializerVisitor = new GetMsgSerializerVisitor();
    LocalizeSerializerVisitor = class {
      placeholderToMessage;
      pieces;
      constructor(placeholderToMessage, pieces) {
        this.placeholderToMessage = placeholderToMessage;
        this.pieces = pieces;
      }
      visitText(text2) {
        if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {
          this.pieces[this.pieces.length - 1].text += text2.value;
        } else {
          const sourceSpan = new ParseSourceSpan(text2.sourceSpan.fullStart, text2.sourceSpan.end, text2.sourceSpan.fullStart, text2.sourceSpan.details);
          this.pieces.push(new LiteralPiece(text2.value, sourceSpan));
        }
      }
      visitContainer(container) {
        container.children.forEach((child) => child.visit(this));
      }
      visitIcu(icu) {
        this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));
      }
      visitTagPlaceholder(ph) {
        this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
        if (!ph.isVoid) {
          ph.children.forEach((child) => child.visit(this));
          this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
        }
      }
      visitPlaceholder(ph) {
        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
      }
      visitBlockPlaceholder(ph) {
        this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
        ph.children.forEach((child) => child.visit(this));
        this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
      }
      visitIcuPlaceholder(ph) {
        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));
      }
      createPlaceholderPiece(name, sourceSpan, associatedMessage) {
        return new PlaceholderPiece(formatI18nPlaceholderName(
          name,
          /* useCamelCase */
          false
        ), sourceSpan, associatedMessage);
      }
    };
    NG_I18N_CLOSURE_MODE = "ngI18nClosureMode";
    TRANSLATION_VAR_PREFIX = "i18n_";
    I18N_ICU_MAPPING_PREFIX = "I18N_EXP_";
    ESCAPE = "\uFFFD";
    CLOSURE_TRANSLATION_VAR_PREFIX = "MSG_";
    CONTAINER_TAG = "ng-container";
    CREATE_ORDERING = [
      { test: (op) => op.kind === OpKind.Listener && op.hostListener && op.isLegacyAnimationListener },
      { test: basicListenerKindTest }
    ];
    UPDATE_ORDERING = [
      { test: kindTest(OpKind.StyleMap), transform: keepLast },
      { test: kindTest(OpKind.ClassMap), transform: keepLast },
      { test: kindTest(OpKind.StyleProp) },
      { test: kindTest(OpKind.ClassProp) },
      { test: kindWithInterpolationTest(OpKind.Attribute, true) },
      { test: kindWithInterpolationTest(OpKind.Property, true) },
      { test: nonInterpolationPropertyKindTest },
      { test: kindWithInterpolationTest(OpKind.Attribute, false) }
    ];
    UPDATE_HOST_ORDERING = [
      { test: kindWithInterpolationTest(OpKind.DomProperty, true) },
      { test: kindWithInterpolationTest(OpKind.DomProperty, false) },
      { test: kindTest(OpKind.Attribute) },
      { test: kindTest(OpKind.StyleMap), transform: keepLast },
      { test: kindTest(OpKind.ClassMap), transform: keepLast },
      { test: kindTest(OpKind.StyleProp) },
      { test: kindTest(OpKind.ClassProp) }
    ];
    handledOpKinds = /* @__PURE__ */ new Set([
      OpKind.Listener,
      OpKind.TwoWayListener,
      OpKind.StyleMap,
      OpKind.ClassMap,
      OpKind.StyleProp,
      OpKind.ClassProp,
      OpKind.Property,
      OpKind.TwoWayProperty,
      OpKind.DomProperty,
      OpKind.Attribute
    ]);
    PureFunctionConstant = class extends GenericKeyFn {
      numArgs;
      constructor(numArgs) {
        super();
        this.numArgs = numArgs;
      }
      keyOf(expr) {
        if (expr instanceof PureFunctionParameterExpr) {
          return `param(${expr.index})`;
        } else {
          return super.keyOf(expr);
        }
      }
      // TODO: Use the new pool method `getSharedFunctionReference`
      toSharedConstantDeclaration(declName, keyExpr) {
        const fnParams = [];
        for (let idx = 0; idx < this.numArgs; idx++) {
          fnParams.push(new FnParam("a" + idx));
        }
        const returnExpr = transformExpressionsInExpression(keyExpr, (expr) => {
          if (!(expr instanceof PureFunctionParameterExpr)) {
            return expr;
          }
          return variable("a" + expr.index);
        }, VisitorContextFlag.None);
        return new DeclareVarStmt(declName, new ArrowFunctionExpr(fnParams, returnExpr), void 0, StmtModifier.Final);
      }
    };
    deferTriggerToR3TriggerInstructionsMap = /* @__PURE__ */ new Map([
      [
        DeferTriggerKind.Idle,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnIdle,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnIdle,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnIdle
        }
      ],
      [
        DeferTriggerKind.Immediate,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnImmediate,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnImmediate,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnImmediate
        }
      ],
      [
        DeferTriggerKind.Timer,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnTimer,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnTimer,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnTimer
        }
      ],
      [
        DeferTriggerKind.Hover,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnHover,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnHover,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnHover
        }
      ],
      [
        DeferTriggerKind.Interaction,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnInteraction,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnInteraction,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnInteraction
        }
      ],
      [
        DeferTriggerKind.Viewport,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferOnViewport,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferPrefetchOnViewport,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateOnViewport
        }
      ],
      [
        DeferTriggerKind.Never,
        {
          [
            "none"
            /* ir.DeferOpModifierKind.NONE */
          ]: Identifiers.deferHydrateNever,
          [
            "prefetch"
            /* ir.DeferOpModifierKind.PREFETCH */
          ]: Identifiers.deferHydrateNever,
          [
            "hydrate"
            /* ir.DeferOpModifierKind.HYDRATE */
          ]: Identifiers.deferHydrateNever
        }
      ]
    ]);
    PIPE_BINDINGS = [
      Identifiers.pipeBind1,
      Identifiers.pipeBind2,
      Identifiers.pipeBind3,
      Identifiers.pipeBind4
    ];
    TEXT_INTERPOLATE_CONFIG = {
      constant: [
        Identifiers.textInterpolate,
        Identifiers.textInterpolate1,
        Identifiers.textInterpolate2,
        Identifiers.textInterpolate3,
        Identifiers.textInterpolate4,
        Identifiers.textInterpolate5,
        Identifiers.textInterpolate6,
        Identifiers.textInterpolate7,
        Identifiers.textInterpolate8
      ],
      variable: Identifiers.textInterpolateV,
      mapping: (n) => {
        if (n % 2 === 0) {
          throw new Error(`Expected odd number of arguments`);
        }
        return (n - 1) / 2;
      }
    };
    VALUE_INTERPOLATE_CONFIG = {
      constant: [
        Identifiers.interpolate,
        Identifiers.interpolate1,
        Identifiers.interpolate2,
        Identifiers.interpolate3,
        Identifiers.interpolate4,
        Identifiers.interpolate5,
        Identifiers.interpolate6,
        Identifiers.interpolate7,
        Identifiers.interpolate8
      ],
      variable: Identifiers.interpolateV,
      mapping: (n) => {
        if (n % 2 === 0) {
          throw new Error(`Expected odd number of arguments`);
        }
        return (n - 1) / 2;
      }
    };
    PURE_FUNCTION_CONFIG = {
      constant: [
        Identifiers.pureFunction0,
        Identifiers.pureFunction1,
        Identifiers.pureFunction2,
        Identifiers.pureFunction3,
        Identifiers.pureFunction4,
        Identifiers.pureFunction5,
        Identifiers.pureFunction6,
        Identifiers.pureFunction7,
        Identifiers.pureFunction8
      ],
      variable: Identifiers.pureFunctionV,
      mapping: (n) => n
    };
    GLOBAL_TARGET_RESOLVERS = /* @__PURE__ */ new Map([
      ["window", Identifiers.resolveWindow],
      ["document", Identifiers.resolveDocument],
      ["body", Identifiers.resolveBody]
    ]);
    DOM_PROPERTY_REMAPPING = /* @__PURE__ */ new Map([
      ["class", "className"],
      ["for", "htmlFor"],
      ["formaction", "formAction"],
      ["innerHtml", "innerHTML"],
      ["readonly", "readOnly"],
      ["tabindex", "tabIndex"]
    ]);
    sanitizerFns = /* @__PURE__ */ new Map([
      [SecurityContext2.HTML, Identifiers.sanitizeHtml],
      [SecurityContext2.RESOURCE_URL, Identifiers.sanitizeResourceUrl],
      [SecurityContext2.SCRIPT, Identifiers.sanitizeScript],
      [SecurityContext2.STYLE, Identifiers.sanitizeStyle],
      [SecurityContext2.URL, Identifiers.sanitizeUrl]
    ]);
    trustedValueFns = /* @__PURE__ */ new Map([
      [SecurityContext2.HTML, Identifiers.trustConstantHtml],
      [SecurityContext2.RESOURCE_URL, Identifiers.trustConstantResourceUrl]
    ]);
    (function(Fence2) {
      Fence2[Fence2["None"] = 0] = "None";
      Fence2[Fence2["ViewContextRead"] = 1] = "ViewContextRead";
      Fence2[Fence2["ViewContextWrite"] = 2] = "ViewContextWrite";
      Fence2[Fence2["SideEffectful"] = 4] = "SideEffectful";
    })(Fence || (Fence = {}));
    phases = [
      { kind: CompilationJobKind.Tmpl, fn: removeContentSelectors },
      { kind: CompilationJobKind.Host, fn: parseHostStyleProperties },
      { kind: CompilationJobKind.Tmpl, fn: emitNamespaceChanges },
      { kind: CompilationJobKind.Tmpl, fn: propagateI18nBlocks },
      { kind: CompilationJobKind.Tmpl, fn: wrapI18nIcus },
      { kind: CompilationJobKind.Both, fn: deduplicateTextBindings },
      { kind: CompilationJobKind.Both, fn: specializeStyleBindings },
      { kind: CompilationJobKind.Both, fn: specializeBindings },
      { kind: CompilationJobKind.Both, fn: extractAttributes },
      { kind: CompilationJobKind.Tmpl, fn: createI18nContexts },
      { kind: CompilationJobKind.Both, fn: parseExtractedStyles },
      { kind: CompilationJobKind.Tmpl, fn: removeEmptyBindings },
      { kind: CompilationJobKind.Both, fn: collapseSingletonInterpolations },
      { kind: CompilationJobKind.Both, fn: orderOps },
      { kind: CompilationJobKind.Tmpl, fn: generateConditionalExpressions },
      { kind: CompilationJobKind.Tmpl, fn: createPipes },
      { kind: CompilationJobKind.Tmpl, fn: configureDeferInstructions },
      { kind: CompilationJobKind.Tmpl, fn: createVariadicPipes },
      { kind: CompilationJobKind.Both, fn: generatePureLiteralStructures },
      { kind: CompilationJobKind.Tmpl, fn: generateProjectionDefs },
      { kind: CompilationJobKind.Tmpl, fn: generateLocalLetReferences },
      { kind: CompilationJobKind.Tmpl, fn: generateVariables },
      { kind: CompilationJobKind.Tmpl, fn: saveAndRestoreView },
      { kind: CompilationJobKind.Both, fn: deleteAnyCasts },
      { kind: CompilationJobKind.Both, fn: resolveDollarEvent },
      { kind: CompilationJobKind.Tmpl, fn: generateTrackVariables },
      { kind: CompilationJobKind.Tmpl, fn: removeIllegalLetReferences },
      { kind: CompilationJobKind.Both, fn: resolveNames },
      { kind: CompilationJobKind.Tmpl, fn: resolveDeferTargetNames },
      { kind: CompilationJobKind.Tmpl, fn: transformTwoWayBindingSet },
      { kind: CompilationJobKind.Tmpl, fn: optimizeTrackFns },
      { kind: CompilationJobKind.Both, fn: resolveContexts },
      { kind: CompilationJobKind.Both, fn: resolveSanitizers },
      { kind: CompilationJobKind.Tmpl, fn: liftLocalRefs },
      { kind: CompilationJobKind.Both, fn: expandSafeReads },
      { kind: CompilationJobKind.Both, fn: stripNonrequiredParentheses },
      { kind: CompilationJobKind.Both, fn: generateTemporaryVariables },
      { kind: CompilationJobKind.Both, fn: optimizeVariables },
      { kind: CompilationJobKind.Both, fn: optimizeStoreLet },
      { kind: CompilationJobKind.Tmpl, fn: convertI18nText },
      { kind: CompilationJobKind.Tmpl, fn: convertI18nBindings },
      { kind: CompilationJobKind.Tmpl, fn: removeUnusedI18nAttributesOps },
      { kind: CompilationJobKind.Tmpl, fn: assignI18nSlotDependencies },
      { kind: CompilationJobKind.Tmpl, fn: applyI18nExpressions },
      { kind: CompilationJobKind.Tmpl, fn: allocateSlots },
      { kind: CompilationJobKind.Tmpl, fn: resolveI18nElementPlaceholders },
      { kind: CompilationJobKind.Tmpl, fn: resolveI18nExpressionPlaceholders },
      { kind: CompilationJobKind.Tmpl, fn: extractI18nMessages },
      { kind: CompilationJobKind.Tmpl, fn: collectI18nConsts },
      { kind: CompilationJobKind.Tmpl, fn: collectConstExpressions },
      { kind: CompilationJobKind.Both, fn: collectElementConsts },
      { kind: CompilationJobKind.Tmpl, fn: removeI18nContexts },
      { kind: CompilationJobKind.Both, fn: countVariables },
      { kind: CompilationJobKind.Tmpl, fn: generateAdvance },
      { kind: CompilationJobKind.Both, fn: nameFunctionsAndVariables },
      { kind: CompilationJobKind.Tmpl, fn: resolveDeferDepsFns },
      { kind: CompilationJobKind.Tmpl, fn: mergeNextContextExpressions },
      { kind: CompilationJobKind.Tmpl, fn: generateNgContainerOps },
      { kind: CompilationJobKind.Tmpl, fn: collapseEmptyInstructions },
      { kind: CompilationJobKind.Tmpl, fn: attachSourceLocations },
      { kind: CompilationJobKind.Tmpl, fn: disableBindings$1 },
      { kind: CompilationJobKind.Both, fn: extractPureFunctions },
      { kind: CompilationJobKind.Both, fn: reify },
      { kind: CompilationJobKind.Both, fn: chain }
    ];
    compatibilityMode = CompatibilityMode.TemplateDefinitionBuilder;
    domSchema = new DomElementSchemaRegistry();
    NG_TEMPLATE_TAG_NAME = "ng-template";
    BINDING_KINDS = /* @__PURE__ */ new Map([
      [BindingType.Property, BindingKind.Property],
      [BindingType.TwoWay, BindingKind.TwoWayProperty],
      [BindingType.Attribute, BindingKind.Attribute],
      [BindingType.Class, BindingKind.ClassName],
      [BindingType.Style, BindingKind.StyleProperty],
      [BindingType.LegacyAnimation, BindingKind.LegacyAnimation]
    ]);
    ENABLE_TEMPLATE_SOURCE_LOCATIONS = false;
    queryAdvancePlaceholder = Symbol("queryAdvancePlaceholder");
    HtmlParser = class extends Parser$1 {
      constructor() {
        super(getHtmlTagDefinition);
      }
      parse(source, url, options) {
        return super.parse(source, url, options);
      }
    };
    PROPERTY_PARTS_SEPARATOR = ".";
    ATTRIBUTE_PREFIX = "attr";
    CLASS_PREFIX = "class";
    STYLE_PREFIX = "style";
    TEMPLATE_ATTR_PREFIX$1 = "*";
    LEGACY_ANIMATE_PROP_PREFIX = "animate-";
    BindingParser = class {
      _exprParser;
      _interpolationConfig;
      _schemaRegistry;
      errors;
      constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {
        this._exprParser = _exprParser;
        this._interpolationConfig = _interpolationConfig;
        this._schemaRegistry = _schemaRegistry;
        this.errors = errors;
      }
      get interpolationConfig() {
        return this._interpolationConfig;
      }
      createBoundHostProperties(properties, sourceSpan) {
        const boundProps = [];
        for (const propName of Object.keys(properties)) {
          const expression = properties[propName];
          if (typeof expression === "string") {
            this.parsePropertyBinding(
              propName,
              expression,
              true,
              false,
              sourceSpan,
              sourceSpan.start.offset,
              void 0,
              [],
              // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the
              // sourceSpan, as it represents the sourceSpan of the host itself rather than the
              // source of the host binding (which doesn't exist in the template). Regardless,
              // neither of these values are used in Ivy but are only here to satisfy the function
              // signature. This should likely be refactored in the future so that `sourceSpan`
              // isn't being used inaccurately.
              boundProps,
              sourceSpan
            );
          } else {
            this._reportError(`Value of the host property binding "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
          }
        }
        return boundProps;
      }
      createDirectiveHostEventAsts(hostListeners, sourceSpan) {
        const targetEvents = [];
        for (const propName of Object.keys(hostListeners)) {
          const expression = hostListeners[propName];
          if (typeof expression === "string") {
            this.parseEvent(
              propName,
              expression,
              /* isAssignmentEvent */
              false,
              sourceSpan,
              sourceSpan,
              [],
              targetEvents,
              sourceSpan
            );
          } else {
            this._reportError(`Value of the host listener "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
          }
        }
        return targetEvents;
      }
      parseInterpolation(value, sourceSpan, interpolatedTokens) {
        const absoluteOffset = sourceSpan.fullStart.offset;
        try {
          const ast = this._exprParser.parseInterpolation(value, sourceSpan, absoluteOffset, interpolatedTokens, this._interpolationConfig);
          if (ast) {
            this.errors.push(...ast.errors);
          }
          return ast;
        } catch (e) {
          this._reportError(`${e}`, sourceSpan);
          return this._exprParser.wrapLiteralPrimitive("ERROR", sourceSpan, absoluteOffset);
        }
      }
      /**
       * Similar to `parseInterpolation`, but treats the provided string as a single expression
       * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
       * This is used for parsing the switch expression in ICUs.
       */
      parseInterpolationExpression(expression, sourceSpan) {
        const absoluteOffset = sourceSpan.start.offset;
        try {
          const ast = this._exprParser.parseInterpolationExpression(expression, sourceSpan, absoluteOffset);
          if (ast) {
            this.errors.push(...ast.errors);
          }
          return ast;
        } catch (e) {
          this._reportError(`${e}`, sourceSpan);
          return this._exprParser.wrapLiteralPrimitive("ERROR", sourceSpan, absoluteOffset);
        }
      }
      /**
       * Parses the bindings in a microsyntax expression, and converts them to
       * `ParsedProperty` or `ParsedVariable`.
       *
       * @param tplKey template binding name
       * @param tplValue template binding value
       * @param sourceSpan span of template binding relative to entire the template
       * @param absoluteValueOffset start of the tplValue relative to the entire template
       * @param targetMatchableAttrs potential attributes to match in the template
       * @param targetProps target property bindings in the template
       * @param targetVars target variables in the template
       */
      parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {
        const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;
        const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
        for (const binding of bindings) {
          const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
          const key = binding.key.source;
          const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);
          if (binding instanceof VariableBinding) {
            const value = binding.value ? binding.value.source : "$implicit";
            const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : void 0;
            targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
          } else if (binding.value) {
            const srcSpan = isIvyAst ? bindingSpan : sourceSpan;
            const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);
            this._parsePropertyAst(key, binding.value, false, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
          } else {
            targetMatchableAttrs.push([
              key,
              ""
              /* value */
            ]);
            this.parseLiteralAttr(key, null, keySpan, absoluteValueOffset, void 0, targetMatchableAttrs, targetProps, keySpan);
          }
        }
      }
      /**
       * Parses the bindings in a microsyntax expression, e.g.
       * ```html
       *    <tag *tplKey="let value1 = prop; let value2 = localVar">
       * ```
       *
       * @param tplKey template binding name
       * @param tplValue template binding value
       * @param sourceSpan span of template binding relative to entire the template
       * @param absoluteKeyOffset start of the `tplKey`
       * @param absoluteValueOffset start of the `tplValue`
       */
      _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
        try {
          const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
          bindingsResult.errors.forEach((e) => this.errors.push(e));
          bindingsResult.warnings.forEach((warning) => {
            this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
          });
          return bindingsResult.templateBindings;
        } catch (e) {
          this._reportError(`${e}`, sourceSpan);
          return [];
        }
      }
      parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
        if (isLegacyAnimationLabel(name)) {
          name = name.substring(1);
          if (keySpan !== void 0) {
            keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
          }
          if (value) {
            this._reportError(`Assigning animation triggers via @prop="exp" attributes with an expression is invalid. Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);
          }
          this._parseLegacyAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
        } else {
          targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, "", absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));
        }
      }
      parsePropertyBinding(name, expression, isHost, isPartOfAssignmentBinding, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
        if (name.length === 0) {
          this._reportError(`Property name is missing in binding`, sourceSpan);
        }
        let isLegacyAnimationProp = false;
        if (name.startsWith(LEGACY_ANIMATE_PROP_PREFIX)) {
          isLegacyAnimationProp = true;
          name = name.substring(LEGACY_ANIMATE_PROP_PREFIX.length);
          if (keySpan !== void 0) {
            keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + LEGACY_ANIMATE_PROP_PREFIX.length, keySpan.end.offset));
          }
        } else if (isLegacyAnimationLabel(name)) {
          isLegacyAnimationProp = true;
          name = name.substring(1);
          if (keySpan !== void 0) {
            keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
          }
        }
        if (isLegacyAnimationProp) {
          this._parseLegacyAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
        } else {
          this._parsePropertyAst(name, this.parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
        }
      }
      parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {
        const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);
        if (expr) {
          this._parsePropertyAst(name, expr, false, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
          return true;
        }
        return false;
      }
      _parsePropertyAst(name, ast, isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
        targetMatchableAttrs.push([name, ast.source]);
        targetProps.push(new ParsedProperty(name, ast, isPartOfAssignmentBinding ? ParsedPropertyType.TWO_WAY : ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));
      }
      _parseLegacyAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
        if (name.length === 0) {
          this._reportError("Animation trigger is missing", sourceSpan);
        }
        const ast = this.parseBinding(expression || "undefined", false, valueSpan || sourceSpan, absoluteOffset);
        targetMatchableAttrs.push([name, ast.source]);
        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.LEGACY_ANIMATION, sourceSpan, keySpan, valueSpan));
      }
      parseBinding(value, isHostBinding2, sourceSpan, absoluteOffset) {
        try {
          const ast = isHostBinding2 ? this._exprParser.parseSimpleBinding(value, sourceSpan, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceSpan, absoluteOffset, this._interpolationConfig);
          if (ast) {
            this.errors.push(...ast.errors);
          }
          return ast;
        } catch (e) {
          this._reportError(`${e}`, sourceSpan);
          return this._exprParser.wrapLiteralPrimitive("ERROR", sourceSpan, absoluteOffset);
        }
      }
      createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {
        if (boundProp.isLegacyAnimation) {
          return new BoundElementProperty(boundProp.name, BindingType.LegacyAnimation, SecurityContext2.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
        }
        let unit = null;
        let bindingType = void 0;
        let boundPropertyName = null;
        const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
        let securityContexts = void 0;
        if (parts.length > 1) {
          if (parts[0] == ATTRIBUTE_PREFIX) {
            boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);
            if (!skipValidation) {
              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
            }
            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
            const nsSeparatorIdx = boundPropertyName.indexOf(":");
            if (nsSeparatorIdx > -1) {
              const ns = boundPropertyName.substring(0, nsSeparatorIdx);
              const name = boundPropertyName.substring(nsSeparatorIdx + 1);
              boundPropertyName = mergeNsAndName(ns, name);
            }
            bindingType = BindingType.Attribute;
          } else if (parts[0] == CLASS_PREFIX) {
            boundPropertyName = parts[1];
            bindingType = BindingType.Class;
            securityContexts = [SecurityContext2.NONE];
          } else if (parts[0] == STYLE_PREFIX) {
            unit = parts.length > 2 ? parts[2] : null;
            boundPropertyName = parts[1];
            bindingType = BindingType.Style;
            securityContexts = [SecurityContext2.STYLE];
          }
        }
        if (boundPropertyName === null) {
          const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);
          boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
          securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
          bindingType = boundProp.type === ParsedPropertyType.TWO_WAY ? BindingType.TwoWay : BindingType.Property;
          if (!skipValidation) {
            this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
          }
        }
        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
      }
      // TODO: keySpan should be required but was made optional to avoid changing VE parser.
      parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
        if (name.length === 0) {
          this._reportError(`Event name is missing in binding`, sourceSpan);
        }
        if (isLegacyAnimationLabel(name)) {
          name = name.slice(1);
          if (keySpan !== void 0) {
            keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
          }
          this._parseLegacyAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);
        } else {
          this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);
        }
      }
      calcPossibleSecurityContexts(selector, propName, isAttribute) {
        const prop = this._schemaRegistry.getMappedPropName(propName);
        return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
      }
      parseEventListenerName(rawName) {
        const [target, eventName] = splitAtColon(rawName, [null, rawName]);
        return { eventName, target };
      }
      parseLegacyAnimationEventName(rawName) {
        const matches = splitAtPeriod(rawName, [rawName, null]);
        return { eventName: matches[0], phase: matches[1] === null ? null : matches[1].toLowerCase() };
      }
      _parseLegacyAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {
        const { eventName, phase } = this.parseLegacyAnimationEventName(name);
        const ast = this._parseAction(expression, handlerSpan);
        targetEvents.push(new ParsedEvent(eventName, phase, ParsedEventType.LegacyAnimation, ast, sourceSpan, handlerSpan, keySpan));
        if (eventName.length === 0) {
          this._reportError(`Animation event name is missing in binding`, sourceSpan);
        }
        if (phase) {
          if (phase !== "start" && phase !== "done") {
            this._reportError(`The provided animation output phase value "${phase}" for "@${eventName}" is not supported (use start or done)`, sourceSpan);
          }
        } else {
          this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);
        }
      }
      _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
        const { eventName, target } = this.parseEventListenerName(name);
        const prevErrorCount = this.errors.length;
        const ast = this._parseAction(expression, handlerSpan);
        const isValid = this.errors.length === prevErrorCount;
        targetMatchableAttrs.push([name, ast.source]);
        if (isAssignmentEvent && isValid && !this._isAllowedAssignmentEvent(ast)) {
          this._reportError("Unsupported expression in a two-way binding", sourceSpan);
        }
        targetEvents.push(new ParsedEvent(eventName, target, isAssignmentEvent ? ParsedEventType.TwoWay : ParsedEventType.Regular, ast, sourceSpan, handlerSpan, keySpan));
      }
      _parseAction(value, sourceSpan) {
        const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;
        try {
          const ast = this._exprParser.parseAction(value, sourceSpan, absoluteOffset, this._interpolationConfig);
          if (ast) {
            this.errors.push(...ast.errors);
          }
          if (!ast || ast.ast instanceof EmptyExpr$1) {
            this._reportError(`Empty expressions are not allowed`, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive("ERROR", sourceSpan, absoluteOffset);
          }
          return ast;
        } catch (e) {
          this._reportError(`${e}`, sourceSpan);
          return this._exprParser.wrapLiteralPrimitive("ERROR", sourceSpan, absoluteOffset);
        }
      }
      _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
        this.errors.push(new ParseError(sourceSpan, message, level));
      }
      /**
       * @param propName the name of the property / attribute
       * @param sourceSpan
       * @param isAttr true when binding to an attribute
       */
      _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
        const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
        if (report.error) {
          this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
        }
      }
      /**
       * Returns whether a parsed AST is allowed to be used within the event side of a two-way binding.
       * @param ast Parsed AST to be checked.
       */
      _isAllowedAssignmentEvent(ast) {
        if (ast instanceof ASTWithSource) {
          return this._isAllowedAssignmentEvent(ast.ast);
        }
        if (ast instanceof NonNullAssert) {
          return this._isAllowedAssignmentEvent(ast.expression);
        }
        if (ast instanceof Call && ast.args.length === 1 && ast.receiver instanceof PropertyRead && ast.receiver.name === "$any" && ast.receiver.receiver instanceof ImplicitReceiver && !(ast.receiver.receiver instanceof ThisReceiver)) {
          return this._isAllowedAssignmentEvent(ast.args[0]);
        }
        if (ast instanceof PropertyRead || ast instanceof KeyedRead) {
          if (!hasRecursiveSafeReceiver(ast)) {
            return true;
          }
        }
        return false;
      }
    };
    URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
    NG_CONTENT_SELECT_ATTR = "select";
    LINK_ELEMENT = "link";
    LINK_STYLE_REL_ATTR = "rel";
    LINK_STYLE_HREF_ATTR = "href";
    LINK_STYLE_REL_VALUE = "stylesheet";
    STYLE_ELEMENT = "style";
    SCRIPT_ELEMENT = "script";
    NG_NON_BINDABLE_ATTR = "ngNonBindable";
    NG_PROJECT_AS = "ngProjectAs";
    (function(PreparsedElementType2) {
      PreparsedElementType2[PreparsedElementType2["NG_CONTENT"] = 0] = "NG_CONTENT";
      PreparsedElementType2[PreparsedElementType2["STYLE"] = 1] = "STYLE";
      PreparsedElementType2[PreparsedElementType2["STYLESHEET"] = 2] = "STYLESHEET";
      PreparsedElementType2[PreparsedElementType2["SCRIPT"] = 3] = "SCRIPT";
      PreparsedElementType2[PreparsedElementType2["OTHER"] = 4] = "OTHER";
    })(PreparsedElementType || (PreparsedElementType = {}));
    PreparsedElement = class {
      type;
      selectAttr;
      hrefAttr;
      nonBindable;
      projectAs;
      constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {
        this.type = type;
        this.selectAttr = selectAttr;
        this.hrefAttr = hrefAttr;
        this.nonBindable = nonBindable;
        this.projectAs = projectAs;
      }
    };
    FOR_LOOP_EXPRESSION_PATTERN = /^\s*([0-9A-Za-z_$]*)\s+of\s+([\S\s]*)/;
    FOR_LOOP_TRACK_PATTERN = /^track\s+([\S\s]*)/;
    CONDITIONAL_ALIAS_PATTERN = /^(as\s+)(.*)/;
    ELSE_IF_PATTERN = /^else[^\S\r\n]+if/;
    FOR_LOOP_LET_PATTERN = /^let\s+([\S\s]*)/;
    IDENTIFIER_PATTERN = /^[$A-Z_][0-9A-Z_$]*$/i;
    CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN = /(\s*)(\S+)(\s*)/;
    ALLOWED_FOR_LOOP_LET_VARIABLES = /* @__PURE__ */ new Set([
      "$index",
      "$first",
      "$last",
      "$even",
      "$odd",
      "$count"
    ]);
    TIME_PATTERN = /^\d+\.?\d*(ms|s)?$/;
    SEPARATOR_PATTERN = /^\s$/;
    COMMA_DELIMITED_SYNTAX = /* @__PURE__ */ new Map([
      [$LBRACE, $RBRACE],
      // Object literals
      [$LBRACKET, $RBRACKET],
      // Array literals
      [$LPAREN, $RPAREN]
      // Function calls
    ]);
    (function(OnTriggerType2) {
      OnTriggerType2["IDLE"] = "idle";
      OnTriggerType2["TIMER"] = "timer";
      OnTriggerType2["INTERACTION"] = "interaction";
      OnTriggerType2["IMMEDIATE"] = "immediate";
      OnTriggerType2["HOVER"] = "hover";
      OnTriggerType2["VIEWPORT"] = "viewport";
      OnTriggerType2["NEVER"] = "never";
    })(OnTriggerType || (OnTriggerType = {}));
    OnTriggerParser = class {
      expression;
      start;
      span;
      triggers;
      errors;
      validator;
      placeholder;
      prefetchSpan;
      onSourceSpan;
      hydrateSpan;
      index = 0;
      tokens;
      constructor(expression, start, span, triggers, errors, validator, placeholder, prefetchSpan, onSourceSpan, hydrateSpan) {
        this.expression = expression;
        this.start = start;
        this.span = span;
        this.triggers = triggers;
        this.errors = errors;
        this.validator = validator;
        this.placeholder = placeholder;
        this.prefetchSpan = prefetchSpan;
        this.onSourceSpan = onSourceSpan;
        this.hydrateSpan = hydrateSpan;
        this.tokens = new Lexer().tokenize(expression.slice(start));
      }
      parse() {
        while (this.tokens.length > 0 && this.index < this.tokens.length) {
          const token = this.token();
          if (!token.isIdentifier()) {
            this.unexpectedToken(token);
            break;
          }
          if (this.isFollowedByOrLast($COMMA)) {
            this.consumeTrigger(token, []);
            this.advance();
          } else if (this.isFollowedByOrLast($LPAREN)) {
            this.advance();
            const prevErrors = this.errors.length;
            const parameters = this.consumeParameters();
            if (this.errors.length !== prevErrors) {
              break;
            }
            this.consumeTrigger(token, parameters);
            this.advance();
          } else if (this.index < this.tokens.length - 1) {
            this.unexpectedToken(this.tokens[this.index + 1]);
          }
          this.advance();
        }
      }
      advance() {
        this.index++;
      }
      isFollowedByOrLast(char) {
        if (this.index === this.tokens.length - 1) {
          return true;
        }
        return this.tokens[this.index + 1].isCharacter(char);
      }
      token() {
        return this.tokens[Math.min(this.index, this.tokens.length - 1)];
      }
      consumeTrigger(identifier, parameters) {
        const triggerNameStartSpan = this.span.start.moveBy(this.start + identifier.index - this.tokens[0].index);
        const nameSpan = new ParseSourceSpan(triggerNameStartSpan, triggerNameStartSpan.moveBy(identifier.strValue.length));
        const endSpan = triggerNameStartSpan.moveBy(this.token().end - identifier.index);
        const isFirstTrigger = identifier.index === 0;
        const onSourceSpan = isFirstTrigger ? this.onSourceSpan : null;
        const prefetchSourceSpan = isFirstTrigger ? this.prefetchSpan : null;
        const hydrateSourceSpan = isFirstTrigger ? this.hydrateSpan : null;
        const sourceSpan = new ParseSourceSpan(isFirstTrigger ? this.span.start : triggerNameStartSpan, endSpan);
        try {
          switch (identifier.toString()) {
            case OnTriggerType.IDLE:
              this.trackTrigger("idle", createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSourceSpan, onSourceSpan, hydrateSourceSpan));
              break;
            case OnTriggerType.TIMER:
              this.trackTrigger("timer", createTimerTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan));
              break;
            case OnTriggerType.INTERACTION:
              this.trackTrigger("interaction", createInteractionTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.validator));
              break;
            case OnTriggerType.IMMEDIATE:
              this.trackTrigger("immediate", createImmediateTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan));
              break;
            case OnTriggerType.HOVER:
              this.trackTrigger("hover", createHoverTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.placeholder, this.validator));
              break;
            case OnTriggerType.VIEWPORT:
              this.trackTrigger("viewport", createViewportTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.validator));
              break;
            default:
              throw new Error(`Unrecognized trigger type "${identifier}"`);
          }
        } catch (e) {
          this.error(identifier, e.message);
        }
      }
      consumeParameters() {
        const parameters = [];
        if (!this.token().isCharacter($LPAREN)) {
          this.unexpectedToken(this.token());
          return parameters;
        }
        this.advance();
        const commaDelimStack = [];
        let current = "";
        while (this.index < this.tokens.length) {
          const token = this.token();
          if (token.isCharacter($RPAREN) && commaDelimStack.length === 0) {
            if (current.length) {
              parameters.push(current);
            }
            break;
          }
          if (token.type === TokenType.Character && COMMA_DELIMITED_SYNTAX.has(token.numValue)) {
            commaDelimStack.push(COMMA_DELIMITED_SYNTAX.get(token.numValue));
          }
          if (commaDelimStack.length > 0 && token.isCharacter(commaDelimStack[commaDelimStack.length - 1])) {
            commaDelimStack.pop();
          }
          if (commaDelimStack.length === 0 && token.isCharacter($COMMA) && current.length > 0) {
            parameters.push(current);
            current = "";
            this.advance();
            continue;
          }
          current += this.tokenText();
          this.advance();
        }
        if (!this.token().isCharacter($RPAREN) || commaDelimStack.length > 0) {
          this.error(this.token(), "Unexpected end of expression");
        }
        if (this.index < this.tokens.length - 1 && !this.tokens[this.index + 1].isCharacter($COMMA)) {
          this.unexpectedToken(this.tokens[this.index + 1]);
        }
        return parameters;
      }
      tokenText() {
        return this.expression.slice(this.start + this.token().index, this.start + this.token().end);
      }
      trackTrigger(name, trigger) {
        trackTrigger(name, this.triggers, this.errors, trigger);
      }
      error(token, message) {
        const newStart = this.span.start.moveBy(this.start + token.index);
        const newEnd = newStart.moveBy(token.end - token.index);
        this.errors.push(new ParseError(new ParseSourceSpan(newStart, newEnd), message));
      }
      unexpectedToken(token) {
        this.error(token, `Unexpected token "${token}"`);
      }
    };
    PREFETCH_WHEN_PATTERN = /^prefetch\s+when\s/;
    PREFETCH_ON_PATTERN = /^prefetch\s+on\s/;
    HYDRATE_WHEN_PATTERN = /^hydrate\s+when\s/;
    HYDRATE_ON_PATTERN = /^hydrate\s+on\s/;
    HYDRATE_NEVER_PATTERN = /^hydrate\s+never(\s*)$/;
    MINIMUM_PARAMETER_PATTERN = /^minimum\s/;
    AFTER_PARAMETER_PATTERN = /^after\s/;
    WHEN_PARAMETER_PATTERN = /^when\s/;
    ON_PARAMETER_PATTERN = /^on\s/;
    BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;
    KW_BIND_IDX = 1;
    KW_LET_IDX = 2;
    KW_REF_IDX = 3;
    KW_ON_IDX = 4;
    KW_BINDON_IDX = 5;
    KW_AT_IDX = 6;
    IDENT_KW_IDX = 7;
    BINDING_DELIMS = {
      BANANA_BOX: { start: "[(", end: ")]" },
      PROPERTY: { start: "[", end: "]" },
      EVENT: { start: "(", end: ")" }
    };
    TEMPLATE_ATTR_PREFIX = "*";
    UNSUPPORTED_SELECTORLESS_TAGS = /* @__PURE__ */ new Set([
      "link",
      "style",
      "script",
      "ng-template",
      "ng-container",
      "ng-content"
    ]);
    UNSUPPORTED_SELECTORLESS_DIRECTIVE_ATTRS = /* @__PURE__ */ new Set(["ngProjectAs", "ngNonBindable"]);
    HtmlAstToIvyAst = class {
      bindingParser;
      options;
      errors = [];
      styles = [];
      styleUrls = [];
      ngContentSelectors = [];
      // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true
      commentNodes = [];
      inI18nBlock = false;
      /**
       * Keeps track of the nodes that have been processed already when previous nodes were visited.
       * These are typically blocks connected to other blocks or text nodes between connected blocks.
       */
      processedNodes = /* @__PURE__ */ new Set();
      constructor(bindingParser, options) {
        this.bindingParser = bindingParser;
        this.options = options;
      }
      // HTML visitor
      visitElement(element2) {
        const isI18nRootElement = isI18nRootNode(element2.i18n);
        if (isI18nRootElement) {
          if (this.inI18nBlock) {
            this.reportError("Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.", element2.sourceSpan);
          }
          this.inI18nBlock = true;
        }
        const preparsedElement = preparseElement(element2);
        if (preparsedElement.type === PreparsedElementType.SCRIPT) {
          return null;
        } else if (preparsedElement.type === PreparsedElementType.STYLE) {
          const contents = textContents(element2);
          if (contents !== null) {
            this.styles.push(contents);
          }
          return null;
        } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
          this.styleUrls.push(preparsedElement.hrefAttr);
          return null;
        }
        const isTemplateElement2 = isNgTemplate(element2.name);
        const { attributes, boundEvents, references, variables, templateVariables, elementHasInlineTemplate, parsedProperties, templateParsedProperties, i18nAttrsMeta } = this.prepareAttributes(element2.attrs, isTemplateElement2);
        const directives = this.extractDirectives(element2);
        let children;
        if (preparsedElement.nonBindable) {
          children = visitAll(NON_BINDABLE_VISITOR, element2.children).flat(Infinity);
        } else {
          children = visitAll(this, element2.children, element2.children);
        }
        let parsedElement;
        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
          const selector = preparsedElement.selectAttr;
          const attrs = element2.attrs.map((attr) => this.visitAttribute(attr));
          parsedElement = new Content(selector, attrs, children, element2.isSelfClosing, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
          this.ngContentSelectors.push(selector);
        } else if (isTemplateElement2) {
          const attrs = this.categorizePropertyAttributes(element2.name, parsedProperties, i18nAttrsMeta);
          parsedElement = new Template(element2.name, attributes, attrs.bound, boundEvents, directives, [
            /* no template attributes */
          ], children, references, variables, element2.isSelfClosing, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
        } else {
          const attrs = this.categorizePropertyAttributes(element2.name, parsedProperties, i18nAttrsMeta);
          parsedElement = new Element$1(element2.name, attributes, attrs.bound, boundEvents, directives, children, references, element2.isSelfClosing, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.isVoid, element2.i18n);
        }
        if (elementHasInlineTemplate) {
          parsedElement = this.wrapInTemplate(parsedElement, templateParsedProperties, templateVariables, i18nAttrsMeta, isTemplateElement2, isI18nRootElement);
        }
        if (isI18nRootElement) {
          this.inI18nBlock = false;
        }
        return parsedElement;
      }
      visitAttribute(attribute2) {
        return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
      }
      visitText(text2) {
        return this.processedNodes.has(text2) ? null : this._visitTextWithInterpolation(text2.value, text2.sourceSpan, text2.tokens, text2.i18n);
      }
      visitExpansion(expansion) {
        if (!expansion.i18n) {
          return null;
        }
        if (!isI18nRootNode(expansion.i18n)) {
          throw new Error(`Invalid type "${expansion.i18n.constructor}" for "i18n" property of ${expansion.sourceSpan.toString()}. Expected a "Message"`);
        }
        const message = expansion.i18n;
        const vars = {};
        const placeholders = {};
        Object.keys(message.placeholders).forEach((key) => {
          const value = message.placeholders[key];
          if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
            const formattedKey = key.trim();
            const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);
            vars[formattedKey] = new BoundText(ast, value.sourceSpan);
          } else {
            placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);
          }
        });
        return new Icu$1(vars, placeholders, expansion.sourceSpan, message);
      }
      visitExpansionCase(expansionCase) {
        return null;
      }
      visitComment(comment) {
        if (this.options.collectCommentNodes) {
          this.commentNodes.push(new Comment$1(comment.value || "", comment.sourceSpan));
        }
        return null;
      }
      visitLetDeclaration(decl, context2) {
        const value = this.bindingParser.parseBinding(decl.value, false, decl.valueSpan, decl.valueSpan.start.offset);
        if (value.errors.length === 0 && value.ast instanceof EmptyExpr$1) {
          this.reportError("@let declaration value cannot be empty", decl.valueSpan);
        }
        return new LetDeclaration$1(decl.name, value, decl.sourceSpan, decl.nameSpan, decl.valueSpan);
      }
      visitComponent(component) {
        const isI18nRootElement = isI18nRootNode(component.i18n);
        if (isI18nRootElement) {
          if (this.inI18nBlock) {
            this.reportError("Cannot mark a component as translatable inside of a translatable section. Please remove the nested i18n marker.", component.sourceSpan);
          }
          this.inI18nBlock = true;
        }
        if (component.tagName !== null && UNSUPPORTED_SELECTORLESS_TAGS.has(component.tagName)) {
          this.reportError(`Tag name "${component.tagName}" cannot be used as a component tag`, component.startSourceSpan);
          return null;
        }
        const { attributes, boundEvents, references, templateVariables, elementHasInlineTemplate, parsedProperties, templateParsedProperties, i18nAttrsMeta } = this.prepareAttributes(component.attrs, false);
        this.validateSelectorlessReferences(references);
        const directives = this.extractDirectives(component);
        let children;
        if (component.attrs.find((attr) => attr.name === "ngNonBindable")) {
          children = visitAll(NON_BINDABLE_VISITOR, component.children).flat(Infinity);
        } else {
          children = visitAll(this, component.children, component.children);
        }
        const attrs = this.categorizePropertyAttributes(component.tagName, parsedProperties, i18nAttrsMeta);
        let node = new Component$1(component.componentName, component.tagName, component.fullName, attributes, attrs.bound, boundEvents, directives, children, references, component.isSelfClosing, component.sourceSpan, component.startSourceSpan, component.endSourceSpan, component.i18n);
        if (elementHasInlineTemplate) {
          node = this.wrapInTemplate(node, templateParsedProperties, templateVariables, i18nAttrsMeta, false, isI18nRootElement);
        }
        if (isI18nRootElement) {
          this.inI18nBlock = false;
        }
        return node;
      }
      visitDirective() {
        return null;
      }
      visitBlockParameter() {
        return null;
      }
      visitBlock(block, context2) {
        const index = Array.isArray(context2) ? context2.indexOf(block) : -1;
        if (index === -1) {
          throw new Error("Visitor invoked incorrectly. Expecting visitBlock to be invoked siblings array as its context");
        }
        if (this.processedNodes.has(block)) {
          return null;
        }
        let result = null;
        switch (block.name) {
          case "defer":
            result = createDeferredBlock(block, this.findConnectedBlocks(index, context2, isConnectedDeferLoopBlock), this, this.bindingParser);
            break;
          case "switch":
            result = createSwitchBlock(block, this, this.bindingParser);
            break;
          case "for":
            result = createForLoop(block, this.findConnectedBlocks(index, context2, isConnectedForLoopBlock), this, this.bindingParser);
            break;
          case "if":
            result = createIfBlock(block, this.findConnectedBlocks(index, context2, isConnectedIfLoopBlock), this, this.bindingParser);
            break;
          default:
            let errorMessage;
            if (isConnectedDeferLoopBlock(block.name)) {
              errorMessage = `@${block.name} block can only be used after an @defer block.`;
              this.processedNodes.add(block);
            } else if (isConnectedForLoopBlock(block.name)) {
              errorMessage = `@${block.name} block can only be used after an @for block.`;
              this.processedNodes.add(block);
            } else if (isConnectedIfLoopBlock(block.name)) {
              errorMessage = `@${block.name} block can only be used after an @if or @else if block.`;
              this.processedNodes.add(block);
            } else {
              errorMessage = `Unrecognized block @${block.name}.`;
            }
            result = {
              node: new UnknownBlock(block.name, block.sourceSpan, block.nameSpan),
              errors: [new ParseError(block.sourceSpan, errorMessage)]
            };
            break;
        }
        this.errors.push(...result.errors);
        return result.node;
      }
      findConnectedBlocks(primaryBlockIndex, siblings, predicate) {
        const relatedBlocks = [];
        for (let i = primaryBlockIndex + 1; i < siblings.length; i++) {
          const node = siblings[i];
          if (node instanceof Comment2) {
            continue;
          }
          if (node instanceof Text4 && node.value.trim().length === 0) {
            this.processedNodes.add(node);
            continue;
          }
          if (!(node instanceof Block) || !predicate(node.name)) {
            break;
          }
          relatedBlocks.push(node);
          this.processedNodes.add(node);
        }
        return relatedBlocks;
      }
      /** Splits up the property attributes depending on whether they're static or bound. */
      categorizePropertyAttributes(elementName, properties, i18nPropsMeta) {
        const bound = [];
        const literal2 = [];
        properties.forEach((prop) => {
          const i18n2 = i18nPropsMeta[prop.name];
          if (prop.isLiteral) {
            literal2.push(new TextAttribute(prop.name, prop.expression.source || "", prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2));
          } else {
            const bep = this.bindingParser.createBoundElementProperty(
              elementName,
              prop,
              /* skipValidation */
              true,
              /* mapPropertyName */
              false
            );
            bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n2));
          }
        });
        return { bound, literal: literal2 };
      }
      prepareAttributes(attrs, isTemplateElement2) {
        const parsedProperties = [];
        const boundEvents = [];
        const variables = [];
        const references = [];
        const attributes = [];
        const i18nAttrsMeta = {};
        const templateParsedProperties = [];
        const templateVariables = [];
        let elementHasInlineTemplate = false;
        for (const attribute2 of attrs) {
          let hasBinding = false;
          const normalizedName = normalizeAttributeName(attribute2.name);
          let isTemplateBinding = false;
          if (attribute2.i18n) {
            i18nAttrsMeta[attribute2.name] = attribute2.i18n;
          }
          if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
            if (elementHasInlineTemplate) {
              this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute2.sourceSpan);
            }
            isTemplateBinding = true;
            elementHasInlineTemplate = true;
            const templateValue = attribute2.value;
            const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);
            const parsedVariables = [];
            const absoluteValueOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : (
              // If there is no value span the attribute does not have a value, like `attr` in
              //`<div attr></div>`. In this case, point to one character beyond the last character of
              // the attribute name.
              attribute2.sourceSpan.start.offset + attribute2.name.length
            );
            this.bindingParser.parseInlineTemplateBinding(
              templateKey,
              templateValue,
              attribute2.sourceSpan,
              absoluteValueOffset,
              [],
              templateParsedProperties,
              parsedVariables,
              true
              /* isIvyAst */
            );
            templateVariables.push(...parsedVariables.map((v) => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));
          } else {
            hasBinding = this.parseAttribute(isTemplateElement2, attribute2, [], parsedProperties, boundEvents, variables, references);
          }
          if (!hasBinding && !isTemplateBinding) {
            attributes.push(this.visitAttribute(attribute2));
          }
        }
        return {
          attributes,
          boundEvents,
          references,
          variables,
          templateVariables,
          elementHasInlineTemplate,
          parsedProperties,
          templateParsedProperties,
          i18nAttrsMeta
        };
      }
      parseAttribute(isTemplateElement2, attribute2, matchableAttributes, parsedProperties, boundEvents, variables, references) {
        const name = normalizeAttributeName(attribute2.name);
        const value = attribute2.value;
        const srcSpan = attribute2.sourceSpan;
        const absoluteOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : srcSpan.start.offset;
        function createKeySpan(srcSpan2, prefix, identifier) {
          const normalizationAdjustment = attribute2.name.length - name.length;
          const keySpanStart = srcSpan2.start.moveBy(prefix.length + normalizationAdjustment);
          const keySpanEnd = keySpanStart.moveBy(identifier.length);
          return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);
        }
        const bindParts = name.match(BIND_NAME_REGEXP);
        if (bindParts) {
          if (bindParts[KW_BIND_IDX] != null) {
            const identifier = bindParts[IDENT_KW_IDX];
            const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);
            this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
          } else if (bindParts[KW_LET_IDX]) {
            if (isTemplateElement2) {
              const identifier = bindParts[IDENT_KW_IDX];
              const keySpan2 = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);
              this.parseVariable(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, variables);
            } else {
              this.reportError(`"let-" is only supported on ng-template elements.`, srcSpan);
            }
          } else if (bindParts[KW_REF_IDX]) {
            const identifier = bindParts[IDENT_KW_IDX];
            const keySpan2 = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);
            this.parseReference(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, references);
          } else if (bindParts[KW_ON_IDX]) {
            const events = [];
            const identifier = bindParts[IDENT_KW_IDX];
            const keySpan2 = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);
            this.bindingParser.parseEvent(
              identifier,
              value,
              /* isAssignmentEvent */
              false,
              srcSpan,
              attribute2.valueSpan || srcSpan,
              matchableAttributes,
              events,
              keySpan2
            );
            addEvents(events, boundEvents);
          } else if (bindParts[KW_BINDON_IDX]) {
            const identifier = bindParts[IDENT_KW_IDX];
            const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);
            this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
            this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
          } else if (bindParts[KW_AT_IDX]) {
            const keySpan2 = createKeySpan(srcSpan, "", name);
            this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
          }
          return true;
        }
        let delims = null;
        if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {
          delims = BINDING_DELIMS.BANANA_BOX;
        } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {
          delims = BINDING_DELIMS.PROPERTY;
        } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {
          delims = BINDING_DELIMS.EVENT;
        }
        if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited
        // binding iff the property name was terminated by the ending delimiter
        // and the identifier in the binding was non-empty.
        // TODO(ayazhafiz): update this to handle malformed bindings.
        name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {
          const identifier = name.substring(delims.start.length, name.length - delims.end.length);
          const keySpan2 = createKeySpan(srcSpan, delims.start, identifier);
          if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {
            this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
            this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
          } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {
            this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
          } else {
            const events = [];
            this.bindingParser.parseEvent(
              identifier,
              value,
              /* isAssignmentEvent */
              false,
              srcSpan,
              attribute2.valueSpan || srcSpan,
              matchableAttributes,
              events,
              keySpan2
            );
            addEvents(events, boundEvents);
          }
          return true;
        }
        const keySpan = createKeySpan(srcSpan, "", name);
        const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute2.valueTokens ?? null);
        return hasBinding;
      }
      extractDirectives(node) {
        const elementName = node instanceof Component3 ? node.tagName : node.name;
        const directives = [];
        const seenDirectives = /* @__PURE__ */ new Set();
        for (const directive of node.directives) {
          let invalid = false;
          for (const attr of directive.attrs) {
            if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
              invalid = true;
              this.reportError(`Shorthand template syntax "${attr.name}" is not supported inside a directive context`, attr.sourceSpan);
            } else if (UNSUPPORTED_SELECTORLESS_DIRECTIVE_ATTRS.has(attr.name)) {
              invalid = true;
              this.reportError(`Attribute "${attr.name}" is not supported in a directive context`, attr.sourceSpan);
            }
          }
          if (!invalid && seenDirectives.has(directive.name)) {
            invalid = true;
            this.reportError(`Cannot apply directive "${directive.name}" multiple times on the same element`, directive.sourceSpan);
          }
          if (invalid) {
            continue;
          }
          const { attributes, parsedProperties, boundEvents, references, i18nAttrsMeta } = this.prepareAttributes(directive.attrs, false);
          this.validateSelectorlessReferences(references);
          const { bound: inputs } = this.categorizePropertyAttributes(elementName, parsedProperties, i18nAttrsMeta);
          for (const input2 of inputs) {
            if (input2.type !== BindingType.Property && input2.type !== BindingType.TwoWay) {
              invalid = true;
              this.reportError("Binding is not supported in a directive context", input2.sourceSpan);
            }
          }
          if (invalid) {
            continue;
          }
          seenDirectives.add(directive.name);
          directives.push(new Directive$1(directive.name, attributes, inputs, boundEvents, references, directive.sourceSpan, directive.startSourceSpan, directive.endSourceSpan, void 0));
        }
        return directives;
      }
      wrapInTemplate(node, templateProperties, templateVariables, i18nAttrsMeta, isTemplateElement2, isI18nRootElement) {
        const attrs = this.categorizePropertyAttributes("ng-template", templateProperties, i18nAttrsMeta);
        const templateAttrs = [];
        attrs.literal.forEach((attr) => templateAttrs.push(attr));
        attrs.bound.forEach((attr) => templateAttrs.push(attr));
        const hoistedAttrs = {
          attributes: [],
          inputs: [],
          outputs: []
        };
        if (node instanceof Element$1 || node instanceof Component$1) {
          hoistedAttrs.attributes.push(...node.attributes);
          hoistedAttrs.inputs.push(...node.inputs);
          hoistedAttrs.outputs.push(...node.outputs);
        }
        const i18n2 = isTemplateElement2 && isI18nRootElement ? void 0 : node.i18n;
        let name;
        if (node instanceof Component$1) {
          name = node.tagName;
        } else if (node instanceof Template) {
          name = null;
        } else {
          name = node.name;
        }
        return new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, [
          // Do not copy over the directives.
        ], templateAttrs, [node], [
          // Do not copy over the references.
        ], templateVariables, false, node.sourceSpan, node.startSourceSpan, node.endSourceSpan, i18n2);
      }
      _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n2) {
        const valueNoNgsp = replaceNgsp2(value);
        const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);
        return expr ? new BoundText(expr, sourceSpan, i18n2) : new Text$3(valueNoNgsp, sourceSpan);
      }
      parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {
        if (identifier.indexOf("-") > -1) {
          this.reportError(`"-" is not allowed in variable names`, sourceSpan);
        } else if (identifier.length === 0) {
          this.reportError(`Variable does not have a name`, sourceSpan);
        }
        variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));
      }
      parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {
        if (identifier.indexOf("-") > -1) {
          this.reportError(`"-" is not allowed in reference names`, sourceSpan);
        } else if (identifier.length === 0) {
          this.reportError(`Reference does not have a name`, sourceSpan);
        } else if (references.some((reference2) => reference2.name === identifier)) {
          this.reportError(`Reference "#${identifier}" is defined more than once`, sourceSpan);
        }
        references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));
      }
      parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {
        const events = [];
        this.bindingParser.parseEvent(
          `${name}Change`,
          expression,
          /* isAssignmentEvent */
          true,
          sourceSpan,
          valueSpan || sourceSpan,
          targetMatchableAttrs,
          events,
          keySpan
        );
        addEvents(events, boundEvents);
      }
      validateSelectorlessReferences(references) {
        if (references.length === 0) {
          return;
        }
        const seenNames = /* @__PURE__ */ new Set();
        for (const ref of references) {
          if (ref.value.length > 0) {
            this.reportError("Cannot specify a value for a local reference in this context", ref.valueSpan || ref.sourceSpan);
          } else if (seenNames.has(ref.name)) {
            this.reportError("Duplicate reference names are not allowed", ref.sourceSpan);
          } else {
            seenNames.add(ref.name);
          }
        }
      }
      reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
        this.errors.push(new ParseError(sourceSpan, message, level));
      }
    };
    NonBindableVisitor = class {
      visitElement(ast) {
        const preparsedElement = preparseElement(ast);
        if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
          return null;
        }
        const children = visitAll(this, ast.children, null);
        return new Element$1(
          ast.name,
          visitAll(this, ast.attrs),
          /* inputs */
          [],
          /* outputs */
          [],
          /* directives */
          [],
          children,
          /* references */
          [],
          ast.isSelfClosing,
          ast.sourceSpan,
          ast.startSourceSpan,
          ast.endSourceSpan,
          ast.isVoid
        );
      }
      visitComment(comment) {
        return null;
      }
      visitAttribute(attribute2) {
        return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
      }
      visitText(text2) {
        return new Text$3(text2.value, text2.sourceSpan);
      }
      visitExpansion(expansion) {
        return null;
      }
      visitExpansionCase(expansionCase) {
        return null;
      }
      visitBlock(block, context2) {
        const nodes = [
          // In an ngNonBindable context we treat the opening/closing tags of block as plain text.
          // This is the as if the `tokenizeBlocks` option was disabled.
          new Text$3(block.startSourceSpan.toString(), block.startSourceSpan),
          ...visitAll(this, block.children)
        ];
        if (block.endSourceSpan !== null) {
          nodes.push(new Text$3(block.endSourceSpan.toString(), block.endSourceSpan));
        }
        return nodes;
      }
      visitBlockParameter(parameter, context2) {
        return null;
      }
      visitLetDeclaration(decl, context2) {
        return new Text$3(`@let ${decl.name} = ${decl.value};`, decl.sourceSpan);
      }
      visitComponent(ast, context2) {
        const children = visitAll(this, ast.children, null);
        return new Element$1(
          ast.fullName,
          visitAll(this, ast.attrs),
          /* inputs */
          [],
          /* outputs */
          [],
          /* directives */
          [],
          children,
          /* references */
          [],
          ast.isSelfClosing,
          ast.sourceSpan,
          ast.startSourceSpan,
          ast.endSourceSpan,
          false
        );
      }
      visitDirective(directive, context2) {
        return null;
      }
    };
    NON_BINDABLE_VISITOR = new NonBindableVisitor();
    LEADING_TRIVIA_CHARS = [" ", "\n", "\r", "	"];
    elementRegistry = new DomElementSchemaRegistry();
    COMPONENT_VARIABLE = "%COMP%";
    HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
    CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
    HOST_REG_EXP = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
    CombinedRecursiveAstVisitor = class extends RecursiveAstVisitor {
      visit(node) {
        if (node instanceof ASTWithSource) {
          this.visit(node.ast);
        } else {
          node.visit(this);
        }
      }
      visitElement(element2) {
        this.visitAllTemplateNodes(element2.attributes);
        this.visitAllTemplateNodes(element2.inputs);
        this.visitAllTemplateNodes(element2.outputs);
        this.visitAllTemplateNodes(element2.directives);
        this.visitAllTemplateNodes(element2.references);
        this.visitAllTemplateNodes(element2.children);
      }
      visitTemplate(template2) {
        this.visitAllTemplateNodes(template2.attributes);
        this.visitAllTemplateNodes(template2.inputs);
        this.visitAllTemplateNodes(template2.outputs);
        this.visitAllTemplateNodes(template2.directives);
        this.visitAllTemplateNodes(template2.templateAttrs);
        this.visitAllTemplateNodes(template2.variables);
        this.visitAllTemplateNodes(template2.references);
        this.visitAllTemplateNodes(template2.children);
      }
      visitContent(content) {
        this.visitAllTemplateNodes(content.children);
      }
      visitBoundAttribute(attribute2) {
        this.visit(attribute2.value);
      }
      visitBoundEvent(attribute2) {
        this.visit(attribute2.handler);
      }
      visitBoundText(text2) {
        this.visit(text2.value);
      }
      visitIcu(icu) {
        Object.keys(icu.vars).forEach((key) => this.visit(icu.vars[key]));
        Object.keys(icu.placeholders).forEach((key) => this.visit(icu.placeholders[key]));
      }
      visitDeferredBlock(deferred) {
        deferred.visitAll(this);
      }
      visitDeferredTrigger(trigger) {
        if (trigger instanceof BoundDeferredTrigger) {
          this.visit(trigger.value);
        }
      }
      visitDeferredBlockPlaceholder(block) {
        this.visitAllTemplateNodes(block.children);
      }
      visitDeferredBlockError(block) {
        this.visitAllTemplateNodes(block.children);
      }
      visitDeferredBlockLoading(block) {
        this.visitAllTemplateNodes(block.children);
      }
      visitSwitchBlock(block) {
        this.visit(block.expression);
        this.visitAllTemplateNodes(block.cases);
      }
      visitSwitchBlockCase(block) {
        block.expression && this.visit(block.expression);
        this.visitAllTemplateNodes(block.children);
      }
      visitForLoopBlock(block) {
        block.item.visit(this);
        this.visitAllTemplateNodes(block.contextVariables);
        this.visit(block.expression);
        this.visitAllTemplateNodes(block.children);
        block.empty?.visit(this);
      }
      visitForLoopBlockEmpty(block) {
        this.visitAllTemplateNodes(block.children);
      }
      visitIfBlock(block) {
        this.visitAllTemplateNodes(block.branches);
      }
      visitIfBlockBranch(block) {
        block.expression && this.visit(block.expression);
        block.expressionAlias?.visit(this);
        this.visitAllTemplateNodes(block.children);
      }
      visitLetDeclaration(decl) {
        this.visit(decl.value);
      }
      visitComponent(component) {
        this.visitAllTemplateNodes(component.attributes);
        this.visitAllTemplateNodes(component.inputs);
        this.visitAllTemplateNodes(component.outputs);
        this.visitAllTemplateNodes(component.directives);
        this.visitAllTemplateNodes(component.references);
        this.visitAllTemplateNodes(component.children);
      }
      visitDirective(directive) {
        this.visitAllTemplateNodes(directive.attributes);
        this.visitAllTemplateNodes(directive.inputs);
        this.visitAllTemplateNodes(directive.outputs);
        this.visitAllTemplateNodes(directive.references);
      }
      visitVariable(variable2) {
      }
      visitReference(reference2) {
      }
      visitTextAttribute(attribute2) {
      }
      visitText(text2) {
      }
      visitUnknownBlock(block) {
      }
      visitAllTemplateNodes(nodes) {
        for (const node of nodes) {
          this.visit(node);
        }
      }
    };
    R3TargetBinder = class {
      directiveMatcher;
      constructor(directiveMatcher) {
        this.directiveMatcher = directiveMatcher;
      }
      /**
       * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains
       * metadata about the types referenced in the template.
       */
      bind(target) {
        if (!target.template && !target.host) {
          throw new Error("Empty bound targets are not supported");
        }
        const directives = /* @__PURE__ */ new Map();
        const eagerDirectives = [];
        const missingDirectives = /* @__PURE__ */ new Set();
        const bindings = /* @__PURE__ */ new Map();
        const references = /* @__PURE__ */ new Map();
        const scopedNodeEntities = /* @__PURE__ */ new Map();
        const expressions = /* @__PURE__ */ new Map();
        const symbols = /* @__PURE__ */ new Map();
        const nestingLevel = /* @__PURE__ */ new Map();
        const usedPipes = /* @__PURE__ */ new Set();
        const eagerPipes = /* @__PURE__ */ new Set();
        const deferBlocks = [];
        if (target.template) {
          const scope = Scope2.apply(target.template);
          extractScopedNodeEntities(scope, scopedNodeEntities);
          DirectiveBinder.apply(target.template, this.directiveMatcher, directives, eagerDirectives, missingDirectives, bindings, references);
          TemplateBinder.applyWithScope(target.template, scope, expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks);
        }
        if (target.host) {
          TemplateBinder.applyWithScope(target.host, Scope2.apply(target.host), expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks);
        }
        return new R3BoundTarget(target, directives, eagerDirectives, missingDirectives, bindings, references, expressions, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks);
      }
    };
    Scope2 = class _Scope {
      parentScope;
      rootNode;
      /**
       * Named members of the `Scope`, such as `Reference`s or `Variable`s.
       */
      namedEntities = /* @__PURE__ */ new Map();
      /**
       * Set of element-like nodes that belong to this scope.
       */
      elementLikeInScope = /* @__PURE__ */ new Set();
      /**
       * Child `Scope`s for immediately nested `ScopedNode`s.
       */
      childScopes = /* @__PURE__ */ new Map();
      /** Whether this scope is deferred or if any of its ancestors are deferred. */
      isDeferred;
      constructor(parentScope, rootNode) {
        this.parentScope = parentScope;
        this.rootNode = rootNode;
        this.isDeferred = parentScope !== null && parentScope.isDeferred ? true : rootNode instanceof DeferredBlock;
      }
      static newRootScope() {
        return new _Scope(null, null);
      }
      /**
       * Process a template (either as a `Template` sub-template with variables, or a plain array of
       * template `Node`s) and construct its `Scope`.
       */
      static apply(template2) {
        const scope = _Scope.newRootScope();
        scope.ingest(template2);
        return scope;
      }
      /**
       * Internal method to process the scoped node and populate the `Scope`.
       */
      ingest(nodeOrNodes) {
        if (nodeOrNodes instanceof Template) {
          nodeOrNodes.variables.forEach((node) => this.visitVariable(node));
          nodeOrNodes.children.forEach((node) => node.visit(this));
        } else if (nodeOrNodes instanceof IfBlockBranch) {
          if (nodeOrNodes.expressionAlias !== null) {
            this.visitVariable(nodeOrNodes.expressionAlias);
          }
          nodeOrNodes.children.forEach((node) => node.visit(this));
        } else if (nodeOrNodes instanceof ForLoopBlock) {
          this.visitVariable(nodeOrNodes.item);
          nodeOrNodes.contextVariables.forEach((v) => this.visitVariable(v));
          nodeOrNodes.children.forEach((node) => node.visit(this));
        } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading || nodeOrNodes instanceof Content) {
          nodeOrNodes.children.forEach((node) => node.visit(this));
        } else if (!(nodeOrNodes instanceof HostElement)) {
          nodeOrNodes.forEach((node) => node.visit(this));
        }
      }
      visitElement(element2) {
        this.visitElementLike(element2);
      }
      visitTemplate(template2) {
        template2.directives.forEach((node) => node.visit(this));
        template2.references.forEach((node) => this.visitReference(node));
        this.ingestScopedNode(template2);
      }
      visitVariable(variable2) {
        this.maybeDeclare(variable2);
      }
      visitReference(reference2) {
        this.maybeDeclare(reference2);
      }
      visitDeferredBlock(deferred) {
        this.ingestScopedNode(deferred);
        deferred.placeholder?.visit(this);
        deferred.loading?.visit(this);
        deferred.error?.visit(this);
      }
      visitDeferredBlockPlaceholder(block) {
        this.ingestScopedNode(block);
      }
      visitDeferredBlockError(block) {
        this.ingestScopedNode(block);
      }
      visitDeferredBlockLoading(block) {
        this.ingestScopedNode(block);
      }
      visitSwitchBlock(block) {
        block.cases.forEach((node) => node.visit(this));
      }
      visitSwitchBlockCase(block) {
        this.ingestScopedNode(block);
      }
      visitForLoopBlock(block) {
        this.ingestScopedNode(block);
        block.empty?.visit(this);
      }
      visitForLoopBlockEmpty(block) {
        this.ingestScopedNode(block);
      }
      visitIfBlock(block) {
        block.branches.forEach((node) => node.visit(this));
      }
      visitIfBlockBranch(block) {
        this.ingestScopedNode(block);
      }
      visitContent(content) {
        this.ingestScopedNode(content);
      }
      visitLetDeclaration(decl) {
        this.maybeDeclare(decl);
      }
      visitComponent(component) {
        this.visitElementLike(component);
      }
      visitDirective(directive) {
        directive.references.forEach((current) => this.visitReference(current));
      }
      // Unused visitors.
      visitBoundAttribute(attr) {
      }
      visitBoundEvent(event) {
      }
      visitBoundText(text2) {
      }
      visitText(text2) {
      }
      visitTextAttribute(attr) {
      }
      visitIcu(icu) {
      }
      visitDeferredTrigger(trigger) {
      }
      visitUnknownBlock(block) {
      }
      visitElementLike(node) {
        node.directives.forEach((current) => current.visit(this));
        node.references.forEach((current) => this.visitReference(current));
        node.children.forEach((current) => current.visit(this));
        this.elementLikeInScope.add(node);
      }
      maybeDeclare(thing) {
        if (!this.namedEntities.has(thing.name)) {
          this.namedEntities.set(thing.name, thing);
        }
      }
      /**
       * Look up a variable within this `Scope`.
       *
       * This can recurse into a parent `Scope` if it's available.
       */
      lookup(name) {
        if (this.namedEntities.has(name)) {
          return this.namedEntities.get(name);
        } else if (this.parentScope !== null) {
          return this.parentScope.lookup(name);
        } else {
          return null;
        }
      }
      /**
       * Get the child scope for a `ScopedNode`.
       *
       * This should always be defined.
       */
      getChildScope(node) {
        const res = this.childScopes.get(node);
        if (res === void 0) {
          throw new Error(`Assertion error: child scope for ${node} not found`);
        }
        return res;
      }
      ingestScopedNode(node) {
        const scope = new _Scope(this, node);
        scope.ingest(node);
        this.childScopes.set(node, scope);
      }
    };
    DirectiveBinder = class _DirectiveBinder {
      directiveMatcher;
      directives;
      eagerDirectives;
      missingDirectives;
      bindings;
      references;
      // Indicates whether we are visiting elements within a `defer` block
      isInDeferBlock = false;
      constructor(directiveMatcher, directives, eagerDirectives, missingDirectives, bindings, references) {
        this.directiveMatcher = directiveMatcher;
        this.directives = directives;
        this.eagerDirectives = eagerDirectives;
        this.missingDirectives = missingDirectives;
        this.bindings = bindings;
        this.references = references;
      }
      /**
       * Process a template (list of `Node`s) and perform directive matching against each node.
       *
       * @param template the list of template `Node`s to match (recursively).
       * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
       * this template.
       * @returns three maps which contain information about directives in the template: the
       * `directives` map which lists directives matched on each node, the `bindings` map which
       * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
       * map which resolves #references (`Reference`s) within the template to the named directive or
       * template node.
       */
      static apply(template2, directiveMatcher, directives, eagerDirectives, missingDirectives, bindings, references) {
        const matcher = new _DirectiveBinder(directiveMatcher, directives, eagerDirectives, missingDirectives, bindings, references);
        matcher.ingest(template2);
      }
      ingest(template2) {
        template2.forEach((node) => node.visit(this));
      }
      visitElement(element2) {
        this.visitElementOrTemplate(element2);
      }
      visitTemplate(template2) {
        this.visitElementOrTemplate(template2);
      }
      visitDeferredBlock(deferred) {
        const wasInDeferBlock = this.isInDeferBlock;
        this.isInDeferBlock = true;
        deferred.children.forEach((child) => child.visit(this));
        this.isInDeferBlock = wasInDeferBlock;
        deferred.placeholder?.visit(this);
        deferred.loading?.visit(this);
        deferred.error?.visit(this);
      }
      visitDeferredBlockPlaceholder(block) {
        block.children.forEach((child) => child.visit(this));
      }
      visitDeferredBlockError(block) {
        block.children.forEach((child) => child.visit(this));
      }
      visitDeferredBlockLoading(block) {
        block.children.forEach((child) => child.visit(this));
      }
      visitSwitchBlock(block) {
        block.cases.forEach((node) => node.visit(this));
      }
      visitSwitchBlockCase(block) {
        block.children.forEach((node) => node.visit(this));
      }
      visitForLoopBlock(block) {
        block.item.visit(this);
        block.contextVariables.forEach((v) => v.visit(this));
        block.children.forEach((node) => node.visit(this));
        block.empty?.visit(this);
      }
      visitForLoopBlockEmpty(block) {
        block.children.forEach((node) => node.visit(this));
      }
      visitIfBlock(block) {
        block.branches.forEach((node) => node.visit(this));
      }
      visitIfBlockBranch(block) {
        block.expressionAlias?.visit(this);
        block.children.forEach((node) => node.visit(this));
      }
      visitContent(content) {
        content.children.forEach((child) => child.visit(this));
      }
      visitComponent(node) {
        if (this.directiveMatcher instanceof SelectorlessMatcher) {
          const componentMatches = this.directiveMatcher.match(node.componentName);
          if (componentMatches.length > 0) {
            this.trackSelectorlessMatchesAndDirectives(node, componentMatches);
          } else {
            this.missingDirectives.add(node.componentName);
          }
        }
        node.directives.forEach((directive) => directive.visit(this));
        node.children.forEach((child) => child.visit(this));
      }
      visitDirective(node) {
        if (this.directiveMatcher instanceof SelectorlessMatcher) {
          const directives = this.directiveMatcher.match(node.name);
          if (directives.length > 0) {
            this.trackSelectorlessMatchesAndDirectives(node, directives);
          } else {
            this.missingDirectives.add(node.name);
          }
        }
      }
      visitElementOrTemplate(node) {
        if (this.directiveMatcher instanceof SelectorMatcher) {
          const directives = [];
          const cssSelector = createCssSelectorFromNode(node);
          this.directiveMatcher.match(cssSelector, (_, results) => directives.push(...results));
          this.trackSelectorBasedBindingsAndDirectives(node, directives);
        } else {
          node.references.forEach((ref) => {
            if (ref.value.trim() === "") {
              this.references.set(ref, node);
            }
          });
        }
        node.directives.forEach((directive) => directive.visit(this));
        node.children.forEach((child) => child.visit(this));
      }
      trackMatchedDirectives(node, directives) {
        if (directives.length > 0) {
          this.directives.set(node, directives);
          if (!this.isInDeferBlock) {
            this.eagerDirectives.push(...directives);
          }
        }
      }
      trackSelectorlessMatchesAndDirectives(node, directives) {
        if (directives.length === 0) {
          return;
        }
        this.trackMatchedDirectives(node, directives);
        const setBinding = (meta, attribute2, ioType) => {
          if (meta[ioType].hasBindingPropertyName(attribute2.name)) {
            this.bindings.set(attribute2, meta);
          }
        };
        for (const directive of directives) {
          node.inputs.forEach((input2) => setBinding(directive, input2, "inputs"));
          node.attributes.forEach((attr) => setBinding(directive, attr, "inputs"));
          node.outputs.forEach((output2) => setBinding(directive, output2, "outputs"));
        }
        node.references.forEach((ref) => this.references.set(ref, { directive: directives[0], node }));
      }
      trackSelectorBasedBindingsAndDirectives(node, directives) {
        this.trackMatchedDirectives(node, directives);
        node.references.forEach((ref) => {
          let dirTarget = null;
          if (ref.value.trim() === "") {
            dirTarget = directives.find((dir) => dir.isComponent) || null;
          } else {
            dirTarget = directives.find((dir) => dir.exportAs !== null && dir.exportAs.some((value) => value === ref.value)) || null;
            if (dirTarget === null) {
              return;
            }
          }
          if (dirTarget !== null) {
            this.references.set(ref, { directive: dirTarget, node });
          } else {
            this.references.set(ref, node);
          }
        });
        const setAttributeBinding = (attribute2, ioType) => {
          const dir = directives.find((dir2) => dir2[ioType].hasBindingPropertyName(attribute2.name));
          const binding = dir !== void 0 ? dir : node;
          this.bindings.set(attribute2, binding);
        };
        node.inputs.forEach((input2) => setAttributeBinding(input2, "inputs"));
        node.attributes.forEach((attr) => setAttributeBinding(attr, "inputs"));
        if (node instanceof Template) {
          node.templateAttrs.forEach((attr) => setAttributeBinding(attr, "inputs"));
        }
        node.outputs.forEach((output2) => setAttributeBinding(output2, "outputs"));
      }
      // Unused visitors.
      visitVariable(variable2) {
      }
      visitReference(reference2) {
      }
      visitTextAttribute(attribute2) {
      }
      visitBoundAttribute(attribute2) {
      }
      visitBoundEvent(attribute2) {
      }
      visitBoundAttributeOrEvent(node) {
      }
      visitText(text2) {
      }
      visitBoundText(text2) {
      }
      visitIcu(icu) {
      }
      visitDeferredTrigger(trigger) {
      }
      visitUnknownBlock(block) {
      }
      visitLetDeclaration(decl) {
      }
    };
    TemplateBinder = class _TemplateBinder extends CombinedRecursiveAstVisitor {
      bindings;
      symbols;
      usedPipes;
      eagerPipes;
      deferBlocks;
      nestingLevel;
      scope;
      rootNode;
      level;
      visitNode = (node) => node.visit(this);
      constructor(bindings, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, rootNode, level) {
        super();
        this.bindings = bindings;
        this.symbols = symbols;
        this.usedPipes = usedPipes;
        this.eagerPipes = eagerPipes;
        this.deferBlocks = deferBlocks;
        this.nestingLevel = nestingLevel;
        this.scope = scope;
        this.rootNode = rootNode;
        this.level = level;
      }
      /**
       * Process a template and extract metadata about expressions and symbols within.
       *
       * @param nodeOrNodes the nodes of the template to process
       * @param scope the `Scope` of the template being processed.
       * @returns three maps which contain metadata about the template: `expressions` which interprets
       * special `AST` nodes in expressions as pointing to references or variables declared within the
       * template, `symbols` which maps those variables and references to the nested `Template` which
       * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
       * nesting level (how many levels deep within the template structure the `Template` is), starting
       * at 1.
       */
      static applyWithScope(nodeOrNodes, scope, expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks) {
        const template2 = nodeOrNodes instanceof Template ? nodeOrNodes : null;
        const binder = new _TemplateBinder(expressions, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template2, 0);
        binder.ingest(nodeOrNodes);
      }
      ingest(nodeOrNodes) {
        if (nodeOrNodes instanceof Template) {
          nodeOrNodes.variables.forEach(this.visitNode);
          nodeOrNodes.children.forEach(this.visitNode);
          this.nestingLevel.set(nodeOrNodes, this.level);
        } else if (nodeOrNodes instanceof IfBlockBranch) {
          if (nodeOrNodes.expressionAlias !== null) {
            this.visitNode(nodeOrNodes.expressionAlias);
          }
          nodeOrNodes.children.forEach(this.visitNode);
          this.nestingLevel.set(nodeOrNodes, this.level);
        } else if (nodeOrNodes instanceof ForLoopBlock) {
          this.visitNode(nodeOrNodes.item);
          nodeOrNodes.contextVariables.forEach((v) => this.visitNode(v));
          nodeOrNodes.trackBy.visit(this);
          nodeOrNodes.children.forEach(this.visitNode);
          this.nestingLevel.set(nodeOrNodes, this.level);
        } else if (nodeOrNodes instanceof DeferredBlock) {
          if (this.scope.rootNode !== nodeOrNodes) {
            throw new Error(`Assertion error: resolved incorrect scope for deferred block ${nodeOrNodes}`);
          }
          this.deferBlocks.push([nodeOrNodes, this.scope]);
          nodeOrNodes.children.forEach((node) => node.visit(this));
          this.nestingLevel.set(nodeOrNodes, this.level);
        } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading || nodeOrNodes instanceof Content) {
          nodeOrNodes.children.forEach((node) => node.visit(this));
          this.nestingLevel.set(nodeOrNodes, this.level);
        } else if (nodeOrNodes instanceof HostElement) {
          this.nestingLevel.set(nodeOrNodes, 0);
        } else {
          nodeOrNodes.forEach(this.visitNode);
        }
      }
      visitTemplate(template2) {
        template2.inputs.forEach(this.visitNode);
        template2.outputs.forEach(this.visitNode);
        template2.directives.forEach(this.visitNode);
        template2.templateAttrs.forEach(this.visitNode);
        template2.references.forEach(this.visitNode);
        this.ingestScopedNode(template2);
      }
      visitVariable(variable2) {
        if (this.rootNode !== null) {
          this.symbols.set(variable2, this.rootNode);
        }
      }
      visitReference(reference2) {
        if (this.rootNode !== null) {
          this.symbols.set(reference2, this.rootNode);
        }
      }
      visitDeferredBlock(deferred) {
        this.ingestScopedNode(deferred);
        deferred.triggers.when?.value.visit(this);
        deferred.prefetchTriggers.when?.value.visit(this);
        deferred.hydrateTriggers.when?.value.visit(this);
        deferred.hydrateTriggers.never?.visit(this);
        deferred.placeholder && this.visitNode(deferred.placeholder);
        deferred.loading && this.visitNode(deferred.loading);
        deferred.error && this.visitNode(deferred.error);
      }
      visitDeferredBlockPlaceholder(block) {
        this.ingestScopedNode(block);
      }
      visitDeferredBlockError(block) {
        this.ingestScopedNode(block);
      }
      visitDeferredBlockLoading(block) {
        this.ingestScopedNode(block);
      }
      visitSwitchBlockCase(block) {
        block.expression?.visit(this);
        this.ingestScopedNode(block);
      }
      visitForLoopBlock(block) {
        block.expression.visit(this);
        this.ingestScopedNode(block);
        block.empty?.visit(this);
      }
      visitForLoopBlockEmpty(block) {
        this.ingestScopedNode(block);
      }
      visitIfBlockBranch(block) {
        block.expression?.visit(this);
        this.ingestScopedNode(block);
      }
      visitContent(content) {
        this.ingestScopedNode(content);
      }
      visitLetDeclaration(decl) {
        super.visitLetDeclaration(decl);
        if (this.rootNode !== null) {
          this.symbols.set(decl, this.rootNode);
        }
      }
      visitPipe(ast, context2) {
        this.usedPipes.add(ast.name);
        if (!this.scope.isDeferred) {
          this.eagerPipes.add(ast.name);
        }
        return super.visitPipe(ast, context2);
      }
      // These five types of AST expressions can refer to expression roots, which could be variables
      // or references in the current scope.
      visitPropertyRead(ast, context2) {
        this.maybeMap(ast, ast.name);
        return super.visitPropertyRead(ast, context2);
      }
      visitSafePropertyRead(ast, context2) {
        this.maybeMap(ast, ast.name);
        return super.visitSafePropertyRead(ast, context2);
      }
      ingestScopedNode(node) {
        const childScope = this.scope.getChildScope(node);
        const binder = new _TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, node, this.level + 1);
        binder.ingest(node);
      }
      maybeMap(ast, name) {
        if (!(ast.receiver instanceof ImplicitReceiver) || ast.receiver instanceof ThisReceiver) {
          return;
        }
        const target = this.scope.lookup(name);
        if (target !== null) {
          this.bindings.set(ast, target);
        }
      }
    };
    R3BoundTarget = class {
      target;
      directives;
      eagerDirectives;
      missingDirectives;
      bindings;
      references;
      exprTargets;
      symbols;
      nestingLevel;
      scopedNodeEntities;
      usedPipes;
      eagerPipes;
      /** Deferred blocks, ordered as they appear in the template. */
      deferredBlocks;
      /** Map of deferred blocks to their scope. */
      deferredScopes;
      constructor(target, directives, eagerDirectives, missingDirectives, bindings, references, exprTargets, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, rawDeferred) {
        this.target = target;
        this.directives = directives;
        this.eagerDirectives = eagerDirectives;
        this.missingDirectives = missingDirectives;
        this.bindings = bindings;
        this.references = references;
        this.exprTargets = exprTargets;
        this.symbols = symbols;
        this.nestingLevel = nestingLevel;
        this.scopedNodeEntities = scopedNodeEntities;
        this.usedPipes = usedPipes;
        this.eagerPipes = eagerPipes;
        this.deferredBlocks = rawDeferred.map((current) => current[0]);
        this.deferredScopes = new Map(rawDeferred);
      }
      getEntitiesInScope(node) {
        return this.scopedNodeEntities.get(node) ?? /* @__PURE__ */ new Set();
      }
      getDirectivesOfNode(node) {
        return this.directives.get(node) || null;
      }
      getReferenceTarget(ref) {
        return this.references.get(ref) || null;
      }
      getConsumerOfBinding(binding) {
        return this.bindings.get(binding) || null;
      }
      getExpressionTarget(expr) {
        return this.exprTargets.get(expr) || null;
      }
      getDefinitionNodeOfSymbol(symbol) {
        return this.symbols.get(symbol) || null;
      }
      getNestingLevel(node) {
        return this.nestingLevel.get(node) || 0;
      }
      getUsedDirectives() {
        const set2 = /* @__PURE__ */ new Set();
        this.directives.forEach((dirs) => dirs.forEach((dir) => set2.add(dir)));
        return Array.from(set2.values());
      }
      getEagerlyUsedDirectives() {
        const set2 = new Set(this.eagerDirectives);
        return Array.from(set2.values());
      }
      getUsedPipes() {
        return Array.from(this.usedPipes);
      }
      getEagerlyUsedPipes() {
        return Array.from(this.eagerPipes);
      }
      getDeferBlocks() {
        return this.deferredBlocks;
      }
      getDeferredTriggerTarget(block, trigger) {
        if (!(trigger instanceof InteractionDeferredTrigger) && !(trigger instanceof ViewportDeferredTrigger) && !(trigger instanceof HoverDeferredTrigger)) {
          return null;
        }
        const name = trigger.reference;
        if (name === null) {
          let target = null;
          if (block.placeholder !== null) {
            for (const child of block.placeholder.children) {
              if (child instanceof Comment$1) {
                continue;
              }
              if (target !== null) {
                return null;
              }
              if (child instanceof Element$1) {
                target = child;
              }
            }
          }
          return target;
        }
        const outsideRef = this.findEntityInScope(block, name);
        if (outsideRef instanceof Reference && this.getDefinitionNodeOfSymbol(outsideRef) !== block) {
          const target = this.getReferenceTarget(outsideRef);
          if (target !== null) {
            return this.referenceTargetToElement(target);
          }
        }
        if (block.placeholder !== null) {
          const refInPlaceholder = this.findEntityInScope(block.placeholder, name);
          const targetInPlaceholder = refInPlaceholder instanceof Reference ? this.getReferenceTarget(refInPlaceholder) : null;
          if (targetInPlaceholder !== null) {
            return this.referenceTargetToElement(targetInPlaceholder);
          }
        }
        return null;
      }
      isDeferred(element2) {
        for (const block of this.deferredBlocks) {
          if (!this.deferredScopes.has(block)) {
            continue;
          }
          const stack = [this.deferredScopes.get(block)];
          while (stack.length > 0) {
            const current = stack.pop();
            if (current.elementLikeInScope.has(element2)) {
              return true;
            }
            stack.push(...current.childScopes.values());
          }
        }
        return false;
      }
      referencedDirectiveExists(name) {
        return !this.missingDirectives.has(name);
      }
      /**
       * Finds an entity with a specific name in a scope.
       * @param rootNode Root node of the scope.
       * @param name Name of the entity.
       */
      findEntityInScope(rootNode, name) {
        const entities = this.getEntitiesInScope(rootNode);
        for (const entity of entities) {
          if (entity.name === name) {
            return entity;
          }
        }
        return null;
      }
      /** Coerces a `ReferenceTarget` to an `Element`, if possible. */
      referenceTargetToElement(target) {
        if (target instanceof Element$1) {
          return target;
        }
        if (target instanceof Template || target.node instanceof Component$1 || target.node instanceof Directive$1) {
          return null;
        }
        return this.referenceTargetToElement(target.node);
      }
    };
    ResourceLoader = class {
    };
    CompilerFacadeImpl = class {
      jitEvaluator;
      FactoryTarget = FactoryTarget2;
      ResourceLoader = ResourceLoader;
      elementSchemaRegistry = new DomElementSchemaRegistry();
      constructor(jitEvaluator = new JitEvaluator()) {
        this.jitEvaluator = jitEvaluator;
      }
      compilePipe(angularCoreEnv2, sourceMapUrl, facade) {
        const metadata = {
          name: facade.name,
          type: wrapReference(facade.type),
          typeArgumentCount: 0,
          deps: null,
          pipeName: facade.pipeName,
          pure: facade.pure,
          isStandalone: facade.isStandalone
        };
        const res = compilePipeFromMetadata(metadata);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compilePipeDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
        const meta = convertDeclarePipeFacadeToMetadata(declaration);
        const res = compilePipeFromMetadata(meta);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compileInjectable(angularCoreEnv2, sourceMapUrl, facade) {
        const { expression, statements } = compileInjectable2(
          {
            name: facade.name,
            type: wrapReference(facade.type),
            typeArgumentCount: facade.typeArgumentCount,
            providedIn: computeProvidedIn(facade.providedIn),
            useClass: convertToProviderExpression(facade, "useClass"),
            useFactory: wrapExpression(facade, "useFactory"),
            useValue: convertToProviderExpression(facade, "useValue"),
            useExisting: convertToProviderExpression(facade, "useExisting"),
            deps: facade.deps?.map(convertR3DependencyMetadata)
          },
          /* resolveForwardRefs */
          true
        );
        return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, statements);
      }
      compileInjectableDeclaration(angularCoreEnv2, sourceMapUrl, facade) {
        const { expression, statements } = compileInjectable2(
          {
            name: facade.type.name,
            type: wrapReference(facade.type),
            typeArgumentCount: 0,
            providedIn: computeProvidedIn(facade.providedIn),
            useClass: convertToProviderExpression(facade, "useClass"),
            useFactory: wrapExpression(facade, "useFactory"),
            useValue: convertToProviderExpression(facade, "useValue"),
            useExisting: convertToProviderExpression(facade, "useExisting"),
            deps: facade.deps?.map(convertR3DeclareDependencyMetadata)
          },
          /* resolveForwardRefs */
          true
        );
        return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, statements);
      }
      compileInjector(angularCoreEnv2, sourceMapUrl, facade) {
        const meta = {
          name: facade.name,
          type: wrapReference(facade.type),
          providers: facade.providers && facade.providers.length > 0 ? new WrappedNodeExpr(facade.providers) : null,
          imports: facade.imports.map((i) => new WrappedNodeExpr(i))
        };
        const res = compileInjector(meta);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compileInjectorDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
        const meta = convertDeclareInjectorFacadeToMetadata(declaration);
        const res = compileInjector(meta);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compileNgModule(angularCoreEnv2, sourceMapUrl, facade) {
        const meta = {
          kind: R3NgModuleMetadataKind.Global,
          type: wrapReference(facade.type),
          bootstrap: facade.bootstrap.map(wrapReference),
          declarations: facade.declarations.map(wrapReference),
          publicDeclarationTypes: null,
          // only needed for types in AOT
          imports: facade.imports.map(wrapReference),
          includeImportTypes: true,
          exports: facade.exports.map(wrapReference),
          selectorScopeMode: R3SelectorScopeMode.Inline,
          containsForwardDecls: false,
          schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,
          id: facade.id ? new WrappedNodeExpr(facade.id) : null
        };
        const res = compileNgModule2(meta);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compileNgModuleDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
        const expression = compileNgModuleDeclarationExpression(declaration);
        return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, []);
      }
      compileDirective(angularCoreEnv2, sourceMapUrl, facade) {
        const meta = convertDirectiveFacadeToMetadata(facade);
        return this.compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta);
      }
      compileDirectiveDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
        const typeSourceSpan = this.createParseSourceSpan("Directive", declaration.type.name, sourceMapUrl);
        const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);
        return this.compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta);
      }
      compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta) {
        const constantPool = new ConstantPool();
        const bindingParser = makeBindingParser();
        const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, constantPool.statements);
      }
      compileComponent(angularCoreEnv2, sourceMapUrl, facade) {
        const { template: template2, interpolation, defer: defer3 } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation, void 0);
        const meta = __spreadProps(__spreadValues(__spreadValues({}, facade), convertDirectiveFacadeToMetadata(facade)), {
          selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),
          template: template2,
          declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),
          declarationListEmitMode: 0,
          defer: defer3,
          styles: [...facade.styles, ...template2.styles],
          encapsulation: facade.encapsulation,
          interpolation,
          changeDetection: facade.changeDetection ?? null,
          animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,
          viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,
          relativeContextFilePath: "",
          i18nUseExternalIds: true,
          relativeTemplatePath: null
        });
        const jitExpressionSourceMap = `ng:///${facade.name}.js`;
        return this.compileComponentFromMeta(angularCoreEnv2, jitExpressionSourceMap, meta);
      }
      compileComponentDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
        const typeSourceSpan = this.createParseSourceSpan("Component", declaration.type.name, sourceMapUrl);
        const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);
        return this.compileComponentFromMeta(angularCoreEnv2, sourceMapUrl, meta);
      }
      compileComponentFromMeta(angularCoreEnv2, sourceMapUrl, meta) {
        const constantPool = new ConstantPool();
        const bindingParser = makeBindingParser(meta.interpolation);
        const res = compileComponentFromMetadata(meta, constantPool, bindingParser);
        return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, constantPool.statements);
      }
      compileFactory(angularCoreEnv2, sourceMapUrl, meta) {
        const factoryRes = compileFactoryFunction({
          name: meta.name,
          type: wrapReference(meta.type),
          typeArgumentCount: meta.typeArgumentCount,
          deps: convertR3DependencyMetadataArray(meta.deps),
          target: meta.target
        });
        return this.jitExpression(factoryRes.expression, angularCoreEnv2, sourceMapUrl, factoryRes.statements);
      }
      compileFactoryDeclaration(angularCoreEnv2, sourceMapUrl, meta) {
        const factoryRes = compileFactoryFunction({
          name: meta.type.name,
          type: wrapReference(meta.type),
          typeArgumentCount: 0,
          deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,
          target: meta.target
        });
        return this.jitExpression(factoryRes.expression, angularCoreEnv2, sourceMapUrl, factoryRes.statements);
      }
      createParseSourceSpan(kind, typeName, sourceUrl) {
        return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
      }
      /**
       * JIT compiles an expression and returns the result of executing that expression.
       *
       * @param def the definition which will be compiled and executed to get the value to patch
       * @param context an object map of @angular/core symbol names to symbols which will be available
       * in the context of the compiled expression
       * @param sourceUrl a URL to use for the source map of the compiled expression
       * @param preStatements a collection of statements that should be evaluated before the expression.
       */
      jitExpression(def, context2, sourceUrl, preStatements) {
        const statements = [
          ...preStatements,
          new DeclareVarStmt("$def", def, void 0, StmtModifier.Exported)
        ];
        const res = this.jitEvaluator.evaluateStatements(
          sourceUrl,
          statements,
          new R3JitReflector(context2),
          /* enableSourceMaps */
          true
        );
        return res["$def"];
      }
    };
    (function(_VisitorMode2) {
      _VisitorMode2[_VisitorMode2["Extract"] = 0] = "Extract";
      _VisitorMode2[_VisitorMode2["Merge"] = 1] = "Merge";
    })(_VisitorMode || (_VisitorMode = {}));
    XmlTagDefinition = class {
      closedByParent = false;
      implicitNamespacePrefix = null;
      isVoid = false;
      ignoreFirstLf = false;
      canSelfClose = true;
      preventNamespaceInheritance = false;
      requireExtraParent(currentParent) {
        return false;
      }
      isClosedByChild(name) {
        return false;
      }
      getContentType() {
        return TagContentType.PARSABLE_DATA;
      }
    };
    _TAG_DEFINITION = new XmlTagDefinition();
    VERSION2 = new Version2("20.1.4");
    publishFacade(_global2);
  }
});

// node_modules/@angular/core/fesm2022/testing.mjs
function hasStateTemplate(state, block) {
  switch (state) {
    case DeferBlockState.Placeholder:
      return block.tDetails.placeholderTmplIndex !== null;
    case DeferBlockState.Loading:
      return block.tDetails.loadingTmplIndex !== null;
    case DeferBlockState.Error:
      return block.tDetails.errorTmplIndex !== null;
    case DeferBlockState.Complete:
      return true;
    default:
      return false;
  }
}
function getDeferBlockStateNameFromEnum(state) {
  switch (state) {
    case DeferBlockState.Placeholder:
      return "Placeholder";
    case DeferBlockState.Loading:
      return "Loading";
    case DeferBlockState.Error:
      return "Error";
    default:
      return "Main";
  }
}
function getFakeAsyncTestModule() {
  return _Zone && _Zone[_Zone.__symbol__("fakeAsyncTest")];
}
function resetFakeAsyncZoneIfExists() {
  if (getFakeAsyncTestModule() && Zone["ProxyZoneSpec"]?.isLoaded()) {
    getFakeAsyncTestModule().resetFakeAsyncZone();
  }
}
function removeMetadata(metadata, remove2, references) {
  const removeObjects = /* @__PURE__ */ new Set();
  for (const prop in remove2) {
    const removeValue = remove2[prop];
    if (Array.isArray(removeValue)) {
      removeValue.forEach((value) => {
        removeObjects.add(_propHashKey(prop, value, references));
      });
    } else {
      removeObjects.add(_propHashKey(prop, removeValue, references));
    }
  }
  for (const prop in metadata) {
    const propValue = metadata[prop];
    if (Array.isArray(propValue)) {
      metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));
    } else {
      if (removeObjects.has(_propHashKey(prop, propValue, references))) {
        metadata[prop] = void 0;
      }
    }
  }
}
function addMetadata(metadata, add) {
  for (const prop in add) {
    const addValue = add[prop];
    const propValue = metadata[prop];
    if (propValue != null && Array.isArray(propValue)) {
      metadata[prop] = propValue.concat(addValue);
    } else {
      metadata[prop] = addValue;
    }
  }
}
function setMetadata(metadata, set2) {
  for (const prop in set2) {
    metadata[prop] = set2[prop];
  }
}
function _propHashKey(propName, propValue, references) {
  let nextObjectId = 0;
  const objectIds = /* @__PURE__ */ new Map();
  const replacer = (key, value) => {
    if (value !== null && typeof value === "object") {
      if (objectIds.has(value)) {
        return objectIds.get(value);
      }
      objectIds.set(value, `\u0275obj#${nextObjectId++}`);
      return value;
    } else if (typeof value === "function") {
      value = _serializeReference(value, references);
    }
    return value;
  };
  return `${propName}:${JSON.stringify(propValue, replacer)}`;
}
function _serializeReference(ref, references) {
  let id = references.get(ref);
  if (!id) {
    id = `${stringify(ref)}${_nextReferenceId++}`;
    references.set(ref, id);
  }
  return id;
}
function _valueProps(obj) {
  const props = [];
  Object.keys(obj).forEach((prop) => {
    if (!prop.startsWith("_")) {
      props.push(prop);
    }
  });
  let proto = obj;
  while (proto = Object.getPrototypeOf(proto)) {
    Object.keys(proto).forEach((protoProp) => {
      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);
      if (!protoProp.startsWith("_") && desc && "get" in desc) {
        props.push(protoProp);
      }
    });
  }
  return props;
}
function isTestingModuleOverride(value) {
  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;
}
function assertNoStandaloneComponents(types, resolver, location2) {
  types.forEach((type) => {
    if (!getAsyncClassMetadataFn(type)) {
      const component = resolver.resolve(type);
      if (component && (component.standalone == null || component.standalone)) {
        throw new Error(generateStandaloneInDeclarationsError(type, location2));
      }
    }
  });
}
function initResolvers() {
  return {
    module: new NgModuleResolver(),
    component: new ComponentResolver(),
    directive: new DirectiveResolver(),
    pipe: new PipeResolver()
  };
}
function isStandaloneComponent2(value) {
  const def = getComponentDef2(value);
  return !!def?.standalone;
}
function getComponentDef2(value) {
  return value.\u0275cmp ?? null;
}
function hasNgModuleDef(value) {
  return value.hasOwnProperty("\u0275mod");
}
function isNgModule2(value) {
  return hasNgModuleDef(value);
}
function maybeUnwrapFn2(maybeFn) {
  return maybeFn instanceof Function ? maybeFn() : maybeFn;
}
function flatten2(values) {
  const out = [];
  values.forEach((value) => {
    if (Array.isArray(value)) {
      out.push(...flatten2(value));
    } else {
      out.push(value);
    }
  });
  return out;
}
function identityFn2(value) {
  return value;
}
function flattenProviders(providers, mapFn = identityFn2) {
  const out = [];
  for (let provider of providers) {
    if (isEnvironmentProviders(provider)) {
      provider = provider.\u0275providers;
    }
    if (Array.isArray(provider)) {
      out.push(...flattenProviders(provider, mapFn));
    } else {
      out.push(mapFn(provider));
    }
  }
  return out;
}
function getProviderField(provider, field) {
  return provider && typeof provider === "object" && provider[field];
}
function getProviderToken(provider) {
  return getProviderField(provider, "provide") || provider;
}
function isModuleWithProviders2(value) {
  return value.hasOwnProperty("ngModule");
}
function forEachRight(values, fn2) {
  for (let idx = values.length - 1; idx >= 0; idx--) {
    fn2(values[idx], idx);
  }
}
function invalidTypeError(name, expectedType) {
  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);
}
function getTestBed() {
  return TestBedImpl.INSTANCE;
}
function dispatchNavigateEvent({ cancelable, canIntercept, userInitiated, hashChange, navigationType, destination, info, sameDocument, result }) {
  const { navigation } = result;
  const eventAbortController = new AbortController();
  const event = new Event("navigate", { bubbles: false, cancelable });
  event.navigationType = navigationType;
  event.destination = destination;
  event.canIntercept = canIntercept;
  event.userInitiated = userInitiated;
  event.hashChange = hashChange;
  event.signal = eventAbortController.signal;
  event.abortController = eventAbortController;
  event.info = info;
  event.focusResetBehavior = null;
  event.scrollBehavior = null;
  event.interceptionState = "none";
  event.downloadRequest = null;
  event.formData = null;
  event.result = result;
  event.sameDocument = sameDocument;
  let precommitHandlers = [];
  let handlers = [];
  event.intercept = function(options) {
    if (!this.canIntercept) {
      throw new DOMException(`Cannot intercept when canIntercept is 'false'`, "SecurityError");
    }
    this.interceptionState = "intercepted";
    event.sameDocument = true;
    const precommitHandler = options?.precommitHandler;
    if (precommitHandler) {
      if (!this.cancelable) {
        throw new DOMException(`Cannot use precommitHandler when cancelable is 'false'`, "InvalidStateError");
      }
      precommitHandlers.push(precommitHandler);
    }
    if (event.interceptionState !== "none" && event.interceptionState !== "intercepted") {
      throw new Error('Event interceptionState should be "none" or "intercepted"');
    }
    event.interceptionState = "intercepted";
    const handler = options?.handler;
    if (handler) {
      handlers.push(handler);
    }
    event.focusResetBehavior = options?.focusReset ?? event.focusResetBehavior;
    event.scrollBehavior = options?.scroll ?? event.scrollBehavior;
  };
  event.scroll = function() {
    if (event.interceptionState !== "committed") {
      throw new DOMException(`Failed to execute 'scroll' on 'NavigateEvent': scroll() must be called after commit() and interception options must specify manual scroll.`, "InvalidStateError");
    }
    processScrollBehavior(event);
  };
  function redirect(url, options = {}) {
    if (event.interceptionState === "none") {
      throw new Error("cannot redirect when event is not intercepted");
    }
    if (event.interceptionState !== "intercepted") {
      throw new DOMException(`cannot redirect when event is not in 'intercepted' state`, "InvalidStateError");
    }
    if (event.navigationType !== "push" && event.navigationType !== "replace") {
      throw new DOMException(`cannot redirect when navigationType is not 'push' or 'replace`, "InvalidStateError");
    }
    const destinationUrl = new URL(url, navigation.currentEntry.url);
    if (options.history === "push" || options.history === "replace") {
      event.navigationType = options.history;
    }
    if (options.hasOwnProperty("state")) {
      event.destination.state = options.state;
    }
    event.destination.url = destinationUrl.href;
    if (options.hasOwnProperty("info")) {
      event.info = options.info;
    }
  }
  function commit() {
    if (result.signal.aborted) {
      return;
    }
    navigation.transition?.committedResolve();
    if (event.interceptionState === "intercepted") {
      event.interceptionState = "committed";
      switch (event.navigationType) {
        case "push":
        case "replace": {
          navigation.urlAndHistoryUpdateSteps(event);
          break;
        }
        case "reload": {
          navigation.updateNavigationEntriesForSameDocumentNavigation(event);
          break;
        }
        case "traverse": {
          navigation.userAgentTraverse(event);
          break;
        }
      }
    }
    const promisesList = handlers.map((handler) => handler());
    if (promisesList.length === 0) {
      promisesList.push(Promise.resolve());
    }
    Promise.all(promisesList).then(() => {
      if (result.signal.aborted) {
        return;
      }
      if (event !== navigation.navigateEvent) {
        if (!result.signal.aborted && result.committedTo) {
          result.finishedReject(new DOMException("Navigation superseded before handler completion", "AbortError"));
        }
        return;
      }
      navigation.navigateEvent = null;
      finishNavigationEvent(event, true);
      const navigatesuccessEvent = new Event("navigatesuccess", {
        bubbles: false,
        cancelable: false
      });
      navigation.eventTarget.dispatchEvent(navigatesuccessEvent);
      result.finishedResolve();
      navigation.transition?.finishedResolve();
      navigation.transition = null;
    }).catch((reason) => {
      if (!event.abortController.signal.aborted) {
        event.cancel(reason);
      }
    });
  }
  event.cancel = function(reason) {
    if (result.signal.aborted) {
      return;
    }
    this.abortController.abort(reason);
    const isCurrentGlobalNavigationEvent = this === navigation.navigateEvent;
    if (isCurrentGlobalNavigationEvent) {
      navigation.navigateEvent = null;
    }
    if (this.interceptionState !== "intercepted" && this.interceptionState !== "finished") {
      finishNavigationEvent(this, false);
    } else if (this.interceptionState === "intercepted") {
      this.interceptionState = "finished";
    }
    const navigateerrorEvent = new Event("navigateerror", {
      bubbles: false,
      cancelable
    });
    navigateerrorEvent.error = reason;
    navigation.eventTarget.dispatchEvent(navigateerrorEvent);
    if (result.committedTo === null && !result.signal.aborted) {
      result.committedReject(reason);
    }
    result.finishedReject(reason);
    const transition = navigation.transition;
    transition?.committedReject(reason);
    transition?.finishedReject(reason);
    navigation.transition = null;
  };
  function dispatch() {
    navigation.navigateEvent = event;
    const dispatchResult = navigation.eventTarget.dispatchEvent(event);
    if (event.interceptionState === "intercepted") {
      if (!navigation.currentEntry) {
        event.cancel(new DOMException("Cannot create transition without a currentEntry for intercepted navigation.", "InvalidStateError"));
        return;
      }
      const transition = new InternalNavigationTransition(navigation.currentEntry, navigationType);
      navigation.transition = transition;
      transition.finished.catch(() => {
      });
      transition.committed.catch(() => {
      });
    }
    if (!dispatchResult && event.cancelable) {
      if (!event.abortController.signal.aborted) {
        event.cancel(new DOMException("Navigation prevented by event.preventDefault()", "AbortError"));
      }
    } else {
      if (precommitHandlers.length === 0) {
        commit();
      } else {
        const precommitController = { redirect };
        const precommitPromisesList = precommitHandlers.map((handler) => {
          let p;
          try {
            p = handler(precommitController);
          } catch (e) {
            p = Promise.reject(e);
          }
          p.catch(() => {
          });
          return p;
        });
        Promise.all(precommitPromisesList).then(() => commit()).catch((reason) => {
          if (event.abortController.signal.aborted) {
            return;
          }
          if (navigation.transition) {
            navigation.transition.committedReject(reason);
          }
          event.cancel(reason);
        });
      }
    }
  }
  dispatch();
  return event.interceptionState === "none";
}
function finishNavigationEvent(event, didFulfill) {
  if (event.interceptionState === "finished") {
    throw new Error("Attempting to finish navigation event that was already finished");
  }
  if (event.interceptionState === "intercepted") {
    if (didFulfill === true) {
      throw new Error("didFulfill should be false");
    }
    event.interceptionState = "finished";
    return;
  }
  if (event.interceptionState === "none") {
    return;
  }
  potentiallyResetFocus(event);
  if (didFulfill) {
    potentiallyResetScroll(event);
  }
  event.interceptionState = "finished";
}
function potentiallyResetFocus(event) {
  if (event.interceptionState !== "committed" && event.interceptionState !== "scrolled") {
    throw new Error("cannot reset focus if navigation event is not committed or scrolled");
  }
  if (event.focusResetBehavior === "manual") {
    return;
  }
}
function potentiallyResetScroll(event) {
  if (event.interceptionState !== "committed" && event.interceptionState !== "scrolled") {
    throw new Error("cannot reset scroll if navigation event is not committed or scrolled");
  }
  if (event.interceptionState === "scrolled" || event.scrollBehavior === "manual") {
    return;
  }
  processScrollBehavior(event);
}
function processScrollBehavior(event) {
  if (event.interceptionState !== "committed") {
    throw new Error("invalid event interception state when processing scroll behavior");
  }
  event.interceptionState = "scrolled";
}
function createFakeNavigationCurrentEntryChangeEvent({ from: from2, navigationType }) {
  const event = new Event("currententrychange", {
    bubbles: false,
    cancelable: false
  });
  event.from = from2;
  event.navigationType = navigationType;
  return event;
}
function createPopStateEvent({ state }) {
  const event = new Event("popstate", {
    bubbles: false,
    cancelable: false
  });
  event.state = state;
  return event;
}
function createHashChangeEvent(newURL, oldURL) {
  const event = new Event("hashchange", {
    bubbles: false,
    cancelable: false
  });
  event.newURL = newURL;
  event.oldURL = oldURL;
  return event;
}
function isHashChange(from2, to) {
  return to.hash !== from2.hash && to.hostname === from2.hostname && to.pathname === from2.pathname && to.search === from2.search;
}
function getCleanupHook(expectedTeardownValue) {
  return () => {
    const testBed = TestBedImpl.INSTANCE;
    if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {
      testBed.resetTestingModule();
      resetFakeAsyncZoneIfExists();
    }
  };
}
var RETHROW_APPLICATION_ERRORS_DEFAULT, TestBedApplicationErrorHandler, DeferBlockFixture, TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT, THROW_ON_UNKNOWN_ELEMENTS_DEFAULT, THROW_ON_UNKNOWN_PROPERTIES_DEFAULT, DEFER_BLOCK_DEFAULT_BEHAVIOR, TestComponentRenderer, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, ComponentFixture, _Zone, _nextReferenceId, MetadataOverrider, reflection, OverrideResolver, DirectiveResolver, ComponentResolver, PipeResolver, NgModuleResolver, TestingModuleOverride, TestBedCompiler, R3TestCompiler, _nextRootElementId, TestBedImpl, TestBed, FakeNavigation, FakeNavigationHistoryEntry, FakeNavigationDestination, InternalNavigationTransition, InternalNavigationResult, Log;
var init_testing = __esm({
  "node_modules/@angular/core/fesm2022/testing.mjs"() {
    "use strict";
    init_core();
    init_debug_node();
    init_esm();
    init_root_effect_scheduler();
    init_compiler();
    RETHROW_APPLICATION_ERRORS_DEFAULT = true;
    TestBedApplicationErrorHandler = class _TestBedApplicationErrorHandler {
      zone = inject2(NgZone);
      injector = inject2(EnvironmentInjector);
      userErrorHandler;
      whenStableRejectFunctions = /* @__PURE__ */ new Set();
      handleError(e) {
        try {
          this.zone.runOutsideAngular(() => {
            this.userErrorHandler ??= this.injector.get(ErrorHandler);
            this.userErrorHandler.handleError(e);
          });
        } catch (userError) {
          e = userError;
        }
        if (this.whenStableRejectFunctions.size > 0) {
          for (const fn2 of this.whenStableRejectFunctions.values()) {
            fn2(e);
          }
          this.whenStableRejectFunctions.clear();
        } else {
          throw e;
        }
      }
      static \u0275fac = function TestBedApplicationErrorHandler_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _TestBedApplicationErrorHandler)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TestBedApplicationErrorHandler, factory: _TestBedApplicationErrorHandler.\u0275fac });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestBedApplicationErrorHandler, [{
        type: Injectable
      }], null, null);
    })();
    DeferBlockFixture = class _DeferBlockFixture {
      block;
      componentFixture;
      /** @docs-private */
      constructor(block, componentFixture) {
        this.block = block;
        this.componentFixture = componentFixture;
      }
      /**
       * Renders the specified state of the defer fixture.
       * @param state the defer state to render
       */
      render(state) {
        return __async(this, null, function* () {
          if (!hasStateTemplate(state, this.block)) {
            const stateAsString = getDeferBlockStateNameFromEnum(state);
            throw new Error(`Tried to render this defer block in the \`${stateAsString}\` state, but there was no @${stateAsString.toLowerCase()} block defined in a template.`);
          }
          if (state === DeferBlockState.Complete) {
            yield triggerResourceLoading(this.block.tDetails, this.block.lView, this.block.tNode);
          }
          const skipTimerScheduling = true;
          renderDeferBlockState(state, this.block.tNode, this.block.lContainer, skipTimerScheduling);
          this.componentFixture.detectChanges();
        });
      }
      /**
       * Retrieves all nested child defer block fixtures
       * in a given defer block.
       */
      getDeferBlocks() {
        const deferBlocks = [];
        const deferBlockFixtures = [];
        if (this.block.lContainer.length >= CONTAINER_HEADER_OFFSET) {
          const lView = this.block.lContainer[CONTAINER_HEADER_OFFSET];
          getDeferBlocks$1(lView, deferBlocks);
          for (const block of deferBlocks) {
            deferBlockFixtures.push(new _DeferBlockFixture(block, this.componentFixture));
          }
        }
        return Promise.resolve(deferBlockFixtures);
      }
    };
    TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;
    THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;
    THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;
    DEFER_BLOCK_DEFAULT_BEHAVIOR = DeferBlockBehavior.Playthrough;
    TestComponentRenderer = class {
      insertRootElement(rootElementId) {
      }
      removeAllRootElements() {
      }
    };
    ComponentFixtureAutoDetect = new InjectionToken("ComponentFixtureAutoDetect");
    ComponentFixtureNoNgZone = new InjectionToken("ComponentFixtureNoNgZone");
    ComponentFixture = class {
      componentRef;
      /**
       * The DebugElement associated with the root element of this component.
       */
      debugElement;
      /**
       * The instance of the root component class.
       */
      componentInstance;
      /**
       * The native element at the root of the component.
       */
      nativeElement;
      /**
       * The ElementRef for the element at the root of the component.
       */
      elementRef;
      /**
       * The ChangeDetectorRef for the component
       */
      changeDetectorRef;
      _renderer;
      _isDestroyed = false;
      /** @internal */
      _noZoneOptionIsSet = inject2(ComponentFixtureNoNgZone, { optional: true });
      /** @internal */
      _ngZone = this._noZoneOptionIsSet ? new NoopNgZone() : inject2(NgZone);
      // Inject ApplicationRef to ensure NgZone stableness causes after render hooks to run
      // This will likely happen as a result of fixture.detectChanges because it calls ngZone.run
      // This is a crazy way of doing things but hey, it's the world we live in.
      // The zoneless scheduler should instead do this more imperatively by attaching
      // the `ComponentRef` to `ApplicationRef` and calling `appRef.tick` as the `detectChanges`
      // behavior.
      /** @internal */
      _appRef = inject2(ApplicationRef);
      _testAppRef = this._appRef;
      pendingTasks = inject2(PendingTasksInternal);
      appErrorHandler = inject2(TestBedApplicationErrorHandler);
      zonelessEnabled = inject2(ZONELESS_ENABLED);
      scheduler = inject2(ChangeDetectionScheduler);
      rootEffectScheduler = inject2(EffectScheduler);
      autoDetectDefault = this.zonelessEnabled ? true : false;
      autoDetect = inject2(ComponentFixtureAutoDetect, { optional: true }) ?? this.autoDetectDefault;
      subscriptions = new Subscription();
      // TODO(atscott): Remove this from public API
      ngZone = this._noZoneOptionIsSet ? null : this._ngZone;
      /** @docs-private */
      constructor(componentRef) {
        this.componentRef = componentRef;
        this.changeDetectorRef = componentRef.changeDetectorRef;
        this.elementRef = componentRef.location;
        this.debugElement = getDebugNode(this.elementRef.nativeElement);
        this.componentInstance = componentRef.instance;
        this.nativeElement = this.elementRef.nativeElement;
        this.componentRef = componentRef;
        this._testAppRef.allTestViews.add(this.componentRef.hostView);
        if (this.autoDetect) {
          this._testAppRef.autoDetectTestViews.add(this.componentRef.hostView);
          this.scheduler?.notify(
            8
            /* ɵNotificationSource.ViewAttached */
          );
          this.scheduler?.notify(
            0
            /* ɵNotificationSource.MarkAncestorsForTraversal */
          );
        }
        this.componentRef.hostView.onDestroy(() => {
          this._testAppRef.allTestViews.delete(this.componentRef.hostView);
          this._testAppRef.autoDetectTestViews.delete(this.componentRef.hostView);
        });
        this._ngZone.runOutsideAngular(() => {
          this.subscriptions.add(this._ngZone.onError.subscribe({
            next: (error) => {
              if (typeof Zone === "undefined" || Zone.current.get("FakeAsyncTestZoneSpec")) {
                return;
              }
              throw error;
            }
          }));
        });
      }
      /**
       * Trigger a change detection cycle for the component.
       */
      detectChanges(checkNoChanges = true) {
        const originalCheckNoChanges = this.componentRef.changeDetectorRef.checkNoChanges;
        try {
          if (!checkNoChanges) {
            this.componentRef.changeDetectorRef.checkNoChanges = () => {
            };
          }
          if (this.zonelessEnabled) {
            try {
              this._testAppRef.includeAllTestViews = true;
              this._appRef.tick();
            } finally {
              this._testAppRef.includeAllTestViews = false;
            }
          } else {
            this._ngZone.run(() => {
              this.rootEffectScheduler.flush();
              this.changeDetectorRef.detectChanges();
              this.checkNoChanges();
            });
          }
        } finally {
          this.componentRef.changeDetectorRef.checkNoChanges = originalCheckNoChanges;
        }
      }
      /**
       * Do a change detection run to make sure there were no changes.
       */
      checkNoChanges() {
        this.changeDetectorRef.checkNoChanges();
      }
      autoDetectChanges(autoDetect = true) {
        if (!autoDetect && this.zonelessEnabled) {
          throw new Error("Cannot set autoDetect to false with zoneless change detection.");
        }
        if (this._noZoneOptionIsSet && !this.zonelessEnabled) {
          throw new Error("Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set.");
        }
        if (autoDetect) {
          this._testAppRef.autoDetectTestViews.add(this.componentRef.hostView);
        } else {
          this._testAppRef.autoDetectTestViews.delete(this.componentRef.hostView);
        }
        this.autoDetect = autoDetect;
        this.detectChanges();
      }
      /**
       * Return whether the fixture is currently stable or has async tasks that have not been completed
       * yet.
       */
      isStable() {
        return !this.pendingTasks.hasPendingTasks;
      }
      /**
       * Get a promise that resolves when the fixture is stable.
       *
       * This can be used to resume testing after events have triggered asynchronous activity or
       * asynchronous change detection.
       */
      whenStable() {
        if (this.isStable()) {
          return Promise.resolve(false);
        }
        return new Promise((resolve, reject) => {
          this.appErrorHandler.whenStableRejectFunctions.add(reject);
          this._appRef.whenStable().then(() => {
            this.appErrorHandler.whenStableRejectFunctions.delete(reject);
            resolve(true);
          });
        });
      }
      /**
       * Retrieves all defer block fixtures in the component fixture.
       */
      getDeferBlocks() {
        const deferBlocks = [];
        const lView = this.componentRef.hostView["_lView"];
        getDeferBlocks$1(lView, deferBlocks);
        const deferBlockFixtures = [];
        for (const block of deferBlocks) {
          deferBlockFixtures.push(new DeferBlockFixture(block, this));
        }
        return Promise.resolve(deferBlockFixtures);
      }
      _getRenderer() {
        if (this._renderer === void 0) {
          this._renderer = this.componentRef.injector.get(RendererFactory2, null);
        }
        return this._renderer;
      }
      /**
       * Get a promise that resolves when the ui state is stable following animations.
       */
      whenRenderingDone() {
        const renderer = this._getRenderer();
        if (renderer && renderer.whenRenderingDone) {
          return renderer.whenRenderingDone();
        }
        return this.whenStable();
      }
      /**
       * Trigger component destruction.
       */
      destroy() {
        this.subscriptions.unsubscribe();
        this._testAppRef.autoDetectTestViews.delete(this.componentRef.hostView);
        this._testAppRef.allTestViews.delete(this.componentRef.hostView);
        if (!this._isDestroyed) {
          this.componentRef.destroy();
          this._isDestroyed = true;
        }
      }
    };
    _Zone = typeof Zone !== "undefined" ? Zone : null;
    _nextReferenceId = 0;
    MetadataOverrider = class {
      _references = /* @__PURE__ */ new Map();
      /**
       * Creates a new instance for the given metadata class
       * based on an old instance and overrides.
       */
      overrideMetadata(metadataClass, oldMetadata, override) {
        const props = {};
        if (oldMetadata) {
          _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);
        }
        if (override.set) {
          if (override.remove || override.add) {
            throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);
          }
          setMetadata(props, override.set);
        }
        if (override.remove) {
          removeMetadata(props, override.remove, this._references);
        }
        if (override.add) {
          addMetadata(props, override.add);
        }
        return new metadataClass(props);
      }
    };
    reflection = new ReflectionCapabilities();
    OverrideResolver = class {
      overrides = /* @__PURE__ */ new Map();
      resolved = /* @__PURE__ */ new Map();
      addOverride(type, override) {
        const overrides = this.overrides.get(type) || [];
        overrides.push(override);
        this.overrides.set(type, overrides);
        this.resolved.delete(type);
      }
      setOverrides(overrides) {
        this.overrides.clear();
        overrides.forEach(([type, override]) => {
          this.addOverride(type, override);
        });
      }
      getAnnotation(type) {
        const annotations = reflection.annotations(type);
        for (let i = annotations.length - 1; i >= 0; i--) {
          const annotation = annotations[i];
          const isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;
          if (isKnownType) {
            return annotation instanceof this.type ? annotation : null;
          }
        }
        return null;
      }
      resolve(type) {
        let resolved2 = this.resolved.get(type) || null;
        if (!resolved2) {
          resolved2 = this.getAnnotation(type);
          if (resolved2) {
            const overrides = this.overrides.get(type);
            if (overrides) {
              const overrider = new MetadataOverrider();
              overrides.forEach((override) => {
                resolved2 = overrider.overrideMetadata(this.type, resolved2, override);
              });
            }
          }
          this.resolved.set(type, resolved2);
        }
        return resolved2;
      }
    };
    DirectiveResolver = class extends OverrideResolver {
      get type() {
        return Directive;
      }
    };
    ComponentResolver = class extends OverrideResolver {
      get type() {
        return Component;
      }
    };
    PipeResolver = class extends OverrideResolver {
      get type() {
        return Pipe;
      }
    };
    NgModuleResolver = class extends OverrideResolver {
      get type() {
        return NgModule;
      }
    };
    (function(TestingModuleOverride2) {
      TestingModuleOverride2[TestingModuleOverride2["DECLARATION"] = 0] = "DECLARATION";
      TestingModuleOverride2[TestingModuleOverride2["OVERRIDE_TEMPLATE"] = 1] = "OVERRIDE_TEMPLATE";
    })(TestingModuleOverride || (TestingModuleOverride = {}));
    TestBedCompiler = class {
      platform;
      additionalModuleTypes;
      originalComponentResolutionQueue = null;
      // Testing module configuration
      declarations = [];
      imports = [];
      providers = [];
      schemas = [];
      // Queues of components/directives/pipes that should be recompiled.
      pendingComponents = /* @__PURE__ */ new Set();
      pendingDirectives = /* @__PURE__ */ new Set();
      pendingPipes = /* @__PURE__ */ new Set();
      // Set of components with async metadata, i.e. components with `@defer` blocks
      // in their templates.
      componentsWithAsyncMetadata = /* @__PURE__ */ new Set();
      // Keep track of all components and directives, so we can patch Providers onto defs later.
      seenComponents = /* @__PURE__ */ new Set();
      seenDirectives = /* @__PURE__ */ new Set();
      // Keep track of overridden modules, so that we can collect all affected ones in the module tree.
      overriddenModules = /* @__PURE__ */ new Set();
      // Store resolved styles for Components that have template overrides present and `styleUrls`
      // defined at the same time.
      existingComponentStyles = /* @__PURE__ */ new Map();
      resolvers = initResolvers();
      // Map of component type to an NgModule that declares it.
      //
      // There are a couple special cases:
      // - for standalone components, the module scope value is `null`
      // - when a component is declared in `TestBed.configureTestingModule()` call or
      //   a component's template is overridden via `TestBed.overrideTemplateUsingTestingModule()`.
      //   we use a special value from the `TestingModuleOverride` enum.
      componentToModuleScope = /* @__PURE__ */ new Map();
      // Map that keeps initial version of component/directive/pipe defs in case
      // we compile a Type again, thus overriding respective static fields. This is
      // required to make sure we restore defs to their initial states between test runs.
      // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an
      // NgModule), store all of them in a map.
      initialNgDefs = /* @__PURE__ */ new Map();
      // Array that keeps cleanup operations for initial versions of component/directive/pipe/module
      // defs in case TestBed makes changes to the originals.
      defCleanupOps = [];
      _injector = null;
      compilerProviders = null;
      providerOverrides = [];
      rootProviderOverrides = [];
      // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that
      // module's provider list.
      providerOverridesByModule = /* @__PURE__ */ new Map();
      providerOverridesByToken = /* @__PURE__ */ new Map();
      scopesWithOverriddenProviders = /* @__PURE__ */ new Set();
      testModuleType;
      testModuleRef = null;
      deferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;
      rethrowApplicationTickErrors = RETHROW_APPLICATION_ERRORS_DEFAULT;
      constructor(platform, additionalModuleTypes) {
        this.platform = platform;
        this.additionalModuleTypes = additionalModuleTypes;
        class DynamicTestModule {
        }
        this.testModuleType = DynamicTestModule;
      }
      setCompilerProviders(providers) {
        this.compilerProviders = providers;
        this._injector = null;
      }
      configureTestingModule(moduleDef) {
        if (moduleDef.declarations !== void 0) {
          assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '"TestBed.configureTestingModule" call');
          this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);
          this.declarations.push(...moduleDef.declarations);
        }
        if (moduleDef.imports !== void 0) {
          this.queueTypesFromModulesArray(moduleDef.imports);
          this.imports.push(...moduleDef.imports);
        }
        if (moduleDef.providers !== void 0) {
          this.providers.push(...moduleDef.providers);
        }
        if (moduleDef.schemas !== void 0) {
          this.schemas.push(...moduleDef.schemas);
        }
        this.deferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;
        this.rethrowApplicationTickErrors = moduleDef.rethrowApplicationErrors ?? RETHROW_APPLICATION_ERRORS_DEFAULT;
      }
      overrideModule(ngModule, override) {
        depsTracker.clearScopeCacheFor(ngModule);
        this.overriddenModules.add(ngModule);
        this.resolvers.module.addOverride(ngModule, override);
        const metadata = this.resolvers.module.resolve(ngModule);
        if (metadata === null) {
          throw invalidTypeError(ngModule.name, "NgModule");
        }
        this.recompileNgModule(ngModule, metadata);
        this.queueTypesFromModulesArray([ngModule]);
      }
      overrideComponent(component, override) {
        this.verifyNoStandaloneFlagOverrides(component, override);
        this.resolvers.component.addOverride(component, override);
        this.pendingComponents.add(component);
        this.maybeRegisterComponentWithAsyncMetadata(component);
      }
      overrideDirective(directive, override) {
        this.verifyNoStandaloneFlagOverrides(directive, override);
        this.resolvers.directive.addOverride(directive, override);
        this.pendingDirectives.add(directive);
      }
      overridePipe(pipe3, override) {
        this.verifyNoStandaloneFlagOverrides(pipe3, override);
        this.resolvers.pipe.addOverride(pipe3, override);
        this.pendingPipes.add(pipe3);
      }
      verifyNoStandaloneFlagOverrides(type, override) {
        if (override.add?.hasOwnProperty("standalone") || override.set?.hasOwnProperty("standalone") || override.remove?.hasOwnProperty("standalone")) {
          throw new Error(`An override for the ${type.name} class has the \`standalone\` flag. Changing the \`standalone\` flag via TestBed overrides is not supported.`);
        }
      }
      overrideProvider(token, provider) {
        let providerDef;
        if (provider.useFactory !== void 0) {
          providerDef = {
            provide: token,
            useFactory: provider.useFactory,
            deps: provider.deps || [],
            multi: provider.multi
          };
        } else if (provider.useValue !== void 0) {
          providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };
        } else {
          providerDef = { provide: token };
        }
        const injectableDef = typeof token !== "string" ? getInjectableDef(token) : null;
        const providedIn = injectableDef === null ? null : resolveForwardRef(injectableDef.providedIn);
        const overridesBucket = providedIn === "root" ? this.rootProviderOverrides : this.providerOverrides;
        overridesBucket.push(providerDef);
        this.providerOverridesByToken.set(token, providerDef);
        if (injectableDef !== null && providedIn !== null && typeof providedIn !== "string") {
          const existingOverrides = this.providerOverridesByModule.get(providedIn);
          if (existingOverrides !== void 0) {
            existingOverrides.push(providerDef);
          } else {
            this.providerOverridesByModule.set(providedIn, [providerDef]);
          }
        }
      }
      overrideTemplateUsingTestingModule(type, template2) {
        const def = type[NG_COMP_DEF];
        const hasStyleUrls = () => {
          const metadata = this.resolvers.component.resolve(type);
          return !!metadata.styleUrl || !!metadata.styleUrls?.length;
        };
        const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();
        const override = overrideStyleUrls ? { template: template2, styles: [], styleUrls: [], styleUrl: void 0 } : { template: template2 };
        this.overrideComponent(type, { set: override });
        if (overrideStyleUrls && def.styles && def.styles.length > 0) {
          this.existingComponentStyles.set(type, def.styles);
        }
        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);
      }
      resolvePendingComponentsWithAsyncMetadata() {
        return __async(this, null, function* () {
          if (this.componentsWithAsyncMetadata.size === 0)
            return;
          const promises = [];
          for (const component of this.componentsWithAsyncMetadata) {
            const asyncMetadataFn = getAsyncClassMetadataFn(component);
            if (asyncMetadataFn) {
              promises.push(asyncMetadataFn());
            }
          }
          this.componentsWithAsyncMetadata.clear();
          const resolvedDeps = yield Promise.all(promises);
          const flatResolvedDeps = resolvedDeps.flat(2);
          this.queueTypesFromModulesArray(flatResolvedDeps);
          for (const component of flatResolvedDeps) {
            this.applyProviderOverridesInScope(component);
          }
        });
      }
      compileComponents() {
        return __async(this, null, function* () {
          this.clearComponentResolutionQueue();
          yield this.resolvePendingComponentsWithAsyncMetadata();
          assertNoStandaloneComponents(this.declarations, this.resolvers.component, '"TestBed.configureTestingModule" call');
          let needsAsyncResources = this.compileTypesSync();
          if (needsAsyncResources) {
            let resourceLoader;
            let resolver = (url) => {
              if (!resourceLoader) {
                resourceLoader = this.injector.get(ResourceLoader);
              }
              return Promise.resolve(resourceLoader.get(url));
            };
            yield resolveComponentResources(resolver);
          }
        });
      }
      finalize() {
        this.compileTypesSync();
        this.compileTestModule();
        this.applyTransitiveScopes();
        this.applyProviderOverrides();
        this.patchComponentsWithExistingStyles();
        this.componentToModuleScope.clear();
        const parentInjector = this.platform.injector;
        this.testModuleRef = new NgModuleRef2(this.testModuleType, parentInjector, []);
        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();
        const localeId = this.testModuleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
        setLocaleId(localeId);
        return this.testModuleRef;
      }
      /**
       * @internal
       */
      _compileNgModuleSync(moduleType) {
        this.queueTypesFromModulesArray([moduleType]);
        this.compileTypesSync();
        this.applyProviderOverrides();
        this.applyProviderOverridesInScope(moduleType);
        this.applyTransitiveScopes();
      }
      /**
       * @internal
       */
      _compileNgModuleAsync(moduleType) {
        return __async(this, null, function* () {
          this.queueTypesFromModulesArray([moduleType]);
          yield this.compileComponents();
          this.applyProviderOverrides();
          this.applyProviderOverridesInScope(moduleType);
          this.applyTransitiveScopes();
        });
      }
      /**
       * @internal
       */
      _getModuleResolver() {
        return this.resolvers.module;
      }
      /**
       * @internal
       */
      _getComponentFactories(moduleType) {
        return maybeUnwrapFn2(moduleType.\u0275mod.declarations).reduce((factories, declaration) => {
          const componentDef = declaration.\u0275cmp;
          componentDef && factories.push(new ComponentFactory2(componentDef, this.testModuleRef));
          return factories;
        }, []);
      }
      compileTypesSync() {
        let needsAsyncResources = false;
        this.pendingComponents.forEach((declaration) => {
          if (getAsyncClassMetadataFn(declaration)) {
            throw new Error(`Component '${declaration.name}' has unresolved metadata. Please call \`await TestBed.compileComponents()\` before running this test.`);
          }
          needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);
          const metadata = this.resolvers.component.resolve(declaration);
          if (metadata === null) {
            throw invalidTypeError(declaration.name, "Component");
          }
          this.maybeStoreNgDef(NG_COMP_DEF, declaration);
          depsTracker.clearScopeCacheFor(declaration);
          compileComponent(declaration, metadata);
        });
        this.pendingComponents.clear();
        this.pendingDirectives.forEach((declaration) => {
          const metadata = this.resolvers.directive.resolve(declaration);
          if (metadata === null) {
            throw invalidTypeError(declaration.name, "Directive");
          }
          this.maybeStoreNgDef(NG_DIR_DEF, declaration);
          compileDirective(declaration, metadata);
        });
        this.pendingDirectives.clear();
        this.pendingPipes.forEach((declaration) => {
          const metadata = this.resolvers.pipe.resolve(declaration);
          if (metadata === null) {
            throw invalidTypeError(declaration.name, "Pipe");
          }
          this.maybeStoreNgDef(NG_PIPE_DEF, declaration);
          compilePipe(declaration, metadata);
        });
        this.pendingPipes.clear();
        return needsAsyncResources;
      }
      applyTransitiveScopes() {
        if (this.overriddenModules.size > 0) {
          const testingModuleDef = this.testModuleType[NG_MOD_DEF];
          const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);
          if (affectedModules.size > 0) {
            affectedModules.forEach((moduleType) => {
              depsTracker.clearScopeCacheFor(moduleType);
            });
          }
        }
        const moduleToScope = /* @__PURE__ */ new Map();
        const getScopeOfModule = (moduleType) => {
          if (!moduleToScope.has(moduleType)) {
            const isTestingModule = isTestingModuleOverride(moduleType);
            const realType = isTestingModule ? this.testModuleType : moduleType;
            moduleToScope.set(moduleType, transitiveScopesFor(realType));
          }
          return moduleToScope.get(moduleType);
        };
        this.componentToModuleScope.forEach((moduleType, componentType) => {
          if (moduleType !== null) {
            const moduleScope = getScopeOfModule(moduleType);
            this.storeFieldOfDefOnType(componentType, NG_COMP_DEF, "directiveDefs");
            this.storeFieldOfDefOnType(componentType, NG_COMP_DEF, "pipeDefs");
            patchComponentDefWithScope(getComponentDef2(componentType), moduleScope);
          }
          this.storeFieldOfDefOnType(componentType, NG_COMP_DEF, "tView");
        });
        this.componentToModuleScope.clear();
      }
      applyProviderOverrides() {
        const maybeApplyOverrides = (field) => (type) => {
          const resolver = field === NG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;
          const metadata = resolver.resolve(type);
          if (this.hasProviderOverrides(metadata.providers)) {
            this.patchDefWithProviderOverrides(type, field);
          }
        };
        this.seenComponents.forEach(maybeApplyOverrides(NG_COMP_DEF));
        this.seenDirectives.forEach(maybeApplyOverrides(NG_DIR_DEF));
        this.seenComponents.clear();
        this.seenDirectives.clear();
      }
      /**
       * Applies provider overrides to a given type (either an NgModule or a standalone component)
       * and all imported NgModules and standalone components recursively.
       */
      applyProviderOverridesInScope(type) {
        const hasScope = isStandaloneComponent2(type) || isNgModule2(type);
        if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {
          return;
        }
        this.scopesWithOverriddenProviders.add(type);
        const injectorDef = type[NG_INJ_DEF];
        if (this.providerOverridesByToken.size === 0)
          return;
        if (isStandaloneComponent2(type)) {
          const def = getComponentDef2(type);
          const dependencies = maybeUnwrapFn2(def.dependencies ?? []);
          for (const dependency of dependencies) {
            this.applyProviderOverridesInScope(dependency);
          }
        } else {
          const providers = [
            ...injectorDef.providers,
            ...this.providerOverridesByModule.get(type) || []
          ];
          if (this.hasProviderOverrides(providers)) {
            this.maybeStoreNgDef(NG_INJ_DEF, type);
            this.storeFieldOfDefOnType(type, NG_INJ_DEF, "providers");
            injectorDef.providers = this.getOverriddenProviders(providers);
          }
          const moduleDef = type[NG_MOD_DEF];
          const imports = maybeUnwrapFn2(moduleDef.imports);
          for (const importedModule of imports) {
            this.applyProviderOverridesInScope(importedModule);
          }
          for (const importedModule of flatten2(injectorDef.imports)) {
            if (isModuleWithProviders2(importedModule)) {
              this.defCleanupOps.push({
                object: importedModule,
                fieldName: "providers",
                originalValue: importedModule.providers
              });
              importedModule.providers = this.getOverriddenProviders(importedModule.providers);
            }
          }
        }
      }
      patchComponentsWithExistingStyles() {
        this.existingComponentStyles.forEach((styles, type) => type[NG_COMP_DEF].styles = styles);
        this.existingComponentStyles.clear();
      }
      queueTypeArray(arr, moduleType) {
        for (const value of arr) {
          if (Array.isArray(value)) {
            this.queueTypeArray(value, moduleType);
          } else {
            this.queueType(value, moduleType);
          }
        }
      }
      recompileNgModule(ngModule, metadata) {
        this.maybeStoreNgDef(NG_MOD_DEF, ngModule);
        this.maybeStoreNgDef(NG_INJ_DEF, ngModule);
        compileNgModuleDefs(ngModule, metadata);
      }
      maybeRegisterComponentWithAsyncMetadata(type) {
        const asyncMetadataFn = getAsyncClassMetadataFn(type);
        if (asyncMetadataFn) {
          this.componentsWithAsyncMetadata.add(type);
        }
      }
      queueType(type, moduleType) {
        this.maybeRegisterComponentWithAsyncMetadata(type);
        const component = this.resolvers.component.resolve(type);
        if (component) {
          if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(NG_COMP_DEF)) {
            this.pendingComponents.add(type);
          }
          this.seenComponents.add(type);
          if (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {
            this.componentToModuleScope.set(type, moduleType);
          }
          return;
        }
        const directive = this.resolvers.directive.resolve(type);
        if (directive) {
          if (!type.hasOwnProperty(NG_DIR_DEF)) {
            this.pendingDirectives.add(type);
          }
          this.seenDirectives.add(type);
          return;
        }
        const pipe3 = this.resolvers.pipe.resolve(type);
        if (pipe3 && !type.hasOwnProperty(NG_PIPE_DEF)) {
          this.pendingPipes.add(type);
          return;
        }
      }
      queueTypesFromModulesArray(arr) {
        const processedDefs = /* @__PURE__ */ new Set();
        const queueTypesFromModulesArrayRecur = (arr2) => {
          for (const value of arr2) {
            if (Array.isArray(value)) {
              queueTypesFromModulesArrayRecur(value);
            } else if (hasNgModuleDef(value)) {
              const def = value.\u0275mod;
              if (processedDefs.has(def)) {
                continue;
              }
              processedDefs.add(def);
              this.queueTypeArray(maybeUnwrapFn2(def.declarations), value);
              queueTypesFromModulesArrayRecur(maybeUnwrapFn2(def.imports));
              queueTypesFromModulesArrayRecur(maybeUnwrapFn2(def.exports));
            } else if (isModuleWithProviders2(value)) {
              queueTypesFromModulesArrayRecur([value.ngModule]);
            } else if (isStandaloneComponent2(value)) {
              this.queueType(value, null);
              const def = getComponentDef2(value);
              if (processedDefs.has(def)) {
                continue;
              }
              processedDefs.add(def);
              const dependencies = maybeUnwrapFn2(def.dependencies ?? []);
              dependencies.forEach((dependency) => {
                if (isStandaloneComponent2(dependency) || hasNgModuleDef(dependency)) {
                  queueTypesFromModulesArrayRecur([dependency]);
                } else {
                  this.queueType(dependency, null);
                }
              });
            }
          }
        };
        queueTypesFromModulesArrayRecur(arr);
      }
      // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules
      // that import (even transitively) an overridden one. For all affected modules we need to
      // recalculate their scopes for a given test run and restore original scopes at the end. The goal
      // of this function is to collect all affected modules in a set for further processing. Example:
      // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module
      // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become
      // invalidated with the override.
      collectModulesAffectedByOverrides(arr) {
        const seenModules = /* @__PURE__ */ new Set();
        const affectedModules = /* @__PURE__ */ new Set();
        const calcAffectedModulesRecur = (arr2, path) => {
          for (const value of arr2) {
            if (Array.isArray(value)) {
              calcAffectedModulesRecur(value, path);
            } else if (hasNgModuleDef(value)) {
              if (seenModules.has(value)) {
                if (affectedModules.has(value)) {
                  path.forEach((item) => affectedModules.add(item));
                }
                continue;
              }
              seenModules.add(value);
              if (this.overriddenModules.has(value)) {
                path.forEach((item) => affectedModules.add(item));
              }
              const moduleDef = value[NG_MOD_DEF];
              calcAffectedModulesRecur(maybeUnwrapFn2(moduleDef.imports), path.concat(value));
            }
          }
        };
        calcAffectedModulesRecur(arr, []);
        return affectedModules;
      }
      /**
       * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.
       * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of
       * an NgModule). If there is a def in a set already, don't override it, since
       * an original one should be restored at the end of a test.
       */
      maybeStoreNgDef(prop, type) {
        if (!this.initialNgDefs.has(type)) {
          this.initialNgDefs.set(type, /* @__PURE__ */ new Map());
        }
        const currentDefs = this.initialNgDefs.get(type);
        if (!currentDefs.has(prop)) {
          const currentDef = Object.getOwnPropertyDescriptor(type, prop);
          currentDefs.set(prop, currentDef);
        }
      }
      storeFieldOfDefOnType(type, defField, fieldName) {
        const def = type[defField];
        const originalValue = def[fieldName];
        this.defCleanupOps.push({ object: def, fieldName, originalValue });
      }
      /**
       * Clears current components resolution queue, but stores the state of the queue, so we can
       * restore it later. Clearing the queue is required before we try to compile components (via
       * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.
       */
      clearComponentResolutionQueue() {
        if (this.originalComponentResolutionQueue === null) {
          this.originalComponentResolutionQueue = /* @__PURE__ */ new Map();
        }
        clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));
      }
      /*
       * Restores component resolution queue to the previously saved state. This operation is performed
       * as a part of restoring the state after completion of the current set of tests (that might
       * potentially mutate the state).
       */
      restoreComponentResolutionQueue() {
        if (this.originalComponentResolutionQueue !== null) {
          restoreComponentResolutionQueue(this.originalComponentResolutionQueue);
          this.originalComponentResolutionQueue = null;
        }
      }
      restoreOriginalState() {
        forEachRight(this.defCleanupOps, (op) => {
          op.object[op.fieldName] = op.originalValue;
        });
        this.initialNgDefs.forEach((defs, type) => {
          depsTracker.clearScopeCacheFor(type);
          defs.forEach((descriptor, prop) => {
            if (!descriptor) {
              delete type[prop];
            } else {
              Object.defineProperty(type, prop, descriptor);
            }
          });
        });
        this.initialNgDefs.clear();
        this.scopesWithOverriddenProviders.clear();
        this.restoreComponentResolutionQueue();
        setLocaleId(DEFAULT_LOCALE_ID);
      }
      compileTestModule() {
        class RootScopeModule {
        }
        compileNgModuleDefs(RootScopeModule, {
          providers: [
            ...this.rootProviderOverrides,
            internalProvideZoneChangeDetection({}),
            TestBedApplicationErrorHandler,
            { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },
            {
              provide: ENVIRONMENT_INITIALIZER,
              multi: true,
              useValue: () => {
                inject2(ErrorHandler);
              }
            }
          ]
        });
        const providers = [
          { provide: Compiler, useFactory: () => new R3TestCompiler(this) },
          { provide: DEFER_BLOCK_CONFIG, useValue: { behavior: this.deferBlockBehavior } },
          {
            provide: INTERNAL_APPLICATION_ERROR_HANDLER,
            useFactory: () => {
              if (this.rethrowApplicationTickErrors) {
                const handler = inject2(TestBedApplicationErrorHandler);
                return (e) => {
                  handler.handleError(e);
                };
              } else {
                const userErrorHandler = inject2(ErrorHandler);
                const ngZone = inject2(NgZone);
                return (e) => ngZone.runOutsideAngular(() => userErrorHandler.handleError(e));
              }
            }
          },
          ...this.providers,
          ...this.providerOverrides
        ];
        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];
        compileNgModuleDefs(
          this.testModuleType,
          {
            declarations: this.declarations,
            imports,
            schemas: this.schemas,
            providers
          },
          /* allowDuplicateDeclarationsInRoot */
          true
        );
        this.applyProviderOverridesInScope(this.testModuleType);
      }
      get injector() {
        if (this._injector !== null) {
          return this._injector;
        }
        const providers = [];
        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS, []);
        compilerOptions.forEach((opts) => {
          if (opts.providers) {
            providers.push(opts.providers);
          }
        });
        if (this.compilerProviders !== null) {
          providers.push(...this.compilerProviders);
        }
        this._injector = Injector.create({ providers, parent: this.platform.injector });
        return this._injector;
      }
      // get overrides for a specific provider (if any)
      getSingleProviderOverrides(provider) {
        const token = getProviderToken(provider);
        return this.providerOverridesByToken.get(token) || null;
      }
      getProviderOverrides(providers) {
        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)
          return [];
        return flatten2(flattenProviders(providers, (provider) => this.getSingleProviderOverrides(provider) || []));
      }
      getOverriddenProviders(providers) {
        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)
          return [];
        const flattenedProviders = flattenProviders(providers);
        const overrides = this.getProviderOverrides(flattenedProviders);
        const overriddenProviders = [...flattenedProviders, ...overrides];
        const final = [];
        const seenOverriddenProviders = /* @__PURE__ */ new Set();
        forEachRight(overriddenProviders, (provider) => {
          const token = getProviderToken(provider);
          if (this.providerOverridesByToken.has(token)) {
            if (!seenOverriddenProviders.has(token)) {
              seenOverriddenProviders.add(token);
              final.unshift(__spreadProps(__spreadValues({}, provider), { multi: false }));
            }
          } else {
            final.unshift(provider);
          }
        });
        return final;
      }
      hasProviderOverrides(providers) {
        return this.getProviderOverrides(providers).length > 0;
      }
      patchDefWithProviderOverrides(declaration, field) {
        const def = declaration[field];
        if (def && def.providersResolver) {
          this.maybeStoreNgDef(field, declaration);
          const resolver = def.providersResolver;
          const processProvidersFn = (providers) => this.getOverriddenProviders(providers);
          this.storeFieldOfDefOnType(declaration, field, "providersResolver");
          def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);
        }
      }
    };
    R3TestCompiler = class {
      testBed;
      constructor(testBed) {
        this.testBed = testBed;
      }
      compileModuleSync(moduleType) {
        this.testBed._compileNgModuleSync(moduleType);
        return new NgModuleFactory2(moduleType);
      }
      compileModuleAsync(moduleType) {
        return __async(this, null, function* () {
          yield this.testBed._compileNgModuleAsync(moduleType);
          return new NgModuleFactory2(moduleType);
        });
      }
      compileModuleAndAllComponentsSync(moduleType) {
        const ngModuleFactory = this.compileModuleSync(moduleType);
        const componentFactories = this.testBed._getComponentFactories(moduleType);
        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      }
      compileModuleAndAllComponentsAsync(moduleType) {
        return __async(this, null, function* () {
          const ngModuleFactory = yield this.compileModuleAsync(moduleType);
          const componentFactories = this.testBed._getComponentFactories(moduleType);
          return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
        });
      }
      clearCache() {
      }
      clearCacheFor(type) {
      }
      getModuleId(moduleType) {
        const meta = this.testBed._getModuleResolver().resolve(moduleType);
        return meta && meta.id || void 0;
      }
    };
    _nextRootElementId = 0;
    TestBedImpl = class _TestBedImpl {
      static _INSTANCE = null;
      static get INSTANCE() {
        return _TestBedImpl._INSTANCE = _TestBedImpl._INSTANCE || new _TestBedImpl();
      }
      /**
       * Teardown options that have been configured at the environment level.
       * Used as a fallback if no instance-level options have been provided.
       */
      static _environmentTeardownOptions;
      /**
       * "Error on unknown elements" option that has been configured at the environment level.
       * Used as a fallback if no instance-level option has been provided.
       */
      static _environmentErrorOnUnknownElementsOption;
      /**
       * "Error on unknown properties" option that has been configured at the environment level.
       * Used as a fallback if no instance-level option has been provided.
       */
      static _environmentErrorOnUnknownPropertiesOption;
      /**
       * Teardown options that have been configured at the `TestBed` instance level.
       * These options take precedence over the environment-level ones.
       */
      _instanceTeardownOptions;
      /**
       * Defer block behavior option that specifies whether defer blocks will be triggered manually
       * or set to play through.
       */
      _instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;
      /**
       * "Error on unknown elements" option that has been configured at the `TestBed` instance level.
       * This option takes precedence over the environment-level one.
       */
      _instanceErrorOnUnknownElementsOption;
      /**
       * "Error on unknown properties" option that has been configured at the `TestBed` instance level.
       * This option takes precedence over the environment-level one.
       */
      _instanceErrorOnUnknownPropertiesOption;
      /**
       * Stores the previous "Error on unknown elements" option value,
       * allowing to restore it in the reset testing module logic.
       */
      _previousErrorOnUnknownElementsOption;
      /**
       * Stores the previous "Error on unknown properties" option value,
       * allowing to restore it in the reset testing module logic.
       */
      _previousErrorOnUnknownPropertiesOption;
      /**
       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an
       * angular module. These are common to every test in the suite.
       *
       * This may only be called once, to set up the common providers for the current test
       * suite on the current platform. If you absolutely need to change the providers,
       * first use `resetTestEnvironment`.
       *
       * Test modules and platforms for individual platforms are available from
       * '@angular/<platform_name>/testing'.
       *
       * @publicApi
       */
      static initTestEnvironment(ngModule, platform, options) {
        const testBed = _TestBedImpl.INSTANCE;
        testBed.initTestEnvironment(ngModule, platform, options);
        return testBed;
      }
      /**
       * Reset the providers for the test injector.
       *
       * @publicApi
       */
      static resetTestEnvironment() {
        _TestBedImpl.INSTANCE.resetTestEnvironment();
      }
      static configureCompiler(config2) {
        return _TestBedImpl.INSTANCE.configureCompiler(config2);
      }
      /**
       * Allows overriding default providers, directives, pipes, modules of the test injector,
       * which are defined in test_injector.js
       */
      static configureTestingModule(moduleDef) {
        return _TestBedImpl.INSTANCE.configureTestingModule(moduleDef);
      }
      /**
       * Compile components with a `templateUrl` for the test's NgModule.
       * It is necessary to call this function
       * as fetching urls is asynchronous.
       */
      static compileComponents() {
        return _TestBedImpl.INSTANCE.compileComponents();
      }
      static overrideModule(ngModule, override) {
        return _TestBedImpl.INSTANCE.overrideModule(ngModule, override);
      }
      static overrideComponent(component, override) {
        return _TestBedImpl.INSTANCE.overrideComponent(component, override);
      }
      static overrideDirective(directive, override) {
        return _TestBedImpl.INSTANCE.overrideDirective(directive, override);
      }
      static overridePipe(pipe3, override) {
        return _TestBedImpl.INSTANCE.overridePipe(pipe3, override);
      }
      static overrideTemplate(component, template2) {
        return _TestBedImpl.INSTANCE.overrideTemplate(component, template2);
      }
      /**
       * Overrides the template of the given component, compiling the template
       * in the context of the TestingModule.
       *
       * Note: This works for JIT and AOTed components as well.
       */
      static overrideTemplateUsingTestingModule(component, template2) {
        return _TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template2);
      }
      static overrideProvider(token, provider) {
        return _TestBedImpl.INSTANCE.overrideProvider(token, provider);
      }
      static inject(token, notFoundValue, options) {
        return _TestBedImpl.INSTANCE.inject(token, notFoundValue, options);
      }
      /**
       * Runs the given function in the `EnvironmentInjector` context of `TestBed`.
       *
       * @see {@link https://angular.dev/api/core/EnvironmentInjector#runInContext}
       */
      static runInInjectionContext(fn2) {
        return _TestBedImpl.INSTANCE.runInInjectionContext(fn2);
      }
      static createComponent(component, options) {
        return _TestBedImpl.INSTANCE.createComponent(component, options);
      }
      static resetTestingModule() {
        return _TestBedImpl.INSTANCE.resetTestingModule();
      }
      static execute(tokens, fn2, context2) {
        return _TestBedImpl.INSTANCE.execute(tokens, fn2, context2);
      }
      static get platform() {
        return _TestBedImpl.INSTANCE.platform;
      }
      static get ngModule() {
        return _TestBedImpl.INSTANCE.ngModule;
      }
      static flushEffects() {
        return _TestBedImpl.INSTANCE.tick();
      }
      static tick() {
        return _TestBedImpl.INSTANCE.tick();
      }
      // Properties
      platform = null;
      ngModule = null;
      _compiler = null;
      _testModuleRef = null;
      _activeFixtures = [];
      /**
       * Internal-only flag to indicate whether a module
       * scoping queue has been checked and flushed already.
       * @docs-private
       */
      globalCompilationChecked = false;
      /**
       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an
       * angular module. These are common to every test in the suite.
       *
       * This may only be called once, to set up the common providers for the current test
       * suite on the current platform. If you absolutely need to change the providers,
       * first use `resetTestEnvironment`.
       *
       * Test modules and platforms for individual platforms are available from
       * '@angular/<platform_name>/testing'.
       *
       * @publicApi
       */
      initTestEnvironment(ngModule, platform, options) {
        if (this.platform || this.ngModule) {
          throw new Error("Cannot set base providers because it has already been called");
        }
        _TestBedImpl._environmentTeardownOptions = options?.teardown;
        _TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;
        _TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;
        this.platform = platform;
        this.ngModule = ngModule;
        this._compiler = new TestBedCompiler(this.platform, this.ngModule);
        setAllowDuplicateNgModuleIdsForTest(true);
      }
      /**
       * Reset the providers for the test injector.
       *
       * @publicApi
       */
      resetTestEnvironment() {
        this.resetTestingModule();
        this._compiler = null;
        this.platform = null;
        this.ngModule = null;
        _TestBedImpl._environmentTeardownOptions = void 0;
        setAllowDuplicateNgModuleIdsForTest(false);
      }
      resetTestingModule() {
        this.checkGlobalCompilationFinished();
        resetCompiledComponents();
        if (this._compiler !== null) {
          this.compiler.restoreOriginalState();
        }
        this._compiler = new TestBedCompiler(this.platform, this.ngModule);
        \u0275setUnknownElementStrictMode(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);
        \u0275setUnknownPropertyStrictMode(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);
        try {
          this.destroyActiveFixtures();
        } finally {
          try {
            if (this.shouldTearDownTestingModule()) {
              this.tearDownTestingModule();
            }
          } finally {
            this._testModuleRef = null;
            this._instanceTeardownOptions = void 0;
            this._instanceErrorOnUnknownElementsOption = void 0;
            this._instanceErrorOnUnknownPropertiesOption = void 0;
            this._instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;
          }
        }
        return this;
      }
      configureCompiler(config2) {
        if (config2.useJit != null) {
          throw new Error("JIT compiler is not configurable via TestBed APIs.");
        }
        if (config2.providers !== void 0) {
          this.compiler.setCompilerProviders(config2.providers);
        }
        return this;
      }
      configureTestingModule(moduleDef) {
        this.assertNotInstantiated("TestBed.configureTestingModule", "configure the test module");
        this.checkGlobalCompilationFinished();
        this._instanceTeardownOptions = moduleDef.teardown;
        this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;
        this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;
        this._instanceDeferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;
        this._previousErrorOnUnknownElementsOption = \u0275getUnknownElementStrictMode();
        \u0275setUnknownElementStrictMode(this.shouldThrowErrorOnUnknownElements());
        this._previousErrorOnUnknownPropertiesOption = \u0275getUnknownPropertyStrictMode();
        \u0275setUnknownPropertyStrictMode(this.shouldThrowErrorOnUnknownProperties());
        this.compiler.configureTestingModule(moduleDef);
        return this;
      }
      compileComponents() {
        return this.compiler.compileComponents();
      }
      inject(token, notFoundValue, options) {
        if (token === TestBed) {
          return this;
        }
        const UNDEFINED = {};
        const result = this.testModuleRef.injector.get(token, UNDEFINED, options);
        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, options) : result;
      }
      runInInjectionContext(fn2) {
        return runInInjectionContext(this.inject(EnvironmentInjector), fn2);
      }
      execute(tokens, fn2, context2) {
        const params = tokens.map((t) => this.inject(t));
        return fn2.apply(context2, params);
      }
      overrideModule(ngModule, override) {
        this.assertNotInstantiated("overrideModule", "override module metadata");
        this.compiler.overrideModule(ngModule, override);
        return this;
      }
      overrideComponent(component, override) {
        this.assertNotInstantiated("overrideComponent", "override component metadata");
        this.compiler.overrideComponent(component, override);
        return this;
      }
      overrideTemplateUsingTestingModule(component, template2) {
        this.assertNotInstantiated("TestBed.overrideTemplateUsingTestingModule", "Cannot override template when the test module has already been instantiated");
        this.compiler.overrideTemplateUsingTestingModule(component, template2);
        return this;
      }
      overrideDirective(directive, override) {
        this.assertNotInstantiated("overrideDirective", "override directive metadata");
        this.compiler.overrideDirective(directive, override);
        return this;
      }
      overridePipe(pipe3, override) {
        this.assertNotInstantiated("overridePipe", "override pipe metadata");
        this.compiler.overridePipe(pipe3, override);
        return this;
      }
      /**
       * Overwrites all providers for the given token with the given provider definition.
       */
      overrideProvider(token, provider) {
        this.assertNotInstantiated("overrideProvider", "override provider");
        this.compiler.overrideProvider(token, provider);
        return this;
      }
      overrideTemplate(component, template2) {
        return this.overrideComponent(component, { set: { template: template2, templateUrl: null } });
      }
      createComponent(type, options) {
        const testComponentRenderer = this.inject(TestComponentRenderer);
        const rootElId = `root${_nextRootElementId++}`;
        testComponentRenderer.insertRootElement(rootElId);
        if (getAsyncClassMetadataFn(type)) {
          throw new Error(`Component '${type.name}' has unresolved metadata. Please call \`await TestBed.compileComponents()\` before running this test.`);
        }
        const componentDef = type.\u0275cmp;
        if (!componentDef) {
          throw new Error(`It looks like '${stringify(type)}' has not been compiled.`);
        }
        const componentFactory = new ComponentFactory2(componentDef);
        const initComponent = () => {
          const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef, void 0, options?.bindings);
          return this.runInInjectionContext(() => new ComponentFixture(componentRef));
        };
        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);
        const ngZone = noNgZone ? null : this.inject(NgZone, null);
        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();
        this._activeFixtures.push(fixture);
        return fixture;
      }
      /**
       * @internal strip this from published d.ts files due to
       * https://github.com/microsoft/TypeScript/issues/36216
       */
      get compiler() {
        if (this._compiler === null) {
          throw new Error(`Need to call TestBed.initTestEnvironment() first`);
        }
        return this._compiler;
      }
      /**
       * @internal strip this from published d.ts files due to
       * https://github.com/microsoft/TypeScript/issues/36216
       */
      get testModuleRef() {
        if (this._testModuleRef === null) {
          this._testModuleRef = this.compiler.finalize();
        }
        return this._testModuleRef;
      }
      assertNotInstantiated(methodName, methodDescription) {
        if (this._testModuleRef !== null) {
          throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. Make sure you are not using \`inject\` before \`${methodName}\`.`);
        }
      }
      /**
       * Check whether the module scoping queue should be flushed, and flush it if needed.
       *
       * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any
       * in-progress module compilation. This creates a potential hazard - the very first time the
       * TestBed is initialized (or if it's reset without being initialized), there may be pending
       * compilations of modules declared in global scope. These compilations should be finished.
       *
       * To ensure that globally declared modules have their components scoped properly, this function
       * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior
       * to any other operations, the scoping queue is flushed.
       */
      checkGlobalCompilationFinished() {
        if (!this.globalCompilationChecked && this._testModuleRef === null) {
          flushModuleScopingQueueAsMuchAsPossible();
        }
        this.globalCompilationChecked = true;
      }
      destroyActiveFixtures() {
        let errorCount = 0;
        this._activeFixtures.forEach((fixture) => {
          try {
            fixture.destroy();
          } catch (e) {
            errorCount++;
            console.error("Error during cleanup of component", {
              component: fixture.componentInstance,
              stacktrace: e
            });
          }
        });
        this._activeFixtures = [];
        if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {
          throw Error(`${errorCount} ${errorCount === 1 ? "component" : "components"} threw errors during cleanup`);
        }
      }
      shouldRethrowTeardownErrors() {
        const instanceOptions = this._instanceTeardownOptions;
        const environmentOptions = _TestBedImpl._environmentTeardownOptions;
        if (!instanceOptions && !environmentOptions) {
          return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;
        }
        return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ?? this.shouldTearDownTestingModule();
      }
      shouldThrowErrorOnUnknownElements() {
        return this._instanceErrorOnUnknownElementsOption ?? _TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;
      }
      shouldThrowErrorOnUnknownProperties() {
        return this._instanceErrorOnUnknownPropertiesOption ?? _TestBedImpl._environmentErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;
      }
      shouldTearDownTestingModule() {
        return this._instanceTeardownOptions?.destroyAfterEach ?? _TestBedImpl._environmentTeardownOptions?.destroyAfterEach ?? TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;
      }
      getDeferBlockBehavior() {
        return this._instanceDeferBlockBehavior;
      }
      tearDownTestingModule() {
        if (this._testModuleRef === null) {
          return;
        }
        const testRenderer = this.inject(TestComponentRenderer);
        try {
          this._testModuleRef.destroy();
        } catch (e) {
          if (this.shouldRethrowTeardownErrors()) {
            throw e;
          } else {
            console.error("Error during cleanup of a testing module", {
              component: this._testModuleRef.instance,
              stacktrace: e
            });
          }
        } finally {
          testRenderer.removeAllRootElements?.();
        }
      }
      /**
       * Execute any pending effects by executing any pending work required to synchronize model to the UI.
       *
       * @deprecated use `TestBed.tick()` instead
       */
      flushEffects() {
        this.tick();
      }
      /**
       * Execute any pending work required to synchronize model to the UI.
       *
       * @publicApi
       */
      tick() {
        const appRef = this.inject(ApplicationRef);
        try {
          appRef.includeAllTestViews = true;
          appRef.tick();
        } finally {
          appRef.includeAllTestViews = false;
        }
      }
    };
    TestBed = TestBedImpl;
    FakeNavigation = class {
      /**
       * The fake implementation of an entries array. Only same-document entries
       * allowed.
       */
      entriesArr = [];
      /**
       * The current active entry index into `entriesArr`.
       */
      currentEntryIndex = 0;
      /**
       * The current navigate event.
       * @internal
       */
      navigateEvent = null;
      /**
       * A Map of pending traversals, so that traversals to the same entry can be
       * re-used.
       */
      traversalQueue = /* @__PURE__ */ new Map();
      /**
       * A Promise that resolves when the previous traversals have finished. Used to
       * simulate the cross-process communication necessary for traversals.
       */
      nextTraversal = Promise.resolve();
      /**
       * A prospective current active entry index, which includes unresolved
       * traversals. Used by `go` to determine where navigations are intended to go.
       */
      prospectiveEntryIndex = 0;
      /**
       * A test-only option to make traversals synchronous, rather than emulate
       * cross-process communication.
       */
      synchronousTraversals = false;
      /** Whether to allow a call to setInitialEntryForTesting. */
      canSetInitialEntry = true;
      /**
       * `EventTarget` to dispatch events.
       * @internal
       */
      eventTarget;
      /** The next unique id for created entries. Replace recreates this id. */
      nextId = 0;
      /** The next unique key for created entries. Replace inherits this id. */
      nextKey = 0;
      /** Whether this fake is disposed. */
      disposed = false;
      /** Equivalent to `navigation.currentEntry`. */
      get currentEntry() {
        return this.entriesArr[this.currentEntryIndex];
      }
      get canGoBack() {
        return this.currentEntryIndex > 0;
      }
      get canGoForward() {
        return this.currentEntryIndex < this.entriesArr.length - 1;
      }
      createEventTarget;
      _window;
      get window() {
        return this._window;
      }
      constructor(doc, startURL) {
        this.createEventTarget = () => {
          try {
            return doc.createElement("div");
          } catch {
            return new EventTarget();
          }
        };
        this._window = document.defaultView ?? this.createEventTarget();
        this.eventTarget = this.createEventTarget();
        this.setInitialEntryForTesting(startURL);
      }
      /**
       * Sets the initial entry.
       */
      setInitialEntryForTesting(url, options = { historyState: null }) {
        if (!this.canSetInitialEntry) {
          throw new Error("setInitialEntryForTesting can only be called before any navigation has occurred");
        }
        const currentInitialEntry = this.entriesArr[0];
        this.entriesArr[0] = new FakeNavigationHistoryEntry(this.eventTarget, new URL(url).toString(), {
          index: 0,
          key: currentInitialEntry?.key ?? String(this.nextKey++),
          id: currentInitialEntry?.id ?? String(this.nextId++),
          sameDocument: true,
          historyState: options?.historyState,
          state: options.state
        });
      }
      /** Returns whether the initial entry is still eligible to be set. */
      canSetInitialEntryForTesting() {
        return this.canSetInitialEntry;
      }
      /**
       * Sets whether to emulate traversals as synchronous rather than
       * asynchronous.
       */
      setSynchronousTraversalsForTesting(synchronousTraversals) {
        this.synchronousTraversals = synchronousTraversals;
      }
      /** Equivalent to `navigation.entries()`. */
      entries() {
        return this.entriesArr.slice();
      }
      /** Equivalent to `navigation.navigate()`. */
      navigate(url, options) {
        const fromUrl = new URL(this.currentEntry.url);
        const toUrl = new URL(url, this.currentEntry.url);
        let navigationType;
        if (!options?.history || options.history === "auto") {
          if (fromUrl.toString() === toUrl.toString()) {
            navigationType = "replace";
          } else {
            navigationType = "push";
          }
        } else {
          navigationType = options.history;
        }
        const hashChange = isHashChange(fromUrl, toUrl);
        const destination = new FakeNavigationDestination({
          url: toUrl.toString(),
          state: options?.state,
          sameDocument: hashChange,
          historyState: null
        });
        const result = new InternalNavigationResult(this);
        const intercepted = this.userAgentNavigate(destination, result, {
          navigationType,
          cancelable: true,
          canIntercept: true,
          // Always false for navigate().
          userInitiated: false,
          hashChange,
          info: options?.info
        });
        if (!intercepted) {
          this.updateNavigationEntriesForSameDocumentNavigation(this.navigateEvent);
        }
        return {
          committed: result.committed,
          finished: result.finished
        };
      }
      /** Equivalent to `history.pushState()`. */
      pushState(data, title, url) {
        this.pushOrReplaceState("push", data, title, url);
      }
      /** Equivalent to `history.replaceState()`. */
      replaceState(data, title, url) {
        this.pushOrReplaceState("replace", data, title, url);
      }
      pushOrReplaceState(navigationType, data, _title, url) {
        const fromUrl = new URL(this.currentEntry.url);
        const toUrl = url ? new URL(url, this.currentEntry.url) : fromUrl;
        const hashChange = isHashChange(fromUrl, toUrl);
        const destination = new FakeNavigationDestination({
          url: toUrl.toString(),
          sameDocument: true,
          // history.pushState/replaceState are always same-document
          historyState: data,
          state: void 0
          // No Navigation API state directly from history.pushState
        });
        const result = new InternalNavigationResult(this);
        const intercepted = this.userAgentNavigate(destination, result, {
          navigationType,
          cancelable: true,
          canIntercept: true,
          // Always false for pushState() or replaceState().
          userInitiated: false,
          hashChange
        });
        if (intercepted) {
          return;
        }
        this.updateNavigationEntriesForSameDocumentNavigation(this.navigateEvent);
      }
      /** Equivalent to `navigation.traverseTo()`. */
      traverseTo(key, options) {
        const fromUrl = new URL(this.currentEntry.url);
        const entry = this.findEntry(key);
        if (!entry) {
          const domException = new DOMException("Invalid key", "InvalidStateError");
          const committed = Promise.reject(domException);
          const finished = Promise.reject(domException);
          committed.catch(() => {
          });
          finished.catch(() => {
          });
          return {
            committed,
            finished
          };
        }
        if (entry === this.currentEntry) {
          return {
            committed: Promise.resolve(this.currentEntry),
            finished: Promise.resolve(this.currentEntry)
          };
        }
        if (this.traversalQueue.has(entry.key)) {
          const existingResult = this.traversalQueue.get(entry.key);
          return {
            committed: existingResult.committed,
            finished: existingResult.finished
          };
        }
        const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));
        const destination = new FakeNavigationDestination({
          url: entry.url,
          state: entry.getState(),
          historyState: entry.getHistoryState(),
          key: entry.key,
          id: entry.id,
          index: entry.index,
          sameDocument: entry.sameDocument
        });
        this.prospectiveEntryIndex = entry.index;
        const result = new InternalNavigationResult(this);
        this.traversalQueue.set(entry.key, result);
        this.runTraversal(() => {
          this.traversalQueue.delete(entry.key);
          const intercepted = this.userAgentNavigate(destination, result, {
            navigationType: "traverse",
            cancelable: true,
            canIntercept: true,
            // Always false for traverseTo().
            userInitiated: false,
            hashChange,
            info: options?.info
          });
          if (!intercepted) {
            this.userAgentTraverse(this.navigateEvent);
          }
        });
        return {
          committed: result.committed,
          finished: result.finished
        };
      }
      /** Equivalent to `navigation.back()`. */
      back(options) {
        if (this.currentEntryIndex === 0) {
          const domException = new DOMException("Cannot go back", "InvalidStateError");
          const committed = Promise.reject(domException);
          const finished = Promise.reject(domException);
          committed.catch(() => {
          });
          finished.catch(() => {
          });
          return {
            committed,
            finished
          };
        }
        const entry = this.entriesArr[this.currentEntryIndex - 1];
        return this.traverseTo(entry.key, options);
      }
      /** Equivalent to `navigation.forward()`. */
      forward(options) {
        if (this.currentEntryIndex === this.entriesArr.length - 1) {
          const domException = new DOMException("Cannot go forward", "InvalidStateError");
          const committed = Promise.reject(domException);
          const finished = Promise.reject(domException);
          committed.catch(() => {
          });
          finished.catch(() => {
          });
          return {
            committed,
            finished
          };
        }
        const entry = this.entriesArr[this.currentEntryIndex + 1];
        return this.traverseTo(entry.key, options);
      }
      /**
       * Equivalent to `history.go()`.
       * Note that this method does not actually work precisely to how Chrome
       * does, instead choosing a simpler model with less unexpected behavior.
       * Chrome has a few edge case optimizations, for instance with repeated
       * `back(); forward()` chains it collapses certain traversals.
       */
      go(direction) {
        const targetIndex = this.prospectiveEntryIndex + direction;
        if (targetIndex >= this.entriesArr.length || targetIndex < 0) {
          return;
        }
        this.prospectiveEntryIndex = targetIndex;
        this.runTraversal(() => {
          if (targetIndex >= this.entriesArr.length || targetIndex < 0) {
            return;
          }
          const fromUrl = new URL(this.currentEntry.url);
          const entry = this.entriesArr[targetIndex];
          const hashChange = isHashChange(fromUrl, new URL(entry.url, this.currentEntry.url));
          const destination = new FakeNavigationDestination({
            url: entry.url,
            state: entry.getState(),
            historyState: entry.getHistoryState(),
            key: entry.key,
            id: entry.id,
            index: entry.index,
            sameDocument: entry.sameDocument
          });
          const result = new InternalNavigationResult(this);
          const intercepted = this.userAgentNavigate(destination, result, {
            navigationType: "traverse",
            cancelable: true,
            canIntercept: true,
            // Always false for go().
            userInitiated: false,
            hashChange
          });
          if (!intercepted) {
            this.userAgentTraverse(this.navigateEvent);
          }
        });
      }
      /** Runs a traversal synchronously or asynchronously */
      runTraversal(traversal) {
        if (this.synchronousTraversals) {
          traversal();
          return;
        }
        this.nextTraversal = this.nextTraversal.then(() => {
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve();
              traversal();
            });
          });
        });
      }
      /** Equivalent to `navigation.addEventListener()`. */
      addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
      }
      /** Equivalent to `navigation.removeEventListener()`. */
      removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
      }
      /** Equivalent to `navigation.dispatchEvent()` */
      dispatchEvent(event) {
        return this.eventTarget.dispatchEvent(event);
      }
      /** Cleans up resources. */
      dispose() {
        this.eventTarget = this.createEventTarget();
        this.disposed = true;
      }
      /** Returns whether this fake is disposed. */
      isDisposed() {
        return this.disposed;
      }
      abortOngoingNavigation(eventToAbort, reason) {
        if (this.navigateEvent !== eventToAbort) {
          return;
        }
        if (this.navigateEvent.abortController.signal.aborted) {
          return;
        }
        const abortReason = reason ?? new DOMException("Navigation aborted", "AbortError");
        this.navigateEvent.cancel(abortReason);
      }
      /**
       * Implementation for all navigations and traversals.
       * @returns true if the event was intercepted, otherwise false
       */
      userAgentNavigate(destination, result, options) {
        this.canSetInitialEntry = false;
        if (this.navigateEvent) {
          this.abortOngoingNavigation(this.navigateEvent, new DOMException("Navigation superseded by a new navigation.", "AbortError"));
        }
        const dispatchResultIsTrueIfNoInterception = dispatchNavigateEvent({
          navigationType: options.navigationType,
          cancelable: options.cancelable,
          canIntercept: options.canIntercept,
          userInitiated: options.userInitiated,
          hashChange: options.hashChange,
          destination,
          info: options.info,
          sameDocument: destination.sameDocument,
          result
        });
        return !dispatchResultIsTrueIfNoInterception;
      }
      /**
       * Implementation for a push or replace navigation.
       * https://whatpr.org/html/10919/browsing-the-web.html#url-and-history-update-steps
       * https://whatpr.org/html/10919/nav-history-apis.html#update-the-navigation-api-entries-for-a-same-document-navigation
       * @internal
       */
      urlAndHistoryUpdateSteps(navigateEvent) {
        this.updateNavigationEntriesForSameDocumentNavigation(navigateEvent);
      }
      /**
       * Implementation for a traverse navigation.
       *
       * https://whatpr.org/html/10919/browsing-the-web.html#apply-the-traverse-history-step
       * ...
       * > Let updateDocument be an algorithm step which performs update document for history step application given targetEntry's document, targetEntry, changingNavigableContinuation's update-only, scriptHistoryLength, scriptHistoryIndex, navigationType, entriesForNavigationAPI, and previousEntry.
       * > If targetEntry's document is equal to displayedDocument, then perform updateDocument.
       * https://whatpr.org/html/10919/browsing-the-web.html#update-document-for-history-step-application
       * which then goes to https://whatpr.org/html/10919/nav-history-apis.html#update-the-navigation-api-entries-for-a-same-document-navigation
       * @internal
       */
      userAgentTraverse(navigateEvent) {
        const oldUrl = this.currentEntry.url;
        this.updateNavigationEntriesForSameDocumentNavigation(navigateEvent);
        const popStateEvent = createPopStateEvent({
          state: navigateEvent.destination.getHistoryState()
        });
        this._window.dispatchEvent(popStateEvent);
        if (navigateEvent.hashChange) {
          const hashchangeEvent = createHashChangeEvent(oldUrl, this.currentEntry.url);
          this._window.dispatchEvent(hashchangeEvent);
        }
      }
      /**
       * https://whatpr.org/html/10919/nav-history-apis.html#update-the-navigation-api-entries-for-a-same-document-navigation
       * @internal
       */
      updateNavigationEntriesForSameDocumentNavigation({ destination, navigationType, result }) {
        const oldCurrentNHE = this.currentEntry;
        const disposedNHEs = [];
        if (navigationType === "traverse") {
          this.currentEntryIndex = destination.index;
          if (this.currentEntryIndex === -1) {
            throw new Error("unexpected current entry index");
          }
        } else if (navigationType === "push") {
          this.currentEntryIndex++;
          this.prospectiveEntryIndex = this.currentEntryIndex;
          disposedNHEs.push(...this.entriesArr.splice(this.currentEntryIndex));
        } else if (navigationType === "replace") {
          disposedNHEs.push(oldCurrentNHE);
        }
        if (navigationType === "push" || navigationType === "replace") {
          const index = this.currentEntryIndex;
          const key = navigationType === "push" ? String(this.nextKey++) : oldCurrentNHE?.key ?? String(this.nextKey++);
          const newNHE = new FakeNavigationHistoryEntry(this.eventTarget, destination.url, {
            id: String(this.nextId++),
            key,
            index,
            sameDocument: true,
            state: destination.getState(),
            historyState: destination.getHistoryState()
          });
          this.entriesArr[this.currentEntryIndex] = newNHE;
        }
        result.committedResolve(this.currentEntry);
        const currentEntryChangeEvent = createFakeNavigationCurrentEntryChangeEvent({
          from: oldCurrentNHE,
          navigationType
        });
        this.eventTarget.dispatchEvent(currentEntryChangeEvent);
        for (const disposedNHE of disposedNHEs) {
          disposedNHE.dispose();
        }
      }
      /** Utility method for finding entries with the given `key`. */
      findEntry(key) {
        for (const entry of this.entriesArr) {
          if (entry.key === key)
            return entry;
        }
        return void 0;
      }
      set onnavigate(_handler) {
        throw new Error("unimplemented");
      }
      // tslint:disable-next-line:no-any
      get onnavigate() {
        throw new Error("unimplemented");
      }
      set oncurrententrychange(_handler) {
        throw new Error("unimplemented");
      }
      get oncurrententrychange() {
        throw new Error("unimplemented");
      }
      set onnavigatesuccess(_handler) {
        throw new Error("unimplemented");
      }
      // tslint:disable-next-line:no-any
      get onnavigatesuccess() {
        throw new Error("unimplemented");
      }
      set onnavigateerror(_handler) {
        throw new Error("unimplemented");
      }
      // tslint:disable-next-line:no-any
      get onnavigateerror() {
        throw new Error("unimplemented");
      }
      _transition = null;
      /** @internal */
      set transition(t) {
        this._transition = t;
      }
      get transition() {
        return this._transition;
      }
      updateCurrentEntry(_options) {
        throw new Error("unimplemented");
      }
      reload(_options) {
        throw new Error("unimplemented");
      }
    };
    FakeNavigationHistoryEntry = class {
      eventTarget;
      url;
      sameDocument;
      id;
      key;
      index;
      state;
      historyState;
      // tslint:disable-next-line:no-any
      ondispose = null;
      constructor(eventTarget, url, { id, key, index, sameDocument, state, historyState }) {
        this.eventTarget = eventTarget;
        this.url = url;
        this.id = id;
        this.key = key;
        this.index = index;
        this.sameDocument = sameDocument;
        this.state = state;
        this.historyState = historyState;
      }
      getState() {
        return this.state ? JSON.parse(JSON.stringify(this.state)) : this.state;
      }
      getHistoryState() {
        return this.historyState ? JSON.parse(JSON.stringify(this.historyState)) : this.historyState;
      }
      addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
      }
      removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
      }
      dispatchEvent(event) {
        return this.eventTarget.dispatchEvent(event);
      }
      /** internal */
      dispose() {
        const disposeEvent = new Event("disposed");
        this.dispatchEvent(disposeEvent);
        this.eventTarget = null;
      }
    };
    FakeNavigationDestination = class {
      url;
      sameDocument;
      key;
      id;
      index;
      state;
      historyState;
      constructor({ url, sameDocument, historyState, state, key = null, id = null, index = -1 }) {
        this.url = url;
        this.sameDocument = sameDocument;
        this.state = state;
        this.historyState = historyState;
        this.key = key;
        this.id = id;
        this.index = index;
      }
      getState() {
        return this.state;
      }
      getHistoryState() {
        return this.historyState;
      }
    };
    InternalNavigationTransition = class {
      from;
      navigationType;
      finished;
      committed;
      finishedResolve;
      finishedReject;
      committedResolve;
      committedReject;
      constructor(from2, navigationType) {
        this.from = from2;
        this.navigationType = navigationType;
        this.finished = new Promise((resolve, reject) => {
          this.finishedReject = reject;
          this.finishedResolve = resolve;
        });
        this.committed = new Promise((resolve, reject) => {
          this.committedReject = reject;
          this.committedResolve = resolve;
        });
        this.finished.catch(() => {
        });
        this.committed.catch(() => {
        });
      }
    };
    InternalNavigationResult = class {
      navigation;
      committedTo = null;
      committedResolve;
      committedReject;
      finishedResolve;
      finishedReject;
      committed;
      finished;
      get signal() {
        return this.abortController.signal;
      }
      abortController = new AbortController();
      constructor(navigation) {
        this.navigation = navigation;
        this.committed = new Promise((resolve, reject) => {
          this.committedResolve = (entry) => {
            this.committedTo = entry;
            resolve(entry);
          };
          this.committedReject = reject;
        });
        this.finished = new Promise((resolve, reject) => {
          this.finishedResolve = () => {
            if (this.committedTo === null) {
              throw new Error("NavigateEvent should have been committed before resolving finished promise.");
            }
            resolve(this.committedTo);
          };
          this.finishedReject = (reason) => {
            reject(reason);
            this.abortController.abort(reason);
          };
        });
        this.committed.catch(() => {
        });
        this.finished.catch(() => {
        });
      }
    };
    globalThis.beforeEach?.(getCleanupHook(false));
    globalThis.afterEach?.(getCleanupHook(true));
    Log = class _Log {
      logItems;
      constructor() {
        this.logItems = [];
      }
      add(value) {
        this.logItems.push(value);
      }
      fn(value) {
        return () => {
          this.logItems.push(value);
        };
      }
      clear() {
        this.logItems = [];
      }
      result() {
        return this.logItems.join("; ");
      }
      static \u0275fac = function Log_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || _Log)();
      };
      static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Log, factory: _Log.\u0275fac });
    };
    (() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Log, [{
        type: Injectable
      }], () => [], null);
    })();
  }
});

// node_modules/@angular/common/fesm2022/location.mjs
function getDOM() {
  return _DOM;
}
function setRootDomAdapter(adapter) {
  _DOM ??= adapter;
}
function joinWithSlash(start, end) {
  if (!start)
    return end;
  if (!end)
    return start;
  if (start.endsWith("/")) {
    return end.startsWith("/") ? start + end.slice(1) : start + end;
  }
  return end.startsWith("/") ? start + end : `${start}/${end}`;
}
function stripTrailingSlash(url) {
  const pathEndIdx = url.search(/#|\?|$/);
  return url[pathEndIdx - 1] === "/" ? url.slice(0, pathEndIdx - 1) + url.slice(pathEndIdx) : url;
}
function normalizeQueryParams(params) {
  return params && params[0] !== "?" ? `?${params}` : params;
}
function createLocation() {
  return new Location(\u0275\u0275inject(LocationStrategy));
}
function _stripBasePath(basePath, url) {
  if (!basePath || !url.startsWith(basePath)) {
    return url;
  }
  const strippedUrl = url.substring(basePath.length);
  if (strippedUrl === "" || ["/", ";", "?", "#"].includes(strippedUrl[0])) {
    return strippedUrl;
  }
  return url;
}
function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, "");
}
function _stripOrigin(baseHref) {
  const isAbsoluteUrl2 = new RegExp("^(https?:)?//").test(baseHref);
  if (isAbsoluteUrl2) {
    const [, pathname] = baseHref.split(/\/\/[^\/]+/);
    return pathname;
  }
  return baseHref;
}
var _DOM, DomAdapter, PlatformLocation, LOCATION_INITIALIZED, BrowserPlatformLocation, LocationStrategy, APP_BASE_HREF, PathLocationStrategy, Location;
var init_location = __esm({
  "node_modules/@angular/common/fesm2022/location.mjs"() {
    "use strict";
    init_core();
    init_core();
    init_esm();
    _DOM = null;
    DomAdapter = class {
    };
    PlatformLocation = class _PlatformLocation {
      historyGo(relativePosition) {
        throw new Error(ngDevMode ? "Not implemented" : "");
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PlatformLocation, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PlatformLocation, providedIn: "platform", useFactory: () => inject2(BrowserPlatformLocation) });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PlatformLocation, decorators: [{
      type: Injectable,
      args: [{ providedIn: "platform", useFactory: () => inject2(BrowserPlatformLocation) }]
    }] });
    LOCATION_INITIALIZED = new InjectionToken(ngDevMode ? "Location Initialized" : "");
    BrowserPlatformLocation = class _BrowserPlatformLocation extends PlatformLocation {
      _location;
      _history;
      _doc = inject2(DOCUMENT);
      constructor() {
        super();
        this._location = window.location;
        this._history = window.history;
      }
      getBaseHrefFromDOM() {
        return getDOM().getBaseHref(this._doc);
      }
      onPopState(fn2) {
        const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
        window2.addEventListener("popstate", fn2, false);
        return () => window2.removeEventListener("popstate", fn2);
      }
      onHashChange(fn2) {
        const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
        window2.addEventListener("hashchange", fn2, false);
        return () => window2.removeEventListener("hashchange", fn2);
      }
      get href() {
        return this._location.href;
      }
      get protocol() {
        return this._location.protocol;
      }
      get hostname() {
        return this._location.hostname;
      }
      get port() {
        return this._location.port;
      }
      get pathname() {
        return this._location.pathname;
      }
      get search() {
        return this._location.search;
      }
      get hash() {
        return this._location.hash;
      }
      set pathname(newPath) {
        this._location.pathname = newPath;
      }
      pushState(state, title, url) {
        this._history.pushState(state, title, url);
      }
      replaceState(state, title, url) {
        this._history.replaceState(state, title, url);
      }
      forward() {
        this._history.forward();
      }
      back() {
        this._history.back();
      }
      historyGo(relativePosition = 0) {
        this._history.go(relativePosition);
      }
      getState() {
        return this._history.state;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _BrowserPlatformLocation, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _BrowserPlatformLocation, providedIn: "platform", useFactory: () => new _BrowserPlatformLocation() });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: BrowserPlatformLocation, decorators: [{
      type: Injectable,
      args: [{
        providedIn: "platform",
        useFactory: () => new BrowserPlatformLocation()
      }]
    }], ctorParameters: () => [] });
    LocationStrategy = class _LocationStrategy {
      historyGo(relativePosition) {
        throw new Error(ngDevMode ? "Not implemented" : "");
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _LocationStrategy, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _LocationStrategy, providedIn: "root", useFactory: () => inject2(PathLocationStrategy) });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: LocationStrategy, decorators: [{
      type: Injectable,
      args: [{ providedIn: "root", useFactory: () => inject2(PathLocationStrategy) }]
    }] });
    APP_BASE_HREF = new InjectionToken(ngDevMode ? "appBaseHref" : "");
    PathLocationStrategy = class _PathLocationStrategy extends LocationStrategy {
      _platformLocation;
      _baseHref;
      _removeListenerFns = [];
      constructor(_platformLocation, href) {
        super();
        this._platformLocation = _platformLocation;
        this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject2(DOCUMENT).location?.origin ?? "";
      }
      /** @docs-private */
      ngOnDestroy() {
        while (this._removeListenerFns.length) {
          this._removeListenerFns.pop()();
        }
      }
      onPopState(fn2) {
        this._removeListenerFns.push(this._platformLocation.onPopState(fn2), this._platformLocation.onHashChange(fn2));
      }
      getBaseHref() {
        return this._baseHref;
      }
      prepareExternalUrl(internal) {
        return joinWithSlash(this._baseHref, internal);
      }
      path(includeHash = false) {
        const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
        const hash = this._platformLocation.hash;
        return hash && includeHash ? `${pathname}${hash}` : pathname;
      }
      pushState(state, title, url, queryParams) {
        const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state, title, externalUrl);
      }
      replaceState(state, title, url, queryParams) {
        const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state, title, externalUrl);
      }
      forward() {
        this._platformLocation.forward();
      }
      back() {
        this._platformLocation.back();
      }
      getState() {
        return this._platformLocation.getState();
      }
      historyGo(relativePosition = 0) {
        this._platformLocation.historyGo?.(relativePosition);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PathLocationStrategy, deps: [{ token: PlatformLocation }, { token: APP_BASE_HREF, optional: true }], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PathLocationStrategy, providedIn: "root" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PathLocationStrategy, decorators: [{
      type: Injectable,
      args: [{ providedIn: "root" }]
    }], ctorParameters: () => [{ type: PlatformLocation }, { type: void 0, decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }] }] });
    Location = class _Location {
      /** @internal */
      _subject = new Subject();
      /** @internal */
      _basePath;
      /** @internal */
      _locationStrategy;
      /** @internal */
      _urlChangeListeners = [];
      /** @internal */
      _urlChangeSubscription = null;
      constructor(locationStrategy) {
        this._locationStrategy = locationStrategy;
        const baseHref = this._locationStrategy.getBaseHref();
        this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));
        this._locationStrategy.onPopState((ev) => {
          this._subject.next({
            "url": this.path(true),
            "pop": true,
            "state": ev.state,
            "type": ev.type
          });
        });
      }
      /** @docs-private */
      ngOnDestroy() {
        this._urlChangeSubscription?.unsubscribe();
        this._urlChangeListeners = [];
      }
      /**
       * Normalizes the URL path for this location.
       *
       * @param includeHash True to include an anchor fragment in the path.
       *
       * @returns The normalized URL path.
       */
      // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
      // removed.
      path(includeHash = false) {
        return this.normalize(this._locationStrategy.path(includeHash));
      }
      /**
       * Reports the current state of the location history.
       * @returns The current value of the `history.state` object.
       */
      getState() {
        return this._locationStrategy.getState();
      }
      /**
       * Normalizes the given path and compares to the current normalized path.
       *
       * @param path The given URL path.
       * @param query Query parameters.
       *
       * @returns True if the given URL path is equal to the current normalized path, false
       * otherwise.
       */
      isCurrentPathEqualTo(path, query = "") {
        return this.path() == this.normalize(path + normalizeQueryParams(query));
      }
      /**
       * Normalizes a URL path by stripping any trailing slashes.
       *
       * @param url String representing a URL.
       *
       * @returns The normalized URL string.
       */
      normalize(url) {
        return _Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));
      }
      /**
       * Normalizes an external URL path.
       * If the given URL doesn't begin with a leading slash (`'/'`), adds one
       * before normalizing. Adds a hash if `HashLocationStrategy` is
       * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
       *
       * @param url String representing a URL.
       *
       * @returns  A normalized platform-specific URL.
       */
      prepareExternalUrl(url) {
        if (url && url[0] !== "/") {
          url = "/" + url;
        }
        return this._locationStrategy.prepareExternalUrl(url);
      }
      // TODO: rename this method to pushState
      /**
       * Changes the browser's URL to a normalized version of a given URL, and pushes a
       * new item onto the platform's history.
       *
       * @param path  URL path to normalize.
       * @param query Query parameters.
       * @param state Location history state.
       *
       */
      go(path, query = "", state = null) {
        this._locationStrategy.pushState(state, "", path, query);
        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
      }
      /**
       * Changes the browser's URL to a normalized version of the given URL, and replaces
       * the top item on the platform's history stack.
       *
       * @param path  URL path to normalize.
       * @param query Query parameters.
       * @param state Location history state.
       */
      replaceState(path, query = "", state = null) {
        this._locationStrategy.replaceState(state, "", path, query);
        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
      }
      /**
       * Navigates forward in the platform's history.
       */
      forward() {
        this._locationStrategy.forward();
      }
      /**
       * Navigates back in the platform's history.
       */
      back() {
        this._locationStrategy.back();
      }
      /**
       * Navigate to a specific page from session history, identified by its relative position to the
       * current page.
       *
       * @param relativePosition  Position of the target page in the history relative to the current
       *     page.
       * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
       * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
       * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
       * when `relativePosition` equals 0.
       * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
       */
      historyGo(relativePosition = 0) {
        this._locationStrategy.historyGo?.(relativePosition);
      }
      /**
       * Registers a URL change listener. Use to catch updates performed by the Angular
       * framework that are not detectible through "popstate" or "hashchange" events.
       *
       * @param fn The change handler function, which take a URL and a location history state.
       * @returns A function that, when executed, unregisters a URL change listener.
       */
      onUrlChange(fn2) {
        this._urlChangeListeners.push(fn2);
        this._urlChangeSubscription ??= this.subscribe((v) => {
          this._notifyUrlChangeListeners(v.url, v.state);
        });
        return () => {
          const fnIndex = this._urlChangeListeners.indexOf(fn2);
          this._urlChangeListeners.splice(fnIndex, 1);
          if (this._urlChangeListeners.length === 0) {
            this._urlChangeSubscription?.unsubscribe();
            this._urlChangeSubscription = null;
          }
        };
      }
      /** @internal */
      _notifyUrlChangeListeners(url = "", state) {
        this._urlChangeListeners.forEach((fn2) => fn2(url, state));
      }
      /**
       * Subscribes to the platform's `popState` events.
       *
       * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
       * `Location.onUrlChange()` to subscribe to URL changes instead.
       *
       * @param value Event that is triggered when the state history changes.
       * @param exception The exception to throw.
       *
       * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
       *
       * @returns Subscribed events.
       */
      subscribe(onNext, onThrow, onReturn) {
        return this._subject.subscribe({
          next: onNext,
          error: onThrow ?? void 0,
          complete: onReturn ?? void 0
        });
      }
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */
      static normalizeQueryParams = normalizeQueryParams;
      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */
      static joinWithSlash = joinWithSlash;
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */
      static stripTrailingSlash = stripTrailingSlash;
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _Location, deps: [{ token: LocationStrategy }], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _Location, providedIn: "root", useFactory: createLocation });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: Location, decorators: [{
      type: Injectable,
      args: [{
        providedIn: "root",
        // See #23917
        useFactory: createLocation
      }]
    }], ctorParameters: () => [{ type: LocationStrategy }] });
  }
});

// node_modules/@angular/common/fesm2022/common_module.mjs
function getLocaleId2(locale) {
  return findLocaleData(locale)[LocaleDataIndex.LocaleId];
}
function getLocaleDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const amPmData = [
    data[LocaleDataIndex.DayPeriodsFormat],
    data[LocaleDataIndex.DayPeriodsStandalone]
  ];
  const amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
function getLocaleDayNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const daysData = [
    data[LocaleDataIndex.DaysFormat],
    data[LocaleDataIndex.DaysStandalone]
  ];
  const days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
function getLocaleMonthNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const monthsData = [
    data[LocaleDataIndex.MonthsFormat],
    data[LocaleDataIndex.MonthsStandalone]
  ];
  const months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
function getLocaleEraNames(locale, width) {
  const data = findLocaleData(locale);
  const erasData = data[LocaleDataIndex.Eras];
  return getLastDefinedValue(erasData, width);
}
function getLocaleDateFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
}
function getLocaleTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
}
function getLocaleDateTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  const dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
function getLocaleNumberSymbol(locale, symbol) {
  const data = findLocaleData(locale);
  const res = data[LocaleDataIndex.NumberSymbols][symbol];
  if (typeof res === "undefined") {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
    }
  }
  return res;
}
function getLocaleNumberFormat(locale, type) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.NumberFormats][type];
}
function getLocaleCurrencies(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.Currencies];
}
function checkFullData(data) {
  if (!data[LocaleDataIndex.ExtraData]) {
    throw new RuntimeError(2303, ngDevMode && `Missing extra locale data for the locale "${data[LocaleDataIndex.LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
  }
}
function getLocaleExtraDayPeriodRules(locale) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const rules = data[LocaleDataIndex.ExtraData][
    2
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */
  ] || [];
  return rules.map((rule) => {
    if (typeof rule === "string") {
      return extractTime(rule);
    }
    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
function getLocaleExtraDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const dayPeriodsData = [
    data[LocaleDataIndex.ExtraData][
      0
      /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */
    ],
    data[LocaleDataIndex.ExtraData][
      1
      /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */
    ]
  ];
  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
function getLastDefinedValue(data, index) {
  for (let i = index; i > -1; i--) {
    if (typeof data[i] !== "undefined") {
      return data[i];
    }
  }
  throw new RuntimeError(2304, ngDevMode && "Locale data API: locale data undefined");
}
function extractTime(time) {
  const [h, m] = time.split(":");
  return { hours: +h, minutes: +m };
}
function getCurrencySymbol(code, format, locale = "en") {
  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  const symbolNarrow = currency[
    1
    /* ɵCurrencyIndex.SymbolNarrow */
  ];
  if (format === "narrow" && typeof symbolNarrow === "string") {
    return symbolNarrow;
  }
  return currency[
    0
    /* ɵCurrencyIndex.Symbol */
  ] || code;
}
function getNumberOfCurrencyDigits(code) {
  let digits;
  const currency = CURRENCIES_EN[code];
  if (currency) {
    digits = currency[
      2
      /* ɵCurrencyIndex.NbOfDigits */
    ];
  }
  return typeof digits === "number" ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
function formatDate(value, format, locale, timezone) {
  let date = toDate(value);
  const namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  let parts = [];
  let match;
  while (format) {
    match = DATE_FORMATS_SPLIT.exec(format);
    if (match) {
      parts = parts.concat(match.slice(1));
      const part = parts.pop();
      if (!part) {
        break;
      }
      format = part;
    } else {
      parts.push(format);
      break;
    }
  }
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    assertValidDateFormat(parts);
  }
  let dateTimezoneOffset = date.getTimezoneOffset();
  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone);
  }
  let text2 = "";
  parts.forEach((value2) => {
    const dateFormatter = getDateFormatter(value2);
    text2 += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value2 === "''" ? "'" : value2.replace(/(^'|'$)/g, "").replace(/''/g, "'");
  });
  return text2;
}
function assertValidDateFormat(parts) {
  if (parts.some((part) => /^Y+$/.test(part)) && !parts.some((part) => /^w+$/.test(part))) {
    const message = `Suspicious use of week-based year "Y" in date pattern "${parts.join("")}". Did you mean to use calendar year "y" instead?`;
    if (parts.length === 1) {
      console.error(formatRuntimeError(2300, message));
    } else {
      throw new RuntimeError(2300, message);
    }
  }
}
function createDate(year, month, date) {
  const newDate = /* @__PURE__ */ new Date(0);
  newDate.setFullYear(year, month, date);
  newDate.setHours(0, 0, 0);
  return newDate;
}
function getNamedFormat(locale, format) {
  const localeId = getLocaleId2(locale);
  NAMED_FORMATS[localeId] ??= {};
  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }
  let formatValue3 = "";
  switch (format) {
    case "shortDate":
      formatValue3 = getLocaleDateFormat(locale, FormatWidth.Short);
      break;
    case "mediumDate":
      formatValue3 = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;
    case "longDate":
      formatValue3 = getLocaleDateFormat(locale, FormatWidth.Long);
      break;
    case "fullDate":
      formatValue3 = getLocaleDateFormat(locale, FormatWidth.Full);
      break;
    case "shortTime":
      formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;
    case "mediumTime":
      formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;
    case "longTime":
      formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;
    case "fullTime":
      formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;
    case "short":
      const shortTime = getNamedFormat(locale, "shortTime");
      const shortDate = getNamedFormat(locale, "shortDate");
      formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [
        shortTime,
        shortDate
      ]);
      break;
    case "medium":
      const mediumTime = getNamedFormat(locale, "mediumTime");
      const mediumDate = getNamedFormat(locale, "mediumDate");
      formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [
        mediumTime,
        mediumDate
      ]);
      break;
    case "long":
      const longTime = getNamedFormat(locale, "longTime");
      const longDate = getNamedFormat(locale, "longDate");
      formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [
        longTime,
        longDate
      ]);
      break;
    case "full":
      const fullTime = getNamedFormat(locale, "fullTime");
      const fullDate = getNamedFormat(locale, "fullDate");
      formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [
        fullTime,
        fullDate
      ]);
      break;
  }
  if (formatValue3) {
    NAMED_FORMATS[localeId][format] = formatValue3;
  }
  return formatValue3;
}
function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
}
function padNumber(num, digits, minusSign = "-", trim, negWrap) {
  let neg = "";
  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }
  let strNum = String(num);
  while (strNum.length < digits) {
    strNum = "0" + strNum;
  }
  if (trim) {
    strNum = strNum.slice(strNum.length - digits);
  }
  return neg + strNum;
}
function formatFractionalSeconds(milliseconds, digits) {
  const strMs = padNumber(milliseconds, 3);
  return strMs.substring(0, digits);
}
function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
  return function(date, locale) {
    let part = getDatePart(name, date);
    if (offset > 0 || part > -offset) {
      part += offset;
    }
    if (name === 3) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === 6) {
      return formatFractionalSeconds(part, size);
    }
    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}
function getDatePart(part, date) {
  switch (part) {
    case 0:
      return date.getFullYear();
    case 1:
      return date.getMonth();
    case 2:
      return date.getDate();
    case 3:
      return date.getHours();
    case 4:
      return date.getMinutes();
    case 5:
      return date.getSeconds();
    case 6:
      return date.getMilliseconds();
    case 7:
      return date.getDay();
    default:
      throw new RuntimeError(2301, ngDevMode && `Unknown DateType value "${part}".`);
  }
}
function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
  return function(date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case 2:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];
    case 1:
      return getLocaleDayNames(locale, form, width)[date.getDay()];
    case 0:
      const currentHours = date.getHours();
      const currentMinutes = date.getMinutes();
      if (extended) {
        const rules = getLocaleExtraDayPeriodRules(locale);
        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        const index = rules.findIndex((rule) => {
          if (Array.isArray(rule)) {
            const [from2, to] = rule;
            const afterFrom = currentHours >= from2.hours && currentMinutes >= from2.minutes;
            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;
            if (from2.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }
          return false;
        });
        if (index !== -1) {
          return dayPeriods[index];
        }
      }
      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];
    case 3:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
    default:
      const unexpected = name;
      throw new RuntimeError(2302, ngDevMode && `unexpected translation type ${unexpected}`);
  }
}
function timeZoneGetter(width) {
  return function(date, locale, offset) {
    const zone = -1 * offset;
    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
    switch (width) {
      case 0:
        return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);
      case 1:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 1, minusSign);
      case 2:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
      case 3:
        if (offset === 0) {
          return "Z";
        } else {
          return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
        }
      default:
        throw new RuntimeError(2302, ngDevMode && `Unknown zone width "${width}"`);
    }
  };
}
function getFirstThursdayOfYear(year) {
  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
function getThursdayThisIsoWeek(datetime) {
  const currentDay = datetime.getDay();
  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + deltaToThursday);
}
function weekGetter(size, monthBased = false) {
  return function(date, locale) {
    let result;
    if (monthBased) {
      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      const today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      const thisThurs = getThursdayThisIsoWeek(date);
      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      const diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6048e5);
    }
    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
function weekNumberingYearGetter(size, trim = false) {
  return function(date, locale) {
    const thisThurs = getThursdayThisIsoWeek(date);
    const weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}
function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }
  let formatter;
  switch (format) {
    // Era name (AD/BC)
    case "G":
    case "GG":
    case "GGG":
      formatter = dateStrGetter(3, TranslationWidth.Abbreviated);
      break;
    case "GGGG":
      formatter = dateStrGetter(3, TranslationWidth.Wide);
      break;
    case "GGGGG":
      formatter = dateStrGetter(3, TranslationWidth.Narrow);
      break;
    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)
    case "y":
      formatter = dateGetter(0, 1, 0, false, true);
      break;
    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
    case "yy":
      formatter = dateGetter(0, 2, 0, true, true);
      break;
    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)
    case "yyy":
      formatter = dateGetter(0, 3, 0, false, true);
      break;
    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)
    case "yyyy":
      formatter = dateGetter(0, 4, 0, false, true);
      break;
    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)
    case "Y":
      formatter = weekNumberingYearGetter(1);
      break;
    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
    // 2010 => 10)
    case "YY":
      formatter = weekNumberingYearGetter(2, true);
      break;
    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
    // 2010 => 2010)
    case "YYY":
      formatter = weekNumberingYearGetter(3);
      break;
    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)
    case "YYYY":
      formatter = weekNumberingYearGetter(4);
      break;
    // Month of the year (1-12), numeric
    case "M":
    case "L":
      formatter = dateGetter(1, 1, 1);
      break;
    case "MM":
    case "LL":
      formatter = dateGetter(1, 2, 1);
      break;
    // Month of the year (January, ...), string, format
    case "MMM":
      formatter = dateStrGetter(2, TranslationWidth.Abbreviated);
      break;
    case "MMMM":
      formatter = dateStrGetter(2, TranslationWidth.Wide);
      break;
    case "MMMMM":
      formatter = dateStrGetter(2, TranslationWidth.Narrow);
      break;
    // Month of the year (January, ...), string, standalone
    case "LLL":
      formatter = dateStrGetter(2, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "LLLL":
      formatter = dateStrGetter(2, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "LLLLL":
      formatter = dateStrGetter(2, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    // Week of the year (1, ... 52)
    case "w":
      formatter = weekGetter(1);
      break;
    case "ww":
      formatter = weekGetter(2);
      break;
    // Week of the month (1, ...)
    case "W":
      formatter = weekGetter(1, true);
      break;
    // Day of the month (1-31)
    case "d":
      formatter = dateGetter(2, 1);
      break;
    case "dd":
      formatter = dateGetter(2, 2);
      break;
    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)
    case "c":
    case "cc":
      formatter = dateGetter(7, 1);
      break;
    case "ccc":
      formatter = dateStrGetter(1, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "cccc":
      formatter = dateStrGetter(1, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "ccccc":
      formatter = dateStrGetter(1, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "cccccc":
      formatter = dateStrGetter(1, TranslationWidth.Short, FormStyle.Standalone);
      break;
    // Day of the Week
    case "E":
    case "EE":
    case "EEE":
      formatter = dateStrGetter(1, TranslationWidth.Abbreviated);
      break;
    case "EEEE":
      formatter = dateStrGetter(1, TranslationWidth.Wide);
      break;
    case "EEEEE":
      formatter = dateStrGetter(1, TranslationWidth.Narrow);
      break;
    case "EEEEEE":
      formatter = dateStrGetter(1, TranslationWidth.Short);
      break;
    // Generic period of the day (am-pm)
    case "a":
    case "aa":
    case "aaa":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated);
      break;
    case "aaaa":
      formatter = dateStrGetter(0, TranslationWidth.Wide);
      break;
    case "aaaaa":
      formatter = dateStrGetter(0, TranslationWidth.Narrow);
      break;
    // Extended period of the day (midnight, at night, ...), standalone
    case "b":
    case "bb":
    case "bbb":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;
    case "bbbb":
      formatter = dateStrGetter(0, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;
    case "bbbbb":
      formatter = dateStrGetter(0, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    // Extended period of the day (midnight, night, ...), standalone
    case "B":
    case "BB":
    case "BBB":
      formatter = dateStrGetter(0, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;
    case "BBBB":
      formatter = dateStrGetter(0, TranslationWidth.Wide, FormStyle.Format, true);
      break;
    case "BBBBB":
      formatter = dateStrGetter(0, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    // Hour in AM/PM, (1-12)
    case "h":
      formatter = dateGetter(3, 1, -12);
      break;
    case "hh":
      formatter = dateGetter(3, 2, -12);
      break;
    // Hour of the day (0-23)
    case "H":
      formatter = dateGetter(3, 1);
      break;
    // Hour in day, padded (00-23)
    case "HH":
      formatter = dateGetter(3, 2);
      break;
    // Minute of the hour (0-59)
    case "m":
      formatter = dateGetter(4, 1);
      break;
    case "mm":
      formatter = dateGetter(4, 2);
      break;
    // Second of the minute (0-59)
    case "s":
      formatter = dateGetter(5, 1);
      break;
    case "ss":
      formatter = dateGetter(5, 2);
      break;
    // Fractional second
    case "S":
      formatter = dateGetter(6, 1);
      break;
    case "SS":
      formatter = dateGetter(6, 2);
      break;
    case "SSS":
      formatter = dateGetter(6, 3);
      break;
    // Timezone ISO8601 short format (-0430)
    case "Z":
    case "ZZ":
    case "ZZZ":
      formatter = timeZoneGetter(
        0
        /* ZoneWidth.Short */
      );
      break;
    // Timezone ISO8601 extended format (-04:30)
    case "ZZZZZ":
      formatter = timeZoneGetter(
        3
        /* ZoneWidth.Extended */
      );
      break;
    // Timezone GMT short format (GMT+4)
    case "O":
    case "OO":
    case "OOO":
    // Should be location, but fallback to format O instead because we don't have the data yet
    case "z":
    case "zz":
    case "zzz":
      formatter = timeZoneGetter(
        1
        /* ZoneWidth.ShortGMT */
      );
      break;
    // Timezone GMT long format (GMT+0430)
    case "OOOO":
    case "ZZZZ":
    // Should be location, but fallback to format O instead because we don't have the data yet
    case "zzzz":
      formatter = timeZoneGetter(
        2
        /* ZoneWidth.Long */
      );
      break;
    default:
      return null;
  }
  DATE_FORMATS[format] = formatter;
  return formatter;
}
function timezoneToOffset(timezone, fallback) {
  timezone = timezone.replace(/:/g, "");
  const requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}
function convertTimezoneToLocal(date, timezone, reverse) {
  const reverseValue = -1;
  const dateTimezoneOffset = date.getTimezoneOffset();
  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
function toDate(value) {
  if (isDate(value)) {
    return value;
  }
  if (typeof value === "number" && !isNaN(value)) {
    return new Date(value);
  }
  if (typeof value === "string") {
    value = value.trim();
    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      const [y, m = 1, d = 1] = value.split("-").map((val) => +val);
      return createDate(y, m - 1, d);
    }
    const parsedNb = parseFloat(value);
    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }
    let match;
    if (match = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match);
    }
  }
  const date = new Date(value);
  if (!isDate(date)) {
    throw new RuntimeError(2302, ngDevMode && `Unable to convert "${value}" into a date`);
  }
  return date;
}
function isoStringToDate(match) {
  const date = /* @__PURE__ */ new Date(0);
  let tzHour = 0;
  let tzMin = 0;
  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
  const timeSetter = match[8] ? date.setUTCHours : date.setHours;
  if (match[9]) {
    tzHour = Number(match[9] + match[10]);
    tzMin = Number(match[9] + match[11]);
  }
  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
  const h = Number(match[4] || 0) - tzHour;
  const m = Number(match[5] || 0) - tzMin;
  const s = Number(match[6] || 0);
  const ms = Math.floor(parseFloat("0." + (match[7] || 0)) * 1e3);
  timeSetter.call(date, h, m, s, ms);
  return date;
}
function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
  let formattedText = "";
  let isZero = false;
  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    let parsedNumber = parseNumber(value);
    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }
    let minInt = pattern.minInt;
    let minFraction = pattern.minFrac;
    let maxFraction = pattern.maxFrac;
    if (digitsInfo) {
      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new RuntimeError(2306, ngDevMode && `${digitsInfo} is not a valid digit info`);
      }
      const minIntPart = parts[1];
      const minFractionPart = parts[3];
      const maxFractionPart = parts[5];
      if (minIntPart != null) {
        minInt = parseIntAutoRadix2(minIntPart);
      }
      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix2(minFractionPart);
      }
      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix2(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }
    roundNumber(parsedNumber, minFraction, maxFraction);
    let digits = parsedNumber.digits;
    let integerLen = parsedNumber.integerLen;
    const exponent = parsedNumber.exponent;
    let decimals = [];
    isZero = digits.every((d) => !d);
    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    }
    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    }
    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    }
    const groups = [];
    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
    }
    if (digits.length) {
      groups.unshift(digits.join(""));
    }
    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join("");
    }
    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + "+" + exponent;
    }
  }
  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }
  return formattedText;
}
function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency).replace(CURRENCY_CHAR, "").trim();
}
function formatPercent(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, "g"), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
function formatNumber(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}
function parseNumberFormat(format, minusSign = "-") {
  const p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: "",
    posSuf: "",
    negPre: "",
    negSuf: "",
    gSize: 0,
    lgSize: 0
  };
  const patternParts = format.split(PATTERN_SEP);
  const positive = patternParts[0];
  const negative = patternParts[1];
  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [
    positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),
    positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)
  ], integer = positiveParts[0], fraction = positiveParts[1] || "";
  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));
  for (let i = 0; i < fraction.length; i++) {
    const ch = fraction.charAt(i);
    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }
  const groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;
  if (negative) {
    const trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substring(0, pos).replace(/'/g, "");
    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, "");
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }
  return p;
}
function toPercent(parsedNumber) {
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  }
  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }
    parsedNumber.integerLen += 2;
  }
  return parsedNumber;
}
function parseNumber(num) {
  let numStr = Math.abs(num) + "";
  let exponent = 0, digits, integerLen;
  let i, j, zeros;
  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, "");
  }
  if ((i = numStr.search(/e/i)) > 0) {
    if (integerLen < 0)
      integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    integerLen = numStr.length;
  }
  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
  }
  if (i === (zeros = numStr.length)) {
    digits = [0];
    integerLen = 1;
  } else {
    zeros--;
    while (numStr.charAt(zeros) === ZERO_CHAR)
      zeros--;
    integerLen -= i;
    digits = [];
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  }
  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }
  return { digits, exponent, integerLen };
}
function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new RuntimeError(2307, ngDevMode && `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
  }
  let digits = parsedNumber.digits;
  let fractionLen = digits.length - parsedNumber.integerLen;
  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
  let roundAt = fractionSize + parsedNumber.integerLen;
  let digit = digits[roundAt];
  if (roundAt > 0) {
    digits.splice(Math.max(parsedNumber.integerLen, roundAt));
    for (let j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;
    for (let i = 1; i < roundAt; i++)
      digits[i] = 0;
  }
  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (let k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }
      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  }
  for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
    digits.push(0);
  let dropTrailingZeros = fractionSize !== 0;
  const minLen = minFrac + parsedNumber.integerLen;
  const carry = digits.reduceRight(function(carry2, d, i, digits2) {
    d = d + carry2;
    digits2[i] = d < 10 ? d : d - 10;
    if (dropTrailingZeros) {
      if (digits2[i] === 0 && i >= minLen) {
        digits2.pop();
      } else {
        dropTrailingZeros = false;
      }
    }
    return d >= 10 ? 1 : 0;
  }, 0);
  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}
function parseIntAutoRadix2(text2) {
  const result = parseInt(text2);
  if (isNaN(result)) {
    throw new RuntimeError(2305, ngDevMode && "Invalid integer literal when parsing " + text2);
  }
  return result;
}
function getPluralCategory(value, cases, ngLocalization, locale) {
  let key = `=${value}`;
  if (cases.indexOf(key) > -1) {
    return key;
  }
  key = ngLocalization.getPluralCategory(value, locale);
  if (cases.indexOf(key) > -1) {
    return key;
  }
  if (cases.indexOf("other") > -1) {
    return "other";
  }
  throw new RuntimeError(2308, ngDevMode && `No plural message found for value "${value}"`);
}
function getParentInjector(injector) {
  const parentNgModule = injector.get(NgModuleRef$1);
  return parentNgModule.injector;
}
function applyViewChange(view, record) {
  view.context.$implicit = record.item;
}
function getTypeName(type) {
  return type["name"] || typeof type;
}
function assertTemplate(templateRef, property2) {
  if (templateRef && !templateRef.createEmbeddedView) {
    throw new RuntimeError(2020, (typeof ngDevMode === "undefined" || ngDevMode) && `${property2} must be a TemplateRef, but received '${stringify(templateRef)}'.`);
  }
}
function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new RuntimeError(2e3, `An element with the "${attrName}" attribute (matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute (matching "NgSwitch" directive)`);
}
function invalidPipeArgumentError(type, value) {
  return new RuntimeError(2100, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);
}
function makeKeyValuePair(key, value) {
  return { key, value };
}
function defaultComparator(keyValueA, keyValueB) {
  const a = keyValueA.key;
  const b = keyValueB.key;
  if (a === b)
    return 0;
  if (a == null)
    return 1;
  if (b == null)
    return -1;
  if (typeof a == "string" && typeof b == "string") {
    return a < b ? -1 : 1;
  }
  if (typeof a == "number" && typeof b == "number") {
    return a - b;
  }
  if (typeof a == "boolean" && typeof b == "boolean") {
    return a < b ? -1 : 1;
  }
  const aString = String(a);
  const bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
function isValue(value) {
  return !(value == null || value === "" || value !== value);
}
function strToNumber(value) {
  if (typeof value === "string" && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }
  if (typeof value !== "number") {
    throw new RuntimeError(2309, ngDevMode && `${value} is not a number`);
  }
  return value;
}
var HashLocationStrategy, CURRENCIES_EN, NumberFormatStyle, Plural, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getLocalePluralCase2, DEFAULT_NB_OF_CURRENCY_DIGITS, ISO8601_DATE_REGEX, NAMED_FORMATS, DATE_FORMATS_SPLIT, JANUARY, THURSDAY, DATE_FORMATS, NUMBER_FORMAT_REGEXP, MAX_DIGITS, DECIMAL_SEP, ZERO_CHAR, PATTERN_SEP, GROUP_SEP, DIGIT_CHAR, CURRENCY_CHAR, PERCENT_CHAR, NgLocalization, NgLocaleLocalization, WS_REGEXP, EMPTY_ARRAY2, NgClass, NgComponentOutlet, NgForOfContext, NgForOf, NgIf, NgIfContext, SwitchView, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, NgStyle, NgTemplateOutlet, COMMON_DIRECTIVES, SubscribableStrategy, PromiseStrategy, _promiseStrategy, _subscribableStrategy, AsyncPipe, LowerCasePipe, unicodeWordMatch, TitleCasePipe, UpperCasePipe, DEFAULT_DATE_FORMAT, DATE_PIPE_DEFAULT_TIMEZONE, DATE_PIPE_DEFAULT_OPTIONS, DatePipe, _INTERPOLATION_REGEXP, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, DecimalPipe, PercentPipe, CurrencyPipe, SlicePipe, COMMON_PIPES, CommonModule;
var init_common_module = __esm({
  "node_modules/@angular/common/fesm2022/common_module.mjs"() {
    "use strict";
    init_core();
    init_core();
    init_location();
    HashLocationStrategy = class _HashLocationStrategy extends LocationStrategy {
      _platformLocation;
      _baseHref = "";
      _removeListenerFns = [];
      constructor(_platformLocation, _baseHref) {
        super();
        this._platformLocation = _platformLocation;
        if (_baseHref != null) {
          this._baseHref = _baseHref;
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        while (this._removeListenerFns.length) {
          this._removeListenerFns.pop()();
        }
      }
      onPopState(fn2) {
        this._removeListenerFns.push(this._platformLocation.onPopState(fn2), this._platformLocation.onHashChange(fn2));
      }
      getBaseHref() {
        return this._baseHref;
      }
      path(includeHash = false) {
        const path = this._platformLocation.hash ?? "#";
        return path.length > 0 ? path.substring(1) : path;
      }
      prepareExternalUrl(internal) {
        const url = joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? "#" + url : url;
      }
      pushState(state, title, path, queryParams) {
        const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;
        this._platformLocation.pushState(state, title, url);
      }
      replaceState(state, title, path, queryParams) {
        const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;
        this._platformLocation.replaceState(state, title, url);
      }
      forward() {
        this._platformLocation.forward();
      }
      back() {
        this._platformLocation.back();
      }
      getState() {
        return this._platformLocation.getState();
      }
      historyGo(relativePosition = 0) {
        this._platformLocation.historyGo?.(relativePosition);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _HashLocationStrategy, deps: [{ token: PlatformLocation }, { token: APP_BASE_HREF, optional: true }], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _HashLocationStrategy });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: HashLocationStrategy, decorators: [{
      type: Injectable
    }], ctorParameters: () => [{ type: PlatformLocation }, { type: void 0, decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }] }] });
    CURRENCIES_EN = { "ADP": [void 0, void 0, 0], "AFN": [void 0, "\u060B", 0], "ALL": [void 0, void 0, 0], "AMD": [void 0, "\u058F", 2], "AOA": [void 0, "Kz"], "ARS": [void 0, "$"], "AUD": ["A$", "$"], "AZN": [void 0, "\u20BC"], "BAM": [void 0, "KM"], "BBD": [void 0, "$"], "BDT": [void 0, "\u09F3"], "BHD": [void 0, void 0, 3], "BIF": [void 0, void 0, 0], "BMD": [void 0, "$"], "BND": [void 0, "$"], "BOB": [void 0, "Bs"], "BRL": ["R$"], "BSD": [void 0, "$"], "BWP": [void 0, "P"], "BYN": [void 0, void 0, 2], "BYR": [void 0, void 0, 0], "BZD": [void 0, "$"], "CAD": ["CA$", "$", 2], "CHF": [void 0, void 0, 2], "CLF": [void 0, void 0, 4], "CLP": [void 0, "$", 0], "CNY": ["CN\xA5", "\xA5"], "COP": [void 0, "$", 2], "CRC": [void 0, "\u20A1", 2], "CUC": [void 0, "$"], "CUP": [void 0, "$"], "CZK": [void 0, "K\u010D", 2], "DJF": [void 0, void 0, 0], "DKK": [void 0, "kr", 2], "DOP": [void 0, "$"], "EGP": [void 0, "E\xA3"], "ESP": [void 0, "\u20A7", 0], "EUR": ["\u20AC"], "FJD": [void 0, "$"], "FKP": [void 0, "\xA3"], "GBP": ["\xA3"], "GEL": [void 0, "\u20BE"], "GHS": [void 0, "GH\u20B5"], "GIP": [void 0, "\xA3"], "GNF": [void 0, "FG", 0], "GTQ": [void 0, "Q"], "GYD": [void 0, "$", 2], "HKD": ["HK$", "$"], "HNL": [void 0, "L"], "HRK": [void 0, "kn"], "HUF": [void 0, "Ft", 2], "IDR": [void 0, "Rp", 2], "ILS": ["\u20AA"], "INR": ["\u20B9"], "IQD": [void 0, void 0, 0], "IRR": [void 0, void 0, 0], "ISK": [void 0, "kr", 0], "ITL": [void 0, void 0, 0], "JMD": [void 0, "$"], "JOD": [void 0, void 0, 3], "JPY": ["\xA5", void 0, 0], "KHR": [void 0, "\u17DB"], "KMF": [void 0, "CF", 0], "KPW": [void 0, "\u20A9", 0], "KRW": ["\u20A9", void 0, 0], "KWD": [void 0, void 0, 3], "KYD": [void 0, "$"], "KZT": [void 0, "\u20B8"], "LAK": [void 0, "\u20AD", 0], "LBP": [void 0, "L\xA3", 0], "LKR": [void 0, "Rs"], "LRD": [void 0, "$"], "LTL": [void 0, "Lt"], "LUF": [void 0, void 0, 0], "LVL": [void 0, "Ls"], "LYD": [void 0, void 0, 3], "MGA": [void 0, "Ar", 0], "MGF": [void 0, void 0, 0], "MMK": [void 0, "K", 0], "MNT": [void 0, "\u20AE", 2], "MRO": [void 0, void 0, 0], "MUR": [void 0, "Rs", 2], "MXN": ["MX$", "$"], "MYR": [void 0, "RM"], "NAD": [void 0, "$"], "NGN": [void 0, "\u20A6"], "NIO": [void 0, "C$"], "NOK": [void 0, "kr", 2], "NPR": [void 0, "Rs"], "NZD": ["NZ$", "$"], "OMR": [void 0, void 0, 3], "PHP": ["\u20B1"], "PKR": [void 0, "Rs", 2], "PLN": [void 0, "z\u0142"], "PYG": [void 0, "\u20B2", 0], "RON": [void 0, "lei"], "RSD": [void 0, void 0, 0], "RUB": [void 0, "\u20BD"], "RWF": [void 0, "RF", 0], "SBD": [void 0, "$"], "SEK": [void 0, "kr", 2], "SGD": [void 0, "$"], "SHP": [void 0, "\xA3"], "SLE": [void 0, void 0, 2], "SLL": [void 0, void 0, 0], "SOS": [void 0, void 0, 0], "SRD": [void 0, "$"], "SSP": [void 0, "\xA3"], "STD": [void 0, void 0, 0], "STN": [void 0, "Db"], "SYP": [void 0, "\xA3", 0], "THB": [void 0, "\u0E3F"], "TMM": [void 0, void 0, 0], "TND": [void 0, void 0, 3], "TOP": [void 0, "T$"], "TRL": [void 0, void 0, 0], "TRY": [void 0, "\u20BA"], "TTD": [void 0, "$"], "TWD": ["NT$", "$", 2], "TZS": [void 0, void 0, 2], "UAH": [void 0, "\u20B4"], "UGX": [void 0, void 0, 0], "USD": ["$"], "UYI": [void 0, void 0, 0], "UYU": [void 0, "$"], "UYW": [void 0, void 0, 4], "UZS": [void 0, void 0, 2], "VEF": [void 0, "Bs", 2], "VND": ["\u20AB", void 0, 0], "VUV": [void 0, void 0, 0], "XAF": ["FCFA", void 0, 0], "XCD": ["EC$", "$"], "XOF": ["F\u202FCFA", void 0, 0], "XPF": ["CFPF", void 0, 0], "XXX": ["\xA4"], "YER": [void 0, void 0, 0], "ZAR": [void 0, "R"], "ZMK": [void 0, void 0, 0], "ZMW": [void 0, "ZK"], "ZWD": [void 0, void 0, 0] };
    (function(NumberFormatStyle2) {
      NumberFormatStyle2[NumberFormatStyle2["Decimal"] = 0] = "Decimal";
      NumberFormatStyle2[NumberFormatStyle2["Percent"] = 1] = "Percent";
      NumberFormatStyle2[NumberFormatStyle2["Currency"] = 2] = "Currency";
      NumberFormatStyle2[NumberFormatStyle2["Scientific"] = 3] = "Scientific";
    })(NumberFormatStyle || (NumberFormatStyle = {}));
    (function(Plural2) {
      Plural2[Plural2["Zero"] = 0] = "Zero";
      Plural2[Plural2["One"] = 1] = "One";
      Plural2[Plural2["Two"] = 2] = "Two";
      Plural2[Plural2["Few"] = 3] = "Few";
      Plural2[Plural2["Many"] = 4] = "Many";
      Plural2[Plural2["Other"] = 5] = "Other";
    })(Plural || (Plural = {}));
    (function(FormStyle2) {
      FormStyle2[FormStyle2["Format"] = 0] = "Format";
      FormStyle2[FormStyle2["Standalone"] = 1] = "Standalone";
    })(FormStyle || (FormStyle = {}));
    (function(TranslationWidth2) {
      TranslationWidth2[TranslationWidth2["Narrow"] = 0] = "Narrow";
      TranslationWidth2[TranslationWidth2["Abbreviated"] = 1] = "Abbreviated";
      TranslationWidth2[TranslationWidth2["Wide"] = 2] = "Wide";
      TranslationWidth2[TranslationWidth2["Short"] = 3] = "Short";
    })(TranslationWidth || (TranslationWidth = {}));
    (function(FormatWidth2) {
      FormatWidth2[FormatWidth2["Short"] = 0] = "Short";
      FormatWidth2[FormatWidth2["Medium"] = 1] = "Medium";
      FormatWidth2[FormatWidth2["Long"] = 2] = "Long";
      FormatWidth2[FormatWidth2["Full"] = 3] = "Full";
    })(FormatWidth || (FormatWidth = {}));
    NumberSymbol = {
      /**
       * Decimal separator.
       * For `en-US`, the dot character.
       * Example: 2,345`.`67
       */
      Decimal: 0,
      /**
       * Grouping separator, typically for thousands.
       * For `en-US`, the comma character.
       * Example: 2`,`345.67
       */
      Group: 1,
      /**
       * List-item separator.
       * Example: "one, two, and three"
       */
      List: 2,
      /**
       * Sign for percentage (out of 100).
       * Example: 23.4%
       */
      PercentSign: 3,
      /**
       * Sign for positive numbers.
       * Example: +23
       */
      PlusSign: 4,
      /**
       * Sign for negative numbers.
       * Example: -23
       */
      MinusSign: 5,
      /**
       * Computer notation for exponential value (n times a power of 10).
       * Example: 1.2E3
       */
      Exponential: 6,
      /**
       * Human-readable format of exponential.
       * Example: 1.2x103
       */
      SuperscriptingExponent: 7,
      /**
       * Sign for permille (out of 1000).
       * Example: 23.4‰
       */
      PerMille: 8,
      /**
       * Infinity, can be used with plus and minus.
       * Example: ∞, +∞, -∞
       */
      Infinity: 9,
      /**
       * Not a number.
       * Example: NaN
       */
      NaN: 10,
      /**
       * Symbol used between time units.
       * Example: 10:52
       */
      TimeSeparator: 11,
      /**
       * Decimal separator for currency values (fallback to `Decimal`).
       * Example: $2,345.67
       */
      CurrencyDecimal: 12,
      /**
       * Group separator for currency values (fallback to `Group`).
       * Example: $2,345.67
       */
      CurrencyGroup: 13
    };
    (function(WeekDay2) {
      WeekDay2[WeekDay2["Sunday"] = 0] = "Sunday";
      WeekDay2[WeekDay2["Monday"] = 1] = "Monday";
      WeekDay2[WeekDay2["Tuesday"] = 2] = "Tuesday";
      WeekDay2[WeekDay2["Wednesday"] = 3] = "Wednesday";
      WeekDay2[WeekDay2["Thursday"] = 4] = "Thursday";
      WeekDay2[WeekDay2["Friday"] = 5] = "Friday";
      WeekDay2[WeekDay2["Saturday"] = 6] = "Saturday";
    })(WeekDay || (WeekDay = {}));
    getLocalePluralCase2 = getLocalePluralCase;
    DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
    ISO8601_DATE_REGEX = /^(\d{4,})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    NAMED_FORMATS = {};
    DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
    JANUARY = 0;
    THURSDAY = 4;
    DATE_FORMATS = {};
    NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
    MAX_DIGITS = 22;
    DECIMAL_SEP = ".";
    ZERO_CHAR = "0";
    PATTERN_SEP = ";";
    GROUP_SEP = ",";
    DIGIT_CHAR = "#";
    CURRENCY_CHAR = "\xA4";
    PERCENT_CHAR = "%";
    NgLocalization = class _NgLocalization {
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgLocalization, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgLocalization, providedIn: "root", useFactory: (locale) => new NgLocaleLocalization(locale), deps: [{ token: LOCALE_ID }] });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgLocalization, decorators: [{
      type: Injectable,
      args: [{
        providedIn: "root",
        useFactory: (locale) => new NgLocaleLocalization(locale),
        deps: [LOCALE_ID]
      }]
    }] });
    NgLocaleLocalization = class _NgLocaleLocalization extends NgLocalization {
      locale;
      constructor(locale) {
        super();
        this.locale = locale;
      }
      getPluralCategory(value, locale) {
        const plural2 = getLocalePluralCase2(locale || this.locale)(value);
        switch (plural2) {
          case Plural.Zero:
            return "zero";
          case Plural.One:
            return "one";
          case Plural.Two:
            return "two";
          case Plural.Few:
            return "few";
          case Plural.Many:
            return "many";
          default:
            return "other";
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgLocaleLocalization, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgLocaleLocalization });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgLocaleLocalization, decorators: [{
      type: Injectable
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }] }] });
    WS_REGEXP = /\s+/;
    EMPTY_ARRAY2 = [];
    NgClass = class _NgClass {
      _ngEl;
      _renderer;
      initialClasses = EMPTY_ARRAY2;
      rawClass;
      stateMap = /* @__PURE__ */ new Map();
      constructor(_ngEl, _renderer) {
        this._ngEl = _ngEl;
        this._renderer = _renderer;
      }
      set klass(value) {
        this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY2;
      }
      set ngClass(value) {
        this.rawClass = typeof value === "string" ? value.trim().split(WS_REGEXP) : value;
      }
      /*
        The NgClass directive uses the custom change detection algorithm for its inputs. The custom
        algorithm is necessary since inputs are represented as complex object or arrays that need to be
        deeply-compared.
      
        This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance
        might negatively impact runtime performance of the entire change detection cycle. The design of
        this algorithm is making sure that:
        - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when
        needed), even if references to bound objects change;
        - there is no memory allocation if nothing changes (even relatively modest memory allocation
        during the change detection cycle can result in GC pauses for some of the CD cycles).
      
        The algorithm works by iterating over the set of bound classes, staring with [class] binding and
        then going over [ngClass] binding. For each CSS class name:
        - check if it was seen before (this information is tracked in the state map) and if its value
        changed;
        - mark it as "touched" - names that are not marked are not present in the latest set of binding
        and we can remove such class name from the internal data structures;
      
        After iteration over all the CSS class names we've got data structure with all the information
        necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush
        changes to the DOM and reset internal data structures so those are ready for the next change
        detection cycle.
         */
      ngDoCheck() {
        for (const klass of this.initialClasses) {
          this._updateState(klass, true);
        }
        const rawClass = this.rawClass;
        if (Array.isArray(rawClass) || rawClass instanceof Set) {
          for (const klass of rawClass) {
            this._updateState(klass, true);
          }
        } else if (rawClass != null) {
          for (const klass of Object.keys(rawClass)) {
            this._updateState(klass, Boolean(rawClass[klass]));
          }
        }
        this._applyStateDiff();
      }
      _updateState(klass, nextEnabled) {
        const state = this.stateMap.get(klass);
        if (state !== void 0) {
          if (state.enabled !== nextEnabled) {
            state.changed = true;
            state.enabled = nextEnabled;
          }
          state.touched = true;
        } else {
          this.stateMap.set(klass, { enabled: nextEnabled, changed: true, touched: true });
        }
      }
      _applyStateDiff() {
        for (const stateEntry of this.stateMap) {
          const klass = stateEntry[0];
          const state = stateEntry[1];
          if (state.changed) {
            this._toggleClass(klass, state.enabled);
            state.changed = false;
          } else if (!state.touched) {
            if (state.enabled) {
              this._toggleClass(klass, false);
            }
            this.stateMap.delete(klass);
          }
          state.touched = false;
        }
      }
      _toggleClass(klass, enabled) {
        if (ngDevMode) {
          if (typeof klass !== "string") {
            throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);
          }
        }
        klass = klass.trim();
        if (klass.length > 0) {
          klass.split(WS_REGEXP).forEach((klass2) => {
            if (enabled) {
              this._renderer.addClass(this._ngEl.nativeElement, klass2);
            } else {
              this._renderer.removeClass(this._ngEl.nativeElement, klass2);
            }
          });
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgClass, deps: [{ token: ElementRef }, { token: Renderer2 }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgClass, isStandalone: true, selector: "[ngClass]", inputs: { klass: ["class", "klass"], ngClass: "ngClass" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgClass, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngClass]"
      }]
    }], ctorParameters: () => [{ type: ElementRef }, { type: Renderer2 }], propDecorators: { klass: [{
      type: Input,
      args: ["class"]
    }], ngClass: [{
      type: Input,
      args: ["ngClass"]
    }] } });
    NgComponentOutlet = class _NgComponentOutlet {
      _viewContainerRef;
      // TODO(crisbeto): this should be `Type<T>`, but doing so broke a few
      // targets in a TGP so we need to do it in a major version.
      /** Component that should be rendered in the outlet. */
      ngComponentOutlet = null;
      ngComponentOutletInputs;
      ngComponentOutletInjector;
      ngComponentOutletEnvironmentInjector;
      ngComponentOutletContent;
      ngComponentOutletNgModule;
      /**
       * @deprecated This input is deprecated, use `ngComponentOutletNgModule` instead.
       */
      ngComponentOutletNgModuleFactory;
      _componentRef;
      _moduleRef;
      /**
       * A helper data structure that allows us to track inputs that were part of the
       * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones
       * that are no longer referenced.
       */
      _inputsUsed = /* @__PURE__ */ new Map();
      /**
       * Gets the instance of the currently-rendered component.
       * Will be null if no component has been rendered.
       */
      get componentInstance() {
        return this._componentRef?.instance ?? null;
      }
      constructor(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
      }
      _needToReCreateNgModuleInstance(changes) {
        return changes["ngComponentOutletNgModule"] !== void 0 || changes["ngComponentOutletNgModuleFactory"] !== void 0;
      }
      _needToReCreateComponentInstance(changes) {
        return changes["ngComponentOutlet"] !== void 0 || changes["ngComponentOutletContent"] !== void 0 || changes["ngComponentOutletInjector"] !== void 0 || changes["ngComponentOutletEnvironmentInjector"] !== void 0 || this._needToReCreateNgModuleInstance(changes);
      }
      /** @docs-private */
      ngOnChanges(changes) {
        if (this._needToReCreateComponentInstance(changes)) {
          this._viewContainerRef.clear();
          this._inputsUsed.clear();
          this._componentRef = void 0;
          if (this.ngComponentOutlet) {
            const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
            if (this._needToReCreateNgModuleInstance(changes)) {
              this._moduleRef?.destroy();
              if (this.ngComponentOutletNgModule) {
                this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));
              } else if (this.ngComponentOutletNgModuleFactory) {
                this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));
              } else {
                this._moduleRef = void 0;
              }
            }
            this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {
              injector,
              ngModuleRef: this._moduleRef,
              projectableNodes: this.ngComponentOutletContent,
              environmentInjector: this.ngComponentOutletEnvironmentInjector
            });
          }
        }
      }
      /** @docs-private */
      ngDoCheck() {
        if (this._componentRef) {
          if (this.ngComponentOutletInputs) {
            for (const inputName of Object.keys(this.ngComponentOutletInputs)) {
              this._inputsUsed.set(inputName, true);
            }
          }
          this._applyInputStateDiff(this._componentRef);
        }
      }
      /** @docs-private */
      ngOnDestroy() {
        this._moduleRef?.destroy();
      }
      _applyInputStateDiff(componentRef) {
        for (const [inputName, touched] of this._inputsUsed) {
          if (!touched) {
            componentRef.setInput(inputName, void 0);
            this._inputsUsed.delete(inputName);
          } else {
            componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);
            this._inputsUsed.set(inputName, false);
          }
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgComponentOutlet, deps: [{ token: ViewContainerRef }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgComponentOutlet, isStandalone: true, selector: "[ngComponentOutlet]", inputs: { ngComponentOutlet: "ngComponentOutlet", ngComponentOutletInputs: "ngComponentOutletInputs", ngComponentOutletInjector: "ngComponentOutletInjector", ngComponentOutletEnvironmentInjector: "ngComponentOutletEnvironmentInjector", ngComponentOutletContent: "ngComponentOutletContent", ngComponentOutletNgModule: "ngComponentOutletNgModule", ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory" }, exportAs: ["ngComponentOutlet"], usesOnChanges: true, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgComponentOutlet, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngComponentOutlet]",
        exportAs: "ngComponentOutlet"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }], propDecorators: { ngComponentOutlet: [{
      type: Input
    }], ngComponentOutletInputs: [{
      type: Input
    }], ngComponentOutletInjector: [{
      type: Input
    }], ngComponentOutletEnvironmentInjector: [{
      type: Input
    }], ngComponentOutletContent: [{
      type: Input
    }], ngComponentOutletNgModule: [{
      type: Input
    }], ngComponentOutletNgModuleFactory: [{
      type: Input
    }] } });
    NgForOfContext = class {
      $implicit;
      ngForOf;
      index;
      count;
      constructor($implicit, ngForOf, index, count) {
        this.$implicit = $implicit;
        this.ngForOf = ngForOf;
        this.index = index;
        this.count = count;
      }
      // Indicates whether this is the first item in the collection.
      get first() {
        return this.index === 0;
      }
      // Indicates whether this is the last item in the collection.
      get last() {
        return this.index === this.count - 1;
      }
      // Indicates whether an index of this item in the collection is even.
      get even() {
        return this.index % 2 === 0;
      }
      // Indicates whether an index of this item in the collection is odd.
      get odd() {
        return !this.even;
      }
    };
    NgForOf = class _NgForOf {
      _viewContainer;
      _template;
      _differs;
      /**
       * The value of the iterable expression, which can be used as a
       * [template input variable](guide/directives/structural-directives#shorthand).
       * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.
       */
      set ngForOf(ngForOf) {
        this._ngForOf = ngForOf;
        this._ngForOfDirty = true;
      }
      /**
       * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
       *
       * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
       * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
       * as the key.
       *
       * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
       * it produces for these items.
       *
       * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
       * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
       * primary key), and this iterable could be updated with new object instances that still
       * represent the same underlying entity (for example, when data is re-fetched from the server,
       * and the iterable is recreated and re-rendered, but most of the data is still the same).
       *
       * @see {@link TrackByFunction}
       * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.
       */
      set ngForTrackBy(fn2) {
        if ((typeof ngDevMode === "undefined" || ngDevMode) && fn2 != null && typeof fn2 !== "function") {
          console.warn(`trackBy must be a function, but received ${JSON.stringify(fn2)}. See https://angular.dev/api/common/NgForOf#change-propagation for more information.`);
        }
        this._trackByFn = fn2;
      }
      get ngForTrackBy() {
        return this._trackByFn;
      }
      _ngForOf = null;
      _ngForOfDirty = true;
      _differ = null;
      // waiting for microsoft/typescript#43662 to allow the return type `TrackByFunction|undefined` for
      // the getter
      _trackByFn;
      constructor(_viewContainer, _template, _differs) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
      }
      /**
       * A reference to the template that is stamped out for each item in the iterable.
       * @see [template reference variable](guide/templates/variables#template-reference-variables)
       * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.
       */
      set ngForTemplate(value) {
        if (value) {
          this._template = value;
        }
      }
      /**
       * Applies the changes when needed.
       * @docs-private
       */
      ngDoCheck() {
        if (this._ngForOfDirty) {
          this._ngForOfDirty = false;
          const value = this._ngForOf;
          if (!this._differ && value) {
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              try {
                this._differ = this._differs.find(value).create(this.ngForTrackBy);
              } catch {
                let errorMessage = `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;
                if (typeof value === "object") {
                  errorMessage += " Did you mean to use the keyvalue pipe?";
                }
                throw new RuntimeError(-2200, errorMessage);
              }
            } else {
              this._differ = this._differs.find(value).create(this.ngForTrackBy);
            }
          }
        }
        if (this._differ) {
          const changes = this._differ.diff(this._ngForOf);
          if (changes)
            this._applyChanges(changes);
        }
      }
      _applyChanges(changes) {
        const viewContainer = this._viewContainer;
        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
          if (item.previousIndex == null) {
            viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? void 0 : currentIndex);
          } else if (currentIndex == null) {
            viewContainer.remove(adjustedPreviousIndex === null ? void 0 : adjustedPreviousIndex);
          } else if (adjustedPreviousIndex !== null) {
            const view = viewContainer.get(adjustedPreviousIndex);
            viewContainer.move(view, currentIndex);
            applyViewChange(view, item);
          }
        });
        for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
          const viewRef = viewContainer.get(i);
          const context2 = viewRef.context;
          context2.index = i;
          context2.count = ilen;
          context2.ngForOf = this._ngForOf;
        }
        changes.forEachIdentityChange((record) => {
          const viewRef = viewContainer.get(record.currentIndex);
          applyViewChange(viewRef, record);
        });
      }
      /**
       * Asserts the correct type of the context for the template that `NgForOf` will render.
       *
       * The presence of this method is a signal to the Ivy template type-check compiler that the
       * `NgForOf` structural directive renders its template with a specific context type.
       */
      static ngTemplateContextGuard(dir, ctx) {
        return true;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgForOf, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: IterableDiffers }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgForOf, isStandalone: true, selector: "[ngFor][ngForOf]", inputs: { ngForOf: "ngForOf", ngForTrackBy: "ngForTrackBy", ngForTemplate: "ngForTemplate" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgForOf, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngFor][ngForOf]"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: IterableDiffers }], propDecorators: { ngForOf: [{
      type: Input
    }], ngForTrackBy: [{
      type: Input
    }], ngForTemplate: [{
      type: Input
    }] } });
    NgIf = class _NgIf {
      _viewContainer;
      _context = new NgIfContext();
      _thenTemplateRef = null;
      _elseTemplateRef = null;
      _thenViewRef = null;
      _elseViewRef = null;
      constructor(_viewContainer, templateRef) {
        this._viewContainer = _viewContainer;
        this._thenTemplateRef = templateRef;
      }
      /**
       * The Boolean expression to evaluate as the condition for showing a template.
       * @deprecated Use the `@if` block instead. Intent to remove in v22
       */
      set ngIf(condition) {
        this._context.$implicit = this._context.ngIf = condition;
        this._updateView();
      }
      /**
       * A template to show if the condition expression evaluates to true.
       * @deprecated Use the `@if` block instead. Intent to remove in v22
       */
      set ngIfThen(templateRef) {
        assertTemplate(templateRef, (typeof ngDevMode === "undefined" || ngDevMode) && "ngIfThen");
        this._thenTemplateRef = templateRef;
        this._thenViewRef = null;
        this._updateView();
      }
      /**
       * A template to show if the condition expression evaluates to false.
       * @deprecated Use the `@if` block instead. Intent to remove in v22
       */
      set ngIfElse(templateRef) {
        assertTemplate(templateRef, (typeof ngDevMode === "undefined" || ngDevMode) && "ngIfElse");
        this._elseTemplateRef = templateRef;
        this._elseViewRef = null;
        this._updateView();
      }
      _updateView() {
        if (this._context.$implicit) {
          if (!this._thenViewRef) {
            this._viewContainer.clear();
            this._elseViewRef = null;
            if (this._thenTemplateRef) {
              this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
            }
          }
        } else {
          if (!this._elseViewRef) {
            this._viewContainer.clear();
            this._thenViewRef = null;
            if (this._elseTemplateRef) {
              this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
            }
          }
        }
      }
      /** @internal */
      static ngIfUseIfTypeGuard;
      /**
       * Assert the correct type of the expression bound to the `ngIf` input within the template.
       *
       * The presence of this static field is a signal to the Ivy template type check compiler that
       * when the `NgIf` structural directive renders its template, the type of the expression bound
       * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to
       * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.
       */
      static ngTemplateGuard_ngIf;
      /**
       * Asserts the correct type of the context for the template that `NgIf` will render.
       *
       * The presence of this method is a signal to the Ivy template type-check compiler that the
       * `NgIf` structural directive renders its template with a specific context type.
       */
      static ngTemplateContextGuard(dir, ctx) {
        return true;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgIf, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgIf, isStandalone: true, selector: "[ngIf]", inputs: { ngIf: "ngIf", ngIfThen: "ngIfThen", ngIfElse: "ngIfElse" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgIf, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngIf]"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }], propDecorators: { ngIf: [{
      type: Input
    }], ngIfThen: [{
      type: Input
    }], ngIfElse: [{
      type: Input
    }] } });
    NgIfContext = class {
      $implicit = null;
      ngIf = null;
    };
    SwitchView = class {
      _viewContainerRef;
      _templateRef;
      _created = false;
      constructor(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
      }
      create() {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
      }
      destroy() {
        this._created = false;
        this._viewContainerRef.clear();
      }
      enforceState(created) {
        if (created && !this._created) {
          this.create();
        } else if (!created && this._created) {
          this.destroy();
        }
      }
    };
    NgSwitch = class _NgSwitch {
      _defaultViews = [];
      _defaultUsed = false;
      _caseCount = 0;
      _lastCaseCheckIndex = 0;
      _lastCasesMatched = false;
      _ngSwitch;
      /** @deprecated Use the `@switch` block instead. Intent to remove in v22 */
      set ngSwitch(newValue) {
        this._ngSwitch = newValue;
        if (this._caseCount === 0) {
          this._updateDefaultCases(true);
        }
      }
      /** @internal */
      _addCase() {
        return this._caseCount++;
      }
      /** @internal */
      _addDefault(view) {
        this._defaultViews.push(view);
      }
      /** @internal */
      _matchCase(value) {
        const matched = value === this._ngSwitch;
        this._lastCasesMatched ||= matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
          this._updateDefaultCases(!this._lastCasesMatched);
          this._lastCaseCheckIndex = 0;
          this._lastCasesMatched = false;
        }
        return matched;
      }
      _updateDefaultCases(useDefault) {
        if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {
          this._defaultUsed = useDefault;
          for (const defaultView of this._defaultViews) {
            defaultView.enforceState(useDefault);
          }
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgSwitch, deps: [], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgSwitch, isStandalone: true, selector: "[ngSwitch]", inputs: { ngSwitch: "ngSwitch" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgSwitch, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngSwitch]"
      }]
    }], propDecorators: { ngSwitch: [{
      type: Input
    }] } });
    NgSwitchCase = class _NgSwitchCase {
      ngSwitch;
      _view;
      /**
       * Stores the HTML template to be selected on match.
       * @deprecated Use the `@case` block within a `@switch` block instead. Intent to remove in v22
       */
      ngSwitchCase;
      constructor(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
          throwNgSwitchProviderNotFoundError("ngSwitchCase", "NgSwitchCase");
        }
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
      }
      /**
       * Performs case matching. For internal use only.
       * @docs-private
       */
      ngDoCheck() {
        this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgSwitchCase, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: NgSwitch, host: true, optional: true }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgSwitchCase, isStandalone: true, selector: "[ngSwitchCase]", inputs: { ngSwitchCase: "ngSwitchCase" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgSwitchCase, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngSwitchCase]"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: NgSwitch, decorators: [{
      type: Optional
    }, {
      type: Host
    }] }], propDecorators: { ngSwitchCase: [{
      type: Input
    }] } });
    NgSwitchDefault = class _NgSwitchDefault {
      constructor(viewContainer, templateRef, ngSwitch) {
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
          throwNgSwitchProviderNotFoundError("ngSwitchDefault", "NgSwitchDefault");
        }
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgSwitchDefault, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: NgSwitch, host: true, optional: true }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgSwitchDefault, isStandalone: true, selector: "[ngSwitchDefault]", ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgSwitchDefault, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngSwitchDefault]"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: NgSwitch, decorators: [{
      type: Optional
    }, {
      type: Host
    }] }] });
    NgPlural = class _NgPlural {
      _localization;
      _activeView;
      _caseViews = {};
      constructor(_localization) {
        this._localization = _localization;
      }
      set ngPlural(value) {
        this._updateView(value);
      }
      addCase(value, switchView) {
        this._caseViews[value] = switchView;
      }
      _updateView(switchValue) {
        this._clearViews();
        const cases = Object.keys(this._caseViews);
        const key = getPluralCategory(switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
      }
      _clearViews() {
        if (this._activeView)
          this._activeView.destroy();
      }
      _activateView(view) {
        if (view) {
          this._activeView = view;
          this._activeView.create();
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgPlural, deps: [{ token: NgLocalization }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgPlural, isStandalone: true, selector: "[ngPlural]", inputs: { ngPlural: "ngPlural" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgPlural, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngPlural]"
      }]
    }], ctorParameters: () => [{ type: NgLocalization }], propDecorators: { ngPlural: [{
      type: Input
    }] } });
    NgPluralCase = class _NgPluralCase {
      value;
      constructor(value, template2, viewContainer, ngPlural) {
        this.value = value;
        const isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template2));
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgPluralCase, deps: [{ token: "ngPluralCase", attribute: true }, { token: TemplateRef }, { token: ViewContainerRef }, { token: NgPlural, host: true }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgPluralCase, isStandalone: true, selector: "[ngPluralCase]", ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgPluralCase, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngPluralCase]"
      }]
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Attribute2,
      args: ["ngPluralCase"]
    }] }, { type: TemplateRef }, { type: ViewContainerRef }, { type: NgPlural, decorators: [{
      type: Host
    }] }] });
    NgStyle = class _NgStyle {
      _ngEl;
      _differs;
      _renderer;
      _ngStyle = null;
      _differ = null;
      constructor(_ngEl, _differs, _renderer) {
        this._ngEl = _ngEl;
        this._differs = _differs;
        this._renderer = _renderer;
      }
      set ngStyle(values) {
        this._ngStyle = values;
        if (!this._differ && values) {
          this._differ = this._differs.find(values).create();
        }
      }
      ngDoCheck() {
        if (this._differ) {
          const changes = this._differ.diff(this._ngStyle);
          if (changes) {
            this._applyChanges(changes);
          }
        }
      }
      _setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split(".");
        const flags = name.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
        if (value != null) {
          this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);
        } else {
          this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);
        }
      }
      _applyChanges(changes) {
        changes.forEachRemovedItem((record) => this._setStyle(record.key, null));
        changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));
        changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgStyle, deps: [{ token: ElementRef }, { token: KeyValueDiffers }, { token: Renderer2 }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgStyle, isStandalone: true, selector: "[ngStyle]", inputs: { ngStyle: "ngStyle" }, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgStyle, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngStyle]"
      }]
    }], ctorParameters: () => [{ type: ElementRef }, { type: KeyValueDiffers }, { type: Renderer2 }], propDecorators: { ngStyle: [{
      type: Input,
      args: ["ngStyle"]
    }] } });
    NgTemplateOutlet = class _NgTemplateOutlet {
      _viewContainerRef;
      _viewRef = null;
      /**
       * A context object to attach to the {@link EmbeddedViewRef}. This should be an
       * object, the object's keys will be available for binding by the local template `let`
       * declarations.
       * Using the key `$implicit` in the context object will set its value as default.
       */
      ngTemplateOutletContext = null;
      /**
       * A string defining the template reference and optionally the context object for the template.
       */
      ngTemplateOutlet = null;
      /** Injector to be used within the embedded view. */
      ngTemplateOutletInjector = null;
      constructor(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
      }
      ngOnChanges(changes) {
        if (this._shouldRecreateView(changes)) {
          const viewContainerRef = this._viewContainerRef;
          if (this._viewRef) {
            viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
          }
          if (!this.ngTemplateOutlet) {
            this._viewRef = null;
            return;
          }
          const viewContext = this._createContextForwardProxy();
          this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {
            injector: this.ngTemplateOutletInjector ?? void 0
          });
        }
      }
      /**
       * We need to re-create existing embedded view if either is true:
       * - the outlet changed.
       * - the injector changed.
       */
      _shouldRecreateView(changes) {
        return !!changes["ngTemplateOutlet"] || !!changes["ngTemplateOutletInjector"];
      }
      /**
       * For a given outlet instance, we create a proxy object that delegates
       * to the user-specified context. This allows changing, or swapping out
       * the context object completely without having to destroy/re-create the view.
       */
      _createContextForwardProxy() {
        return new Proxy({}, {
          set: (_target, prop, newValue) => {
            if (!this.ngTemplateOutletContext) {
              return false;
            }
            return Reflect.set(this.ngTemplateOutletContext, prop, newValue);
          },
          get: (_target, prop, receiver) => {
            if (!this.ngTemplateOutletContext) {
              return void 0;
            }
            return Reflect.get(this.ngTemplateOutletContext, prop, receiver);
          }
        });
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgTemplateOutlet, deps: [{ token: ViewContainerRef }], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "20.1.4", type: _NgTemplateOutlet, isStandalone: true, selector: "[ngTemplateOutlet]", inputs: { ngTemplateOutletContext: "ngTemplateOutletContext", ngTemplateOutlet: "ngTemplateOutlet", ngTemplateOutletInjector: "ngTemplateOutletInjector" }, usesOnChanges: true, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgTemplateOutlet, decorators: [{
      type: Directive,
      args: [{
        selector: "[ngTemplateOutlet]"
      }]
    }], ctorParameters: () => [{ type: ViewContainerRef }], propDecorators: { ngTemplateOutletContext: [{
      type: Input
    }], ngTemplateOutlet: [{
      type: Input
    }], ngTemplateOutletInjector: [{
      type: Input
    }] } });
    COMMON_DIRECTIVES = [
      NgClass,
      NgComponentOutlet,
      NgForOf,
      NgIf,
      NgTemplateOutlet,
      NgStyle,
      NgSwitch,
      NgSwitchCase,
      NgSwitchDefault,
      NgPlural,
      NgPluralCase
    ];
    SubscribableStrategy = class {
      createSubscription(async2, updateLatestValue, onError) {
        return untracked2(() => async2.subscribe({
          next: updateLatestValue,
          error: onError
        }));
      }
      dispose(subscription) {
        untracked2(() => subscription.unsubscribe());
      }
    };
    PromiseStrategy = class {
      createSubscription(async2, updateLatestValue, onError) {
        async2.then(
          // Using optional chaining because we may have set it to `null`; since the promise
          // is async, the view might be destroyed by the time the promise resolves.
          (v) => updateLatestValue?.(v),
          (e) => onError?.(e)
        );
        return {
          unsubscribe: () => {
            updateLatestValue = null;
            onError = null;
          }
        };
      }
      dispose(subscription) {
        subscription.unsubscribe();
      }
    };
    _promiseStrategy = new PromiseStrategy();
    _subscribableStrategy = new SubscribableStrategy();
    AsyncPipe = class _AsyncPipe {
      _ref;
      _latestValue = null;
      markForCheckOnValueUpdate = true;
      _subscription = null;
      _obj = null;
      _strategy = null;
      applicationErrorHandler = inject2(INTERNAL_APPLICATION_ERROR_HANDLER);
      constructor(ref) {
        this._ref = ref;
      }
      ngOnDestroy() {
        if (this._subscription) {
          this._dispose();
        }
        this._ref = null;
      }
      transform(obj) {
        if (!this._obj) {
          if (obj) {
            try {
              this.markForCheckOnValueUpdate = false;
              this._subscribe(obj);
            } finally {
              this.markForCheckOnValueUpdate = true;
            }
          }
          return this._latestValue;
        }
        if (obj !== this._obj) {
          this._dispose();
          return this.transform(obj);
        }
        return this._latestValue;
      }
      _subscribe(obj) {
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value), (e) => this.applicationErrorHandler(e));
      }
      _selectStrategy(obj) {
        if (isPromise2(obj)) {
          return _promiseStrategy;
        }
        if (isSubscribable(obj)) {
          return _subscribableStrategy;
        }
        throw invalidPipeArgumentError(_AsyncPipe, obj);
      }
      _dispose() {
        this._strategy.dispose(this._subscription);
        this._latestValue = null;
        this._subscription = null;
        this._obj = null;
      }
      _updateLatestValue(async2, value) {
        if (async2 === this._obj) {
          this._latestValue = value;
          if (this.markForCheckOnValueUpdate) {
            this._ref?.markForCheck();
          }
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _AsyncPipe, deps: [{ token: ChangeDetectorRef }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _AsyncPipe, isStandalone: true, name: "async", pure: false });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: AsyncPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "async",
        pure: false
      }]
    }], ctorParameters: () => [{ type: ChangeDetectorRef }] });
    LowerCasePipe = class _LowerCasePipe {
      transform(value) {
        if (value == null)
          return null;
        if (typeof value !== "string") {
          throw invalidPipeArgumentError(_LowerCasePipe, value);
        }
        return value.toLowerCase();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _LowerCasePipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _LowerCasePipe, isStandalone: true, name: "lowercase" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: LowerCasePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "lowercase"
      }]
    }] });
    unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
    TitleCasePipe = class _TitleCasePipe {
      transform(value) {
        if (value == null)
          return null;
        if (typeof value !== "string") {
          throw invalidPipeArgumentError(_TitleCasePipe, value);
        }
        return value.replace(unicodeWordMatch, (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase());
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _TitleCasePipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _TitleCasePipe, isStandalone: true, name: "titlecase" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: TitleCasePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "titlecase"
      }]
    }] });
    UpperCasePipe = class _UpperCasePipe {
      transform(value) {
        if (value == null)
          return null;
        if (typeof value !== "string") {
          throw invalidPipeArgumentError(_UpperCasePipe, value);
        }
        return value.toUpperCase();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _UpperCasePipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _UpperCasePipe, isStandalone: true, name: "uppercase" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: UpperCasePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "uppercase"
      }]
    }] });
    DEFAULT_DATE_FORMAT = "mediumDate";
    DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_TIMEZONE" : "");
    DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_OPTIONS" : "");
    DatePipe = class _DatePipe {
      locale;
      defaultTimezone;
      defaultOptions;
      constructor(locale, defaultTimezone, defaultOptions) {
        this.locale = locale;
        this.defaultTimezone = defaultTimezone;
        this.defaultOptions = defaultOptions;
      }
      transform(value, format, timezone, locale) {
        if (value == null || value === "" || value !== value)
          return null;
        try {
          const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;
          const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? void 0;
          return formatDate(value, _format, locale || this.locale, _timezone);
        } catch (error) {
          throw invalidPipeArgumentError(_DatePipe, error.message);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _DatePipe, deps: [{ token: LOCALE_ID }, { token: DATE_PIPE_DEFAULT_TIMEZONE, optional: true }, { token: DATE_PIPE_DEFAULT_OPTIONS, optional: true }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _DatePipe, isStandalone: true, name: "date" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: DatePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "date"
      }]
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }] }, { type: void 0, decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_TIMEZONE]
    }, {
      type: Optional
    }] }, { type: void 0, decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_OPTIONS]
    }, {
      type: Optional
    }] }] });
    _INTERPOLATION_REGEXP = /#/g;
    I18nPluralPipe = class _I18nPluralPipe {
      _localization;
      constructor(_localization) {
        this._localization = _localization;
      }
      /**
       * @param value the number to be formatted
       * @param pluralMap an object that mimics the ICU format, see
       * https://unicode-org.github.io/icu/userguide/format_parse/messages/.
       * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
       * default).
       */
      transform(value, pluralMap, locale) {
        if (value == null)
          return "";
        if (typeof pluralMap !== "object" || pluralMap === null) {
          throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
        }
        const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _I18nPluralPipe, deps: [{ token: NgLocalization }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _I18nPluralPipe, isStandalone: true, name: "i18nPlural" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: I18nPluralPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "i18nPlural"
      }]
    }], ctorParameters: () => [{ type: NgLocalization }] });
    I18nSelectPipe = class _I18nSelectPipe {
      /**
       * @param value a string to be internationalized.
       * @param mapping an object that indicates the text that should be displayed
       * for different values of the provided `value`.
       */
      transform(value, mapping) {
        if (value == null)
          return "";
        if (typeof mapping !== "object" || typeof value !== "string") {
          throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
          return mapping[value];
        }
        if (mapping.hasOwnProperty("other")) {
          return mapping["other"];
        }
        return "";
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _I18nSelectPipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _I18nSelectPipe, isStandalone: true, name: "i18nSelect" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: I18nSelectPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "i18nSelect"
      }]
    }] });
    JsonPipe = class _JsonPipe {
      /**
       * @param value A value of any type to convert into a JSON-format string.
       */
      transform(value) {
        return JSON.stringify(value, null, 2);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _JsonPipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _JsonPipe, isStandalone: true, name: "json", pure: false });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: JsonPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "json",
        pure: false
      }]
    }] });
    KeyValuePipe = class _KeyValuePipe {
      differs;
      constructor(differs) {
        this.differs = differs;
      }
      differ;
      keyValues = [];
      compareFn = defaultComparator;
      transform(input2, compareFn = defaultComparator) {
        if (!input2 || !(input2 instanceof Map) && typeof input2 !== "object") {
          return null;
        }
        this.differ ??= this.differs.find(input2).create();
        const differChanges = this.differ.diff(input2);
        const compareFnChanged = compareFn !== this.compareFn;
        if (differChanges) {
          this.keyValues = [];
          differChanges.forEachItem((r) => {
            this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
          });
        }
        if (differChanges || compareFnChanged) {
          if (compareFn) {
            this.keyValues.sort(compareFn);
          }
          this.compareFn = compareFn;
        }
        return this.keyValues;
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _KeyValuePipe, deps: [{ token: KeyValueDiffers }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _KeyValuePipe, isStandalone: true, name: "keyvalue", pure: false });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: KeyValuePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "keyvalue",
        pure: false
      }]
    }], ctorParameters: () => [{ type: KeyValueDiffers }] });
    DecimalPipe = class _DecimalPipe {
      _locale;
      constructor(_locale) {
        this._locale = _locale;
      }
      transform(value, digitsInfo, locale) {
        if (!isValue(value))
          return null;
        locale ||= this._locale;
        try {
          const num = strToNumber(value);
          return formatNumber(num, locale, digitsInfo);
        } catch (error) {
          throw invalidPipeArgumentError(_DecimalPipe, error.message);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _DecimalPipe, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _DecimalPipe, isStandalone: true, name: "number" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: DecimalPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "number"
      }]
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }] }] });
    PercentPipe = class _PercentPipe {
      _locale;
      constructor(_locale) {
        this._locale = _locale;
      }
      /**
       *
       * @param value The number to be formatted as a percentage.
       * @param digitsInfo Decimal representation options, specified by a string
       * in the following format:<br>
       * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
       *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
       * Default is `1`.
       *   - `minFractionDigits`: The minimum number of digits after the decimal point.
       * Default is `0`.
       *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
       * Default is `0`.
       * @param locale A locale code for the locale format rules to use.
       * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
       * See [Setting your app locale](guide/i18n/locale-id).
       */
      transform(value, digitsInfo, locale) {
        if (!isValue(value))
          return null;
        locale ||= this._locale;
        try {
          const num = strToNumber(value);
          return formatPercent(num, locale, digitsInfo);
        } catch (error) {
          throw invalidPipeArgumentError(_PercentPipe, error.message);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PercentPipe, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _PercentPipe, isStandalone: true, name: "percent" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PercentPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "percent"
      }]
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }] }] });
    CurrencyPipe = class _CurrencyPipe {
      _locale;
      _defaultCurrencyCode;
      constructor(_locale, _defaultCurrencyCode = "USD") {
        this._locale = _locale;
        this._defaultCurrencyCode = _defaultCurrencyCode;
      }
      transform(value, currencyCode = this._defaultCurrencyCode, display = "symbol", digitsInfo, locale) {
        if (!isValue(value))
          return null;
        locale ||= this._locale;
        if (typeof display === "boolean") {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
          }
          display = display ? "symbol" : "code";
        }
        let currency = currencyCode || this._defaultCurrencyCode;
        if (display !== "code") {
          if (display === "symbol" || display === "symbol-narrow") {
            currency = getCurrencySymbol(currency, display === "symbol" ? "wide" : "narrow", locale);
          } else {
            currency = display;
          }
        }
        try {
          const num = strToNumber(value);
          return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
        } catch (error) {
          throw invalidPipeArgumentError(_CurrencyPipe, error.message);
        }
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _CurrencyPipe, deps: [{ token: LOCALE_ID }, { token: DEFAULT_CURRENCY_CODE }], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _CurrencyPipe, isStandalone: true, name: "currency" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: CurrencyPipe, decorators: [{
      type: Pipe,
      args: [{
        name: "currency"
      }]
    }], ctorParameters: () => [{ type: void 0, decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }] }, { type: void 0, decorators: [{
      type: Inject,
      args: [DEFAULT_CURRENCY_CODE]
    }] }] });
    SlicePipe = class _SlicePipe {
      transform(value, start, end) {
        if (value == null)
          return null;
        const supports = typeof value === "string" || Array.isArray(value);
        if (!supports) {
          throw invalidPipeArgumentError(_SlicePipe, value);
        }
        return value.slice(start, end);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _SlicePipe, deps: [], target: FactoryTarget.Pipe });
      static \u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _SlicePipe, isStandalone: true, name: "slice", pure: false });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: SlicePipe, decorators: [{
      type: Pipe,
      args: [{
        name: "slice",
        pure: false
      }]
    }] });
    COMMON_PIPES = [
      AsyncPipe,
      UpperCasePipe,
      LowerCasePipe,
      JsonPipe,
      SlicePipe,
      DecimalPipe,
      PercentPipe,
      TitleCasePipe,
      CurrencyPipe,
      DatePipe,
      I18nPluralPipe,
      I18nSelectPipe,
      KeyValuePipe
    ];
    CommonModule = class _CommonModule {
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _CommonModule, deps: [], target: FactoryTarget.NgModule });
      static \u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "20.1.4", ngImport: core_exports, type: _CommonModule, imports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe], exports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe] });
      static \u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _CommonModule });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: CommonModule, decorators: [{
      type: NgModule,
      args: [{
        imports: [COMMON_DIRECTIVES, COMMON_PIPES],
        exports: [COMMON_DIRECTIVES, COMMON_PIPES]
      }]
    }] });
  }
});

// node_modules/@angular/common/fesm2022/xhr.mjs
function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);
  for (const cookie of cookieStr.split(";")) {
    const eqIndex = cookie.indexOf("=");
    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
    if (cookieName.trim() === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}
var XhrFactory;
var init_xhr = __esm({
  "node_modules/@angular/common/fesm2022/xhr.mjs"() {
    "use strict";
    XhrFactory = class {
    };
  }
});

// node_modules/@angular/common/fesm2022/platform_navigation.mjs
var PlatformNavigation;
var init_platform_navigation = __esm({
  "node_modules/@angular/common/fesm2022/platform_navigation.mjs"() {
    "use strict";
    init_core();
    init_core();
    PlatformNavigation = class _PlatformNavigation {
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PlatformNavigation, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PlatformNavigation, providedIn: "platform", useFactory: () => window.navigation });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PlatformNavigation, decorators: [{
      type: Injectable,
      args: [{ providedIn: "platform", useFactory: () => window.navigation }]
    }] });
  }
});

// node_modules/@angular/common/fesm2022/common.mjs
function isPlatformBrowser(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
function getUrl(src, win) {
  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);
}
function isAbsoluteUrl(src) {
  return /^https?:\/\//.test(src);
}
function extractHostname(url) {
  return isAbsoluteUrl(url) ? new URL(url).hostname : url;
}
function isValidPath(path) {
  const isString = typeof path === "string";
  if (!isString || path.trim() === "") {
    return false;
  }
  try {
    const url = new URL(path);
    return true;
  } catch {
    return false;
  }
}
function normalizePath(path) {
  return path.endsWith("/") ? path.slice(0, -1) : path;
}
function normalizeSrc(src) {
  return src.startsWith("/") ? src.slice(1) : src;
}
function createImageLoader(buildUrlFn, exampleUrls) {
  return function provideImageLoader(path) {
    if (!isValidPath(path)) {
      throwInvalidPathError(path, exampleUrls || []);
    }
    path = normalizePath(path);
    const loaderFn = (config2) => {
      if (isAbsoluteUrl(config2.src)) {
        throwUnexpectedAbsoluteUrlError(path, config2.src);
      }
      return buildUrlFn(path, __spreadProps(__spreadValues({}, config2), { src: normalizeSrc(config2.src) }));
    };
    const providers = [{ provide: IMAGE_LOADER, useValue: loaderFn }];
    return providers;
  };
}
function throwInvalidPathError(path, exampleUrls) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected an invalid path (\`${path}\`). To fix this, supply a path using one of the following formats: ${exampleUrls.join(" or ")}`);
}
function throwUnexpectedAbsoluteUrlError(path, url) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected a \`<img>\` tag with an invalid \`ngSrc\` attribute: ${url}. This image loader expects \`ngSrc\` to be a relative URL - however the provided value is an absolute URL. To fix this, provide \`ngSrc\` as a path relative to the base URL configured for this loader (\`${path}\`).`);
}
function createCloudflareUrl(path, config2) {
  let params = `format=auto`;
  if (config2.width) {
    params += `,width=${config2.width}`;
  }
  if (config2.isPlaceholder) {
    params += `,quality=${PLACEHOLDER_QUALITY}`;
  }
  return `${path}/cdn-cgi/image/${params}/${config2.src}`;
}
function isCloudinaryUrl(url) {
  return CLOUDINARY_LOADER_REGEX.test(url);
}
function createCloudinaryUrl(path, config2) {
  const quality = config2.isPlaceholder ? "q_auto:low" : "q_auto";
  let params = `f_auto,${quality}`;
  if (config2.width) {
    params += `,w_${config2.width}`;
  }
  if (config2.loaderParams?.["rounded"]) {
    params += `,r_max`;
  }
  return `${path}/image/upload/${params}/${config2.src}`;
}
function isImageKitUrl(url) {
  return IMAGE_KIT_LOADER_REGEX.test(url);
}
function createImagekitUrl(path, config2) {
  const { src, width } = config2;
  const params = [];
  if (width) {
    params.push(`w-${width}`);
  }
  if (config2.isPlaceholder) {
    params.push(`q-${PLACEHOLDER_QUALITY}`);
  }
  const urlSegments = params.length ? [path, `tr:${params.join(",")}`, src] : [path, src];
  const url = new URL(urlSegments.join("/"));
  return url.href;
}
function isImgixUrl(url) {
  return IMGIX_LOADER_REGEX.test(url);
}
function createImgixUrl(path, config2) {
  const url = new URL(`${path}/${config2.src}`);
  url.searchParams.set("auto", "format");
  if (config2.width) {
    url.searchParams.set("w", config2.width.toString());
  }
  if (config2.isPlaceholder) {
    url.searchParams.set("q", PLACEHOLDER_QUALITY);
  }
  return url.href;
}
function isNetlifyUrl(url) {
  return NETLIFY_LOADER_REGEX.test(url);
}
function imgDirectiveDetails(ngSrc, includeNgSrc = true) {
  const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \`ngSrc="${ngSrc}"\`) ` : "";
  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;
}
function assertDevMode(checkName) {
  if (!ngDevMode) {
    throw new RuntimeError(2958, `Unexpected invocation of the ${checkName} in the prod mode. Please make sure that the prod mode is enabled for production builds.`);
  }
}
function logMissingPriorityError(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.error(formatRuntimeError(2955, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element but was not marked "priority". This image should be marked "priority" in order to prioritize its loading. To fix this, add the "priority" attribute.`));
}
function logModifiedWarning(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.warn(formatRuntimeError(2964, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element and has had its "ngSrc" attribute modified. This can cause slower loading performance. It is recommended not to modify the "ngSrc" property on any image which could be the LCP element.`));
}
function deepForEach2(input2, fn2) {
  for (let value of input2) {
    Array.isArray(value) ? deepForEach2(value, fn2) : fn2(value);
  }
}
function processConfig(config2) {
  let sortedBreakpoints = {};
  if (config2.breakpoints) {
    sortedBreakpoints.breakpoints = config2.breakpoints.sort((a, b) => a - b);
  }
  return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config2, sortedBreakpoints);
}
function assertNoConflictingSrc(dir) {
  if (dir.src) {
    throw new RuntimeError(2950, `${imgDirectiveDetails(dir.ngSrc)} both \`src\` and \`ngSrc\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`src\` itself based on the value of \`ngSrc\`. To fix this, please remove the \`src\` attribute.`);
  }
}
function assertNoConflictingSrcset(dir) {
  if (dir.srcset) {
    throw new RuntimeError(2951, `${imgDirectiveDetails(dir.ngSrc)} both \`srcset\` and \`ngSrcset\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`srcset\` itself based on the value of \`ngSrcset\`. To fix this, please remove the \`srcset\` attribute.`);
  }
}
function assertNotBase64Image(dir) {
  let ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("data:")) {
    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {
      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + "...";
    }
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`ngSrc\` is a Base64-encoded string (${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a standard \`src\` attribute instead.`);
  }
}
function assertNoComplexSizes(dir) {
  let sizes = dir.sizes;
  if (sizes?.match(/((\)|,)\s|^)\d+px/)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`sizes\` was set to a string including pixel values. For automatic \`srcset\` generation, \`sizes\` must only include responsive values, such as \`sizes="50vw"\` or \`sizes="(min-width: 768px) 50vw, 100vw"\`. To fix this, modify the \`sizes\` attribute, or provide your own \`ngSrcset\` value directly.`);
  }
}
function assertValidPlaceholder(dir, imageLoader) {
  assertNoPlaceholderConfigWithoutPlaceholder(dir);
  assertNoRelativePlaceholderWithoutLoader(dir, imageLoader);
  assertNoOversizedDataUrl(dir);
}
function assertNoPlaceholderConfigWithoutPlaceholder(dir) {
  if (dir.placeholderConfig && !dir.placeholder) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`placeholderConfig\` options were provided for an image that does not use the \`placeholder\` attribute, and will have no effect.`);
  }
}
function assertNoRelativePlaceholderWithoutLoader(dir, imageLoader) {
  if (dir.placeholder === true && imageLoader === noopImageLoader) {
    throw new RuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to true but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for the primary image and its placeholder. To fix this, provide a loader or remove the \`placeholder\` attribute from the image.`);
  }
}
function assertNoOversizedDataUrl(dir) {
  if (dir.placeholder && typeof dir.placeholder === "string" && dir.placeholder.startsWith("data:")) {
    if (dir.placeholder.length > DATA_URL_ERROR_LIMIT) {
      throw new RuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_ERROR_LIMIT} characters. This is strongly discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. To fix this, generate a smaller data URL placeholder.`);
    }
    if (dir.placeholder.length > DATA_URL_WARN_LIMIT) {
      console.warn(formatRuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_WARN_LIMIT} characters. This is discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. For better loading performance, generate a smaller data URL placeholder.`));
    }
  }
}
function assertNotBlobUrl(dir) {
  const ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("blob:")) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrc\` was set to a blob URL (${ngSrc}). Blob URLs are not supported by the NgOptimizedImage directive. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a regular \`src\` attribute instead.`);
  }
}
function assertNonEmptyInput(dir, name, value) {
  const isString = typeof value === "string";
  const isEmptyString = isString && value.trim() === "";
  if (!isString || isEmptyString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${name}\` has an invalid value (\`${value}\`). To fix this, change the value to a non-empty string.`);
  }
}
function assertValidNgSrcset(dir, value) {
  if (value == null)
    return;
  assertNonEmptyInput(dir, "ngSrcset", value);
  const stringVal = value;
  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);
  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);
  if (isValidDensityDescriptor) {
    assertUnderDensityCap(dir, stringVal);
  }
  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;
  if (!isValidSrcset) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrcset\` has an invalid value (\`${value}\`). To fix this, supply \`ngSrcset\` using a comma-separated list of one or more width descriptors (e.g. "100w, 200w") or density descriptors (e.g. "1x, 2x").`);
  }
}
function assertUnderDensityCap(dir, value) {
  const underDensityCap = value.split(",").every((num) => num === "" || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);
  if (!underDensityCap) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` contains an unsupported image density:\`${value}\`. NgOptimizedImage generally recommends a max image density of ${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for most use cases. Images that will be pinch-zoomed are typically the primary use case for ${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);
  }
}
function postInitInputChangeError(dir, inputName) {
  let reason;
  if (inputName === "width" || inputName === "height") {
    reason = `Changing \`${inputName}\` may result in different attribute value applied to the underlying image element and cause layout shifts on a page.`;
  } else {
    reason = `Changing the \`${inputName}\` would have no effect on the underlying image element, because the resource loading has already occurred.`;
  }
  return new RuntimeError(2953, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` was updated after initialization. The NgOptimizedImage directive will not react to this input change. ${reason} To fix this, either switch \`${inputName}\` to a static value or wrap the image element in an @if that is gated on the necessary value.`);
}
function assertNoPostInitInputChange(dir, changes, inputs) {
  inputs.forEach((input2) => {
    const isUpdated = changes.hasOwnProperty(input2);
    if (isUpdated && !changes[input2].isFirstChange()) {
      if (input2 === "ngSrc") {
        dir = { ngSrc: changes[input2].previousValue };
      }
      throw postInitInputChangeError(dir, input2);
    }
  });
}
function assertGreaterThanZero(dir, inputValue, inputName) {
  const validNumber = typeof inputValue === "number" && inputValue > 0;
  const validString = typeof inputValue === "string" && /^\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;
  if (!validNumber && !validString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` has an invalid value. To fix this, provide \`${inputName}\` as a number greater than 0.`);
  }
}
function assertNoImageDistortion(dir, img, renderer) {
  const callback = () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const computedStyle = window.getComputedStyle(img);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const renderedAspectRatio = renderedWidth / renderedHeight;
    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;
    const intrinsicWidth = img.naturalWidth;
    const intrinsicHeight = img.naturalHeight;
    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;
    const suppliedWidth = dir.width;
    const suppliedHeight = dir.height;
    const suppliedAspectRatio = suppliedWidth / suppliedHeight;
    const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;
    const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;
    if (inaccurateDimensions) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match the aspect ratio indicated by the width and height attributes. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Supplied width and height attributes: ${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). 
To fix this, update the width and height attributes.`));
    } else if (stylingDistortion) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image does not match the image's intrinsic aspect ratio. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ${round(renderedAspectRatio)}). 
This issue can occur if "width" and "height" attributes are added to an image without updating the corresponding image styling. To fix this, adjust image styling. In most cases, adding "height: auto" or "width: auto" to the image styling will fix this issue.`));
    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {
      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;
      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;
      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE2;
      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE2;
      if (oversizedWidth || oversizedHeight) {
        console.warn(formatRuntimeError(2960, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly larger than necessary. 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. 
Recommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. 
Note: Recommended intrinsic image size is calculated assuming a maximum DPR of ${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image or consider using the "ngSrcset" and "sizes" attributes.`));
      }
    }
  };
  const removeLoadListenerFn = renderer.listen(img, "load", callback);
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
  callOnLoadIfImageIsLoaded(img, callback);
}
function assertNonEmptyWidthAndHeight(dir) {
  let missingAttributes = [];
  if (dir.width === void 0)
    missingAttributes.push("width");
  if (dir.height === void 0)
    missingAttributes.push("height");
  if (missingAttributes.length > 0) {
    throw new RuntimeError(2954, `${imgDirectiveDetails(dir.ngSrc)} these required attributes are missing: ${missingAttributes.map((attr) => `"${attr}"`).join(", ")}. Including "width" and "height" attributes will prevent image-related layout shifts. To fix this, include "width" and "height" attributes on the image tag or turn on "fill" mode with the \`fill\` attribute.`);
  }
}
function assertEmptyWidthAndHeight(dir) {
  if (dir.width || dir.height) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the attributes \`height\` and/or \`width\` are present along with the \`fill\` attribute. Because \`fill\` mode causes an image to fill its containing element, the size attributes have no effect and should be removed.`);
  }
}
function assertNonZeroRenderedHeight(dir, img, renderer) {
  const callback = () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const renderedHeight = img.clientHeight;
    if (dir.fill && renderedHeight === 0) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: "relative", "fixed", or "absolute". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.`));
    }
  };
  const removeLoadListenerFn = renderer.listen(img, "load", callback);
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
  callOnLoadIfImageIsLoaded(img, callback);
}
function assertValidLoadingInput(dir) {
  if (dir.loading && dir.priority) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute was used on an image that was marked "priority". Setting \`loading\` on priority images is not allowed because these images will always be eagerly loaded. To fix this, remove the \u201Cloading\u201D attribute from the priority image.`);
  }
  const validInputs = ["auto", "eager", "lazy"];
  if (typeof dir.loading === "string" && !validInputs.includes(dir.loading)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute has an invalid value (\`${dir.loading}\`). To fix this, provide a valid value ("lazy", "eager", or "auto").`);
  }
}
function assertValidDecodingInput(dir) {
  const validInputs = ["sync", "async", "auto"];
  if (typeof dir.decoding === "string" && !validInputs.includes(dir.decoding)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`decoding\` attribute has an invalid value (\`${dir.decoding}\`). To fix this, provide a valid value ("sync", "async", or "auto").`);
  }
}
function assertNotMissingBuiltInLoader(ngSrc, imageLoader) {
  if (imageLoader === noopImageLoader) {
    let builtInLoaderName = "";
    for (const loader of BUILT_IN_LOADERS) {
      if (loader.testUrl(ngSrc)) {
        builtInLoaderName = loader.name;
        break;
      }
    }
    if (builtInLoaderName) {
      console.warn(formatRuntimeError(2962, `NgOptimizedImage: It looks like your images may be hosted on the ${builtInLoaderName} CDN, but your app is not using Angular's built-in loader for that CDN. We recommend switching to use the built-in by calling \`provide${builtInLoaderName}Loader()\` in your \`providers\` and passing it your instance's base URL. If you don't want to use the built-in loader, define a custom loader function using IMAGE_LOADER to silence this warning.`));
    }
  }
}
function assertNoNgSrcsetWithoutLoader(dir, imageLoader) {
  if (dir.ngSrcset && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` attribute is present but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for all configured sizes. To fix this, provide a loader or remove the \`ngSrcset\` attribute from the image.`));
  }
}
function assertNoLoaderParamsWithoutLoader(dir, imageLoader) {
  if (dir.loaderParams && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`loaderParams\` attribute is present but no image loader is configured (i.e. the default one is being used), which means that the loaderParams data will not be consumed and will not affect the URL. To fix this, provide a custom loader or remove the \`loaderParams\` attribute from the image.`));
  }
}
function assetPriorityCountBelowThreshold(appRef) {
  return __async(this, null, function* () {
    if (IMGS_WITH_PRIORITY_ATTR_COUNT === 0) {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
      yield appRef.whenStable();
      if (IMGS_WITH_PRIORITY_ATTR_COUNT > PRIORITY_COUNT_THRESHOLD) {
        console.warn(formatRuntimeError(2966, `NgOptimizedImage: The "priority" attribute is set to true more than ${PRIORITY_COUNT_THRESHOLD} times (${IMGS_WITH_PRIORITY_ATTR_COUNT} times). Marking too many images as "high" priority can hurt your application's LCP (https://web.dev/lcp). "Priority" should only be set on the image expected to be the page's LCP element.`));
      }
    } else {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
    }
  });
}
function assertPlaceholderDimensions(dir, imgElement) {
  const computedStyle = window.getComputedStyle(imgElement);
  let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
  let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
  if (renderedWidth > PLACEHOLDER_DIMENSION_LIMIT || renderedHeight > PLACEHOLDER_DIMENSION_LIMIT) {
    console.warn(formatRuntimeError(2967, `${imgDirectiveDetails(dir.ngSrc)} it uses a placeholder image, but at least one of the dimensions attribute (height or width) exceeds the limit of ${PLACEHOLDER_DIMENSION_LIMIT}px. To fix this, use a smaller image as a placeholder.`));
  }
}
function callOnLoadIfImageIsLoaded(img, callback) {
  if (img.complete && img.naturalWidth) {
    callback();
  }
}
function round(input2) {
  return Number.isInteger(input2) ? input2 : input2.toFixed(2);
}
function unwrapSafeUrl(value) {
  if (typeof value === "string") {
    return value;
  }
  return unwrapSafeValue(value);
}
function booleanOrUrlAttribute(value) {
  if (typeof value === "string" && value !== "true" && value !== "false" && value !== "") {
    return value;
  }
  return booleanAttribute(value);
}
var PLATFORM_BROWSER_ID, VERSION3, PLACEHOLDER_QUALITY, noopImageLoader, IMAGE_LOADER, provideCloudflareLoader, cloudinaryLoaderInfo, CLOUDINARY_LOADER_REGEX, provideCloudinaryLoader, imageKitLoaderInfo, IMAGE_KIT_LOADER_REGEX, provideImageKitLoader, imgixLoaderInfo, IMGIX_LOADER_REGEX, provideImgixLoader, netlifyLoaderInfo, NETLIFY_LOADER_REGEX, LCPImageObserver, INTERNAL_PRECONNECT_CHECK_BLOCKLIST, PRECONNECT_CHECK_BLOCKLIST, PreconnectLinkChecker, DEFAULT_PRELOADED_IMAGES_LIMIT, PRELOADED_IMAGES, PreloadLinkCreator, BASE64_IMG_MAX_LENGTH_IN_ERROR, VALID_WIDTH_DESCRIPTOR_SRCSET, VALID_DENSITY_DESCRIPTOR_SRCSET, ABSOLUTE_SRCSET_DENSITY_CAP, RECOMMENDED_SRCSET_DENSITY_CAP, DENSITY_SRCSET_MULTIPLIERS, VIEWPORT_BREAKPOINT_CUTOFF, ASPECT_RATIO_TOLERANCE, OVERSIZED_IMAGE_TOLERANCE2, FIXED_SRCSET_WIDTH_LIMIT, FIXED_SRCSET_HEIGHT_LIMIT, PLACEHOLDER_DIMENSION_LIMIT, DATA_URL_WARN_LIMIT, DATA_URL_ERROR_LIMIT, BUILT_IN_LOADERS, PRIORITY_COUNT_THRESHOLD, IMGS_WITH_PRIORITY_ATTR_COUNT, NgOptimizedImage;
var init_common = __esm({
  "node_modules/@angular/common/fesm2022/common.mjs"() {
    "use strict";
    init_common_module();
    init_core();
    init_core();
    init_core();
    init_xhr();
    init_location();
    PLATFORM_BROWSER_ID = "browser";
    VERSION3 = new Version("20.1.4");
    PLACEHOLDER_QUALITY = "20";
    noopImageLoader = (config2) => config2.src;
    IMAGE_LOADER = new InjectionToken(ngDevMode ? "ImageLoader" : "", {
      providedIn: "root",
      factory: () => noopImageLoader
    });
    provideCloudflareLoader = createImageLoader(createCloudflareUrl, ngDevMode ? ["https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>"] : void 0);
    cloudinaryLoaderInfo = {
      name: "Cloudinary",
      testUrl: isCloudinaryUrl
    };
    CLOUDINARY_LOADER_REGEX = /https?\:\/\/[^\/]+\.cloudinary\.com\/.+/;
    provideCloudinaryLoader = createImageLoader(createCloudinaryUrl, ngDevMode ? [
      "https://res.cloudinary.com/mysite",
      "https://mysite.cloudinary.com",
      "https://subdomain.mysite.com"
    ] : void 0);
    imageKitLoaderInfo = {
      name: "ImageKit",
      testUrl: isImageKitUrl
    };
    IMAGE_KIT_LOADER_REGEX = /https?\:\/\/[^\/]+\.imagekit\.io\/.+/;
    provideImageKitLoader = createImageLoader(createImagekitUrl, ngDevMode ? ["https://ik.imagekit.io/mysite", "https://subdomain.mysite.com"] : void 0);
    imgixLoaderInfo = {
      name: "Imgix",
      testUrl: isImgixUrl
    };
    IMGIX_LOADER_REGEX = /https?\:\/\/[^\/]+\.imgix\.net\/.+/;
    provideImgixLoader = createImageLoader(createImgixUrl, ngDevMode ? ["https://somepath.imgix.net/"] : void 0);
    netlifyLoaderInfo = {
      name: "Netlify",
      testUrl: isNetlifyUrl
    };
    NETLIFY_LOADER_REGEX = /https?\:\/\/[^\/]+\.netlify\.app\/.+/;
    LCPImageObserver = class _LCPImageObserver {
      // Map of full image URLs -> original `ngSrc` values.
      images = /* @__PURE__ */ new Map();
      window = inject2(DOCUMENT).defaultView;
      observer = null;
      constructor() {
        assertDevMode("LCP checker");
        if (typeof PerformanceObserver !== "undefined") {
          this.observer = this.initPerformanceObserver();
        }
      }
      /**
       * Inits PerformanceObserver and subscribes to LCP events.
       * Based on https://web.dev/lcp/#measure-lcp-in-javascript
       */
      initPerformanceObserver() {
        const observer = new PerformanceObserver((entryList) => {
          const entries = entryList.getEntries();
          if (entries.length === 0)
            return;
          const lcpElement = entries[entries.length - 1];
          const imgSrc = lcpElement.element?.src ?? "";
          if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
            return;
          const img = this.images.get(imgSrc);
          if (!img)
            return;
          if (!img.priority && !img.alreadyWarnedPriority) {
            img.alreadyWarnedPriority = true;
            logMissingPriorityError(imgSrc);
          }
          if (img.modified && !img.alreadyWarnedModified) {
            img.alreadyWarnedModified = true;
            logModifiedWarning(imgSrc);
          }
        });
        observer.observe({ type: "largest-contentful-paint", buffered: true });
        return observer;
      }
      registerImage(rewrittenSrc, originalNgSrc, isPriority) {
        if (!this.observer)
          return;
        const newObservedImageState = {
          priority: isPriority,
          modified: false,
          alreadyWarnedModified: false,
          alreadyWarnedPriority: false
        };
        this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);
      }
      unregisterImage(rewrittenSrc) {
        if (!this.observer)
          return;
        this.images.delete(getUrl(rewrittenSrc, this.window).href);
      }
      updateImage(originalSrc, newSrc) {
        if (!this.observer)
          return;
        const originalUrl = getUrl(originalSrc, this.window).href;
        const img = this.images.get(originalUrl);
        if (img) {
          img.modified = true;
          this.images.set(getUrl(newSrc, this.window).href, img);
          this.images.delete(originalUrl);
        }
      }
      ngOnDestroy() {
        if (!this.observer)
          return;
        this.observer.disconnect();
        this.images.clear();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _LCPImageObserver, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _LCPImageObserver, providedIn: "root" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: LCPImageObserver, decorators: [{
      type: Injectable,
      args: [{ providedIn: "root" }]
    }], ctorParameters: () => [] });
    INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /* @__PURE__ */ new Set(["localhost", "127.0.0.1", "0.0.0.0"]);
    PRECONNECT_CHECK_BLOCKLIST = new InjectionToken(ngDevMode ? "PRECONNECT_CHECK_BLOCKLIST" : "");
    PreconnectLinkChecker = class _PreconnectLinkChecker {
      document = inject2(DOCUMENT);
      /**
       * Set of <link rel="preconnect"> tags found on this page.
       * The `null` value indicates that there was no DOM query operation performed.
       */
      preconnectLinks = null;
      /*
       * Keep track of all already seen origin URLs to avoid repeating the same check.
       */
      alreadySeen = /* @__PURE__ */ new Set();
      window = this.document.defaultView;
      blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);
      constructor() {
        assertDevMode("preconnect link checker");
        const blocklist = inject2(PRECONNECT_CHECK_BLOCKLIST, { optional: true });
        if (blocklist) {
          this.populateBlocklist(blocklist);
        }
      }
      populateBlocklist(origins) {
        if (Array.isArray(origins)) {
          deepForEach2(origins, (origin) => {
            this.blocklist.add(extractHostname(origin));
          });
        } else {
          this.blocklist.add(extractHostname(origins));
        }
      }
      /**
       * Checks that a preconnect resource hint exists in the head for the
       * given src.
       *
       * @param rewrittenSrc src formatted with loader
       * @param originalNgSrc ngSrc value
       */
      assertPreconnect(rewrittenSrc, originalNgSrc) {
        if (false)
          return;
        const imgUrl = getUrl(rewrittenSrc, this.window);
        if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin))
          return;
        this.alreadySeen.add(imgUrl.origin);
        this.preconnectLinks ??= this.queryPreconnectLinks();
        if (!this.preconnectLinks.has(imgUrl.origin)) {
          console.warn(formatRuntimeError(2956, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this image. Preconnecting to the origin(s) that serve priority images ensures that these images are delivered as soon as possible. To fix this, please add the following element into the <head> of the document:
  <link rel="preconnect" href="${imgUrl.origin}">`));
        }
      }
      queryPreconnectLinks() {
        const preconnectUrls = /* @__PURE__ */ new Set();
        const links = this.document.querySelectorAll("link[rel=preconnect]");
        for (const link of links) {
          const url = getUrl(link.href, this.window);
          preconnectUrls.add(url.origin);
        }
        return preconnectUrls;
      }
      ngOnDestroy() {
        this.preconnectLinks?.clear();
        this.alreadySeen.clear();
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PreconnectLinkChecker, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PreconnectLinkChecker, providedIn: "root" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PreconnectLinkChecker, decorators: [{
      type: Injectable,
      args: [{ providedIn: "root" }]
    }], ctorParameters: () => [] });
    DEFAULT_PRELOADED_IMAGES_LIMIT = 5;
    PRELOADED_IMAGES = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "NG_OPTIMIZED_PRELOADED_IMAGES" : "", {
      providedIn: "root",
      factory: () => /* @__PURE__ */ new Set()
    });
    PreloadLinkCreator = class _PreloadLinkCreator {
      preloadedImages = inject2(PRELOADED_IMAGES);
      document = inject2(DOCUMENT);
      errorShown = false;
      /**
       * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the
       * server while using Angular Universal and SSR to kick off image loads for high priority images.
       *
       * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)
       * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`
       * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from
       * the CDN.
       *
       * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}
       *
       * @param renderer The `Renderer2` passed in from the directive
       * @param src The original src of the image that is set on the `ngSrc` input.
       * @param srcset The parsed and formatted srcset created from the `ngSrcset` input
       * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag
       */
      createPreloadLinkTag(renderer, src, srcset, sizes) {
        if (ngDevMode && !this.errorShown && this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {
          this.errorShown = true;
          console.warn(formatRuntimeError(2961, `The \`NgOptimizedImage\` directive has detected that more than ${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. This might negatively affect an overall performance of the page. To fix this, remove the "priority" attribute from images with less priority.`));
        }
        if (this.preloadedImages.has(src)) {
          return;
        }
        this.preloadedImages.add(src);
        const preload = renderer.createElement("link");
        renderer.setAttribute(preload, "as", "image");
        renderer.setAttribute(preload, "href", src);
        renderer.setAttribute(preload, "rel", "preload");
        renderer.setAttribute(preload, "fetchpriority", "high");
        if (sizes) {
          renderer.setAttribute(preload, "imageSizes", sizes);
        }
        if (srcset) {
          renderer.setAttribute(preload, "imageSrcset", srcset);
        }
        renderer.appendChild(this.document.head, preload);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PreloadLinkCreator, deps: [], target: FactoryTarget.Injectable });
      static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _PreloadLinkCreator, providedIn: "root" });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: PreloadLinkCreator, decorators: [{
      type: Injectable,
      args: [{ providedIn: "root" }]
    }] });
    BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;
    VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\s*\d+w\s*(,|$)){1,})$/;
    VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\s*\d+(\.\d+)?x\s*(,|$)){1,})$/;
    ABSOLUTE_SRCSET_DENSITY_CAP = 3;
    RECOMMENDED_SRCSET_DENSITY_CAP = 2;
    DENSITY_SRCSET_MULTIPLIERS = [1, 2];
    VIEWPORT_BREAKPOINT_CUTOFF = 640;
    ASPECT_RATIO_TOLERANCE = 0.1;
    OVERSIZED_IMAGE_TOLERANCE2 = 1e3;
    FIXED_SRCSET_WIDTH_LIMIT = 1920;
    FIXED_SRCSET_HEIGHT_LIMIT = 1080;
    PLACEHOLDER_DIMENSION_LIMIT = 1e3;
    DATA_URL_WARN_LIMIT = 4e3;
    DATA_URL_ERROR_LIMIT = 1e4;
    BUILT_IN_LOADERS = [
      imgixLoaderInfo,
      imageKitLoaderInfo,
      cloudinaryLoaderInfo,
      netlifyLoaderInfo
    ];
    PRIORITY_COUNT_THRESHOLD = 10;
    IMGS_WITH_PRIORITY_ATTR_COUNT = 0;
    NgOptimizedImage = class _NgOptimizedImage {
      imageLoader = inject2(IMAGE_LOADER);
      config = processConfig(inject2(IMAGE_CONFIG));
      renderer = inject2(Renderer2);
      imgElement = inject2(ElementRef).nativeElement;
      injector = inject2(Injector);
      // An LCP image observer should be injected only in development mode.
      // Do not assign it to `null` to avoid having a redundant property in the production bundle.
      lcpObserver;
      /**
       * Calculate the rewritten `src` once and store it.
       * This is needed to avoid repetitive calculations and make sure the directive cleanup in the
       * `ngOnDestroy` does not rely on the `IMAGE_LOADER` logic (which in turn can rely on some other
       * instance that might be already destroyed).
       */
      _renderedSrc = null;
      /**
       * Name of the source image.
       * Image name will be processed by the image loader and the final URL will be applied as the `src`
       * property of the image.
       */
      ngSrc;
      /**
       * A comma separated list of width or density descriptors.
       * The image name will be taken from `ngSrc` and combined with the list of width or density
       * descriptors to generate the final `srcset` property of the image.
       *
       * Example:
       * ```html
       * <img ngSrc="hello.jpg" ngSrcset="100w, 200w" />  =>
       * <img src="path/hello.jpg" srcset="path/hello.jpg?w=100 100w, path/hello.jpg?w=200 200w" />
       * ```
       */
      ngSrcset;
      /**
       * The base `sizes` attribute passed through to the `<img>` element.
       * Providing sizes causes the image to create an automatic responsive srcset.
       */
      sizes;
      /**
       * For responsive images: the intrinsic width of the image in pixels.
       * For fixed size images: the desired rendered width of the image in pixels.
       */
      width;
      /**
       * For responsive images: the intrinsic height of the image in pixels.
       * For fixed size images: the desired rendered height of the image in pixels.
       */
      height;
      /**
       * The desired decoding behavior for the image. Defaults to `auto`
       * if not explicitly set, matching native browser behavior.
       *
       * Use `async` to decode the image off the main thread (non-blocking),
       * `sync` for immediate decoding (blocking), or `auto` to let the
       * browser decide the optimal strategy.
       *
       * [Spec](https://html.spec.whatwg.org/multipage/images.html#image-decoding-hint)
       */
      decoding;
      /**
       * The desired loading behavior (lazy, eager, or auto). Defaults to `lazy`,
       * which is recommended for most images.
       *
       * Warning: Setting images as loading="eager" or loading="auto" marks them
       * as non-priority images and can hurt loading performance. For images which
       * may be the LCP element, use the `priority` attribute instead of `loading`.
       */
      loading;
      /**
       * Indicates whether this image should have a high priority.
       */
      priority = false;
      /**
       * Data to pass through to custom loaders.
       */
      loaderParams;
      /**
       * Disables automatic srcset generation for this image.
       */
      disableOptimizedSrcset = false;
      /**
       * Sets the image to "fill mode", which eliminates the height/width requirement and adds
       * styles such that the image fills its containing element.
       */
      fill = false;
      /**
       * A URL or data URL for an image to be used as a placeholder while this image loads.
       */
      placeholder;
      /**
       * Configuration object for placeholder settings. Options:
       *   * blur: Setting this to false disables the automatic CSS blur.
       */
      placeholderConfig;
      /**
       * Value of the `src` attribute if set on the host `<img>` element.
       * This input is exclusively read to assert that `src` is not set in conflict
       * with `ngSrc` and that images don't start to load until a lazy loading strategy is set.
       * @internal
       */
      src;
      /**
       * Value of the `srcset` attribute if set on the host `<img>` element.
       * This input is exclusively read to assert that `srcset` is not set in conflict
       * with `ngSrcset` and that images don't start to load until a lazy loading strategy is set.
       * @internal
       */
      srcset;
      constructor() {
        if (ngDevMode) {
          this.lcpObserver = this.injector.get(LCPImageObserver);
          const destroyRef = inject2(DestroyRef);
          destroyRef.onDestroy(() => {
            if (!this.priority && this._renderedSrc !== null) {
              this.lcpObserver.unregisterImage(this._renderedSrc);
            }
          });
        }
      }
      /** @docs-private */
      ngOnInit() {
        performanceMarkFeature("NgOptimizedImage");
        if (ngDevMode) {
          const ngZone = this.injector.get(NgZone);
          assertNonEmptyInput(this, "ngSrc", this.ngSrc);
          assertValidNgSrcset(this, this.ngSrcset);
          assertNoConflictingSrc(this);
          if (this.ngSrcset) {
            assertNoConflictingSrcset(this);
          }
          assertNotBase64Image(this);
          assertNotBlobUrl(this);
          if (this.fill) {
            assertEmptyWidthAndHeight(this);
            ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));
          } else {
            assertNonEmptyWidthAndHeight(this);
            if (this.height !== void 0) {
              assertGreaterThanZero(this, this.height, "height");
            }
            if (this.width !== void 0) {
              assertGreaterThanZero(this, this.width, "width");
            }
            ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));
          }
          assertValidLoadingInput(this);
          assertValidDecodingInput(this);
          if (!this.ngSrcset) {
            assertNoComplexSizes(this);
          }
          assertValidPlaceholder(this, this.imageLoader);
          assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);
          assertNoNgSrcsetWithoutLoader(this, this.imageLoader);
          assertNoLoaderParamsWithoutLoader(this, this.imageLoader);
          ngZone.runOutsideAngular(() => {
            this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);
          });
          if (this.priority) {
            const checker = this.injector.get(PreconnectLinkChecker);
            checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);
            if (true) {
              const applicationRef = this.injector.get(ApplicationRef);
              assetPriorityCountBelowThreshold(applicationRef);
            }
          }
        }
        if (this.placeholder) {
          this.removePlaceholderOnLoad(this.imgElement);
        }
        this.setHostAttributes();
      }
      setHostAttributes() {
        if (this.fill) {
          this.sizes ||= "100vw";
        } else {
          this.setHostAttribute("width", this.width.toString());
          this.setHostAttribute("height", this.height.toString());
        }
        this.setHostAttribute("loading", this.getLoadingBehavior());
        this.setHostAttribute("fetchpriority", this.getFetchPriority());
        this.setHostAttribute("decoding", this.getDecoding());
        this.setHostAttribute("ng-img", "true");
        const rewrittenSrcset = this.updateSrcAndSrcset();
        if (this.sizes) {
          if (this.getLoadingBehavior() === "lazy") {
            this.setHostAttribute("sizes", "auto, " + this.sizes);
          } else {
            this.setHostAttribute("sizes", this.sizes);
          }
        } else {
          if (this.ngSrcset && VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset) && this.getLoadingBehavior() === "lazy") {
            this.setHostAttribute("sizes", "auto, 100vw");
          }
        }
        if (false) {
          const preloadLinkCreator = this.injector.get(PreloadLinkCreator);
          preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);
        }
      }
      /** @docs-private */
      ngOnChanges(changes) {
        if (ngDevMode) {
          assertNoPostInitInputChange(this, changes, [
            "ngSrcset",
            "width",
            "height",
            "priority",
            "fill",
            "loading",
            "sizes",
            "loaderParams",
            "disableOptimizedSrcset"
          ]);
        }
        if (changes["ngSrc"] && !changes["ngSrc"].isFirstChange()) {
          const oldSrc = this._renderedSrc;
          this.updateSrcAndSrcset(true);
          if (ngDevMode) {
            const newSrc = this._renderedSrc;
            if (oldSrc && newSrc && oldSrc !== newSrc) {
              const ngZone = this.injector.get(NgZone);
              ngZone.runOutsideAngular(() => {
                this.lcpObserver.updateImage(oldSrc, newSrc);
              });
            }
          }
        }
        if (ngDevMode && changes["placeholder"]?.currentValue && true && true) {
          assertPlaceholderDimensions(this, this.imgElement);
        }
      }
      callImageLoader(configWithoutCustomParams) {
        let augmentedConfig = configWithoutCustomParams;
        if (this.loaderParams) {
          augmentedConfig.loaderParams = this.loaderParams;
        }
        return this.imageLoader(augmentedConfig);
      }
      getLoadingBehavior() {
        if (!this.priority && this.loading !== void 0) {
          return this.loading;
        }
        return this.priority ? "eager" : "lazy";
      }
      getFetchPriority() {
        return this.priority ? "high" : "auto";
      }
      getDecoding() {
        if (this.priority) {
          return "sync";
        }
        return this.decoding ?? "auto";
      }
      getRewrittenSrc() {
        if (!this._renderedSrc) {
          const imgConfig = { src: this.ngSrc };
          this._renderedSrc = this.callImageLoader(imgConfig);
        }
        return this._renderedSrc;
      }
      getRewrittenSrcset() {
        const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);
        const finalSrcs = this.ngSrcset.split(",").filter((src) => src !== "").map((srcStr) => {
          srcStr = srcStr.trim();
          const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;
          return `${this.callImageLoader({ src: this.ngSrc, width })} ${srcStr}`;
        });
        return finalSrcs.join(", ");
      }
      getAutomaticSrcset() {
        if (this.sizes) {
          return this.getResponsiveSrcset();
        } else {
          return this.getFixedSrcset();
        }
      }
      getResponsiveSrcset() {
        const { breakpoints } = this.config;
        let filteredBreakpoints = breakpoints;
        if (this.sizes?.trim() === "100vw") {
          filteredBreakpoints = breakpoints.filter((bp) => bp >= VIEWPORT_BREAKPOINT_CUTOFF);
        }
        const finalSrcs = filteredBreakpoints.map((bp) => `${this.callImageLoader({ src: this.ngSrc, width: bp })} ${bp}w`);
        return finalSrcs.join(", ");
      }
      updateSrcAndSrcset(forceSrcRecalc = false) {
        if (forceSrcRecalc) {
          this._renderedSrc = null;
        }
        const rewrittenSrc = this.getRewrittenSrc();
        this.setHostAttribute("src", rewrittenSrc);
        let rewrittenSrcset = void 0;
        if (this.ngSrcset) {
          rewrittenSrcset = this.getRewrittenSrcset();
        } else if (this.shouldGenerateAutomaticSrcset()) {
          rewrittenSrcset = this.getAutomaticSrcset();
        }
        if (rewrittenSrcset) {
          this.setHostAttribute("srcset", rewrittenSrcset);
        }
        return rewrittenSrcset;
      }
      getFixedSrcset() {
        const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map((multiplier) => `${this.callImageLoader({
          src: this.ngSrc,
          width: this.width * multiplier
        })} ${multiplier}x`);
        return finalSrcs.join(", ");
      }
      shouldGenerateAutomaticSrcset() {
        let oversizedImage = false;
        if (!this.sizes) {
          oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;
        }
        return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;
      }
      /**
       * Returns an image url formatted for use with the CSS background-image property. Expects one of:
       * * A base64 encoded image, which is wrapped and passed through.
       * * A boolean. If true, calls the image loader to generate a small placeholder url.
       */
      generatePlaceholder(placeholderInput) {
        const { placeholderResolution } = this.config;
        if (placeholderInput === true) {
          return `url(${this.callImageLoader({
            src: this.ngSrc,
            width: placeholderResolution,
            isPlaceholder: true
          })})`;
        } else if (typeof placeholderInput === "string") {
          return `url(${placeholderInput})`;
        }
        return null;
      }
      /**
       * Determines if blur should be applied, based on an optional boolean
       * property `blur` within the optional configuration object `placeholderConfig`.
       */
      shouldBlurPlaceholder(placeholderConfig) {
        if (!placeholderConfig || !placeholderConfig.hasOwnProperty("blur")) {
          return true;
        }
        return Boolean(placeholderConfig.blur);
      }
      removePlaceholderOnLoad(img) {
        const callback = () => {
          const changeDetectorRef = this.injector.get(ChangeDetectorRef);
          removeLoadListenerFn();
          removeErrorListenerFn();
          this.placeholder = false;
          changeDetectorRef.markForCheck();
        };
        const removeLoadListenerFn = this.renderer.listen(img, "load", callback);
        const removeErrorListenerFn = this.renderer.listen(img, "error", callback);
        callOnLoadIfImageIsLoaded(img, callback);
      }
      setHostAttribute(name, value) {
        this.renderer.setAttribute(this.imgElement, name, value);
      }
      static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: _NgOptimizedImage, deps: [], target: FactoryTarget.Directive });
      static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "16.1.0", version: "20.1.4", type: _NgOptimizedImage, isStandalone: true, selector: "img[ngSrc]", inputs: { ngSrc: ["ngSrc", "ngSrc", unwrapSafeUrl], ngSrcset: "ngSrcset", sizes: "sizes", width: ["width", "width", numberAttribute], height: ["height", "height", numberAttribute], decoding: "decoding", loading: "loading", priority: ["priority", "priority", booleanAttribute], loaderParams: "loaderParams", disableOptimizedSrcset: ["disableOptimizedSrcset", "disableOptimizedSrcset", booleanAttribute], fill: ["fill", "fill", booleanAttribute], placeholder: ["placeholder", "placeholder", booleanOrUrlAttribute], placeholderConfig: "placeholderConfig", src: "src", srcset: "srcset" }, host: { properties: { "style.position": 'fill ? "absolute" : null', "style.width": 'fill ? "100%" : null', "style.height": 'fill ? "100%" : null', "style.inset": 'fill ? "0" : null', "style.background-size": 'placeholder ? "cover" : null', "style.background-position": 'placeholder ? "50% 50%" : null', "style.background-repeat": 'placeholder ? "no-repeat" : null', "style.background-image": "placeholder ? generatePlaceholder(placeholder) : null", "style.filter": 'placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(15px)" : null' } }, usesOnChanges: true, ngImport: core_exports });
    };
    \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: core_exports, type: NgOptimizedImage, decorators: [{
      type: Directive,
      args: [{
        selector: "img[ngSrc]",
        host: {
          "[style.position]": 'fill ? "absolute" : null',
          "[style.width]": 'fill ? "100%" : null',
          "[style.height]": 'fill ? "100%" : null',
          "[style.inset]": 'fill ? "0" : null',
          "[style.background-size]": 'placeholder ? "cover" : null',
          "[style.background-position]": 'placeholder ? "50% 50%" : null',
          "[style.background-repeat]": 'placeholder ? "no-repeat" : null',
          "[style.background-image]": "placeholder ? generatePlaceholder(placeholder) : null",
          "[style.filter]": 'placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(15px)" : null'
        }
      }]
    }], ctorParameters: () => [], propDecorators: { ngSrc: [{
      type: Input,
      args: [{ required: true, transform: unwrapSafeUrl }]
    }], ngSrcset: [{
      type: Input
    }], sizes: [{
      type: Input
    }], width: [{
      type: Input,
      args: [{ transform: numberAttribute }]
    }], height: [{
      type: Input,
      args: [{ transform: numberAttribute }]
    }], decoding: [{
      type: Input
    }], loading: [{
      type: Input
    }], priority: [{
      type: Input,
      args: [{ transform: booleanAttribute }]
    }], loaderParams: [{
      type: Input
    }], disableOptimizedSrcset: [{
      type: Input,
      args: [{ transform: booleanAttribute }]
    }], fill: [{
      type: Input,
      args: [{ transform: booleanAttribute }]
    }], placeholder: [{
      type: Input,
      args: [{ transform: booleanOrUrlAttribute }]
    }], placeholderConfig: [{
      type: Input
    }], src: [{
      type: Input
    }], srcset: [{
      type: Input
    }] } });
  }
});

export {
  Subscription,
  pipe,
  Observable,
  refCount,
  ConnectableObservable,
  Subject,
  BehaviorSubject,
  asapScheduler,
  animationFrameScheduler,
  EMPTY,
  __decorate,
  init_tslib_es6,
  from,
  of,
  throwError,
  isObservable,
  EmptyError,
  map,
  combineLatest,
  mergeMap,
  concat,
  defer,
  forkJoin,
  merge,
  filter,
  auditTime,
  catchError,
  concatMap,
  debounceTime,
  defaultIfEmpty,
  take,
  distinctUntilChanged,
  finalize,
  first,
  takeLast,
  last2 as last,
  pairwise,
  scan,
  share,
  shareReplay,
  skip,
  startWith,
  switchMap,
  takeUntil,
  takeWhile,
  tap,
  init_esm,
  XSS_SECURITY_URL,
  RuntimeError,
  formatRuntimeError,
  _global,
  forwardRef,
  isInjectable,
  InjectionToken,
  inject2 as inject,
  isStandalone,
  makeEnvironmentProviders,
  INJECTOR_SCOPE,
  EnvironmentInjector,
  runInInjectionContext,
  assertInInjectionContext,
  Injector,
  DOCUMENT,
  DestroyRef,
  ErrorHandler,
  INTERNAL_APPLICATION_ERROR_HANDLER,
  isSignal,
  signal,
  ChangeDetectionScheduler,
  PendingTasksInternal,
  PendingTasks,
  init_operators,
  Inject,
  Optional,
  Self,
  SkipSelf,
  Host,
  Injectable,
  ElementRef,
  ChangeDetectionStrategy,
  setDocument,
  APP_ID,
  PLATFORM_INITIALIZER,
  PLATFORM_ID,
  ANIMATION_MODULE_TYPE,
  CSP_NONCE,
  ViewEncapsulation,
  unwrapSafeValue,
  allowSanitizationBypassAndThrow,
  bypassSanitizationTrustHtml,
  bypassSanitizationTrustStyle,
  bypassSanitizationTrustScript,
  bypassSanitizationTrustUrl,
  bypassSanitizationTrustResourceUrl,
  _sanitizeUrl,
  _sanitizeHtml,
  SecurityContext,
  RendererStyleFlags2,
  TemplateRef,
  RendererFactory2,
  Renderer2,
  isNgModule,
  ViewContainerRef,
  NgModuleRef$1,
  NgModuleFactory$1,
  createEnvironmentInjector,
  TracingService,
  EventEmitter,
  NgZone,
  afterNextRender,
  Console,
  TESTABILITY,
  TESTABILITY_GETTER,
  Testability,
  TestabilityRegistry,
  isPromise2 as isPromise,
  isSubscribable,
  ApplicationRef,
  Directive,
  Component,
  Input,
  Output,
  NgModule,
  Compiler,
  internalProvideZoneChangeDetection,
  ChangeDetectionSchedulerImpl,
  untracked2 as untracked,
  computed,
  effect,
  linkedSignal,
  ResourceImpl,
  encapsulateResourceError,
  FactoryTarget,
  HostAttributeToken,
  input,
  viewChild,
  contentChild,
  ContentChildren,
  ContentChild,
  ViewChild,
  Version,
  createPlatformFactory,
  ChangeDetectorRef,
  IterableDiffers,
  platformCore,
  ApplicationModule,
  booleanAttribute,
  numberAttribute,
  ɵɵngDeclareDirective,
  ɵɵngDeclareClassMetadata,
  ɵɵngDeclareComponent,
  ɵɵngDeclareFactory,
  ɵɵngDeclareInjectable,
  ɵɵngDeclareInjector,
  ɵɵngDeclareNgModule,
  afterRenderEffect,
  createComponent,
  reflectComponentType,
  core_exports,
  init_core,
  TestComponentRenderer,
  getTestBed,
  TestBed,
  FakeNavigation,
  init_testing,
  getDOM,
  setRootDomAdapter,
  DomAdapter,
  PlatformLocation,
  normalizeQueryParams,
  LocationStrategy,
  Location,
  NgTemplateOutlet,
  CommonModule,
  parseCookieValue,
  XhrFactory,
  init_xhr,
  PlatformNavigation,
  init_platform_navigation,
  PLATFORM_BROWSER_ID,
  isPlatformBrowser,
  init_common
};
/*! Bundled license information:

@angular/core/fesm2022/not_found.mjs:
@angular/core/fesm2022/signal.mjs:
@angular/core/fesm2022/untracked.mjs:
@angular/core/fesm2022/weak_ref.mjs:
@angular/core/fesm2022/primitives/signals.mjs:
@angular/core/fesm2022/primitives/di.mjs:
@angular/core/fesm2022/root_effect_scheduler.mjs:
@angular/core/fesm2022/attribute.mjs:
@angular/core/fesm2022/resource.mjs:
@angular/core/fesm2022/primitives/event-dispatch.mjs:
@angular/core/fesm2022/testing.mjs:
@angular/common/fesm2022/location.mjs:
@angular/common/fesm2022/common_module.mjs:
@angular/common/fesm2022/xhr.mjs:
@angular/common/fesm2022/platform_navigation.mjs:
@angular/common/fesm2022/common.mjs:
  (**
   * @license Angular v20.1.4
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/debug_node.mjs:
@angular/core/fesm2022/core.mjs:
  (**
   * @license Angular v20.1.4
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/compiler/fesm2022/compiler.mjs:
  (**
   * @license Angular v20.1.4
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)
  (**
   *
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)
*/
//# sourceMappingURL=chunk-XNL2DVBY.js.map
